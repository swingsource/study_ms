{
  "name": "AngularJS 教程",
  "author": "admin",
  "type": "前端进阶",
  "introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
  "data": [{
    "teach_name": "AngularJS 教程",
    "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
    "sort_index": 1,
    "parent_sort_index": 1,
    "chapter_level_one_id": "d7f7f095831345c95b555b364fabc958",
    "chapter_level_one_parent_id": "0",
    "chapter_level_one_name": "AngularJS 教程",
    "chapter_level_one_url": "",
    "chapter_level_two_id": "133a89b007e810cc2211678fe630adfc",
    "chapter_level_two_parent_id": "d7f7f095831345c95b555b364fabc958",
    "chapter_level_two_name": "AngularJS 教程",
    "chapter_level_two_url": "/angularjs/angularjs-tutorial.html",
    "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>AngularJS <span class=\"color_h1\">教程</span> </h2> <br><div class=\"tutintro\"> <img src=\"https://atts.w3cschool.cn/attachments/day_160926/201609261718308715.png\" alt=\"\" height=\"166\" width=\"173\"><br><p>AngularJS 是一款优秀的前端 JS 框架。<br></p><p>AngularJS 通过新的属性和表达式扩展了 HTML。</p> <p>AngularJS 可以构建一个单一页面应用程序（SPAs：Single Page Applications）。</p> <p>AngularJS 学习起来非常简单。</p> <p><strong><a href=\"angularjs-intro.html\">现在开始学习 AngularJS！</a></strong></p><p><br></p> </div> <hr> <h2>每个章节都有相应的实例</h2> <p>在每个章节中，您可以在线编辑实例，然后点击按钮查看结果。</p> <div class=\"example\"> <h2 class=\"example\">AngularJS 实例</h2> <div class=\"example_code notranslate htmlHigh\"> &lt;!DOCTYPE html&gt;<br> &lt;html&gt;<br><br> &lt;body&gt;<br><br> &lt;div ng-app=\"\"&gt;<br>   &lt;p&gt;在输入框中尝试输入：&lt;/p&gt;<br>   &lt;p&gt;姓名：&lt;input type=\"text\" ng-model=\"name\"&gt;&lt;/p&gt;<br>   &lt;p ng-bind=\"name\"&gt;&lt;/p&gt;<br> &lt;/div&gt;<br><br> &lt;script src=\"//www.w3cschool.cn/try/angularjs/1.2.5/angular.min.js\"&gt;&lt;/script&gt;<br><br> &lt;/body&gt;<br> &lt;/html&gt; </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_intro\" target=\"_blank\">尝试一下 »</a> </div> <br><hr> <h2>阅读本教程前，您需要了解的知识：</h2> <p>在开始学习 AngularJS 之前，您需要具备以下基础知识：</p> <ul> <li><a href=\"https://www.w3cschool.cn/html/\" target=\"_blank\">HTML</a></li> <li><a href=\"https://www.w3cschool.cn/css/\" target=\"_blank\">CSS</a></li> <li><a href=\"https://www.w3cschool.cn/javascript/\" target=\"_blank\">JavaScript</a></li> </ul> <hr> <h2>AngularJS 历史</h2> <p>AngularJS 是比较新的技术，版本 1.0 是在 2012 年发布的。</p> <p>AngularJS 是由 Google 的员工 Miško Hevery 从 2009 年开始着手开发。</p> <p>这是一个非常好的构想，该项目目前已由 Google 正式支持，有一个全职的开发团队继续开发和维护这个库。</p> <hr> <h2>AngularJS 实例</h2> <p>本教程包含了大量的 AngularJS 实例！</p> <p><a href=\"angularjs-examples.html\">AngularJS 实例</a></p> <hr> <h2>AngularJS 参考手册</h2> <p>参考手册包含了本教程中使用到的所有指令和过滤器。</p> <p><a href=\"angularjs-reference.html\">AngularJS 参考手册</a></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
  },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 19,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "AngularJS 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "3c030b97d262c78dc416df2b22d62f19",
      "chapter_level_two_parent_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_two_name": "AngularJS Bootstrap",
      "chapter_level_two_url": "/angularjs/angularjs-bootstrap.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>AngularJS <span class=\"color_h1\">Bootstrap</span> </h2><p><span class=\"color_h1\">本节介绍了如何在你的 </span>AngularJS 中使用 Bootstrap。</p><p>Bootstrap 中包含了大量的 Web 组件，根据这些组件，可以快速的搭建一个漂亮、功能完备的网站。<br></p> <hr> <p class=\"intro\">AngularJS 的首选样式表是 Twitter Bootstrap， Twitter Bootstrap 是目前最受欢迎的前端框架。</p> <p class=\"intro\"><a href=\"/bootstrap/bootstrap-tutorial.html\" target=\"_blank\" title=\"Bootstrap教程\">查看 Bootstrap教程</a>。</p> <hr> <h2>Bootstrap</h2> <p>你可以在你的 AngularJS 应用中加入 Twitter Bootstrap，你可以在你的 <a href=\"https://www.w3cschool.cn/htmltags/tag-head.html\" target=\"_blank\">&lt;head&gt;</a> 元素中添加如下代码:</p> <div class=\"example\"> <div class=\"example_code\"> &lt;link rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css\" rel=\"external nofollow\" target=\"_blank\" &gt; </div> </div> <p>如果站点在国内，建议使用百度静态资源库的Bootstrap，代码如下：</p> <div class=\"example\"> <div class=\"example_code notranslate htmlHigh\"> &lt;link rel=\"stylesheet\" href=\"//apps.bdimg.com/libs/bootstrap/3.2.0/css/bootstrap.min.css\" rel=\"external nofollow\" target=\"_blank\" &gt; </div> </div> <p>以下是一个完整的 HTML 实例, 使用了 AngularJS 指令和 Bootstrap 类。</p>  <hr> <h2>HTML 代码</h2> <div class=\"example\"> <div class=\"example_code\"> &lt;!DOCTYPE html&gt;<br>&lt;html ang-app=\"\"&gt;<br>&lt;head&gt;<br> &lt;link rel=\"stylesheet\" href=\"http://apps.bdimg.com/libs/bootstrap/3.2.0/css/bootstrap.min.css\" rel=\"external nofollow\" target=\"_blank\" &gt;<br> &lt;/head&gt;<br><br>&lt;body ng-controller=\"userController\"&gt;<br> &lt;div class=\"container\"&gt;<br><br>&lt;h3&gt;Users&lt;/h3&gt;<br><br>&lt;table class=\"table table-striped\"&gt;<br>  &lt;thead&gt;&lt;tr&gt;<br>     &lt;th&gt;Edit&lt;/th&gt;<br>    &lt;th&gt;First Name&lt;/th&gt;<br>    &lt;th&gt;Last Name&lt;/th&gt;<br>  &lt;/tr&gt;&lt;/thead&gt;<br>  &lt;tbody&gt;&lt;tr ng-repeat=\"user in users\"&gt;<br>    &lt;td&gt;<br>       &lt;button class=\"btn\" ng-click=\"editUser(user.id)\"&gt;<br>       &lt;span class=\"glyphicon glyphicon-pencil\"&gt;&lt;/span&gt; &amp;nbsp;Edit<br>       &lt;/button&gt;<br>    &lt;/td&gt;<br>    &lt;td&gt;{{ user.fName }}&lt;/td&gt;<br>     &lt;td&gt;{{ user.lName }}&lt;/td&gt;<br>   &lt;/tr&gt;&lt;/tbody&gt;<br>&lt;/table&gt;<br><br>&lt;hr&gt;<br>&lt;button class=\"btn btn-success\" ng-click=\"editUser('new')\"&gt;<br>   &lt;span class=\"glyphicon glyphicon-user\"&gt;&lt;/span&gt; Create New User<br> &lt;/button&gt;<br>&lt;hr&gt;<br><br> &lt;h3 ng-show=\"edit\"&gt;Create New User:&lt;/h3&gt;<br>&lt;h3 ng-hide=\"edit\"&gt;Edit User:&lt;/h3&gt;<br><br>&lt;form class=\"form-horizontal\"&gt;<br>&lt;div class=\"form-group\"&gt;<br>   &lt;label class=\"col-sm-2 control-label\"&gt;First Name:&lt;/label&gt;<br>  &lt;div class=\"col-sm-10\"&gt;<br>     &lt;input type=\"text\" ng-model=\"fName\" ng-disabled=\"!edit\" placeholder=\"First Name\"&gt;<br>  &lt;/div&gt;<br> &lt;/div&gt; <br>&lt;div class=\"form-group\"&gt;<br>   &lt;label class=\"col-sm-2 control-label\"&gt;Last Name:&lt;/label&gt;<br>  &lt;div class=\"col-sm-10\"&gt;<br>     &lt;input type=\"text\" ng-model=\"lName\" ng-disabled=\"!edit\" placeholder=\"Last Name\"&gt;<br>  &lt;/div&gt;<br>&lt;/div&gt;<br> &lt;div class=\"form-group\"&gt;<br>   &lt;label class=\"col-sm-2 control-label\"&gt;Password:&lt;/label&gt;<br>  &lt;div class=\"col-sm-10\"&gt;<br>    &lt;input type=\"password\" ng-model=\"passw1\" placeholder=\"Password\"&gt;<br>  &lt;/div&gt;<br>&lt;/div&gt;<br> &lt;div class=\"form-group\"&gt;<br>   &lt;label class=\"col-sm-2 control-label\"&gt;Repeat:&lt;/label&gt;<br>  &lt;div class=\"col-sm-10\"&gt;<br>    &lt;input type=\"password\" ng-model=\"passw2\" placeholder=\"Repeat Password\"&gt;<br>  &lt;/div&gt;<br>&lt;/div&gt;<br> &lt;/form&gt;<br><br>&lt;hr&gt;<br> &lt;button class=\"btn btn-success\" ng-disabled=\"error || incomplete\"&gt;<br>   &lt;span class=\"glyphicon glyphicon-save\"&gt;&lt;/span&gt; Save Changes<br>&lt;/button&gt;<br>&lt;/div&gt;<br><br> &lt;script src = \"http://apps.bdimg.com/libs/angular.js/1.2.15/angular.min.js\"&gt;&lt;/script&gt;<br> &lt;script src = \"myUsers.js\"&gt;&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;&gt; </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_myusers\" target=\"_blank\">尝试一下 »</a> </div> <br><hr> <h2>指令解析</h2> <table class=\"reference\"> <tbody><tr> <th>AngularJS 指令</th> <th>描述</th> </tr> <tr> <td>&lt;html ng-app</td> <td>为 &lt;html&gt; 元素定义一个应用(未命名)</td> </tr> <tr> <td>&lt;body ng-controller</td> <td>为 &lt;body&gt; 元素定义一个控制器</td> </tr> <tr> <td>&lt;tr ng-repeat</td> <td>循环 users 对象数组，每个 user 对象放在 &lt;tr&gt; 元素中。</td> </tr> <tr> <td>&lt;button ng-click</td> <td>当点击 &lt;button&gt; 元素时调用函数 editUser()</td> </tr> <tr> <td>&lt;h3 ng-show</td> <td> 如果 edit = true 显示 &lt;h3&gt; 元素 </td> </tr> <tr> <td>&lt;h3 ng-hide</td> <td>如果 edit = true 隐藏 &lt;h3&gt; 元素</td> </tr> <tr> <td>&lt;input ng-model</td> <td>为应用程序绑定 &lt;input&gt; 元素</td> </tr> <tr> <td>&lt;button ng-disabled</td> <td>如果发生错误或者 ncomplete = true 禁用 &lt;button&gt; 元素</td> </tr> </tbody></table> <br><hr> <h2>Bootstrap 类解析</h2> <table class=\"reference\"> <tbody><tr> <th>元素</th> <th>Bootstrap 类</th> <th>定义</th> </tr> <tr> <td>&lt;div&gt;</td> <td>container</td> <td>内容容器</td> </tr> <tr> <td>&lt;table&gt;</td> <td>table</td> <td>表格</td> </tr> <tr> <td>&lt;table&gt;</td> <td>table-striped</td> <td>带条纹背景的表格</td> </tr> <tr> <td>&lt;button&gt;</td> <td>btn</td> <td>按钮</td> </tr> <tr> <td>&lt;button&gt;</td> <td>btn-success</td> <td>成功按钮</td> </tr> <tr> <td>&lt;span&gt;</td> <td>glyphicon</td> <td>字形图标</td> </tr> <tr> <td>&lt;span&gt;</td> <td>glyphicon-pencil</td> <td>铅笔图标</td> </tr> <tr> <td>&lt;span&gt;</td> <td>glyphicon-user</td> <td>用户图标</td> </tr> <tr> <td>&lt;span&gt;</td> <td>glyphicon-save</td> <td>保存图标</td> </tr> <tr> <td>&lt;form&gt;</td> <td>form-horizontal</td> <td>水平表格</td> </tr> <tr> <td>&lt;div&gt;</td> <td>form-group</td> <td>表单组</td> </tr> <tr> <td>&lt;label&gt;</td> <td>control-label</td> <td>控制器标签</td> </tr> <tr> <td>&lt;label&gt;</td> <td>col-sm-2</td> <td>跨越 2 列</td> </tr> <tr> <td>&lt;div&gt;</td> <td>col-sm-10</td> <td>跨越 10 列</td> </tr> </tbody></table> <br><hr> <h2>JavaScript 代码</h2> <div class=\"example\"> <div class=\"example_code\"> function userController($scope) {<br>$scope.fName = '';<br>$scope.lName = '';<br>$scope.passw1 = '';<br>$scope.passw2 = '';<br> $scope.users = [<br>{id:1, fName:'Hege',  lName:\"Pege\" },<br> {id:2, fName:'Kim',   lName:\"Pim\" },<br>{id:3, fName:'Sal',   lName:\"Smith\" },<br> {id:4, fName:'Jack',  lName:\"Jones\" },<br>{id:5, fName:'John',  lName:\"Doe\" },<br>{id:6, fName:'Peter', lName:\"Pan\" }<br>];<br>$scope.edit = true;<br>$scope.error = false;<br> $scope.incomplete = false; <br><br>$scope.editUser = function(id) {<br>  if (id == 'new') {<br>     $scope.edit = true;<br>    $scope.incomplete = true;<br>    $scope.fName = '';<br>    $scope.lName = '';<br>    } else {<br>    $scope.edit = false;<br>    $scope.fName = $scope.users[id-1].fName;<br>    $scope.lName = $scope.users[id-1].lName; <br>  }<br>};<br><br>$scope.$watch('passw1',function() {$scope.test();});<br>$scope.$watch('passw2',function() {$scope.test();});<br> $scope.$watch('fName', function() {$scope.test();});<br>$scope.$watch('lName', function() {$scope.test();});<br><br>$scope.test = function() {<br>  if ($scope.passw1 !== $scope.passw2) {<br>    $scope.error = true;<br>    } else {<br>    $scope.error = false;<br>  }<br>  $scope.incomplete = false;<br>  if ($scope.edit &amp;&amp; (!$scope.fName.length ||<br>  !$scope.lName.length ||<br>  !$scope.passw1.length || !$scope.passw2.length)) {<br>       $scope.incomplete = true;<br>  }<br>};<br><br>}</div> </div> <br><hr> <h2>JavaScript 代码解析</h2> <table class=\"reference\"> <tbody><tr> <th>Scope 属性</th> <th>用途</th> </tr> <tr> <td>$scope.fName</td> <td>模型变量 (用户名)</td> </tr> <tr> <td>$scope.lName</td> <td>模型变量 (用户姓)</td> </tr> <tr> <td>$scope.passw1</td> <td>模型变量 (用户密码 1)</td> </tr> <tr> <td>$scope.passw2</td> <td>模型变量 (用户密码 2)</td> </tr> <tr> <td>$scope.users</td> <td>模型变量 (用户的数组)</td> </tr> <tr> <td>$scope.edit</td> <td>当用户点击创建用户时设置为true。</td> </tr> <tr> <td>$scope.error</td> <td>如果 passw1 不等于 passw2 设置为 true</td> </tr> <tr> <td>$scope.incomplete</td> <td>如果每个字段都为空(length = 0)设置为 true </td> </tr> <tr> <td>$scope.editUser</td> <td>设置模型变量</td> </tr> <tr> <td>$scope.watch</td> <td>监控模型变量</td> </tr> <tr> <td>$scope.test</td> <td>验证模型变量的错误和完整性</td></tr></tbody></table></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 18,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "AngularJS 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "6af377308ca76a2d5b5cf8a448f6d02a",
      "chapter_level_two_parent_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_two_name": "AngularJS API",
      "chapter_level_two_url": "/angularjs/angularjs-api.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><div class=\"article-body\">\n\t\t\n\t\t\t<div class=\"article-intro\" id=\"content\">\n\t\t\t\n\t\t\t<h2>AngularJS <span class=\"color_h1\">API</span></h2><div><span class=\"color_h1\">本节为你介绍了 </span>AngularJS 中一些通用的 API。</div>\n\n<hr>\n<p class=\"intro\">API 意为 <strong>A</strong>pplication \n<strong>P</strong>rogramming <strong>I</strong>nterface（应用程序编程接口）。</p>\n\n<hr>\n<h2>AngularJS 全局 API</h2>\n<p> AngularJS 全局 API 用于执行常见任务的 JavaScript 函数集合，如：</p>\n<ul>\n <li>比较对象</li>\n <li>迭代对象</li>\n <li>转换对象</li>\n</ul>\n<p>全局 API 函数使用 angular 对象进行访问。</p>\n\n<p>以下列出了一些通用的 API 函数：</p>\n<table class=\"reference\">\n <tbody><tr>\n  <th>API</th>\n  <th>描述</th>\n </tr>\n <tr>\n  <td>angular.lowercase()</td>\n  <td>转换字符串为小写</td>\n </tr>\n <tr>\n  <td>angular.uppercase()</td>\n  <td>转换字符串为大写</td>\n </tr>\n <tr>\n  <td>angular.isString()</td>\n  <td>判断给定的对象是否为字符串，如果是返回 true。  </td>\n </tr>\n <tr>\n  <td>angular.isNumber()</td>\n  <td>判断给定的对象是否为数字，如果是返回 true。</td>\n </tr>\n</tbody></table>\n\n<hr>\n<h3>angular.lowercase()</h3>\n<div class=\"example\">\n<h2 class=\"example\">实例</h2>\n<div class=\"example_code\">\n<span class=\"highLT\">&lt;</span><span class=\"highELE\">div</span> <span class=\"highATT\">ng-app=</span><span class=\"highVAL\">\"myApp\"</span> <span class=\"highATT\">ng-controller=</span><span class=\"highVAL\">\"myCtrl\"</span><span class=\"highGT\">&gt;</span><br>\n <span class=\"highLT\">&lt;</span><span class=\"highELE\">p</span><span class=\"highGT\">&gt;</span><span class=\"highATT\">{{ x1 }}</span><span class=\"highLT\">&lt;</span><span class=\"highELE\">/p</span><span class=\"highGT\">&gt;</span><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">p</span><span class=\"highGT\">&gt;</span><span class=\"highATT\">{{ x2 }}</span><span class=\"highLT\">&lt;</span><span class=\"highELE\">/p</span><span class=\"highGT\">&gt;</span><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">/div</span><span class=\"highGT\">&gt;</span><br><br>\n<span class=\"highLT\">&lt;</span><span class=\"highELE\">script</span><span class=\"highGT\">&gt;</span><br>\nvar app = angular.module('myApp', []);<br>\napp.controller('myCtrl', function($scope) {<br>\n$scope.x1 = \"JOHN\";<br>\n$scope.x2 = angular.lowercase($scope.x1);<br>\n});<br>\n<span class=\"highLT\">&lt;</span><span class=\"highELE\">/script</span><span class=\"highGT\">&gt;</span>\n</div>\n<br>\n<a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_api_lowercase\" target=\"_blank\">尝试一下 »</a>\n</div>\n<h3>angular.uppercase()</h3>\n<div class=\"example\">\n<h2 class=\"example\">实例</h2>\n<div class=\"example_code\">\n<span class=\"highLT\">&lt;</span><span class=\"highELE\">div</span> <span class=\"highATT\">ng-app=</span><span class=\"highVAL\">\"myApp\"</span> <span class=\"highATT\">ng-controller=</span><span class=\"highVAL\">\"myCtrl\"</span><span class=\"highGT\">&gt;</span><br>\n <span class=\"highLT\">&lt;</span><span class=\"highELE\">p</span><span class=\"highGT\">&gt;</span><span class=\"highATT\">{{ x1 }}</span><span class=\"highLT\">&lt;</span><span class=\"highELE\">/p</span><span class=\"highGT\">&gt;</span><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">p</span><span class=\"highGT\">&gt;</span><span class=\"highATT\">{{ x2 }}</span><span class=\"highLT\">&lt;</span><span class=\"highELE\">/p</span><span class=\"highGT\">&gt;</span><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">/div</span><span class=\"highGT\">&gt;</span><br><br>\n<span class=\"highLT\">&lt;</span><span class=\"highELE\">script</span><span class=\"highGT\">&gt;</span><br>\nvar app = angular.module('myApp', []);<br>\napp.controller('myCtrl', function($scope) {<br>\n$scope.x1 = \"John\";<br>\n$scope.x2 = angular.uppercase($scope.x1);<br>\n});<br>\n<span class=\"highLT\">&lt;</span><span class=\"highELE\">/script</span><span class=\"highGT\">&gt;</span>\n</div>\n<br>\n <a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_api_uppercase\" target=\"_blank\">尝试一下 »</a>\n</div>\n<h3>angular.isString()</h3>\n<div class=\"example\">\n<h2 class=\"example\">实例</h2>\n<div class=\"example_code\">\n<span class=\"highLT\">&lt;</span><span class=\"highELE\">div</span> <span class=\"highATT\">ng-app=</span><span class=\"highVAL\">\"myApp\"</span> <span class=\"highATT\">ng-controller=</span><span class=\"highVAL\">\"myCtrl\"</span><span class=\"highGT\">&gt;</span><br>\n <span class=\"highLT\">&lt;</span><span class=\"highELE\">p</span><span class=\"highGT\">&gt;</span><span class=\"highATT\">{{ x1 }}</span><span class=\"highLT\">&lt;</span><span class=\"highELE\">/p</span><span class=\"highGT\">&gt;</span><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">p</span><span class=\"highGT\">&gt;</span><span class=\"highATT\">{{ x2 }}</span><span class=\"highLT\">&lt;</span><span class=\"highELE\">/p</span><span class=\"highGT\">&gt;</span><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">/div</span><span class=\"highGT\">&gt;</span><br><br>\n<span class=\"highLT\">&lt;</span><span class=\"highELE\">script</span><span class=\"highGT\">&gt;</span><br>\nvar app = angular.module('myApp', []);<br>\napp.controller('myCtrl', function($scope) {<br>\n$scope.x1 = \"JOHN\";<br>\n$scope.x2 = angular.isString($scope.x1);<br>\n});<br>\n<span class=\"highLT\">&lt;</span><span class=\"highELE\">/script</span><span class=\"highGT\">&gt;</span>\n</div>\n<br>\n <a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_api_isstring\" target=\"_blank\">尝试一下 »</a>\n</div>\n<h3>angular.isNumber()</h3>\n<div class=\"example\">\n<h2 class=\"example\">实例</h2>\n<div class=\"example_code\">\n<span class=\"highLT\">&lt;</span><span class=\"highELE\">div</span> <span class=\"highATT\">ng-app=</span><span class=\"highVAL\">\"myApp\"</span> <span class=\"highATT\">ng-controller=</span><span class=\"highVAL\">\"myCtrl\"</span><span class=\"highGT\">&gt;</span><br>\n <span class=\"highLT\">&lt;</span><span class=\"highELE\">p</span><span class=\"highGT\">&gt;</span><span class=\"highATT\">{{ x1 }}</span><span class=\"highLT\">&lt;</span><span class=\"highELE\">/p</span><span class=\"highGT\">&gt;</span><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">p</span><span class=\"highGT\">&gt;</span><span class=\"highATT\">{{ x2 }}</span><span class=\"highLT\">&lt;</span><span class=\"highELE\">/p</span><span class=\"highGT\">&gt;</span><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">/div</span><span class=\"highGT\">&gt;</span><br><br>\n<span class=\"highLT\">&lt;</span><span class=\"highELE\">script</span><span class=\"highGT\">&gt;</span><br>\nvar app = angular.module('myApp', []);<br>\napp.controller('myCtrl', function($scope) {<br>\n$scope.x1 = \"JOHN\";<br>\n$scope.x2 = angular.isNumber($scope.x1);<br>\n});<br>\n<span class=\"highLT\">&lt;</span><span class=\"highELE\">/script</span><span class=\"highGT\">&gt;</span>\n</div>\n<br>\n <a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_api_isnumber\" target=\"_blank\">尝试一下 »</a></div></div></div></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 17,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "AngularJS 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "6962c569f9e8770ab26154c5babdbfbd",
      "chapter_level_two_parent_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_two_name": "AngularJS 输入验证",
      "chapter_level_two_url": "/angularjs/angularjs-validation.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>AngularJS <span class=\"color_h1\">输入验证</span> </h2><div><span class=\"color_h1\">AngularJS 表单和控件提供了验证功能，对与用户的输入进行判断，以辨别输入是否合法，如果不合法则进行警告。<br></span></div> <hr> <p class=\"intro\">AngularJS 表单和控件可以验证输入的数据。</p> <hr> <h2>输入验证</h2> <p>在前面的几个章节中，你已经学到关于 AngularJS 表单和控件的知识。</p> <p>AngularJS 表单和控件可以提供验证功能，并对用户输入的非法数据进行警告。</p>  <table class=\"lamp\"><tbody><tr> <th style=\"width:34px\"><img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" alt=\"Note\" style=\"height:32px;width:32px\"></th> <td>客户端的验证不能确保用户输入数据的安全，所以服务端的数据验证也是必须的。</td> </tr></tbody></table> <hr> <h2>应用代码</h2> <div class=\"example\"> <div class=\"example_code\"> &lt;!DOCTYPE html&gt;<br>&lt;html&gt; <br><br>&lt;body&gt;<br> &lt;h2&gt;Validation Example&lt;/h2&gt;<br><br>&lt;form  ng-app=\"\"  ng-controller=\"validateCtrl\"<br>name=\"myForm\" novalidate&gt;<br><br> &lt;p&gt;Username:&lt;br&gt;<br>  &lt;input type=\"text\" name=\"user\" ng-model=\"user\" required&gt;<br>  &lt;span style=\"color:red\" ng-show=\"myForm.user.$dirty &amp;&amp; myForm.user.$invalid\"&gt;<br>  &lt;span ng-show=\"myForm.user.$error.required\"&gt;Username is required.&lt;/span&gt;<br>  &lt;/span&gt;<br>&lt;/p&gt;<br><br>&lt;p&gt;Email:&lt;br&gt;<br>  &lt;input type=\"email\" name=\"email\" ng-model=\"email\" required&gt;<br>  &lt;span style=\"color:red\" ng-show=\"myForm.email.$dirty &amp;&amp; myForm.email.$invalid\"&gt;<br>  &lt;span ng-show=\"myForm.email.$error.required\"&gt;Email is required.&lt;/span&gt;<br>  &lt;span ng-show=\"myForm.email.$error.email\"&gt;Invalid email address.&lt;/span&gt;<br>  &lt;/span&gt;<br>&lt;/p&gt;<br><br>&lt;p&gt;<br>  &lt;input type=\"submit\"<br>  ng-disabled=\"myForm.user.$dirty &amp;&amp; myForm.user.$invalid ||<br>  myForm.email.$dirty &amp;&amp; myForm.email.$invalid\"&gt;<br>&lt;/p&gt;<br><br>&lt;/form&gt;<br><br>&lt;script src=\"//apps.bdimg.com/libs/angular.js/1.2.15/angular.min.js\" rel=\"external nofollow\" &gt;&lt;/script&gt;<br> &lt;script&gt;<br>function validateCtrl($scope) {<br>    $scope.user = 'John Doe';<br>    $scope.email = 'john.doe@gmail.com';<br> }<br>&lt;/script&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt; </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_validate\" target=\"_blank\">尝试一下 »</a> </div>  <table class=\"lamp\"><tbody><tr> <th style=\"width:34px\"><img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" alt=\"Note\" style=\"height:32px;width:32px\"></th> <td> HTML 表单属性 <strong>novalidate</strong> 用于禁用浏览器默认的验证。</td> </tr></tbody></table> <hr> <h2>实例解析</h2> <p> AngularJS <strong>ng-model</strong> 指令用于绑定输入元素到模型中。</p> <p> 模型对象有两个属性： <strong>user</strong> 和 <strong>email</strong>。</p> <p> 我们使用了 <strong>ng-show</strong>指令， color:red 在邮件是 <strong>$dirty</strong> 或 <strong>$invalid</strong> 才显示。</p><h2>相关阅读</h2><p><a href=\"https://www.w3cschool.cn/html/html-css-form-input-validation.html\" target=\"_blank\">HTML 表单验证</a></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 16,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "AngularJS 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "8bf4422ef87ff5cd4810c5f6fb1af2a7",
      "chapter_level_two_parent_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_two_name": "AngularJS 表单",
      "chapter_level_two_url": "/angularjs/angularjs-forms.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>AngularJS <span class=\"color_h1\">表单</span> </h2> <hr> <p class=\"intro\"> AngularJS 表单是输入控件的集合。</p> <hr> <h2>HTML 控件</h2> <p>以下 HTML input 元素被称为 HTML 控件:</p> <ul> <li>input 元素</li> <li>select 元素</li> <li>button 元素</li> <li>textarea 元素</li> </ul> <hr> <h2>HTML 表单</h2> <p>HTML 表单通常与 HTML 控件同时存在。</p> <hr> <h2> AngularJS 表单实例</h2><p> \nfunction ExampleController($scope) {\n    $scope.master = {\"firstName\":\"John\",\"lastName\":\"Doe\"};\n    $scope.reset = function() {\n        $scope.user = angular.copy($scope.master);\n    };\n    $scope.reset();\n};\n </p><div>  First Name:<br> <br> Last Name:<br>  <br><br> <button>RESET</button>  <p>form = {{user}}</p> <p>master = {{master}}</p> </div> <hr> <h2>应用程序代码</h2> <div class=\"example\"> <div class=\"example_code\"> &lt;div ng-app=\"\" ng-controller=\"formController\"&gt;<br>  &lt;form novalidate&gt;<br>    First Name:&lt;br&gt;<br>    &lt;input type=\"text\" ng-model=\"user.firstName\"&gt;&lt;br&gt;<br>    Last Name:&lt;br&gt;<br>    &lt;input type=\"text\" ng-model=\"user.lastName\"&gt;<br>    &lt;br&gt;&lt;br&gt;<br>    &lt;button ng-click=\"reset()\"&gt;RESET&lt;/button&gt;<br>  &lt;/form&gt;<br>  &lt;p&gt;form = {{user}}&lt;/p&gt;<br>  &lt;p&gt;master = {{master}}&lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;script&gt;<br> function formController ($scope) {<br>    $scope.master = {firstName: \"John\", lastName: \"Doe\"};<br>    $scope.reset = function() {<br>        $scope.user = angular.copy($scope.master);<br>    };<br>    $scope.reset();<br>};<br> &lt;/script&gt; </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_form\" target=\"_blank\">尝试一下 »</a> </div> <p> </p> <table class=\"lamp\"><tbody><tr> <th style=\"width:34px\"><img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" alt=\"Note\" style=\"height:32px;width:32px\"></th> <td> HTML 属性 <strong>novalidate</strong> 用于禁用浏览器的默认验证。</td> </tr></tbody></table> <hr> <h2>实例解析</h2> <p> AngularJS <strong>ng-model</strong> 指令用于绑定 input 元素到模型中。</p> <p> 模型对象 <strong>master</strong> 的值为 {\"firstName\" : \"John\", \"lastName\" : \"Doe\"}。</p> <p> 模型函数 <strong>reset</strong> 设置了模型对象 <strong>user</strong> 等于 master。</p><h2>相关文章</h2><p><a href=\"https://www.w3cschool.cn/htmltags/html-forms.html\" target=\"_blank\">HTML 表单</a></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 15,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "AngularJS 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "7e8b48525866e4668da36c5b668662e2",
      "chapter_level_two_parent_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_two_name": "AngularJS 模块",
      "chapter_level_two_url": "/angularjs/angularjs-modules.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h1>AngularJS <span class=\"color_h1\">模块</span></h1><div><span class=\"color_h1\">本节介绍了如何创建 AngularJS 模块以及 AngularJS 模块的相关运用。<br></span></div><hr><p class=\"intro\">模块定义了一个应用程序。 </p><p class=\"intro\">模块是应用程序中不同部分的容器。</p><p class=\"intro\">模块是应用控制器的容器。</p><p class=\"intro\">控制器通常属于一个模块。</p><hr><h2>创建模块</h2><p>你可以通过 AngularJS 的 <strong>angular.module</strong> 函数来创建模块：</p><div class=\"example\"><div class=\"example_code\"><div class=\"htmlHigh\"><span class=\"highLT\">&lt;</span><span class=\"highELE\">div</span> <span class=\"highATT\">ng-app=</span><span class=\"highVAL\">\"myApp\"</span><span class=\"highGT\">&gt;</span>...<span class=\"highLT\">&lt;</span><span class=\"highELE\">/div</span><span class=\"highGT\">&gt;</span><br><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">script</span><span class=\"highGT\">&gt;</span><br></div><div class=\"jsHigh\"><br><span class=\"highELE\">var</span> app = angular.module(<strong>\"</strong>myApp<strong>\"</strong>, []);<br><br></div><div class=\"htmlHigh\"><span class=\"highLT\">&lt;</span><span class=\"highELE\">/script</span><span class=\"highGT\">&gt;</span></div></div></div><p>\"myApp\" 参数对应执行应用的 <a href=\"https://www.w3cschool.cn/html/html-elements.html\" target=\"_blank\">HTML 元素</a>。</p><p>现在你可以在 AngularJS 应用中添加控制器，指令，过滤器等。</p><hr><h2>添加控制器</h2><p>你可以使用 <strong>ng-controller</strong> 指令来添加应用的控制器:</p><div class=\"example\"><h2 class=\"example\">AngularJS 实例</h2><div class=\"example_code htmlHigh\"><div class=\"htmlHigh\"><span class=\"highLT\">&lt;</span><span class=\"highELE\">div</span> <span class=\"highATT\">ng-app=</span><span class=\"highVAL\">\"<strong>myApp</strong>\"</span> <span class=\"highATT\">ng-controller=</span><span class=\"highVAL\"><strong>\"myCtrl\"</strong></span><strong><span class=\"highATT\"></span></strong><span class=\"highGT\">&gt;</span><br><span class=\"highATT\">{{ firstName + \" \" + lastName }}</span><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">/div</span><span class=\"highGT\">&gt;</span><br><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">script</span><span class=\"highGT\">&gt;</span><br><br></div><div class=\"jsHigh\"><span class=\"highELE\">var</span> app = angular.module(<strong>\"myApp\"</strong>, []);<br><br>app.controller(<strong>\"myCtrl\"</strong>, <span class=\"highELE\">function</span>($scope) {<br>    $scope.firstName = <span class=\"highVAL\">\"John\"</span>;<br>    $scope.lastName = <span class=\"highVAL\">\"Doe\"</span>;<br>});<br><br></div><div class=\"htmlHigh\"><span class=\"highLT\">&lt;</span><span class=\"highELE\">/script</span><span class=\"highGT\">&gt;</span></div></div><br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_module\" target=\"_blank\">尝试一下 »</a></div><p>你可以在 <a target=\"_top\" title=\"AngularJS 控制器\" href=\"angularjs-controllers.html\"> AngularJS 控制器 </a> 章节学到更多关于控制器的知识。</p><hr><h2>添加指令</h2><p>AngularJS 提供了很多内置的指令，你可以使用它们来为你的应用添加功能。</p><p>完整的指令内容可以参阅 <a href=\"angularjs-reference.html\">AngularJS 参考手册</a>。</p><p>此外，你可以使用模块来为你应用添加自己的指令：</p><div class=\"example\"><h2 class=\"example\">AngularJS 实例</h2><div class=\"example_code htmlHigh\"><div class=\"htmlHigh\"><span class=\"highLT\">&lt;</span><span class=\"highELE\">div</span> <span class=\"highATT\">ng-app=</span><span class=\"highVAL\">\"myApp\"</span> <span class=\"highATT\">w3cschool-directive</span><span class=\"highGT\">&gt;</span><span class=\"highLT\">&lt;</span><span class=\"highELE\">/div</span><span class=\"highGT\">&gt;</span><br><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">script</span><span class=\"highGT\">&gt;</span></div><br><div class=\"jsHigh\"><span class=\"highELE\">var</span> app = angular.module(<span class=\"highVAL\">\"myApp\"</span>, []);<br><br>app.directive(<span class=\"highVAL\">\"w3cschoolDirective\"</span>, <span class=\"highELE\">function</span>() {<br>    <span class=\"highELE\">return</span> {<br>        template : <span class=\"highVAL\">\"我在指令构造器中创建!\"</span><br>    };<br>});<br></div><div class=\"htmlHigh\"><span class=\"highLT\">&lt;</span><span class=\"highELE\">/script</span><span class=\"highGT\">&gt;</span></div></div><br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_directive\" target=\"_blank\">尝试一下 »</a></div><p>你可以在 <a target=\"_top\" title=\"AngularJS 指令\" href=\"angularjs-directives.html\"> AngularJS 指令 </a> 章节学到更多关于指令的知识。</p><hr><h2>模块和控制器包含在 JS 文件中</h2><p>通常 AngularJS 应用程序将模块和控制器包含在  JavaScript 文件中。</p><p>在以下实例中， \"myApp.js\" 包含了应用模块的定义程序， \"myCtrl.js\" 文件包含了控制器：</p><div class=\"example\"><h2 class=\"example\">AngularJS 实例</h2><div class=\"example_code\"><span class=\"highLT\">&lt;</span><span class=\"highELE\">!DOCTYPE</span> <span class=\"highATT\">html</span><span class=\"highGT\">&gt;</span><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">html</span><span class=\"highGT\">&gt;</span><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">script</span> <span class=\"highATT\">src=</span><span class=\"highVAL\">\"http://apps.bdimg.com/libs/angular.js/1.4.6/angular.min.js\"</span><span class=\"highGT\">&gt;</span><span class=\"highLT\">&lt;</span><span class=\"highELE\">/script</span><span class=\"highGT\">&gt;</span><br>    <span class=\"highLT\">&lt;</span><span class=\"highELE\">body</span><span class=\"highGT\">&gt;</span><br><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">div</span> <span class=\"highATT\">ng-app=</span><span class=\"highVAL\">\"<strong>myApp</strong>\"</span> <span class=\"highATT\">ng-controller=</span><span class=\"highVAL\">\"<strong>myCtrl</strong>\"</span><span class=\"highGT\">&gt;</span><br><span class=\"highATT\">{{ firstName + \" \" + lastName }}</span><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">/div</span><span class=\"highGT\">&gt;</span><br><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">script</span> <span class=\"highATT\">src=</span><span class=\"highVAL\">\"<strong>myApp.js</strong>\"</span><span class=\"highGT\">&gt;</span><span class=\"highLT\">&lt;</span><span class=\"highELE\">/script</span><span class=\"highGT\">&gt;</span><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">script</span> <span class=\"highATT\">src=</span><span class=\"highVAL\">\"<strong>myCtrl.js</strong>\"</span><span class=\"highGT\">&gt;</span><span class=\"highLT\">&lt;</span><span class=\"highELE\">/script</span><span class=\"highGT\">&gt;</span><br><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">/body</span><span class=\"highGT\">&gt;</span><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">/html</span><span class=\"highGT\">&gt;</span></div><br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_module_files\" target=\"_blank\">尝试一下 »</a></div><br><div class=\"example\"><h2 class=\"example\">myApp.js</h2><div class=\"example_code notranslate\">var app = angular.module(<strong>\"myApp\"</strong>, []);</div></div><br><table class=\"lamp  \"><tbody><tr><th style=\"width:34px\"><img src=\"https://atts.w3cschool.cn/attachments/day_170306/201703061618333432.jpg\" alt=\"\"></th><td>在模块定义中 [] 参数用于定义模块的依赖关系。<br>中括号[]表示该模块没有依赖，如果有依赖的话会在中括号写上依赖的模块名字。</td></tr></tbody></table><br><div class=\"example\"><h2 class=\"example\">myCtrl.js</h2><div class=\"example_code notranslate\">app.controller(<strong>\"myCtrl\"</strong>, function($scope) {<br>    $scope.firstName\t= \"John\";<br>    $scope.lastName= \"Doe\";<br>});</div></div><hr><h2>函数会影响到全局命名空间</h2><p>JavaScript 中应避免使用全局函数。因为他们很容易被其他脚本文件覆盖。</p><p>AngularJS 模块让所有函数的作用域在该模块下，避免了该问题。</p><hr><h2>什么时候载入库?</h2><table class=\"lamp  \"><tbody><tr><th style=\"width:34px\"><img src=\"https://atts.w3cschool.cn/attachments/day_170306/201703061618414132.jpg\" alt=\"\"></th><td>在我们的实例中，所有 AngularJS 库都在 HTML 文档的头部载入。</td></tr></tbody></table><p>对于 HTML 应用程序，通常建议把所有的脚本都放置在 &lt;body&gt; 元素的最底部。</p><p>这会提高网页加载速度，因为 HTML 加载不受制于脚本加载。</p><p>在我们的多个 AngularJS 实例中，您将看到 AngularJS 库是在文档的 &lt;head&gt; 区域被加载。</p><p>在我们的实例中，AngularJS 在 &lt;head&gt; 元素中被加载，因为对 angular.module 的调用只能在库加载完成后才能进行。</p><p>另一个解决方案是在 &lt;body&gt;  元素中加载 AngularJS 库，但是必须放置在您的 AngularJS 脚本前面：</p><div class=\"example\"><h2 class=\"example\">AngularJS 实例</h2><div class=\"example_code\"><span class=\"highLT\">&lt;</span><span class=\"highELE\">!DOCTYPE</span> <span class=\"highATT\">html</span><span class=\"highGT\">&gt;</span><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">html</span><span class=\"highGT\">&gt;</span><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">head</span><span class=\"highGT\">&gt;</span><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">meta</span> <span class=\"highATT\">charset</span>=<span class=\"highVAL\">\"utf-8\"</span><span class=\"highGT\">&gt;</span><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">script</span> <span class=\"highATT\">src=</span><span class=\"highVAL\">\"http://apps.bdimg.com/libs/angular.js/1.4.6/angular.min.js\"</span><span class=\"highGT\">&gt;</span><span class=\"highLT\">&lt;</span><span class=\"highELE\">/script</span><span class=\"highGT\">&gt;</span><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">/head</span><span class=\"highGT\">&gt;</span><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">body</span><span class=\"highGT\">&gt;</span><br><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">div</span> <span class=\"highATT\">ng-app=</span><span class=\"highVAL\">\"myApp\"</span> <span class=\"highATT\">ng-controller=</span><span class=\"highVAL\">\"myCtrl\"</span><span class=\"highGT\">&gt;</span><br><span class=\"highATT\">{{ firstName + \" \" + lastName }}</span><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">/div</span><span class=\"highGT\">&gt;</span><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">script</span><span class=\"highGT\">&gt;</span><br>var app = angular.module(\"myApp\", []);<br>app.controller(\"myCtrl\", function($scope) {<br>    $scope.firstName = \"John\";<br>    $scope.lastName = \"Doe\";<br>});<br><span class=\"highLT\">&lt;</span><span class=\"highELE\">/script</span><span class=\"highGT\">&gt;</span><br><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">/body</span><span class=\"highGT\">&gt;</span><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">/html</span><span class=\"highGT\">&gt;</span></div><br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_module_body\" target=\"_blank\">尝试一下 »</a></div></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 14,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "AngularJS 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "f827e98d5a24073543b6e25b1aa7eedb",
      "chapter_level_two_parent_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_two_name": "AngularJS HTML 事件",
      "chapter_level_two_url": "/angularjs/angularjs-html-events.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>AngularJS <span class=\"color_h1\">HTML 事件</span> </h2><div><span class=\"color_h1\">本节介绍了 </span>AngularJS 的 HTML 事件的使用。</div> <hr> <p class=\"intro\">AngularJS 有自己的 <a href=\"https://www.w3cschool.cn/htmltags/ref-eventattributes.html\" target=\"_blank\">HTML 事件</a>指令。</p> <hr> <h2>ng-click 指令</h2> <p><strong>ng-click</strong> 指令定义了一个 AngularJS 单击事件。</p> <div class=\"example\"> <h2 class=\"example\">AngularJS 实例</h2> <div class=\"example_code notranslate htmlHigh\"> &lt;div ng-app=\"myApp\" ng-controller=\"myController\"&gt;<br><br>&lt;button ng-click=\"count = count + 1\"&gt;点我！&lt;/button&gt;<br><br>&lt;p&gt;{{ count }}&lt;/p&gt;<br><br>&lt;/div&gt;</div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_events_click\" target=\"_blank\">尝试一下 »</a> </div> <br><hr> <h2>隐藏 HTML 元素</h2> <p> <strong>ng-hide</strong> 指令用于设置应用的一部分 <strong>不可见</strong> 。</p> <p> <strong>ng-hide=\"true\"</strong> 让 HTML 元素 <strong>不可见</strong>。</p> <p><strong>ng-hide=\"false\"</strong> 让元素可见。</p> <div class=\"example\"> <h2 class=\"example\">AngularJS 实例</h2> <div class=\"example_code\"> &lt;div ng-app=\"myApp\" ng-controller=\"personController\"&gt;<br><br> &lt;button ng-click=\"toggle()\"&gt;隐藏/显示&lt;/button&gt;<br> <br>&lt;p ng-hide=\"myVar\"&gt;<br> 名: &lt;input type=\"text\" ng-model=\"person.firstName\"&gt;&lt;br&gt;<br> 姓: &lt;input type=\"text\" ng-model=\"person.lastName\"&gt;&lt;br&gt;<br>&lt;br&gt;<br>姓名: {{person.firstName + \" \" + person.lastName}}<br>&lt;/p&gt;<br><br>&lt;/div&gt;<br><br> &lt;script&gt;<br>function personController($scope) {<br>    $scope.person = {<br>        firstName: \"John\",<br>         lastName: \"Doe\"<br>    };<br>    $scope.myVar = false;<br>    $scope.toggle = function() {<br>        $scope.myVar = !$scope.myVar;<br>    };<br>}<br>&lt;/script&gt; </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_events_hide\" target=\"_blank\">尝试一下 »</a> </div> <p>应用解析:</p> <p> <strong>personController</strong>的第一部分与控制器章节类似。</p> <p>应用有一个默认属性: <strong>$scope.myVar = false;</strong></p> <p> <strong>ng-hide</strong> 指令设置应用中的元素不可见。 </p> <p><strong>toggle()</strong> 函数用于切换 <strong>myVar</strong> 变量的值（true 和 false）。</p> <p> <strong>ng-hide=\"true\"</strong> 让元素 <strong>不可见</strong>。</p> <hr> <h2>显示 HTML 元素</h2> <p> <strong>ng-show</strong> 指令可用于设置应用中的一部分<strong>可见</strong> 。</p> <p> <strong>ng-show=\"false\"</strong> 可以设置 HTML 元素 <strong>不可见</strong>。</p> <p><strong>ng-show=\"true\"</strong> 可以以设置 HTML 元素可见。</p> <p>以下实例使用了 ng-show 指令:</p> <div class=\"example\"> <h2 class=\"example\">AngularJS 实例</h2> <div class=\"example_code\"> &lt;div ng-app=\"myApp\" ng-controller=\"personController\"&gt;<br><br> &lt;button ng-click=\"toggle()\"&gt;隐藏/显示&lt;/button&gt;<br> <br>&lt;p ng-show=\"myVar\"&gt;<br> 名: &lt;input type=\"text\" ng-model=\"person.firstName\"&gt;&lt;br&gt;<br> 姓: &lt;input type=\"text\" ng-model=\"person.lastName\"&gt;&lt;br&gt;<br>&lt;br&gt;<br>姓名: {{person.firstName + \" \" + person.lastName}}<br>&lt;/p&gt;<br><br>&lt;/div&gt;<br><br> &lt;script&gt;<br>function personController($scope) {<br>    $scope.person = {<br>        firstName: \"John\",<br>        lastName: \"Doe\"<br>    };<br>    $scope.myVar = true;<br>    $scope.toggle = function() {<br>        $scope.myVar = !$scope.myVar;<br>    };<br>}<br>&lt;/script&gt; </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_events\" target=\"_blank\">尝试一下 »</a></div></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 13,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "AngularJS 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "5f599fde46c6760bc3c0c2b898748ab8",
      "chapter_level_two_parent_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_two_name": "AngularJS HTML DOM",
      "chapter_level_two_url": "/angularjs/angularjs-html-dom.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>AngularJS <span class=\"color_h1\">HTML DOM</span> </h2><div><span class=\"color_h1\">AngularJS 为 HTML DOM 元素的属性提供了绑定应用数据的指令。<br></span></div> <hr> <p class=\"intro\">AngularJS 有自己的 HTML 属性指令。</p> <hr> <h2>ng-disabled 指令</h2><p><b>ng-disabled</b> 指令设置表单输入字段的 disabled 属性(input, select, 或 textarea)。</p><p>如果 ng-disabled 中的表达式返回 true 则表单字段将被禁用</p> <div class=\"example\"> <h2 class=\"example\">AngularJS 实例</h2> <div class=\"example_code notranslate htmlHigh\"> &lt;div ng-app=\"\"&gt;<br><br>&lt;p&gt;<br>&lt;button ng-disabled=\"mySwitch\"&gt;点我！&lt;/button&gt;<br> &lt;/p&gt;<br><br>&lt;p&gt;<br>&lt;input type=\"checkbox\" ng-model=\"mySwitch\"&gt;按钮<br>&lt;/p&gt;<br><br>&lt;/div&gt; </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_html_disabled\" target=\"_blank\">尝试一下 »</a> </div> <p>实例讲解：</p> <p><strong>ng-disabled</strong> 指令绑定应用程序数据 \"mySwitch\" 到 HTML 的 disabled 属性。</p> <p><strong>ng-model</strong> 指令绑定 \"mySwitch\" 到 HTML input checkbox 元素的内容（value）。</p> <hr> <h2>ng-show 指令</h2> <p><strong>ng-show</strong> 指令隐藏或显示一个 HTML 元素。</p> <div class=\"example\"> <h2 class=\"example\">AngularJS 实例</h2> <div class=\"example_code notranslate htmlHigh\"> &lt;div ng-app=\"\"&gt;<br><br>&lt;p ng-show=\"true\"&gt;我是可见的。&lt;/p&gt;<br><br>&lt;p ng-show=\"false\"&gt;我是不可见的。&lt;/p&gt;<br><br> &lt;/div&gt; </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_html_show\" target=\"_blank\">尝试一下 »</a> </div> <p>您可以使用一个评估为 true or false 的表达式（比如 ng-show=\"hour &lt; 12\"）来隐藏和显示 HTML 元素。</p> <p>在下一章中，有另一个实例，通过单击一个按钮来隐藏一个 HTML 元素。</p> <h2>相关文章</h2><p><a href=\"https://www.w3cschool.cn/javascript/js-htmldom-elements.html\" target=\"_blank\">HTML DOM 元素</a></p><p><br></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 12,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "AngularJS 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "9ea361fe7c03b004fa7bb67801277636",
      "chapter_level_two_parent_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_two_name": "AngularJS SQL",
      "chapter_level_two_url": "/angularjs/angularjs-sql.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>AngularJS <span class=\"color_h1\">SQL</span> </h2> <hr> <p class=\"intro\"> 在前面章节中的代码也可以用于读取数据库中的数据。 </p> <hr> <h2>使用 PHP 从 MySQL 中获取数据</h2> <div class=\"example\"> <h2 class=\"example\">AngularJS 实例</h2> <div class=\"example_code\"> &lt;div ng-app=\"\" ng-controller=\"customersController\"&gt; <br><br>&lt;table&gt;<br>  &lt;tr ng-repeat=\"x in names\"&gt;<br>    &lt;td&gt;{{ x.Name }}&lt;/td&gt;<br>     &lt;td&gt;{{ x.Country }}&lt;/td&gt;<br>  &lt;/tr&gt;<br>&lt;/table&gt;<br><br>&lt;/div&gt;<br><br> &lt;script&gt;<br>function customersController($scope,$http) {<br>    var site = \"http://www.w3cschool.cn\";<br>     var page = \"/statics/demosource/Customers_SQL.php\";<br>     $http.get(site + page)<br>    .success(function(response) {$scope.names = response;});<br>}<br>&lt;/script&gt; </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_customers_mysql\" target=\"_blank\">尝试一下 »</a> </div> <br><hr> <h2> ASP.NET 中执行 SQL 获取数据</h2> <div class=\"example\"> <h2 class=\"example\">AngularJS 实例</h2> <div class=\"example_code htmlHigh\"> &lt;div ng-app=\"\" ng-controller=\"customersController\"&gt; <br><br>&lt;table&gt;<br>  &lt;tr ng-repeat=\"x in names\"&gt;<br>    &lt;td&gt;{{ x.Name }}&lt;/td&gt;<br>     &lt;td&gt;{{ x.Country }}&lt;/td&gt;<br>  &lt;/tr&gt;<br>&lt;/table&gt;<br><br>&lt;/div&gt;<br><br>&lt;script&gt;<br> function customersController($scope,$http) {<br>    var site = \"http://www.w3cschool.cn\";<br>     var page = \"/try/angularjs/data/Customers_SQL.aspx\";<br>     $http.get(site + page)<br>    .success(function(response) {$scope.names = response;});<br>}<br>&lt;/script&gt; </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_customers_sql\" target=\"_blank\">尝试一下 »</a> </div> <br><hr> <h2> PHP 读取 MySQL 数据代码</h2> <div class=\"example\"> <div class=\"example_code\"> &lt;?php<br>header(\"Access-Control-Allow-Origin: *\");<br>header(\"Content-Type: text/html; charset=UTF-8\");<br><br>$conn = new mysqli(\"myServer\", \"myUser\", \"myPassword\", \"Northwind\");<br><br>$result = $conn-&gt;query(\"SELECT CompanyName, City, Country FROM Customers\");<br><br>$outp \"[\";<br> while($rs = $result-&gt;fetch_array(MYSQLI_ASSOC)) {<br>    if ($outp != \"[\") {$outp .= \",\";}<br>    $outp .= '{\"Name\":\"'  . $rs[\"CompanyName\"] . '\",';<br>     $outp .= '\"City\":\"'   . $rs[\"City\"]        . '\",';<br>     $outp .= '\"Country\":\"'. $rs[\"Country\"]     . '\"}'; <br>}<br> $outp .=\"]\";<br><br>$conn-&gt;close();<br><br>echo($outp);<br>?&gt; </div> </div> <br><hr> <h2> PHP 读取 MS Access 代码</h2> <div class=\"example\"> <div class=\"example_code\"> &lt;?php<br>header(\"Access-Control-Allow-Origin: *\");<br>header(\"Content-Type: text/html; charset=ISO-8859-1\");<br><br>$conn = new COM(\"ADODB.Connection\");<br> $conn-&gt;open(\"PROVIDER=Microsoft.Jet.OLEDB.4.0;Data Source=Northwind.mdb\");<br><br>$rs = $conn-&gt;execute(\"SELECT CompanyName, City, Country FROM Customers\");<br><br>$outp = \"[\";<br>while (!$rs-&gt;EOF) {<br>    if ($outp != \"[\") {$outp .= \",\";}<br>    $outp .= '{\"Name\":\"'  . $rs[\"CompanyName\"] . '\",';<br>     $outp .= '\"City\":\"'   . $rs[\"City\"]        . '\",';<br>    $outp .= '\"Country\":\"'. $rs[\"Country\"]     . '\"}'; <br>    $rs-&gt;MoveNext();<br>}<br>$outp .= \"]\";<br><br> $conn-&gt;close();<br><br>echo ($outp);<br>?&gt; </div> </div> <br><hr> <h2> 服务端 ASP.NET, VB 和 MS Access 代码</h2> <div class=\"example\"> <div class=\"example_code\"> &lt;%@ Import Namespace=\"System.IO\"%&gt;<br>&lt;%@ Import Namespace=\"System.Data\"%&gt;<br> &lt;%@ Import Namespace=\"System.Data.OleDb\"%&gt;<br>&lt;%<br> Response.AppendHeader(\"Access-Control-Allow-Origin\", \"*\")<br>Dim conn As OleDbConnection<br>Dim objAdapter As OleDbDataAdapter<br>Dim objTable As DataTable<br>Dim objRow As DataRow<br>Dim objDataSet As New DataSet()<br> Dim outp<br>Dim c<br>conn = New OledbConnection(\"Provider=Microsoft.Jet.OLEDB.4.0;data source=Northwind.mdb\")<br>objAdapter = New OledbDataAdapter(\"SELECT CompanyName, City, Country FROM Customers\", conn)<br>objAdapter.Fill(objDataSet, \"myTable\")<br>objTable=objDataSet.Tables(\"myTable\")<br><br>outp = \"[\"<br> c = chr(34)<br>for each x in objTable.Rows<br>if outp &lt;&gt; \"[\" then outp = outp &amp; \",\"<br> outp = outp &amp; \"{\" &amp; c &amp; \"Name\"    &amp; c &amp; \":\" &amp; c &amp; x(\"CompanyName\") &amp; c &amp; \",\"<br> outp = outp &amp;       c &amp; \"City\"    &amp; c &amp; \":\" &amp; c &amp; x(\"City\")        &amp; c &amp; \",\" <br>outp = outp &amp;       c &amp; \"Country\" &amp; c &amp; \":\" &amp; c &amp; x(\"Country\")     &amp; c &amp; \"}\"<br>next<br><br>outp = outp &amp; \"]\"<br>response.write(outp)<br>conn.close<br>%&gt; </div> </div> <br><hr> <h2>服务端 ASP.NET, VB Razor 和 SQL Lite 代码</h2> <div class=\"example\"> <div class=\"example_code\"> @{<br>Response.AppendHeader(\"Access-Control-Allow-Origin\", \"*\")<br>var db = Database.Open(\"Northwind\");<br>var query = db.Query(\"SELECT CompanyName, City, Country FROM Customers\");<br>var outp =\"[\"<br>}<br>@foreach(var row in query)<br>{<br>if outp &lt;&gt; \"[\" then outp = outp + \",\"<br>outp = outp + \"{\" + c + \"Name\"    + c + \":\" + c + @row.CompanyName + c + \",\"<br>outp = outp +       c + \"City\"    + c + \":\" + c + @row.City        + c + \",\"<br>outp = outp +       c + \"Country\" + c + \":\" + c + @row.Country     + c + \"}\"<br>}<br>outp = outp + \"]\"<br>@outp </div> </div></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 11,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "AngularJS 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "48a7ecc95d597fb4dae8deb350babbc2",
      "chapter_level_two_parent_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_two_name": "AngularJS 表格",
      "chapter_level_two_url": "/angularjs/angularjs-tables.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>AngularJS <span class=\"color_h1\">表格</span> </h2>\n\n<div><span class=\"color_h1\">本节介绍了显示 </span>AngularJS 表格的方法。</div>\n<hr>\n<p class=\"intro\">ng-repeat 指令可以完美的显示表格。</p>\n<hr>\n <h2>在表格中显示数据</h2> \n<p>使用 angular 显示表格是非常简单的：</p>\n<div class=\"example\">\n     <h2 class=\"example\">AngularJS 实例</h2> \n    <div class=\"example_code\">&lt;div ng-app=\"\" ng-controller=\"customersController\"&gt;\n        <br>\n        <br>&lt;table&gt;\n        <br>  &lt;tr ng-repeat=\"x in names\"&gt;\n        <br>    &lt;td&gt;{{ x.Name }}&lt;/td&gt;\n        <br>    &lt;td&gt;{{ x.Country }}&lt;/td&gt;\n        <br>  &lt;/tr&gt;\n        <br>&lt;/table&gt;\n        <br>\n        <br>&lt;/div&gt;\n        <br>\n        <br>&lt;script&gt;\n        <br>function customersController($scope,$http) {\n        <br>  $http.get(\"/statics/demosource/Customers_JSON.php\")\n        <br>  .success(function(response) {$scope.names = response;});\n        <br>}\n        <br>&lt;/script&gt;</div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_tables_simple\" target=\"_blank\">尝试一下 »</a> \n</div>\n<div>\n    <br>\n</div>\n<blockquote>废弃声明 (v1.5)v1.5 中$http 的 success 和 error 方法已废弃。使用 then 方法替代。如果你使用的是 v1.5 以下版本，可以使用以下代码：var app = angular.module('myApp', []);app.controller('customersCtrl', function($scope, $http) {   $http.get(\"/try/angularjs/data/Customers_JSON.php\")   .success(function\n    (response) {$scope.names = response.records;});});</blockquote>\n\n<h2>Customers_JSON.php 文件代码：</h2>\n\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">\n        <p>&lt;?php</p>\n        <p>echo &lt;&lt;&lt;EOT</p>\n        <p>{</p>\n        <p>\"records\":[</p>\n        <p>{\"Name\":\"Alfreds Futterkiste\",\"City\":\"Berlin\",\"Country\":\"Germany\"},</p>\n        <p>{\"Name\":\"Ana Trujillo Emparedados y helados\",\"City\":\"México D.F.\",\"Country\":\"Mexico\"},</p>\n        <p>{\"Name\":\"Antonio Moreno Taquería\",\"City\":\"México D.F.\",\"Country\":\"Mexico\"},</p>\n        <p>{\"Name\":\"Around the Horn\",\"City\":\"London\",\"Country\":\"UK\"},</p>\n        <p>{\"Name\":\"B's Beverages\",\"City\":\"London\",\"Country\":\"UK\"},</p>\n        <p>{\"Name\":\"Berglunds snabbköp\",\"City\":\"Luleå\",\"Country\":\"Sweden\"},</p>\n        <p>{\"Name\":\"Blauer See Delikatessen\",\"City\":\"Mannheim\",\"Country\":\"Germany\"},</p>\n        <p>{\"Name\":\"Blondel père et fils\",\"City\":\"Strasbourg\",\"Country\":\"France\"},</p>\n        <p>{\"Name\":\"Bólido Comidas preparadas\",\"City\":\"Madrid\",\"Country\":\"Spain\"},</p>\n        <p>{\"Name\":\"Bon app'\",\"City\":\"Marseille\",\"Country\":\"France\"},</p>\n        <p>{\"Name\":\"Bottom-Dollar Marketse\",\"City\":\"Tsawassen\",\"Country\":\"Canada\"},</p>\n        <p>{\"Name\":\"Cactus Comidas para llevar\",\"City\":\"Buenos Aires\",\"Country\":\"Argentina\"},</p>\n        <p>{\"Name\":\"Centro comercial Moctezuma\",\"City\":\"México D.F.\",\"Country\":\"Mexico\"},</p>\n        <p>{\"Name\":\"Chop-suey Chinese\",\"City\":\"Bern\",\"Country\":\"Switzerland\"},</p>\n        <p>{\"Name\":\"Comércio Mineiro\",\"City\":\"São Paulo\",\"Country\":\"Brazil\"}</p>\n        <p>]</p>\n        <p>}</p>\n        <p>EOT;</p>\n        <p>?&gt;</p>\n    </div>\n</div>\n<hr>\n <h2>使用 CSS 样式</h2> \n<p>为了让页面更加美观，我们可以在页面中使用CSS：</p>\n<div class=\"example\">\n     <h2 class=\"example\">CSS 样式</h2> \n    <div class=\"example_code\">&lt;style&gt;\n        <br>table, th , td {\n        <br>  border: 1px solid grey;\n        <br>  border-collapse: collapse;\n        <br>  padding: 5px;\n        <br>}\n        <br>table tr:nth-child(odd) {\n        <br>  background-color: #f1f1f1;\n        <br>}\n        <br>table tr:nth-child(even) {\n        <br>  background-color: #ffffff;\n        <br>}\n        <br>&lt;/style&gt;</div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_tables_css\" target=\"_blank\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>使用 orderBy 过滤器<br></h2> \n<p>排序显示，我们可以使用 <strong>orderBy</strong> 过滤器: </p>\n<div class=\"example\">\n     <h2 class=\"example\">AngularJS 实例</h2> \n    <div class=\"example_code\">&lt;table&gt;\n        <br>  &lt;tr ng-repeat=\"x in names | orderBy : 'Country'\"&gt;\n        <br>    &lt;td&gt;{{ x.Name }}&lt;/td&gt;\n        <br>    &lt;td&gt;{{ x.Country }}&lt;/td&gt;\n        <br>  &lt;/tr&gt;\n        <br>&lt;/table&gt;</div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_tables_orderby\" target=\"_blank\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>使用 uppercase 过滤器</h2> \n<p>如果字母要转换为大写，可以添加 <strong>uppercase</strong> 过滤器: </p>\n<div class=\"example\">\n     <h2 class=\"example\">AngularJS 实例</h2> \n    <div class=\"example_code\">&lt;table&gt;\n        <br>  &lt;tr ng-repeat=\"x in names\"&gt;\n        <br>    &lt;td&gt;{{ x.Name }}&lt;/td&gt;\n        <br>    &lt;td&gt;{{ x.Country | uppercase}}&lt;/td&gt;\n        <br>  &lt;/tr&gt;\n        <br>&lt;/table&gt;</div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_tables_ucase\" target=\"_blank\">尝试一下 »</a>\n\n</div>\n\n<h2>显示序号 ($index)</h2>\n\n<p>表格显示序号可以在 &lt;td&gt; 中添加 $index:<span>​</span>\n\n</p><div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">\n        <p>&lt;table&gt;</p>\n        <p>  &lt;tr ng-repeat=\"x in names\"&gt;</p>\n        <p>    &lt;td&gt;{{ $index + 1 }}&lt;/td&gt;</p>\n        <p>    &lt;td&gt;{{ x.Name }}&lt;/td&gt;</p>\n        <p>    &lt;td&gt;{{ x.Country }}&lt;/td&gt;</p>\n        <p>  &lt;/tr&gt;</p>\n        <p>&lt;/table&gt;</p>\n    </div>\n    <br></div>\r\n<div style=\"clear:both\"></div>\n</div>\n<!--控制本地字体主题样式-->\n<script type=\"text/javascript\">\nvar tempFontsize = $.cookie(\"fontsize\");\nif (tempFontsize != undefined) {\n$(\"#pro-mian\").addClass(tempFontsize);\n}\n</script>\n<!--我要赞赏-->\n<div class=\"project-sq\"></div>\n<!--我要赞赏结束-->\n<!--我要评价-->\r\n<div id=\"evaluate-box\"><span id=\"evaluates\">以上内容是否对您有帮助：</span><span class=\"star_score\"></span></div>\r\n<div id=\"evaluatesContent\" style=\"display: none;\">\r\n<div id=\"evaluate_title\">在文档使用的过程中是否遇到以下问题：</div>\r\n<ul>\r\n<li><input type=\"checkbox\" value=\"内容错误\" class=\"evaluateSelect\"><span class=\"content_1\">内容错误</span></li>\r\n<li><input type=\"checkbox\" value=\"更新不及时\" class=\"evaluateSelect\"><span class=\"content_1\">更新不及时</span></li>\r\n<li><input type=\"checkbox\" value=\"链接错误\" class=\"evaluateSelect\"><span class=\"content_1\">链接错误</span></li>\r\n<li><input type=\"checkbox\" value=\"缺少代码/图片示列\" class=\"evaluateSelect\"><span class=\"content_1\">缺少代码/图片示列</span></li>\r\n<li><input type=\"checkbox\" value=\"太简单/步骤待完善\" class=\"evaluateSelect\"><span class=\"content_1\">太简单/步骤待完善</span></li>\r\n<li><input type=\"checkbox\" value=\"其他\" class=\"evaluateSelect\"><span><span class=\"content_1\">其他</span></span></li>\r\n</ul>\r\n<div class=\"comment-box\" id=\"\">\r\n<p style=\"color:#686868; margin-bottom: 15px;\">更多建议：</p>\r\n<textarea class=\"comment-txt form-input\" placeholder=\"请详细描述在文档使用中遇到的问题或改进建议\" id=\"otheradvise\"></textarea>\r\n<div class=\"comment-box-btn\">\r\n<a href=\"javascript:;\" class=\"comment-btn\" onclick=\"submitEvaluate()\" data-score=\"1\" id=\"submitEvaluate\">提交建议</a>\r\n</div>\r\n</div>\r\n</div>\n<!--评价结束-->\n<div class=\"content-links\">\n<div class=\"previous-link\">← <a href=\"/angularjs/angularjs-select.html\" title=\"上一篇：AngularJS Select(选择框)\">AngularJS Select(选择框)</a></div>\n<div class=\"next-link\"><a href=\"/angularjs/angularjs-sql.html\" title=\"下一篇：AngularJS SQL\">AngularJS SQL</a> →</div>\n</div>\n<!--练习、出题、写笔记-->\n<div class=\"project-operation\">\n<div class=\"pull-right\">\n<a href=\"javascript:;\" class=\"op-btn note-btn\" onclick=\"openNote()\"><i class=\"icon-pencil\"></i>写笔记</a>\n</div>\n</div>\n<!--横版广告放置-->\n<div class=\"abox-item\"><div class=\"abox-content\"><a href=\"https://m.w3cschool.cn/edonedownload?fcode=abox_workview1\" target=\"_blank\"><img src=\"https://atts.w3cschool.cn/attachments/image/20210301/1614585948175317.png\" width=\"100%/\" alt=\"\"></a>    </div></div> \n<!-- 笔记列表 -->\n<div class=\"notelist-box\" style=\"display:none\">\n<div class=\"notelist-head\" onclick=\"openNoteList(this)\">\r\n<span class=\"notelist-title\">精选笔记</span>\r\n<i class=\"icon-circle-arrow-up\"></i>\r\n</div>\r\n<div class=\"notelist-content\" id=\"notelist_content\" style=\"display: none;\">\r\n</div>\n</div>\n<!--相关推荐|wiki推荐-->\r\n<div class=\"maylike\">\n<h2 class=\"project-maylike-info\">您可能还喜欢：</h2>\n<ul class=\"project-maylike-ul\">\n<li><a href=\"/angularjs/ng-ng-repeat.html\" title=\"AngularJS ng-repeat 指令\">AngularJS ng-repeat 指令</a></li>\r\n<li><a href=\"/angularjs/ng-ng-selected.html\" title=\"AngularJS ng-selected 指令\">AngularJS ng-selected 指令</a></li>\r\n<li><a href=\"/angularjs/ng-ng-switch.html\" title=\"AngularJS ng-switch 指令\">AngularJS ng-switch 指令</a></li>\r\n<li><a href=\"/angularjs/ng-ng-paste.html\" title=\"AngularJS ng-paste 指令\">AngularJS ng-paste 指令</a></li>\r\n<li><a href=\"/angularjs/ng-ng-value.html\" title=\"AngularJS ng-value 指令\">AngularJS ng-value 指令</a></li>\r\n<li><a href=\"/angularjs/ng-ng-readonly.html\" title=\"AngularJS ng-readonly 指令\">AngularJS ng-readonly 指令</a></li>\r\n<li><a href=\"/angularjs/ng-ng-style.html\" title=\"AngularJS ng-style 指令\">AngularJS ng-style 指令</a></li>\r\n<li><a href=\"/angularjs/ng-ng-open.html\" title=\"AngularJS ng-open 指令\">AngularJS ng-open 指令</a></li>\r\n<li><a href=\"/angularjs/ng-ng-submit.html\" title=\"AngularJS ng-submit 指令\">AngularJS ng-submit 指令</a></li>\r\n<li><a href=\"/angularjs/ng-ng-options.html\" title=\"AngularJS ng-options 指令\">AngularJS ng-options 指令</a></li>\r\n</ul>\n</div>\n<!--相关推荐|wiki推荐 结束-->\n</div>"
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 10,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "AngularJS 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "9a0564e0dbb06dc63718ec147b0b8fad",
      "chapter_level_two_parent_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_two_name": "AngularJS Select(选择框)",
      "chapter_level_two_url": "/angularjs/angularjs-select.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><div class=\"article-body\"><div class=\"article-intro\" id=\"content\"><h2>AngularJS Select(选择框)</h2><p>本节介绍 AngularJS Select(选择框)如何使用。</p><p class=\"intro\">AngularJS 可以使用数组或对象创建一个下拉列表选项。</p><hr><h2>使用 ng-options 创建选择框</h2><p>在 AngularJS 中我们可以使用 <strong>ng-options</strong> 指令来创建一个下拉列表，列表项通过对象和数组循环输出，如下实例:</p><div class=\"example\"><h3>实例</h3><div class=\"example_code\"><div class=\"htmlHigh\"><span class=\"highLT\">&lt;</span><span class=\"highELE\">div</span> <span class=\"highATT\">ng-app=</span><span class=\"highVAL\">\"myApp\"</span> <span class=\"highATT\">ng-controller=</span><span class=\"highVAL\">\"myCtrl\"</span><span class=\"highGT\">&gt;</span><br><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">select</span> <span class=\"highATT\">ng-model=</span><span class=\"highVAL\">\"selectedName\"</span> <span class=\"highATT\">ng-options=</span><span class=\"highVAL\">\"x for x in names\"</span><span class=\"highGT\">&gt;</span><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">/select</span><span class=\"highGT\">&gt;</span><br><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">/div</span><span class=\"highGT\">&gt;</span><br><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">script</span><span class=\"highGT\">&gt;</span><br></div><div class=\"jsHigh\">    <span class=\"highELE\">var</span> app = angular.module(<span class=\"highVAL\">'myApp'</span>, []);<br>app.controller(<span class=\"highVAL\">'myCtrl'</span>, <span class=\"highELE\">function</span>($scope) {<br>    $scope.names = [<span class=\"highVAL\">\"Google\"</span>, <span class=\"highVAL\">\"W3Cschool\"</span>, <span class=\"highVAL\">\"Taobao\"</span>];<br>});<br></div><div class=\"htmlHigh\"><span class=\"highLT\">&lt;</span><span class=\"highELE\">/script</span><span class=\"highGT\">&gt;</span></div></div><br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_select\" target=\"_blank\">尝试一下 »</a></div><hr><h2>ng-options 与 ng-repeat</h2><p>我们也可以使用<strong>ng-repeat</strong> 指令来创建下拉列表：</p><div class=\"example\"><h3>实例</h3><div class=\"example_code\"><div class=\"htmlHigh\"><span class=\"highLT\">&lt;</span><span class=\"highELE\">select</span><span class=\"highGT\">&gt;</span><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">option</span> <span class=\"highATT\">ng-repeat=</span><span class=\"highVAL\">\"x in names\"</span><span class=\"highGT\">&gt;</span><span class=\"highATT\">{{x}}</span><span class=\"highLT\">&lt;</span><span class=\"highELE\">/option</span><span class=\"highGT\">&gt;</span><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">/select</span><span class=\"highGT\">&gt;</span></div></div><br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_select_repeat\" target=\"_blank\">尝试一下 »</a></div><p><strong>ng-repeat</strong> 指令是通过数组来循环 HTML 代码来创建下拉列表，但 <strong>ng-options</strong> 指令更适合创建下拉列表，它有以下优势：</p><p>使用 <strong>ng-options</strong> 的选项的一个对象， <strong>ng-repeat</strong> 是一个字符串。</p><hr><h2>应该用哪个更好?</h2><p>假设我们使用以下对象:</p><pre>$scope.sites = [\n    {site : \"Google\", url : \"http://www.google.com\"},\n    {site : \"W3CSchool\", url : \"http://www.w3cschool.cn\"},\n    {site : \"Taobao\", url : \"http://www.taobao.com\"}\n];\n</pre><p><strong>ng-repeat</strong> 有局限性，选择的值是一个字符串:</p><div class=\"example\"><h3>实例</h3><p>使用 <strong>ng-repeat</strong>:</p><div class=\"example_code\"><div class=\"htmlHigh\"><span class=\"highLT\">&lt;</span><span class=\"highELE\">select</span> <span class=\"highATT\">ng-model=</span><span class=\"highVAL\">\"selectedSite\"</span><span class=\"highGT\">&gt;</span><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">option</span> <span class=\"highATT\">ng-repeat=</span><span class=\"highVAL\">\"x in sites\"</span> <span class=\"highATT\">value=</span><span class=\"highVAL\">\"{{x.url}}\"</span><span class=\"highGT\">&gt;</span><span class=\"highATT\">{{x.site}}</span><span class=\"highLT\">&lt;</span><span class=\"highELE\">/option</span><span class=\"highGT\">&gt;</span><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">/select</span><span class=\"highGT\">&gt;</span><br><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">h1</span><span class=\"highGT\">&gt;</span>你选择的是: <span class=\"highATT\">{{selectedSite}}</span><span class=\"highLT\">&lt;</span><span class=\"highELE\">/h1</span><span class=\"highGT\">&gt;</span></div></div><br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_select_repeat_selected\" target=\"_blank\">尝试一下 »</a></div><p>使用 <strong>ng-options</strong> 指令，选择的值是一个对象：</p><div class=\"example\"><h3>实例</h3><p>使用 <strong>ng-options</strong>:</p><div class=\"example_code\"><div class=\"htmlHigh\"><span class=\"highLT\">&lt;</span><span class=\"highELE\">select</span> <span class=\"highATT\">ng-model=</span><span class=\"highVAL\">\"selectedSite\"</span> <span class=\"highATT\">ng-options=</span><span class=\"highVAL\">\"x.site for x in sites\"</span><span class=\"highGT\">&gt;</span><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">/select</span><span class=\"highGT\">&gt;</span><br><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">h1</span><span class=\"highGT\">&gt;</span>你选择的是: <span class=\"highATT\">{{selectedSite.site}}</span><span class=\"highLT\">&lt;</span><span class=\"highELE\">/h1</span><span class=\"highGT\">&gt;</span><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">p</span><span class=\"highGT\">&gt;</span>网址为: <span class=\"highATT\">{{selectedSite.url}}</span><span class=\"highLT\">&lt;</span><span class=\"highELE\">/p</span><span class=\"highGT\">&gt;</span></div></div><br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_select_selected\" target=\"_blank\">尝试一下 »</a></div><p>当选择值是一个对象时，我们就可以获取更多信息，应用也更灵活。</p><hr><h2>数据源为对象</h2><p>前面实例我们使用了数组作为数据源，以下我们将数据对象作为数据源。</p><pre>$scope.sites = {\n    site01 : \"Google\",\n    site02 : \"W3CSchool\",\n    site03 : \"Taobao\"\n};\n</pre><p><strong>ng-options</strong> 使用对象有很大的不同，如下所示：</p><div class=\"example\"><h3>实例</h3><p>使用对象作为数据源, <strong>x</strong> 为键(key),<strong>y</strong> 为值(value):</p><div class=\"example_code\"><div class=\"htmlHigh\"><span class=\"highLT\">&lt;</span><span class=\"highELE\">select</span> <span class=\"highATT\">ng-model=</span><span class=\"highVAL\">\"selectedSite\"</span> <span class=\"highATT\">ng-options=</span><span class=\"highVAL\">\"<strong>x for (x, y) in sites</strong>\"</span><span class=\"highGT\">&gt;</span><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">/select</span><span class=\"highGT\">&gt;</span><br><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">h1</span><span class=\"highGT\">&gt;</span>你选择的值是: <span class=\"highATT\">{{selectedSite}}</span><span class=\"highLT\">&lt;</span><span class=\"highELE\">/h1</span><span class=\"highGT\">&gt;</span><br></div></div><br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_select_object\" target=\"_blank\">尝试一下 »</a></div><p>你选择的值为在 key-<strong>value</strong> 对中的 <strong>value</strong>。</p><p><strong>value</strong> 在 key-<strong>value</strong> 对中也可以是个对象：</p><div class=\"example\"><h3>实例</h3><p>选择的值在 key-<strong>value</strong> 对的 <strong>value</strong> 中, 这是它是一个对象:</p><div class=\"example_code\"><div class=\"jsHigh\">$scope.cars = {<br>car01 : {brand : <span class=\"highVAL\">\"Ford\"</span>, model : <span class=\"highVAL\">\"Mustang\"</span>, color : <span class=\"highVAL\">\"red\"</span>},<br>car02 : {brand : <span class=\"highVAL\">\"Fiat\"</span>, model : <span class=\"highVAL\">\"500\"</span>, color : <span class=\"highVAL\">\"white\"</span>},<br>car03 : {brand : <span class=\"highVAL\">\"Volvo\"</span>, model : <span class=\"highVAL\">\"XC90\"</span>, color : <span class=\"highVAL\">\"black\"</span>}<br>};<br></div></div><br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_select_object_object\" target=\"_blank\">尝试一下 »</a></div><p>在下拉菜单也可以不使用<strong>key</strong>-value 对中的  <strong>key</strong> , 直接使用对象的属性：</p><div class=\"example\"><h3>实例</h3><div class=\"example_code\"><div class=\"htmlHigh\"><span class=\"highLT\">&lt;</span><span class=\"highELE\">select</span> <span class=\"highATT\">ng-model=</span><span class=\"highVAL\">\"selectedCar\"</span> <span class=\"highATT\">ng-options=</span><span class=\"highVAL\">\"<strong>y.brand</strong> for (x, y) in sites\"</span><span class=\"highGT\">&gt;</span><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">/select</span><span class=\"highGT\">&gt;</span><br></div></div><br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_select_object_y\" target=\"_blank\">尝试一下 »</a></div></div></div></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 9,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "AngularJS 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "d5fea3c4969576ea22bbecf62200df32",
      "chapter_level_two_parent_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_two_name": "AngularJS Http",
      "chapter_level_two_url": "/angularjs/angularjs-http.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>AngularJS <span class=\"color_h1\">XMLHttpRequest</span> </h2><p><span class=\"color_h1\">     我们可以使用 </span>AngularJS 内置的 $http 服务直接同外部进行通信。</p><p>$http 服务只是简单的封装了浏览器原生的 XMLHttpRequest 对象。</p> <hr> <p class=\"intro\"><strong>$http</strong> 是 AngularJS 中的一个核心服务，用于读取远程服务器的数据。</p> <hr> <h2>读取 JSON 文件 </h2> <p>以下是存储在web服务器上的 JSON 文件：</p> <div class=\"example\"><h2 class=\"example\">Customers_JSON.php</h2> <div class=\"example_code\"> {\"records\":[<br>{<br>\"Name\" : \"Alfreds Futterkiste\",<br>\"City\" : \"Berlin\",<br> \"Country\" : \"Germany\"<br>},<br>{<br>\"Name\" : \"Berglunds snabbköp\",<br>\"City\" : \"Luleå\",<br>\"Country\" : \"Sweden\"<br>},<br>{<br>\"Name\" : \"Centro comercial Moctezuma\",<br>\"City\" : \"México D.F.\",<br>\"Country\" : \"Mexico\"<br>},<br>{<br> \"Name\" : \"Ernst Handel\",<br>\"City\" : \"Graz\",<br>\"Country\" : \"Austria\"<br>},<br> {<br>\"Name\" : \"FISSA Fabrica Inter. Salchichas S.A.\",<br>\"City\" : \"Madrid\",<br> \"Country\" : \"Spain\"<br>},<br>{<br>\"Name\" : \"Galería del gastrónomo\",<br> \"City\" : \"Barcelona\",<br>\"Country\" : \"Spain\"<br>},<br>{<br>\"Name\" : \"Island Trading\",<br>\"City\" : \"Cowes\",<br>\"Country\" : \"UK\"<br>},<br>{<br>\"Name\" : \"Königlich Essen\",<br>\"City\" : \"Brandenburg\",<br>\"Country\" : \"Germany\"<br>},<br>{<br> \"Name\" : \"Laughing Bacchus Wine Cellars\",<br>\"City\" : \"Vancouver\",<br> \"Country\" : \"Canada\"<br>},<br>{<br>\"Name\" : \"Magazzini Alimentari Riuniti\",<br> \"City\" : \"Bergamo\",<br>\"Country\" : \"Italy\"<br>},<br>{<br>\"Name\" : \"North/South\",<br>\"City\" : \"London\",<br>\"Country\" : \"UK\"<br>},<br>{<br> \"Name\" : \"Paris spécialités\",<br>\"City\" : \"Paris\",<br>\"Country\" : \"France\"<br> },<br>{<br>\"Name\" : \"Rattlesnake Canyon Grocery\",<br>\"City\" : \"Albuquerque\",<br> \"Country\" : \"USA\"<br>},<br>{<br>\"Name\" : \"Simons bistro\",<br>\"City\" : \"København\",<br> \"Country\" : \"Denmark\"<br>},<br>{<br>\"Name\" : \"The Big Cheese\",<br>\"City\" : \"Portland\",<br>\"Country\" : \"USA\"<br>},<br>{<br>\"Name\" : \"Vaffeljernet\",<br> \"City\" : \"Århus\",<br>\"Country\" : \"Denmark\"<br>},<br>{<br>\"Name\" : \"Wolski Zajazd\",<br>\"City\" : \"Warszawa\",<br>\"Country\" : \"Poland\"<br>}<br>]}<br> </div> </div> <br><hr> <h2>AngularJS $http</h2> <p>AngularJS $http 是一个用于读取web服务器上数据的服务。 </p> <p>$http.get(url) 是用于读取服务器数据的函数。 </p> <div class=\"example\"> <h2 class=\"example\">AngularJS 实例</h2> <div class=\"example_code\"> &lt;div ng-app=\"\" ng-controller=\"customersController\"&gt; <br><br>&lt;ul&gt;<br>  &lt;li ng-repeat=\"x in names\"&gt;<br>    {{ x.Name + ', ' + x.Country }}<br>  &lt;/li&gt;<br> &lt;/ul&gt;<br><br>&lt;/div&gt;<br><br>&lt;script&gt;<br>function customersController($scope,$http) {<br>    $http.get(\"/statics/demosource/Customers_JSON.php\")<br>    .success(function(response) {$scope.names = response;});<br>}<br>&lt;/script&gt; </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_customers_json\" target=\"_blank\"> 尝试一下 »</a> </div> <p>应用解析:</p> <p> AngularJS 应用通过 <strong>ng-app</strong> 定义。应用在 &lt;div&gt; 中执行。</p> <p> <strong>ng-controller</strong> 指令设置了 <strong>controller 对象</strong> 名。</p> <p>函数 <strong>customersController</strong> 是一个标准的 JavaScript <strong> 对象构造器</strong>。</p> <p>控制器对象有一个属性: <strong>$scope.names</strong>。</p> <p><strong>$http.get()</strong> 从web服务器上读取静态 <strong>JSON 数据</strong>。 </p> <p>服务器数据文件为：  <a href=\"/statics/demosource/Customers_JSON.php\" target=\"_blank\"><strong> /statics/demosource/Customers_JSON.php</strong></a>。</p> <p>当从服务端载入 JSON 数据时，<strong>$scope.names</strong> 变为一个数组。</p>  <table class=\"lamp    \"><tbody><tr> <th style=\"width:34px\"><img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" alt=\"Note\" style=\"height:32px;width:32px\"></th> <td>以上代码也可以用于读取数据库数据。</td></tr></tbody></table></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 8,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "AngularJS 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "5d03567388d4eb108ae3bf09799650cc",
      "chapter_level_two_parent_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_two_name": "AngularJS 服务(Service)",
      "chapter_level_two_url": "/angularjs/angularjs-services.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><div class=\"article-body\">\n\t\t\n\t\t\t<div class=\"article-intro\" id=\"content\">\n\t\t\t\n\t\t\t<h2>AngularJS 服务(Service)</h2><p>AngularJS 中的服务是一个函数或对象。<br></p>\n<p class=\"intro\">\nAngularJS 中你可以创建自己的服务，或使用内建服务。</p>\n<hr>\n<h2>什么是服务？</h2>\n\n<p>在 AngularJS 中，服务是一个函数或对象，可在你的 AngularJS 应用中使用。</p>\n<p>AngularJS 内建了30 多个服务。</p>\n<p>有个 <b>$location</b> 服务，它可以返回当前页面的 URL 地址。</p>\n\n<div class=\"example\">\n<h3>实例</h3>\n<div class=\"example_code\">\n\n\t<span class=\"highELE\">var</span> app = angular.module(<span class=\"highVAL\">'myApp'</span>, []);<br>app.controller(<span class=\"highVAL\">'customersCtrl'</span>, \n\t<span class=\"highELE\">function</span>($scope, $location) {<br>    $scope.myUrl = $location.absUrl();<br>\n\t});\n</div><br>\n<a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_services\" target=\"_blank\">尝试一下 »</a>\n</div>\n<p>注意 <b>$location</b> 服务是作为一个参数传递到 controller \n中。如果要使用它，需要在 controller 中定义。</p>\n<hr>\n<h2>为什么使用服务?</h2>\n<p><b>$http</b> 是 AngularJS 应用中最常用的服务。服务向服务器发送请求，应用响应服务器传送过来的数据。</p>\n<p>AngularJS 会一直监控应用，处理事件变化， AngularJS 使用 <b>$location</b> \n服务比使用 <b>window.location</b> 对象更好。</p>\n<hr>\n<h2>$http 服务</h2>\n<p><b>$http</b> 是 AngularJS 应用中最常用的服务。 服务向服务器发送请求，应用响应服务器传送过来的数据。</p>\n<div class=\"example\">\n<h3>实例</h3>\n\n<p>使用 <b>$http</b> 服务向服务器请求数据:</p>\n<div class=\"example_code\">\n\t<span class=\"highELE\">var</span> app = angular.module(<span class=\"highVAL\">'myApp'</span>, []);<br>app.controller(<span class=\"highVAL\">'myCtrl'</span>, \n\t<span class=\"highELE\">function</span>($scope, $http) {<br>    $http.get(<span class=\"highVAL\">\"welcome.htm\"</span>).then(<span class=\"highELE\">function</span> \n\t(response) {<br>        $scope.myWelcome \n\t= response.data;<br>    });<br>});</div><br>\n<a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_services_http\" target=\"_blank\">尝试一下 »</a>\n\n</div>\n<p>以上是一个非常简单的 <b>$http</b> 服务实例，更多 <b>$http</b> 服务应用请查看 <a href=\"angularjs-http.html\">AngularJS Http \n教程</a>。</p>\n<hr>\n<h2>$timeout 服务</h2>\n<p>AngularJS <b>$timeout</b> 服务对应了 JS <b>\nwindow.setTimeout</b> 函数。</p>\n<div class=\"example\">\n<h3>实例</h3>\n<p>两秒后显示信息:</p>\n<div class=\"example_code\">\n\t<span class=\"highELE\">var</span> app = angular.module(<span class=\"highVAL\">'myApp'</span>, []);<br>app.controller(<span class=\"highVAL\">'myCtrl'</span>, \n\t<span class=\"highELE\">function</span>($scope, $timeout) {<br>    $scope.myHeader = <span class=\"highVAL\">\"Hello \n\tWorld!\"</span>;<br>    $timeout(<span class=\"highELE\">function</span> () {<br>        \n\t$scope.myHeader = <span class=\"highVAL\">\"How are you today?\"</span>;<br>    }, <span class=\"highVAL\">2000</span>);<br>\n\t});<br></div><br>\n<a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_services_timeout\" target=\"_blank\">尝试一下 »</a>\n\n</div>\n<hr>\n<h2>$interval 服务</h2>\n<p>AngularJS <b>$interval</b> 服务对应了 JS <b>window.setInterval</b> 函数。</p>\n<div class=\"example\">\n<h3>实例</h3>\n<p>每一秒显示信息:</p>\n<div class=\"example_code\">\n\t<span class=\"highELE\">var</span> app = angular.module(<span class=\"highVAL\">'myApp'</span>, []);<br>app.controller(<span class=\"highVAL\">'myCtrl'</span>, \n\t<span class=\"highELE\">function</span>($scope, $interval) {<br>    $scope.theTime = <span class=\"highELE\">new</span> \n\tDate().toLocaleTimeString();<br>    $interval(<span class=\"highELE\">function</span> () {<br>        \n\t$scope.theTime = <span class=\"highELE\">new</span> Date().toLocaleTimeString();<br>    }, \n\t<span class=\"highVAL\">1000</span>);<br>});<br></div><br>\n<a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_services_interval\" target=\"_blank\">尝试一下 »</a>\n\n\n</div>\n<hr>\n<h2>创建自定义服务</h2>\n<p>\n你可以创建自定义的访问，链接到你的模块中：</p>\n<div class=\"example\">\n\n<p>创建名为<b>hexafy</b> 的访问:</p>\n<div class=\"example_code\">\n\tapp.service(<span class=\"highVAL\">'hexafy'</span>, <span class=\"highELE\">function</span>() {<br>    this.myFunc = <span class=\"highELE\">function</span> (x) {<br>        \n\t<span class=\"highELE\">return</span> x.toString(<span class=\"highVAL\">16</span>);<br>    }<br>});<br></div>\n</div><p>要使用自定义的访问，需要在定义过滤器的时候独立添加:\n</p>\n<div class=\"example\">\n<h3>实例</h3>\n\t<p>使用自定义的的服务 <b>hexafy</b> 将一个数字转换为16进制数:</p>\n<div class=\"example_code\">\n<div class=\"jsHigh\">\n\tapp.controller(<span class=\"highVAL\">'myCtrl'</span>, <span class=\"highELE\">function</span>($scope, <strong>hexafy</strong>) {<br>    $scope.hex \n\t= <strong>hexafy</strong>.myFunc(<span class=\"highVAL\">255</span>);<br>});</div>\n</div><br>\n<a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_services_custom\" target=\"_blank\">尝试一下 »</a>\n</div>\n<hr>\n<h2>过滤器中，使用自定义服务</h2>\n<p>当你创建了自定义服务，并连接到你的应用上后，你可以在控制器，指令，过滤器或其他服务中使用它。</p>\n<div class=\"example\">\n<p>在过滤器 <b>myFormat</b> 中使用服务 <b>hexafy</b>:</p>\n<div class=\"example_code\">\n\tapp.filter(<span class=\"highVAL\">'myFormat'</span>,[<strong>'hexify'</strong>, <span class=\"highELE\">function</span>(<strong>hexify</strong>) {<br>    \n\t<span class=\"highELE\">return</span> <span class=\"highELE\">function</span>(x) {<br>        <span class=\"highELE\">return</span> \n\t<strong>hexify</strong>.myFunc(x);<br>    };<br>}]);<br></div><br>\n<a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_services_filter\" target=\"_blank\">尝试一下 »</a>\n</div>\n<p>在对象数组中获取值时你可以使用过滤器：</p>\n<div class=\"example\">\n\n<p>创建服务 <b>hexafy</b>:</p>\n<div class=\"example_code\">\n\t<span class=\"highLT\">&lt;</span><span class=\"highELE\">ul</span><span class=\"highGT\">&gt;</span><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">li</span> <span class=\"highATT\">ng-repeat=</span><span class=\"highVAL\">\"x in counts\"</span><span class=\"highGT\">&gt;</span><span class=\"highATT\">{{x | myFormat}}</span><span class=\"highLT\">&lt;</span><span class=\"highELE\">/li</span><span class=\"highGT\">&gt;</span><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">/ul</span><span class=\"highGT\">&gt;</span><br></div><br>\n<a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_services_filter2\" target=\"_blank\">尝试一下 »</a></div></div></div><h2>相关文章</h2><p><a href=\"https://www.w3cschool.cn/angularjs/angularjs-filters.html\" target=\"_blank\">AngularJS 过滤器</a></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 7,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "AngularJS 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "c0bce46a32843a44d82d5aab4f162bd6",
      "chapter_level_two_parent_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_two_name": "AngularJS 过滤器",
      "chapter_level_two_url": "/angularjs/angularjs-filters.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>AngularJS <span class=\"color_h1\">过滤器</span> </h2>\n\n<div><span class=\"color_h1\">AngularJS 过滤器可以用来格式化数据，过滤器能够用在表达式和指令中。<br></span>\n\n</div>\n<hr>\n<p class=\"intro\">过滤器可以使用一个管道字符（|）添加到表达式和指令中。</p>\n<hr>\n <h2>AngularJS 过滤器</h2> \n<p>AngularJS 过滤器可用于转换数据：</p>\n<table class=\"reference\">\n    <tbody>\n        <tr>\n            <th style=\"width:20%\">过滤器</th>\n            <th>描述</th>\n        </tr>\n        <tr>\n            <td>currency</td>\n            <td>格式化数字为货币格式。</td>\n        </tr>\n        <tr>\n            <td>filter</td>\n            <td>从数组项中选择一个子集。</td>\n        </tr>\n        <tr>\n            <td>lowercase</td>\n            <td>格式化字符串为小写。</td>\n        </tr>\n        <tr>\n            <td>orderBy</td>\n            <td>根据某个表达式排列数组。</td>\n        </tr>\n        <tr>\n            <td>uppercase</td>\n            <td>格式化字符串为大写。</td>\n        </tr>\n    </tbody>\n</table>\n<br>\n<hr>\n <h2 id=\"uppercase\">向表达式添加过滤器</h2> \n<p>过滤器可以通过一个管道字符（|）和一个过滤器添加到表达式中。</p>\n<p>（下面的两个实例，我们将使用前面章节中提到的 person 控制器）</p>\n<p><strong>uppercase</strong> 过滤器格式化字符串为大写：</p>\n<div class=\"example\">\n     <h2 class=\"example\">AngularJS 实例</h2> \n    <div class=\"example_code notranslate htmlHigh\">\n        <div><span>&lt;</span><span>div</span>  <span>ng-app=</span><span>\"myApp\"</span>  <span>ng-controller=</span><span>\"personCtrl\"</span><span>&gt;</span>\n\n            <br>\n            <br><span>&lt;</span><span>p</span><span>&gt;</span>姓名为 <span>{{ lastName | uppercase }}</span><span>&lt;</span><span>/p</span><span>&gt;</span>\n\n            <br>\n            <br><span>&lt;</span><span>/div</span><span>&gt;</span>\n\n        </div>\n    </div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_filters_uppercase\" target=\"_blank\">尝试一下 »</a> \n</div>\n<p><strong>lowercase</strong> 过滤器格式化字符串为小写：</p>\n<div class=\"example\">\n     <h2 class=\"example\">AngularJS 实例</h2> \n    <div class=\"example_code notranslate htmlHigh\">\n        <div><span>&lt;</span><span>div</span>  <span>ng-app=</span><span>\"myApp\"</span>  <span>ng-controller=</span><span>\"personCtrl\"</span><span>&gt;</span>\n\n            <br>\n            <br><span>&lt;</span><span>p</span><span>&gt;</span>姓名为 <span>{{ lastName | lowercase }}</span><span>&lt;</span><span>/p</span><span>&gt;</span>\n\n            <br>\n            <br><span>&lt;</span><span>/div</span><span>&gt;</span>\n\n        </div>\n    </div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_filters_lowercase\" target=\"_blank\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2 id=\"currency 过滤器\">currency 过滤器</h2> \n<p><strong>currency</strong> 过滤器格式化数字为货币格式：</p>\n<div class=\"example\">\n     <h2 class=\"example\">AngularJS 实例</h2> \n    <div class=\"example_code notranslate htmlHigh\">\n        <div><span>&lt;</span><span>div</span>  <span>ng-app=</span><span>\"myApp\"</span>  <span>ng-controller=</span><span>\"costCtrl\"</span><span>&gt;</span>\n\n            <br>\n            <br><span>&lt;</span><span>input</span>  <span>type=</span><span>\"number\"</span>  <span>ng-model=</span><span>\"quantity\"</span><span>&gt;</span>\n\n            <br><span>&lt;</span><span>input</span>  <span>type=</span><span>\"number\"</span>  <span>ng-model=</span><span>\"price\"</span><span>&gt;</span>\n\n            <br>\n            <br><span>&lt;</span><span>p</span><span>&gt;</span>总价 = <span>{{ (quantity * price) | currency }}</span><span>&lt;</span><span>/p</span><span>&gt;</span>\n\n            <br>\n            <br><span>&lt;</span><span>/div</span><span>&gt;</span>\n\n        </div>\n    </div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_filters_currency\" target=\"_blank\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2 id=\"orderBy\">向指令添加过滤器</h2> \n<p>过滤器可以通过一个管道字符（|）和一个过滤器添加到指令中。</p>\n<p><strong>orderBy</strong> 过滤器根据某个表达式排列数组：</p>\n<div class=\"example\">\n     <h2 class=\"example\">AngularJS 实例</h2> \n    <div class=\"example_code notranslate htmlHigh\">\n        <div><span>&lt;</span><span>div</span>  <span>ng-app=</span><span>\"myApp\"</span>  <span>ng-controller=</span><span>\"namesCtrl\"</span><span>&gt;</span>\n\n            <br>\n            <br><span>&lt;</span><span>ul</span><span>&gt;</span>\n\n            <br>  <span>&lt;</span><span>li</span>  <span>ng-repeat=</span><span>\"x in names | orderBy:'country'\"</span><span>&gt;</span>\n\n            <br>    <span>{{ x.name + ', ' + x.country }}</span>\n\n            <br>  <span>&lt;</span><span>/li</span><span>&gt;</span>\n\n            <br><span>&lt;</span><span>/ul</span><span>&gt;</span>\n\n            <br>\n            <br><span>&lt;</span><span>div</span><span>&gt;</span>\n\n        </div>\n    </div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_filters_orderby\" target=\"_blank\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2 id=\"filter\">过滤输入</h2> \n<p>输入过滤器可以通过一个管道字符（|）和一个过滤器添加到指令中，该过滤器后跟一个冒号和一个模型名称。</p>\n<p><strong>filter</strong> 过滤器从数组中选择一个子集：</p>\n<div class=\"example\">\n     <h2 class=\"example\">AngularJS 实例</h2> \n    <div class=\"example_code notranslate htmlHigh\">\n        <div><span>&lt;</span><span>div</span>  <span>ng-app=</span><span>\"myApp\"</span>  <span>ng-controller=</span><span>\"namesCtrl\"</span><span>&gt;</span>\n\n            <br>\n            <br><span>&lt;</span><span>p</span><span>&gt;</span><span>&lt;</span><span>input</span>  <span>type=</span><span>\"text\"</span>  <span>ng-model=</span><span>\"test\"</span><span>&gt;</span><span>&lt;</span><span>/p</span><span>&gt;</span>\n\n            <br>\n            <br><span>&lt;</span><span>ul</span><span>&gt;</span>\n\n            <br>  <span>&lt;</span><span>li</span>  <span>ng-repeat=</span><span>\"x in names | <span>filter:test</span> | orderBy:'country'\"</span><span>&gt;</span>\n\n            <br>    <span>{{ (x.name | uppercase) + ', ' + x.country }}</span>\n\n            <br>  <span>&lt;</span><span>/li</span><span>&gt;</span>\n\n            <br><span>&lt;</span><span>/ul</span><span>&gt;</span>\n\n            <br>\n            <br><span>&lt;</span><span>/div</span><span>&gt;</span>\n\n        </div>\n    </div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_filters_input\" target=\"_blank\">尝试一下 »</a>\n\n</div></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 6,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "AngularJS 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "8d608b937ad8e66b72f6bdcd85c4c0bc",
      "chapter_level_two_parent_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_two_name": "AngularJS 控制器",
      "chapter_level_two_url": "/angularjs/angularjs-controllers.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>AngularJS <span class=\"color_h1\">控制器</span> </h2><div><span class=\"color_h1\">AngularJS 控制器在<code>&lt;div&gt;</code>内由 <strong>ng-controller </strong>指令定义。<br></span></div> <hr> <p class=\"intro\"> AngularJS 控制器 <strong>控制</strong> AngularJS 应用程序的数据。</p> <p class=\"intro\"> AngularJS 控制器是常规的 <strong>JavaScript 对象</strong>。</p> <hr> <h2>AngularJS 控制器</h2> <p>AngularJS 应用程序被控制器控制。</p> <p><strong>ng-controller</strong> 指令定义了应用程序控制器。</p> <p>控制器是 <strong>JavaScript 对象</strong>，由标准的 JavaScript <strong>对象的构造函数</strong> 创建。</p> <div class=\"example\"> <h2 class=\"example\">AngularJS 实例</h2> <div class=\"example_code notranslate htmlHigh\"> <div><span>&lt;</span><span>div</span> <span>ng-app=</span><span>\"myApp\"</span> <span>ng-controller=</span><span>\"myCtrl\"</span><span>&gt;</span><br><br>名: <span>&lt;</span><span>input</span> <span>type=</span><span>\"text\"</span> <span>ng-model=</span><span>\"firstName\"</span><span>&gt;</span><span>&lt;</span><span>br</span><span>&gt;</span><br>姓: <span>&lt;</span><span>input</span> <span>type=</span><span>\"text\"</span> <span>ng-model=</span><span>\"lastName\"</span><span>&gt;</span><span>&lt;</span><span>br</span><span>&gt;</span><br><span>&lt;</span><span>br</span><span>&gt;</span><br>姓名: <span>{{firstName + \" \" + lastName}}</span><br><br><span>&lt;</span><span>/div</span><span>&gt;</span><br><br><span>&lt;</span><span>script</span><span>&gt;</span><br>var app = angular.module('myApp',     []);<br>app.controller('myCtrl', function($scope) {<br>    $scope.firstName     = \"John\";<br>    $scope.lastName = \"Doe\";<br>});<br><span>&lt;</span><span>/script</span><span>&gt;</span></div> </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_controller\" target=\"_blank\">尝试一下 »</a> </div> <p>应用解析：</p><p>AngularJS 应用程序由 <strong>ng-app</strong> 定义。应用程序在 &lt;div&gt; 内运行。</p><p><strong>ng-controller=\"myCtrl\"</strong> 属性是一个 AngularJS 指令。用于定义一个控制器。</p><p><strong>myCtrl</strong> 函数是一个 JavaScript 函数。</p><p>AngularJS 使用<strong>$scope</strong> 对象来调用控制器。</p><p>在 AngularJS 中， $scope 是一个应用象(属于应用变量和函数)。</p><p>控制器的 <strong>$scope</strong> （相当于作用域、控制范围）用来保存AngularJS Model(模型)的对象。</p><p>控制器在作用域中创建了两个属性(<strong>firstName</strong> 和<strong>lastName</strong>)。</p><p><strong>ng-model</strong> 指令绑定输入域到控制器的属性（firstName 和 lastName）。</p> <hr> <h2>控制器方法</h2> <p>上面的实例演示了一个带有 lastName 和 firstName 这两个属性的控制器对象。</p><p>控制器也可以有方法（变量和函数）：</p> <div class=\"example\"> <h2 class=\"example\">AngularJS 实例</h2> <div class=\"example_code notranslate htmlHigh\"> <div><span>&lt;</span><span>div</span> <span>ng-app=</span><span>\"myApp\"</span> <span>ng-controller=</span><span>\"personCtrl\"</span><span>&gt;</span><br><br>名: <span>&lt;</span><span>input</span> <span>type=</span><span>\"text\"</span> <span>ng-model=</span><span>\"firstName\"</span><span>&gt;</span><span>&lt;</span><span>br</span><span>&gt;</span><br>姓: <span>&lt;</span><span>input</span> <span>type=</span><span>\"text\"</span> <span>ng-model=</span><span>\"lastName\"</span><span>&gt;</span><span>&lt;</span><span>br</span><span>&gt;</span><br><span>&lt;</span><span>br</span><span>&gt;</span><br>姓名: <span>{{fullName()}}</span><br><br><span>&lt;</span><span>/div</span><span>&gt;</span><br><br><span>&lt;</span><span>script</span><span>&gt;</span><br>var app = angular.module('myApp', []);<br>app.controller('personCtrl',  function($scope) {<br>    $scope.firstName = \"John\";<br>    $scope.lastName  = \"Doe\";<br>    $scope.fullName = function() {<br>         return $scope.firstName + \" \" + $scope.lastName;<br>    }<br>});<br><span>&lt;</span><span>/script</span><span>&gt;</span></div> </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_controller_function\" target=\"_blank\">尝试一下 »</a> </div> <br><hr> <h2>外部文件中的控制器</h2> <p>在大型的应用程序中，通常是把控制器存储在外部文件中。</p> <p>只需要把 <a href=\"https://www.w3cschool.cn/htmltags/tag-script.html\" target=\"_blank\">&lt;script&gt; 标签</a>中的代码复制到名为 <a href=\"/statics/demosource/personController.js\" target=\"_blank\">personController.js </a>的外部文件中即可：</p> <div class=\"example\"> <h2 class=\"example\">AngularJS 实例</h2> <div class=\"example_code notranslate htmlHigh\"> &lt;div ng-app=\"myApp\" ng-controller=\"personController\"&gt;<br><br>名： &lt;input type=\"text\" ng-model=\"person.firstName\"&gt;&lt;br&gt;<br> 姓： &lt;input type=\"text\" ng-model=\"person.lastName\"&gt;&lt;br&gt;<br>&lt;br&gt;<br> 姓名： {{person.firstName + \" \" + person.lastName}}<br><br>&lt;/div&gt;<br><br>&lt;script src=\"personController.js\"&gt;&lt;/script&gt; </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_controller_js\" target=\"_blank\">尝试一下 »</a> </div> <br><hr> <h2>其他实例</h2> <p>以下实例创建一个新的控制器文件:</p> <div class=\"example\"> <div class=\"example_code notranslate htmlHigh\"> angular.module('myApp', []).controller('namesCtrl',   function($scope) {<br>    $scope.names = [<br>        {name:'Jani',country:'Norway'},<br>        {name:'Hege',country:'Sweden'},<br>        {name:'Kai',country:'Denmark'}<br>    ];<br>}); <br> </div> </div> <p>保存文件为  <a href=\"/statics/demosource/namesController.js\" target=\"_blank\">namesController.js</a>:</p><p>然后，在应用中使用控制器文件:</p> <div class=\"example\"> <h2 class=\"example\">AngularJS 实例</h2> <div class=\"example_code notranslate htmlHigh\"> <div><span>&lt;</span><span>div</span> <span>ng-app=</span><span>\"myApp\"</span> <span>ng-controller=</span><span>\"namesCtrl\"</span><span>&gt;</span><br><br><span>&lt;</span><span>ul</span><span>&gt;</span><br> <span>&lt;</span><span>li</span> <span>ng-repeat=</span><span>\"x in names\"</span><span>&gt;</span><br>    <span>{{ x.name + ', ' + x.country }}</span><br>  <span>&lt;</span><span>/li</span><span>&gt;</span><br><span>&lt;</span><span>/ul</span><span>&gt;</span><br><br><span>&lt;</span><span>/div</span><span>&gt;</span><br><br><span>&lt;</span><span>script</span> <span>src=</span><span>\"namesController.js\"</span><span>&gt;</span><span>&lt;</span><span>/script</span><span>&gt;</span></div> </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_controller_names\" target=\"_blank\">尝试一下 »</a></div></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 5,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "AngularJS 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "23645951ca60488378d09c59b842b2df",
      "chapter_level_two_parent_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_two_name": "AngularJS Scope(作用域)",
      "chapter_level_two_url": "/angularjs/angularjs-scopes.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><div class=\"article-body\"><div class=\"article-intro\" id=\"content\"><h2>AngularJS <span class=\"color_h1\">Scope(作用域)</span></h2><div><span class=\"color_h1\">本节为你介绍了什么是 </span>AngularJS Scope(作用域)以及 Scope 在 AngularJS 应该如何使用。</div><hr><p class=\"intro\">Scope(作用域) 是应用在 HTML (视图) 和 JavaScript (控制器)之间的纽带。</p><p class=\"intro\">Scope 是一个对象，有可用的方法和属性。</p><p class=\"intro\">Scope 可应用在视图和控制器上。</p><hr><h2>如何使用 Scope</h2><p>当你在 AngularJS 创建控制器时，你可以将 <strong>$scope</strong> 对象当作一个参数传递:</p><div class=\"example\"><h2 class=\"example\">AngularJS 实例</h2><p>控制器中的属性对应了视图上的属性：</p><div class=\"example_code htmlHigh\"><div class=\"htmlHigh\"><span class=\"highLT\">&lt;</span><span class=\"highELE\">div</span> <span class=\"highATT\">ng-app=</span><span class=\"highVAL\">\"myApp\"</span> <span class=\"highATT\">ng-controller=</span><span class=\"highVAL\">\"myCtrl\"</span><span class=\"highGT\">&gt;</span><br><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">h1</span><span class=\"highGT\">&gt;</span><span class=\"highATT\">{{carname}}</span><span class=\"highLT\">&lt;</span><span class=\"highELE\">/h1</span><span class=\"highGT\">&gt;</span><br><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">/div</span><span class=\"highGT\">&gt;</span><br><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">script</span><span class=\"highGT\">&gt;</span><br></div><div class=\"jsHigh\"><span class=\"highELE\">var</span> app = angular.module(<span class=\"highVAL\">'myApp'</span>, []);<br><br>app.controller(<span class=\"highVAL\">'myCtrl'</span>, <span class=\"highELE\">function</span>($scope) {<br>    $scope.carname = <span class=\"highVAL\">\"Volvo\"</span>;<br>});<br></div><div class=\"htmlHigh\"><span class=\"highLT\">&lt;</span><span class=\"highELE\">/script</span><span class=\"highGT\">&gt;</span></div></div><br><a class=\"tryitbtn\" href=\"//www.w3cschool.cn/tryrun/showhtml/try_ng_scope\" target=\"_blank\">尝试一下 »</a></div><p>当在控制器中添加 <strong>$scope</strong> 对象时，视图 (HTML) 可以获取了这些属性。</p><p>视图中，你不需要添加 <strong>$scope</strong> 前缀, 只需要添加属性名即可，如： <strong>{{carname}}</strong>。</p><hr><h2>Scope 概述</h2><p>AngularJS 应用组成如下：</p><ul><li>View(视图), 即 HTML。</li><li>Model(模型), 当前视图中可用的数据。</li><li>Controller(控制器), 即 JavaScript 函数，可以添加或修改属性。</li></ul><p>scope 是模型。</p><p>scope 是一个 <a href=\"https://www.w3cschool.cn/javascript/js-objects.html\" target=\"_blank\">JavaScript 对象</a>，带有属性和方法，这些属性和方法可以在视图和控制器中使用。</p><div class=\"example\"><h2 class=\"example\">AngularJS 实例</h2><p>如果你修改了视图，模型和控制器也会相应更新：</p><div class=\"example_code htmlHigh\"><div class=\"htmlHigh\"><span class=\"highLT\">&lt;</span><span class=\"highELE\">div</span> <span class=\"highATT\">ng-app=</span><span class=\"highVAL\">\"myApp\"</span> <span class=\"highATT\">ng-controller=</span><span class=\"highVAL\">\"myCtrl\"</span><span class=\"highGT\">&gt;</span><br><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">input</span> <span class=\"highATT\">ng-model=</span><span class=\"highVAL\">\"name\"</span><span class=\"highGT\">&gt;</span><br><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">h1</span><span class=\"highGT\">&gt;</span>我的名字是 <span class=\"highATT\">{{name}}</span><span class=\"highLT\">&lt;</span><span class=\"highELE\">/h1</span><span class=\"highGT\">&gt;</span><br><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">/div</span><span class=\"highGT\">&gt;</span><br><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">script</span><span class=\"highGT\">&gt;</span><br></div><div class=\"jsHigh\"><span class=\"highELE\">var</span> app = angular.module(<span class=\"highVAL\">'myApp'</span>, []);<br><br>app.controller(<span class=\"highVAL\">'myCtrl'</span>, <span class=\"highELE\">function</span>($scope) {<br>    $scope.name = <span class=\"highVAL\">\"John Dow\"</span>;<br>});<br></div><div class=\"htmlHigh\"><span class=\"highLT\">&lt;</span><span class=\"highELE\">/script</span><span class=\"highGT\">&gt;</span></div></div><br><a class=\"tryitbtn\" href=\"//www.w3cschool.cn/tryrun/showhtml/try_ng_scope_sync\" target=\"_blank\">尝试一下 »</a></div><hr><h2>Scope 作用范围</h2><p>了解你当前使用的 scope 是非常重要的。</p><p>在以上两个实例中，只有一个作用域 scope，所以处理起来比较简单，但在大型项目中， HTML DOM 中有多个作用域，这时你就需要知道你使用的 scope 对应的作用域是哪一个。</p><div class=\"example\"><h2 class=\"example\">AngularJS 实例</h2><p>当我们使用 <strong>ng-repeat</strong> 指令时，每个重复项都访问了当前的重复对象:</p><div class=\"example_code htmlHigh\"><div class=\"htmlHigh\"><span class=\"highLT\">&lt;</span><span class=\"highELE\">div</span> <span class=\"highATT\">ng-app=</span><span class=\"highVAL\">\"myApp\"</span> <span class=\"highATT\">ng-controller=</span><span class=\"highVAL\">\"myCtrl\"</span><span class=\"highGT\">&gt;</span><br><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">ul</span><span class=\"highGT\">&gt;</span><br>    <span class=\"highLT\">&lt;</span><span class=\"highELE\">li</span> <span class=\"highATT\">ng-repeat=</span><span class=\"highVAL\">\"x in names\"</span><span class=\"highGT\">&gt;</span><span class=\"highATT\">{{x}}</span><span class=\"highLT\">&lt;</span><span class=\"highELE\">/li</span><span class=\"highLT\">&gt;</span><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">/ul</span><span class=\"highGT\">&gt;</span><br><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">/div</span><span class=\"highGT\">&gt;</span><br><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">script</span><span class=\"highGT\">&gt;</span><br></div><div class=\"jsHigh\"><span class=\"highELE\">var</span> app = angular.module(<span class=\"highVAL\">'myApp'</span>, []);<br><br>app.controller(<span class=\"highVAL\">'myCtrl'</span>, <span class=\"highELE\">function</span>($scope) {<br>    $scope.names = [<span class=\"highVAL\">\"Emil\"</span>, <span class=\"highVAL\">\"Tobias\"</span>, <span class=\"highVAL\">\"Linus\"</span>];<br>});<br></div><div class=\"htmlHigh\"><span class=\"highLT\">&lt;</span><span class=\"highELE\">/script</span><span class=\"highGT\">&gt;</span></div></div><br><a class=\"tryitbtn\" href=\"//www.w3cschool.cn/tryrun/showhtml/try_ng_scope_repeat\" target=\"_blank\">尝试一下 »</a></div><p>每个 <strong>&lt;li&gt;</strong> 元素可以访问当前的重复对象，这里对应的是一个字符串， 并使用变量 <strong>x</strong> 表示。</p><hr><h2>根作用域</h2><p>所有的应用都有一个 <strong>$rootScope</strong>，它可以作用在 <strong>ng-app</strong> 指令包含的所有 HTML 元素中。</p><p><strong>$rootScope</strong> 可作用于整个应用中。是各个 controller 中 scope 的桥梁。用 rootscope 定义的值，可以在各个 controller 中使用。</p><div class=\"example\"><h2 class=\"example\">AngularJS 实例</h2><p>创建控制器时，将 $rootScope 作为参数传递，可在应用中使用：</p><div class=\"example_code htmlHigh\"><div class=\"htmlHigh\"><span class=\"highLT\"></span><div><pre><code class=\"html\">&lt;div ng-app=\"myApp\" ng-controller=\"myCtrl\"&gt;\n\n&lt;h1&gt;{{lastname}} 家族成员:&lt;/h1&gt;\n\n&lt;ul&gt;\n    &lt;li ng-repeat=\"x in names\"&gt;{{x}} {{lastname}}&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;/div&gt;\n\n&lt;script&gt;\nvar app = angular.module('myApp', []);\n\napp.controller('myCtrl', function($scope, $rootScope) {\n    $scope.names = [\"Emil\", \"Tobias\", \"Linus\"];\n    $rootScope.lastname = \"Refsnes\";\n});\n&lt;/script&gt;</code></pre></div><span class=\"highGT\"></span></div><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_scope_rootscope\" target=\"_blank\">尝试一下 »</a></div></div></div></div></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 3,
      "parent_sort_index": 8,
      "chapter_level_one_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "相关文章",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "a438b87f069d533527ba8b3b39855a8b",
      "chapter_level_two_parent_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_two_name": "Vue.js和AngularJS的区别",
      "chapter_level_two_url": "/article/56584107.html",
      "book_content": ""
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 2,
      "parent_sort_index": 8,
      "chapter_level_one_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "相关文章",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "995321242fe82bfffb8966c01b691043",
      "chapter_level_two_parent_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_two_name": "如何选择一款适合前端的编辑器？",
      "chapter_level_two_url": "/article/66423663.html",
      "book_content": ""
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 1,
      "parent_sort_index": 8,
      "chapter_level_one_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "相关文章",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "a51299697a4379b8205d5654a977096b",
      "chapter_level_two_parent_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_two_name": "AngularJS中的:host 、:host-context、::ng-deep详解",
      "chapter_level_two_url": "/article/63849100.html",
      "book_content": ""
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 1,
      "parent_sort_index": 7,
      "chapter_level_one_id": "f9c3cdf0269ab285b5d83b86cecc8373",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "相关课程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "368636bbbc052c360abfa3d5c0142d3f",
      "chapter_level_two_parent_id": "f9c3cdf0269ab285b5d83b86cecc8373",
      "chapter_level_two_name": "小白学前端：AngularJS基础入门",
      "chapter_level_two_url": "/minicourse/play/angularjs_txy?fcode=tutorial-angularjs",
      "book_content": ""
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 1,
      "parent_sort_index": 6,
      "chapter_level_one_id": "d9e0bc6fb0580d43866364c06954f0cc",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "相关教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "2fdccd3f9564c2251bb59d99208f38ef",
      "chapter_level_two_parent_id": "d9e0bc6fb0580d43866364c06954f0cc",
      "chapter_level_two_name": "AngularJS 教程",
      "chapter_level_two_url": "/angularjs/",
      "book_content": ""
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 3,
      "parent_sort_index": 5,
      "chapter_level_one_id": "a78e5fcf68f4750cdbe78c09353766a9",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "AngularJS 扩展阅读",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "c0523c132ba69e134fb4f4bff9e148b8",
      "chapter_level_two_parent_id": "a78e5fcf68f4750cdbe78c09353766a9",
      "chapter_level_two_name": "angularjs和vue的区别",
      "chapter_level_two_url": "/angularjs/angularjs-wpqu2osg.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><p>angularjs和vuejs都是MVVM框架，那么这两者有什么区别呢?<br></p><p><br></p><p align=\"center\" style=\"text-align: center;\"><img src=\"https://atts.w3cschool.cn/attachments/image/20180424/1524537141964843.jpg\" alt=\"QQ截图20180424103103\" class=\"\"><br></p><p><br></p><p><b>angularjs和vue的区别:\n</b></p><p>1、vueJS简单易学,而angularJS的上手较高；</p><p>2、vue专注于View层，主打的是快速便捷，而angularJS功能则比较全面，当然体量也较大，相对没有vue那么便捷；</p><p>3、angularJS的指令都是ng-xxx，而vueJS的指令都是v-xxx；\n</p><p>4、angularJS的所有指令和方法都是绑定在$scope上的，而vueJS是new出来一个实例，所有的方法和指令都在这个实例上，一个页面上可以有多个vue实例，但是angularJS的对象只能有一个；\n</p><p>5、angularJS是由google开发和维护的，vueJS是由个人维护的；\n</p><p>6、vueJS一般用于移动端的开发，而angularJS一般应用于大型的项目</p><p><br></p><p><b>推荐阅读：</b></p><p><a href=\"https://www.w3cschool.cn/angularjs/\" target=\"_blank\">angularJS教程</a><br></p><p><a href=\"https://www.w3cschool.cn/vuejs/\" target=\"_blank\">vueJS教程</a><br></p><p><br></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 2,
      "parent_sort_index": 5,
      "chapter_level_one_id": "a78e5fcf68f4750cdbe78c09353766a9",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "AngularJS 扩展阅读",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "a8f7ef451306f7e8309e0ef576c5f328",
      "chapter_level_two_parent_id": "a78e5fcf68f4750cdbe78c09353766a9",
      "chapter_level_two_name": "angularjs与jquery的区别",
      "chapter_level_two_url": "/angularjs/angularjs-eicl2os9.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><p>Angularjs和jQuery是当前两个比较好用的前端开发工具，下面就简单来说说这两者之间的区别吧。\n</p><p><br></p><p><b>概念不同：\n</b></p><p>从概念上看，Angularjs属于前端框架，我们写的代码都被其调用；而jQuery则是一个封装了很多功能的库，我们需要调用jQuery中的API去实现一些功能。\n</p><p><br></p><p><b>开发模式存在差异\n</b></p><p>AngularJS与jQuery在web应用开发模式上有着完全不同的思路：\n</p><p>jQuery：通过显示操作浏览器中的DOM来创建应用程序（适合回合式应用），对于比较大型且复杂项目，jQuery不利于全面的单元测试；\n</p><p>AngularJS：将浏览器吸收为应用程序的基础（适合单页应用），比较适合大型及复杂项目，对于全面的单元测试也相对比较容易。\n</p><p><br></p><p><b>什么是会和应用和单页应用？\n</b></p><p><b><br></b></p><p><font color=\"#ff0000\">回合式应用\n</font></p><p>在Web应用发展刚起步时，很多开发者都用的是回合式应用。\n</p><p>相较于单页应用，它就相当于多页应用吧。\n</p><p><b>优点：</b>对浏览器的要求少，对客户端的支持比较大；\n</p><p><b>缺点：</b>加载等待时间较长，在每次请求加载时，它需要后端服务器来处理所有请求并管理所有的应用程序状态，这就占用了许多带宽。（这时因为每个HTML文档必须是自包含的，也就是每次更新页面，都要把HTML文档中更新的和未更新的内容完整的发送给服务器端，这就导致从服务器产生的每个响应中包含许多相同的内容）。\n</p><p><br></p><p><font color=\"#ff0000\">单页应用\n</font></p><p>该模式下只有一个初始的HTML文档被发送给浏览器，用户交互所产生的Ajax（异步）请求只会请求较小的HTML片段，或者要插入到已有的显示给用户元素中的数据。\n</p><p>而初始的HTML文档不会被再次加载或者替换，这就造成了Ajax请求被异步执行的同时，用户还可以继续与已有的HTML进行交互，而无需等待。\n</p><p><b>优点：</b> 减少向后端请求的数据量，减少了带宽压力，提升了整体web的性能。\n</p><p><b>缺点：</b>对浏览器的性能的要求变高，某些浏览器可能会存在不兼容。</p><p><br></p><p><b>AngularJS与jQuery的适用领域\n</b></p><p align=\"center\" style=\"text-align: center;\"><img src=\"https://atts.w3cschool.cn/attachments/image/20180424/1524536281238657.jpg\" alt=\"1\" class=\"\"><b><br></b></p><p>上图很明确地阐述了AngularJS与jQuery的区别：\n</p><p>在项目复杂度比较低时，比较适合使用jQuery框架，而随着项目复杂度的提升，jQuery框架会被逐渐被以单页应用和复杂的回合式应用见长的AngularJS框架所取代。</p><p><br></p><p>推荐阅读;</p><p><a href=\"https://www.w3cschool.cn/minicourse/play/jquerycourse\" target=\"_blank\">jQuery微课</a>——理论实践一把抓<br></p><p><a href=\"https://www.w3cschool.cn/angularjs/\" target=\"_blank\">AngularJS教程</a></p><p><a href=\"https://www.w3cschool.cn/jquery/\" target=\"_blank\">jQuery教程</a></p><p><br></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 1,
      "parent_sort_index": 5,
      "chapter_level_one_id": "a78e5fcf68f4750cdbe78c09353766a9",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "AngularJS 扩展阅读",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "3e8cf66d59b2b33120acdc3342aa631c",
      "chapter_level_two_parent_id": "a78e5fcf68f4750cdbe78c09353766a9",
      "chapter_level_two_name": "AngularJS常见面试题及答案",
      "chapter_level_two_url": "/angularjs/angularjs-8c2q2ord.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><p>Angular是当下非常流行的前端框架，受到了广大前端开发者的喜爱。下面，w3cschool将为大家列出一些经典的Angular面试题以及答案，供大家参考。\n</p><p align=\"center\" style=\"text-align: center;\"><img src=\"https://atts.w3cschool.cn/attachments/image/20180423/1524477073493205.jpg\" alt=\"timg (1)\" class=\"\"><br></p><p><b>Q1、ng-if跟ng-show/hide的区别有哪些？\n</b></p><p><b>A</b>：区别主要有两点：</p><p>1、ng-if 在后面表达式为 true 的时候才创建dom 节点，而ng-show 是在初始时就创建了，可以用 display:block 和 display:none 来控制显示和不显示。\n</p><p>2、ng-if 会（隐式地）产生新作用域，ng-switch 、ng-include 等会动态创建一块界面的也是如此。\n</p><p>这样会导致，在 ng-if 中用基本变量绑定 ng-model，同事在外层的 div 中将 model 绑定给另一个显示区域后，在内层改变时，外层并不会随着内层改变，因为这已经两个不同的变量了。</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">&lt;p&gt;{{name}}&lt;/p&gt;\n&lt;div ng-if=\"true\"&gt;\n    &lt;input type=\"text\" ng-model=\"name\"&gt;\n&lt;/div&gt;</code></pre><p>而在 ng-show 中，却不存在此问题，因为它不自带一级作用域。\n</p><p>为了避免这类问题的出现，我们可以始终将页面中的元素绑定到对象的属性（data.x），而不是直接绑定到基本变量（x）上。</p><p><br></p><p><b>Q2、ng-repeat迭代数组的时候，如果数组中有相同值，会有什么问题，如何解决？</b></p><p><b>A：</b>会提示 Duplicates in a repeater are not allowed. 出现这种情况的时候，我们可以通过加 track by $index 来解决。当然，也可以 trace by 任何一个普通的值，只要能唯一性标识数组中的每一项即可（建立 dom 和数据之间的关联）。</p><p><br></p><p><b>Q3、ng-click 中写的表达式，能使用 JS 原生对象上的方法吗？\n</b></p><p><b>A：</b>不止是 ng-click 中，只要是在页面中，都是无法直接调用原生的 JS 方法的，因为这些并不存在于与页面对应的 Controller 的 $scope 中。\n</p><p>举个例子：\n</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">&lt;p&gt;{{parseInt(55.66)}}&lt;p&gt;</code></pre><p>我们会发现，什么也没有显示。\n</p><p>但如果在 $scope 中添加了下面这个函数：\n</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">$scope.parseInt = function(x){\n    return parseInt(x);\n}</code></pre><p>运行就自然是没什么问题了。\n</p><p>对于这种需求，使用一个 filter 或许是不错的选择：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">&lt;p&gt;{{13.14 | parseIntFilter}}&lt;/p&gt;\n\napp.filter('parseIntFilter', function(){\n    return function(item){\n        return parseInt(item);\n    }\n})<br></code></pre><p><b><br></b></p><p><b>Q4、{{now | 'yyyy-MM-dd'}} 这种表达式里面，竖线和后面的参数通过什么方式可以自定义？\n</b></p><p><b>A：</b>filter，格式化数据，接收一个输入，按某规则处理，返回处理结果。</p><p><br></p><p><font color=\"#ff0000\">ng 内置的filter主要有九种：\n</font></p><p>1：date（日期）\n</p><p>2：currency（货币）\n</p><p>3：limitTo（限制数组或字符串长度）\n</p><p>4：orderBy（排序）\n</p><p>5：lowercase（小写）\n</p><p>6：uppercase（大写）\n</p><p>7：number（格式化数字，加上千位分隔符，并接收参数限定小数点位数）\n</p><p>8：filter（处理一个数组，过滤出含有某个子串的元素）\n</p><p>9：json（格式化 json 对象）</p><p><br></p><p><font color=\"#ff0000\">filter 有两种使用方法：</font></p><p>一种是直接在页面里：\n</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">&lt;p&gt;{{now | date : 'yyyy-MM-dd'}}&lt;/p&gt;</code></pre><p>另一种是在 js 里面用：\n</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">// $filter('过滤器名称')(需要过滤的对象, 参数1, 参数2,...)\n$filter('date')(now, 'yyyy-MM-dd hh:mm:ss');<br></code></pre><p><font color=\"#ff0000\">自定义 filter</font></p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">// 形式\napp.filter('过滤器名称',function(){\n    return function(需要过滤的对象,过滤器参数1,过滤器参数2,...){\n        //...做一些事情  \n        return 处理后的对象;\n    }\n});  \n// 栗子\napp.filter('timesFilter', function(){\n    return function(item, times){\n        var result = '';\n        for(var i = 0; i &lt; times; i++){\n            result += item;\n        }\n        return result;\n    }\n})</code></pre><p><b><br></b></p><p><b>Q5、factory、service 和 provider 是什么关系？\n</b></p><p><font color=\"#ff0000\">factory\n</font></p><p>把 service 的方法和数据放在一个对象里，并返回这个对象。</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">app.factory('FooService', function(){\n  return {\n    target: 'factory',\n    sayHello: function(){\n      return 'hello ' + this.target;\n    }\n  }\n});\n</code></pre><p><font color=\"#ff0000\">service\n</font></p><p>通过构造函数的方式创建 service，然后返回一个实例化对象。</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">app.service('FooService', function(){\n  var self = this;\n  this.target = 'service';\n  this.sayHello = function(){\n    return 'hello ' + self.target;\n  }\n});</code></pre><p><font color=\"#ff0000\">provider\n</font></p><p>创建一个可通过 config 配置的 service，$get 中返回的，就是用 factory 创建 service 的内容。</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">app.provider('FooService', function(){\n  this.configData = 'init data';\n  this.setConfigData = function(data){\n    if(data){\n      this.configData = data;\n    }\n  }\n  this.$get = function(){\n    var self = this;\n    return {\n      target: 'provider',\n      sayHello: function(){\n        return self.configData + ' hello ' + this.target;\n      }\n    }\n  }\n});\n \n// 此处注入的是 FooService 的 provider\napp.config(function(FooServiceProvider){\n  FooServiceProvider.setConfigData('config data');\n});</code></pre><p>从底层实现上来看，三者的关系是：service 调用了 factory，返回其实例；factory 调用了 provider，返回其 $get 中定义的内容。factory 和 service 的功能类似，但是 factory 是普通 function，可以返回任何东西；service 是构造器，可以不返回（绑定到 this 的都可以被访问）；provider 是加强版 factory，返回一个可配置的 factory。</p><p><br></p><p><b>Q6、angular 的数据绑定采用什么机制？详述原理\n</b></p><p><b>A：</b>采用了脏检查机制。\n</p><p>双向数据绑定是 AngularJS 的核心机制之一。当 view 中有任何一个数据变化时，都会更新到 model 中。如果 model 中的数据有变化时，view 也会同步更新，显然，这需要一个监控。\n</p><p><font color=\"#ff0000\">原理</font></p><p>Angular 在 scope 模型上设置了一个监听队列，这个监听队列可以用来监听数据变化并更新 view 。每次绑定一个东西到 view 上时， AngularJS 就会往 $watch 队列里插入一条 $watch ，用来检测它监视的 model 里是否有变化的东西。当浏览器接收到可以被 angular context 处理的事件时， $digest 循环就会触发，遍历所有的 $watch ，最后更新 dom。</p><p><br></p><p><b>Q7、两个平级界面块 a 和 b，如果 a 中触发一个事件，有哪些方式能让 b 知道？详述原理\n</b></p><p>A：这个问题换一种说法就是，如何在平级界面模块间进行通信。有两种方法，一种是共用服务，一种是基于事件。\n</p><p><font color=\"#ff0000\">共用服务\n</font></p><p>在 Angular 中，通过 factory 可以生成一个单例对象，在需要通信的模块 a 和 b 中注入这个对象即可。\n</p><p><font color=\"#ff0000\">基于事件\n</font></p><p>这个又分两种方式\n</p><p>第一种是借助父 controller。在子 controller 中向父 controller 触发（ $emit ）一个事件，然后在父 controller 中监听（ $on ）事件，再广播（ $broadcast ）给子 controller ，这样通过事件携带的参数，实现了数据经过父 controller，在同级 controller 之间传播。\n</p><p>第二种是借助 $rootScope 。每个 Angular 应用默认有一个根作用域 $rootScope ， 根作用域位于最顶层，从它往下挂着各级作用域。所以，如果子控制器直接使用 $rootScope 广播和接收事件，那么就可实现同级之间的通信。</p><p><b><br></b></p><p><b>Q8、一个 angular 应用应当如何良好地分层？\n</b></p><p><font color=\"#ff0000\">目录结构的划分\n</font></p><p>对于小型项目，可以按照文件类型组织，比如：\n</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">css\njs\n controllers\n models\n services\n filters\ntemplates </code></pre><p>但是对于规模较大的项目，最好按业务模块划分，比如：\n</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">css\nmodules\n account\n  controllers\n  models\n  services\n  filters\n  templates\n disk\n  controllers\n  models\n  services\n  filters\n  templates</code></pre><p>modules 下最好再有一个 common 目录来存放公共的东西。\n</p><p><font color=\"#ff0000\">逻辑代码的拆分\n</font></p><p>作为一个 MVVM 框架，Angular 应用本身就应该按照 模型，视图模型（控制器），视图来划分。\n</p><p>这里逻辑代码的拆分，主要是指尽量让 controller 这一层很薄。提取共用的逻辑到 service 中 （比如后台数据的请求，数据的共享和缓存，基于事件的模块间通信等），提取共用的界面操作到 directive 中（比如将日期选择、分页等封装成组件等），提取共用的格式化操作到 filter 中等等。\n</p><p>在复杂的应用中，也可以为实体建立对应的构造函数，比如硬盘（Disk）模块，可能有列表、新建、详情这样几个视图，并分别对应的有 controller，那么可以建一个 Disk 构造函数，里面完成数据的增删改查和验证操作，有跟 Disk 相关的 controller，就注入 Disk 构造器并生成一个实例，这个实例就具备了增删改查和验证方法。这样既层次分明，又实现了复用（让 controller 层更薄了）。</p><p><br></p><p><b>Q9、angular 应用常用哪些路由库，各自的区别是什么？\n</b></p><p>A：Angular1.x 中常用 ngRoute 和 ui.router。\n</p><p><font color=\"#ff0000\">区别\n</font></p><p>ngRoute 模块是 Angular 自带的路由模块，而 ui.router 模块是基于 ngRoute模块开发的第三方模块。\n</p><p>ui.router 是基于 state （状态）的， ngRoute 是基于 url 的，ui.router模块具有更强大的功能，主要体现在视图的嵌套方面。\n</p><p>使用 ui.router 能够定义有明确父子关系的路由，并通过 ui-view 指令将子路由模版插入到父路由模板的 &lt;div ui-view&gt;&lt;/div&gt; 中去，从而实现视图嵌套。而在 ngRoute 中不能这样定义，如果同时在父子视图中 使用了 &lt;div ng-view&gt;&lt;/div&gt; 会陷入死循环。\n</p><p><b>示例\n</b></p><p><font color=\"#ff0000\">ngRoute\n</font></p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">var app = angular.module('ngRouteApp', ['ngRoute']);\napp.config(function($routeProvider){\n  $routeProvider\n    .when('/main', {\n      templateUrl: \"main.html\",\n      controller: 'MainCtrl'\n    })\n    .otherwise({ redirectTo: '/tabs' });</code></pre><p><font color=\"#ff0000\">ui.router</font></p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">var app = angular.module(\"uiRouteApp\", [\"ui.router\"]);\napp.config(function($urlRouterProvider, $stateProvider){\n  $urlRouterProvider.otherwise(\"/index\");\n  $stateProvider\n    .state(\"Main\", {\n      url: \"/main\",\n      templateUrl: \"main.html\",\n      controller: 'MainCtrl'\n    })\n</code></pre><p><br></p><p><b>Q10、分属不同团队进行开发的 angular 应用，如果要做整合，可能会遇到哪些问题，如何解决？\n</b></p><p><b>A：</b>可能会遇到不同模块之间的冲突。\n</p><p>比如一个团队所有的开发在 moduleA 下进行，另一团队开发的代码在 moduleB 下\n</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">angular.module('myApp.moduleA', [])\n  .factory('serviceA', function(){\n    ...\n  })\n   \nangular.module('myApp.moduleB', [])\n  .factory('serviceA', function(){\n    ...\n  })  \n   \nangular.module('myApp', ['myApp.moduleA', 'myApp.moduleB'])  </code></pre><p>会导致两个 module 下面的 serviceA 发生了覆盖。\n</p><p>貌似在 Angular1.x 中并没有很好的解决办法，所以最好在前期进行统一规划，做好约定，严格按照约定开发，每个开发人员只写特定区块代码。</p><p><br></p><p><b>Q11、angular 的缺点有哪些？\n</b></p><p><font color=\"#ff0000\">强约束\n</font></p><p>导致学习成本较高，对前端不友好。\n</p><p>但遵守 AngularJS 的约定时，生产力会很高，对 Java 程序员友好。\n</p><p><font color=\"#ff0000\">不利于SEO\n</font></p><p>因为所有内容都是动态获取并渲染生成的，搜索引擎没法爬取。\n</p><p>一种解决办法是，对于正常用户的访问，服务器响应 AngularJS 应用的内容；对于搜索引擎的访问，则响应专门针对 SEO 的HTML页面。\n</p><p><font color=\"#ff0000\">性能问题\n</font></p><p>作为 MVVM 框架，因为实现了数据的双向绑定，对于大数组、复杂对象会存在性能问题。\n</p><p>可以用来 优化 Angular 应用的性能 的办法：\n</p><p>减少监控项（比如对不会变化的数据采用单向绑定）\n</p><p>主动设置索引（指定 track by ，简单类型默认用自身当索引，对象默认使用 $$hashKey ，比如改为 track by item.id ）\n</p><p>降低渲染数据量（比如分页，或者每次取一小部分数据，根据需要再取）\n</p><p>数据扁平化（比如对于树状结构，使用扁平化结构，构建一个 map 和树状数据，对树操作时，由于跟扁平数据同一引用，树状数据变更会同步到原始的扁平数据）\n</p><p>另外，对于Angular1.x ，存在 脏检查 和 模块机制 的问题。</p><p><br></p><p><b>Q12、如何看待 angular 1.2 中引入的 controller as 语法？\n</b></p><p><b>A：</b>在 angular 1.2 以前，在 view 上的任何绑定都是直接绑定在 $scope 上的\n</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">function myCtrl($scope){\n  $scope.a = 'aaa';\n  $scope.foo = function(){\n    ...\n  }\n}</code></pre><p>使用 controllerAs，不需要再注入 $scope ，controller 变成了一个很简单的 javascript 对象（POJO），一个更纯粹的 ViewModel。</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">function myCtrl(){\n  // 使用 vm 捕获 this 可避免内部的函数在使用 this 时导致上下文改变\n  var vm = this;\n  vm.a = 'aaa';\n}</code></pre><p><br></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 16,
      "parent_sort_index": 4,
      "chapter_level_one_id": "0e64fc8d8cc7e3ed9dc19d823d323344",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "AngularJS v1.5 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "807f2622f1b16db4bdc7b0d070ab641c",
      "chapter_level_two_parent_id": "0e64fc8d8cc7e3ed9dc19d823d323344",
      "chapter_level_two_name": "AngularJS 完结篇",
      "chapter_level_two_url": "/angularjs/g5lr1jtn.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><div class=\"wkcontent\"><h2>完结篇</h2><p>我们的应用程序现在完成了。请随意练习这些代码，用<code>git checkout</code>命令跳回到前面的步骤。</p><p>要想获得我们在本教程中涉及的更多的Angular概念的细节，以及Angular概念的示例，参见<a rel=\"nofollow\" href=\"https://docs.angularjs.org/guide/\" target=\"_blank\">开发指导</a></p><p>当你准备好开始用Angular开发一个项目的时候，我们推荐你用<a rel=\"nofollow\" href=\"https://github.com/angular/angular-seed\" target=\"_blank\">angular种子</a>项目引导你的开发。</p><p>我们希望这篇教程对你有用，使你对Angular有了足够的了解，激起你更大的学习愿望。我们特别希望你能够开发出自己的Angular Web应用，你可能对为Angular<a rel=\"nofollow\" href=\"https://docs.angularjs.org/misc/contribute\" target=\"_blank\">贡献</a>产生兴趣。</p><p>如果你有什么问题、反馈，或者想和我们打招呼，请在<a rel=\"nofollow\" href=\"https://groups.google.com/forum/#!forum/angular\" target=\"_blank\">https://groups.google.com/forum/#!forum/angular</a>上发消息吧。</p></div></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 15,
      "parent_sort_index": 4,
      "chapter_level_one_id": "0e64fc8d8cc7e3ed9dc19d823d323344",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "AngularJS v1.5 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "c5252c5b8701406c83d528f8270a4c76",
      "chapter_level_two_parent_id": "0e64fc8d8cc7e3ed9dc19d823d323344",
      "chapter_level_two_name": "AngularJS 应用动画",
      "chapter_level_two_url": "/angularjs/96381jtk.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><div class=\"wkcontent\"><h2>应用动画</h2><p>在这最后一步中，我们将通过在我们之前创建的模板代码的顶部添加CSS和JavaScript动画丰富我们的手机分类网站应用。</p><ul><li>我们现在使用<code>ngAnimate</code>模拟以启用动画，以贯穿这个应用。</li><li>我们还使用常用的<code>ng</code>指令以自动触发使动画接入的钩子。</li><li>发现一个应用之后，动画将在标准DOM操作之间运行，该标准DOM操作在给定的时间内发布在元素上（例如，在<a rel=\"nofollow\" href=\"https://docs.angularjs.org/api/ng/directive/ngRepeat\" target=\"_blank\"><code>ngRepeat</code></a>上插入和移除节点，或在<a rel=\"nofollow\" href=\"https://docs.angularjs.org/api/ng/directive/ngClass\" target=\"_blank\"><code>ngClass</code></a>上添加和移除类）。</li></ul><p>把工作空间重置到第十二步</p><pre><code class=\"hljs bash\">git checkout <span class=\"hljs-_\"><span class=\"hljs-_\">-f</span></span> step-12</code></pre><p>刷新你的浏览器或在线检查这一步：<a rel=\"nofollow\" href=\"http://angular.github.io/angular-phonecat/step-12/app\" target=\"_blank\">Step 12 Live Demo</a></p><p>下面列出了第十一步和第十二步之间最重要的区别。你可以在<a rel=\"nofollow\" href=\"http://angular.github.io/angular-phonecat/step-12/app\" target=\"_blank\" title=\"See diff on Github\">GitHub</a>上看到完整的差异。</p><h2 class=\"head2\">依赖性</h2><p>Angular在<code>ngAnimate</code>模块中提供动画功能，它与核心Angular框架分开发布。另外，我们将在项目中使用<code>jquery</code>以实现额外的JavaScript动画。</p><p>我们正在使用<a rel=\"nofollow\" href=\"http://bower.io/\" target=\"_blank\">Bower</a>以安装客户侧依赖性。这一步更新了<code>bower.json</code>配置文件，以包含新的依赖性：</p><pre><code class=\"hljs json\">{\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\">\"name\"</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">\"angular-seed\"</span></span>,\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\">\"description\"</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">\"A starter project for AngularJS\"</span></span>,\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\">\"version\"</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">\"0.0.0\"</span></span>,\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\">\"homepage\"</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">\"https://github.com/angular/angular-seed\"</span></span>,\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\">\"license\"</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">\"MIT\"</span></span>,\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\">\"private\"</span></span>: <span class=\"hljs-literal\"><span class=\"hljs-literal\">true</span></span>,\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\">\"dependencies\"</span></span>: {\n    <span class=\"hljs-attr\"><span class=\"hljs-attr\">\"angular\"</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">\"1.4.x\"</span></span>,\n    <span class=\"hljs-attr\"><span class=\"hljs-attr\">\"angular-mocks\"</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">\"1.4.x\"</span></span>,\n    <span class=\"hljs-attr\"><span class=\"hljs-attr\">\"jquery\"</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">\"~2.1.1\"</span></span>,\n    <span class=\"hljs-attr\"><span class=\"hljs-attr\">\"bootstrap\"</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">\"~3.1.1\"</span></span>,\n    <span class=\"hljs-attr\"><span class=\"hljs-attr\">\"angular-route\"</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">\"1.4.x\"</span></span>,\n    <span class=\"hljs-attr\"><span class=\"hljs-attr\">\"angular-resource\"</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">\"1.4.x\"</span></span>,\n    <span class=\"hljs-attr\"><span class=\"hljs-attr\">\"angular-animate\"</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">\"1.4.x\"</span></span>\n  }\n}</code></pre><ul><li><code>\"angular-animate\": \"1.4.x\"</code>告诉bower安装一个angular-animate组件的版本，与v1.4x版兼容。</li><li><code>\"jquery\": \"~2.1.1\"</code>告诉bower安装jQuery的v2.1.1版。注意这不是一个Angular库，它是标准jQuery库。我们可以使用bower来安装一个大作用域的第三方库。</li></ul><p>我们必须要求bower以下载并安装依赖性运行以下指令实现它：</p><pre><code class=\"hljs coffeescript\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\">npm</span></span> install</code></pre><div class=\"alert alert-warning\">  **警告：**如果在你上一次运行`npm install`之后已经发布了Angular的一个新版本，然后因为需要安装的angular.js版本之间的冲突，你可能在运行`bower install`指令时遇到问题。如果你遇到了这种问题，只需要在运行`npm install`之前先删除你的`app/bower_components`文件夹。</div><div class=\"alert alert-info\">  **注意：**如果你已经全局安全了bower，你可以运行`bower install`，但是对于这个项目，我们已经预配置了运行`npm install`来运行bower。</div><h2 class=\"head2\">动画如何与<code>ngAnimate</code>协作</h2><p>要想知道动画如何与AngularJS协作，请先阅读?<a rel=\"nofollow\" href=\"https://docs.angularjs.org/guide/animations\" target=\"_blank\">AngularJS动画指南</a>。</p><h2 class=\"head2\">模板</h2><p>在HTML模板代码内部需要修改，以链接asset文件，它定义了动画以及<code>angular-animate.js</code>文件。该动画模块，即<a rel=\"nofollow\" href=\"https://docs.angularjs.org/api/ngAnimate\" target=\"_blank\"><code>ngAnimate</code></a>，被定义在<code>angular-animate.js</code>内部，并包含了必要的代码，以使你的应用程序变得动感。</p><p>这里是在索引文件中需要修改的地方：</p><p><strong><code>app/index.html</code>.</strong></p><pre><code class=\"language-html hljs xml\">...\n  <span class=\"hljs-comment\"><span class=\"hljs-comment\">&lt;!-- for CSS Transitions and/or Keyframe Animations --&gt;</span></span>\n  <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">link</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">rel</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"stylesheet\"</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">href</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"css/animations.css\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n\n  ...\n\n  <span class=\"hljs-comment\"><span class=\"hljs-comment\">&lt;!-- jQuery is used for JavaScript animations (include this before angular.js) --&gt;</span></span>\n  <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">script</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">src</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"/attachments/image/wk/angularjs/jquery.js\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span><span class=\"undefined\"></span><span class=\"hljs-tag\"><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">script</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n\n  ...\n\n  <span class=\"hljs-comment\"><span class=\"hljs-comment\">&lt;!-- required module to enable animation support in AngularJS --&gt;</span></span>\n  <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">script</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">src</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"/attachments/image/wk/angularjs/angular-animate.js\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span><span class=\"undefined\"></span><span class=\"hljs-tag\"><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">script</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n\n  <span class=\"hljs-comment\"><span class=\"hljs-comment\">&lt;!-- for JavaScript Animations --&gt;</span></span>\n  <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">script</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">src</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"/attachments/image/wk/angularjs/animations.js\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span><span class=\"undefined\"></span><span class=\"hljs-tag\"><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">script</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n\n...</code></pre><div class=\"alert alert-error\">  **重要：**确保在使用Augular 1.4的时候，使用jQuery v2.1版或更新的版本；官方不支持jQuery v1.x版。确保在所有的AngularJS脚本之前载入jQuery，否则AugularJS不能侦测jQuery，而且动画将不会如预期那样起作用。</div><p>可以在CSS代码（<code>animations.css</code>）内中创建动画，也可以在JavaScript代码（<code>animations.js</code>）内部创建动画。但是在开始之前，让我们创建一个新模块，它使用ngAnimate模块，作为依赖性，就像我们之前用<code>ngResource</code>所作的。</p><h2 class=\"head2\">模块和动画</h2><p><strong><code>app/js/animations.js</code>.</strong></p><pre><code class=\"language-js hljs javascript\">angular.module(<span class=\"hljs-string\"><span class=\"hljs-string\">'phonecatAnimations'</span></span>, [<span class=\"hljs-string\"><span class=\"hljs-string\">'ngAnimate'</span></span>]);\n  <span class=\"hljs-comment\"><span class=\"hljs-comment\">// ...</span></span>\n  <span class=\"hljs-comment\"><span class=\"hljs-comment\">// this module will later be used to define animations</span></span>\n  <span class=\"hljs-comment\"><span class=\"hljs-comment\">// ...</span></span></code></pre><p>现在让我们把这个模块附加到我们的应用程序模块上……</p><p><strong><code>app/js/app.js</code>.</strong></p><pre><code class=\"language-js hljs javascript\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">// ...</span></span>\nangular.module(<span class=\"hljs-string\"><span class=\"hljs-string\">'phonecatApp'</span></span>, [\n  <span class=\"hljs-string\"><span class=\"hljs-string\">'ngRoute'</span></span>,\n\n  <span class=\"hljs-string\"><span class=\"hljs-string\">'phonecatAnimations'</span></span>,\n  <span class=\"hljs-string\"><span class=\"hljs-string\">'phonecatControllers'</span></span>,\n  <span class=\"hljs-string\"><span class=\"hljs-string\">'phonecatFilters'</span></span>,\n  <span class=\"hljs-string\"><span class=\"hljs-string\">'phonecatServices'</span></span>,\n]);\n<span class=\"hljs-comment\"><span class=\"hljs-comment\">// ...</span></span></code></pre><p>现在，手机分类模块已经有动感了。让我们制作更多更多动画吧！</p><h2 class=\"head2\">用CSS过渡动画让ngRepeat动起来。</h2><p>我们将从这一步开始，把CSS过渡动画添加到出现在<code>phone-list.html</code>网页上的<code>ngRepeat</code>指令。首先让我们把一个额外的CSS类添加到我们的重复元素上，因此我们可以把它与我们的CSS动画代码连接。</p><p><strong><code>app/partials/phone-list.html</code>.</strong></p><pre><code class=\"language-html hljs xml\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">&lt;!--\n  让我们改变重复器HTML，以包含一个新的CSS类，之后我们将用它实现动画：\n--&gt;</span></span>\n<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">ul</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">class</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"phones\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n  <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">li</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">ng-repeat</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"phone in phones | filter:query | orderBy:orderProp\"</span></span></span><span class=\"hljs-tag\">\n      </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">class</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"thumbnail phone-listing\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n    <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">a</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">href</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"#/phones/{{phone.id}}\"</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">class</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"thumb\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">img</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">ng-src</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"{{phone.imageUrl}}\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">a</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n    <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">a</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">href</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"#/phones/{{phone.id}}\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>{{phone.name}}<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">a</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n    <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">p</span></span></span><span class=\"hljs-tag\">&gt;</span></span>{{phone.snippet}}<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">p</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n  <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">li</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">ul</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n</code></pre><p>注意我们将如何添加<code>phone-listing</code>CSS类？这是我们让动画起作用，在HTML代码中所需要做的。</p><p>以下是实际的CSS过渡动画代码：</p><p><strong><code>app/css/animations.css</code></strong></p><pre><code class=\"language-css hljs\"><span class=\"hljs-selector-class\"><span class=\"hljs-selector-class\">.phone-listing</span></span><span class=\"hljs-selector-class\"><span class=\"hljs-selector-class\">.ng-enter</span></span>,\n<span class=\"hljs-selector-class\"><span class=\"hljs-selector-class\">.phone-listing</span></span><span class=\"hljs-selector-class\"><span class=\"hljs-selector-class\">.ng-leave</span></span>,\n<span class=\"hljs-selector-class\"><span class=\"hljs-selector-class\">.phone-listing</span></span><span class=\"hljs-selector-class\"><span class=\"hljs-selector-class\">.ng-move</span></span> {\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">-webkit-transition</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">0.5s</span></span> linear all;\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">-moz-transition</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">0.5s</span></span> linear all;\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">-o-transition</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">0.5s</span></span> linear all;\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">transition</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">0.5s</span></span> linear all;\n}\n\n<span class=\"hljs-selector-class\"><span class=\"hljs-selector-class\">.phone-listing</span></span><span class=\"hljs-selector-class\"><span class=\"hljs-selector-class\">.ng-enter</span></span>,\n<span class=\"hljs-selector-class\"><span class=\"hljs-selector-class\">.phone-listing</span></span><span class=\"hljs-selector-class\"><span class=\"hljs-selector-class\">.ng-move</span></span> {\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">opacity</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">0</span></span>;\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">height</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">0</span></span>;\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">overflow</span></span>: hidden;\n}\n\n<span class=\"hljs-selector-class\"><span class=\"hljs-selector-class\">.phone-listing</span></span><span class=\"hljs-selector-class\"><span class=\"hljs-selector-class\">.ng-move</span></span><span class=\"hljs-selector-class\"><span class=\"hljs-selector-class\">.ng-move-active</span></span>,\n<span class=\"hljs-selector-class\"><span class=\"hljs-selector-class\">.phone-listing</span></span><span class=\"hljs-selector-class\"><span class=\"hljs-selector-class\">.ng-enter</span></span><span class=\"hljs-selector-class\"><span class=\"hljs-selector-class\">.ng-enter-active</span></span> {\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">opacity</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">1</span></span>;\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">height</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">120px</span></span>;\n}\n\n<span class=\"hljs-selector-class\"><span class=\"hljs-selector-class\">.phone-listing</span></span><span class=\"hljs-selector-class\"><span class=\"hljs-selector-class\">.ng-leave</span></span> {\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">opacity</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">1</span></span>;\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">overflow</span></span>: hidden;\n}\n\n<span class=\"hljs-selector-class\"><span class=\"hljs-selector-class\">.phone-listing</span></span><span class=\"hljs-selector-class\"><span class=\"hljs-selector-class\">.ng-leave</span></span><span class=\"hljs-selector-class\"><span class=\"hljs-selector-class\">.ng-leave-active</span></span> {\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">opacity</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">0</span></span>;\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">height</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">0</span></span>;\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">padding-top</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">0</span></span>;\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">padding-bottom</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">0</span></span>;\n}</code></pre><p>如你所见，我们的<code>phone-listing</code> CSS类与动画钩子相结合，当列表中插入项目或移除项目时，就会出现动画钩子。</p><ul><li>当列表中添加了一款新手机并呈现在网页上时，元素上应用了<code>ng-enter</code>类。</li><li>当项目绕着列表移动时，元素上应用了<code>ng-move</code>类。</li><li>当项目从列表中移除时，元素上应用了<code>ng-leave</code>类。</li></ul><p>添加或删除手机列表项目取决于传递给元素属性<code>ng-repeat</code>的数据。比如，如果过滤器数据改变了，项目动画地加入或退出重复列表。</p><p>有些很重要的事情需要注意，当动画发生时，元素上添加了CSS类的两个集合：</p><ol><li>“开始”类代表动画开始时的样式。</li><li>“激活”类代表动画结束时的样式。</li></ol><p>开始类的名称是被激发的事件（就像<code>enter</code>、<code>move</code>或<code>leave</code>）的名称带上前缀<code>ng-</code>。所以一个<code>enter</code>事件将导致一个称为<code>ng-enter</code>类。</p><p>激活类名与开始类名相同，但是带了一个后缀<code>-active</code>。这两类CSS命名公约允许开发员精心制作一个动画，自始至终。</p><p>在我们上面的示例中，当元素添加到列表中时，该元素从<strong>0</strong>高度伸展到<strong>120像素</strong>高度；在从列表中移除之前，又收缩到<strong>0像素</strong>。同时还发生了一个渐现和渐消的效果。这里都是由CSS过渡动画处理的，CSS过渡动画声明在上面示例代码的顶部。</p><p>虽然大多数现代浏览器能很好地支持<a rel=\"nofollow\" href=\"http://caniuse.com/#feat=css-transitions\" target=\"_blank\">CSS过渡</a>和<a rel=\"nofollow\" href=\"http://caniuse.com/#feat=css-animation\" target=\"_blank\">CSS动画</a>。但是如果你想让动画与老旧的浏览器后向兼容，请考虑使用基于JavaScript的动画，将在下面详细讲解它。</p><h2 class=\"head2\">用CSS关键帧动画让<code>ngView</code>动起来</h2><p>接下来，让我们为在<a rel=\"nofollow\" href=\"https://docs.angularjs.org/api/ngRoute/directive/ngView\" target=\"_blank\"><code>ngView</code></a>内部、路由之间的过渡添加一个动画。</p><p>首先，让我们给HTML添加一个新的CSS类，就像我们在上面的示例中所作的。这一次，不是使用<code>ng-repeat</code>元素，而是把它添加到包含了<code>ng-view</code>指令的元素上。为了做到这，我们需要对HTML代码做一些小的改变，从而我们可以对我们的动画，在视图改变之间的动画有更多的控制。</p><p><strong><code>app/index.html</code>.</strong></p><pre><code class=\"language-html hljs xml\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">div</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">class</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"view-container\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n  <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">div</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">ng-view</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">class</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"view-frame\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">div</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">div</span></span></span><span class=\"hljs-tag\">&gt;</span></span></code></pre><p>利用这个改变，<code>ng-view</code>指令被嵌套在一个带有<code>view-container</code>CSS类的父元素内部。这个类添加了一个<code>position: relative</code>样式，因此动画过程中，<code>ng-view</code>的定位相对于这个父元素。</p><p>在这里，让我们为过渡动画添加CSS，添加到<code>animations.css</code>文件上：</p><p><strong><code>app/css/animations.css</code>.</strong></p><pre><code class=\"language-css hljs\"><span class=\"hljs-selector-class\"><span class=\"hljs-selector-class\">.view-container</span></span> {\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">position</span></span>: relative;\n}\n\n<span class=\"hljs-selector-class\"><span class=\"hljs-selector-class\">.view-frame</span></span><span class=\"hljs-selector-class\"><span class=\"hljs-selector-class\">.ng-enter</span></span>, <span class=\"hljs-selector-class\"><span class=\"hljs-selector-class\">.view-frame</span></span><span class=\"hljs-selector-class\"><span class=\"hljs-selector-class\">.ng-leave</span></span> {\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">background</span></span>: white;\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">position</span></span>: absolute;\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">top</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">0</span></span>;\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">left</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">0</span></span>;\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">right</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">0</span></span>;\n}\n\n<span class=\"hljs-selector-class\"><span class=\"hljs-selector-class\">.view-frame</span></span><span class=\"hljs-selector-class\"><span class=\"hljs-selector-class\">.ng-enter</span></span> {\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">-webkit-animation</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">0.5s</span></span> fade-in;\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">-moz-animation</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">0.5s</span></span> fade-in;\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">-o-animation</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">0.5s</span></span> fade-in;\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">animation</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">0.5s</span></span> fade-in;\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">z-index</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">100</span></span>;\n}\n\n<span class=\"hljs-selector-class\"><span class=\"hljs-selector-class\">.view-frame</span></span><span class=\"hljs-selector-class\"><span class=\"hljs-selector-class\">.ng-leave</span></span> {\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">-webkit-animation</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">0.5s</span></span> fade-out;\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">-moz-animation</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">0.5s</span></span> fade-out;\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">-o-animation</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">0.5s</span></span> fade-out;\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">animation</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">0.5s</span></span> fade-out;\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">z-index</span></span>:<span class=\"hljs-number\"><span class=\"hljs-number\">99</span></span>;\n}\n\n@<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">keyframes</span></span> fade-in {\n  <span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\">from</span></span> { <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">opacity</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">0</span></span>; }\n  <span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\">to</span></span> { <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">opacity</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">1</span></span>; }\n}\n@-<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">moz</span></span>-<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">keyframes</span></span> fade-in {\n  <span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\">from</span></span> { <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">opacity</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">0</span></span>; }\n  <span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\">to</span></span> { <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">opacity</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">1</span></span>; }\n}\n@-<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">webkit</span></span>-<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">keyframes</span></span> fade-in {\n  <span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\">from</span></span> { <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">opacity</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">0</span></span>; }\n  <span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\">to</span></span> { <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">opacity</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">1</span></span>; }\n}\n\n@<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">keyframes</span></span> fade-out {\n  <span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\">from</span></span> { <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">opacity</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">1</span></span>; }\n  <span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\">to</span></span> { <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">opacity</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">0</span></span>; }\n}\n@-<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">moz</span></span>-<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">keyframes</span></span> fade-out {\n  <span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\">from</span></span> { <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">opacity</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">1</span></span>; }\n  <span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\">to</span></span> { <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">opacity</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">0</span></span>; }\n}\n@-<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">webkit</span></span>-<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">keyframes</span></span> fade-out {\n  <span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\">from</span></span> { <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">opacity</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">1</span></span>; }\n  <span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\">to</span></span> { <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">opacity</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">0</span></span>; }\n}\n\n<span class=\"hljs-comment\"><span class=\"hljs-comment\">/* 别忘了供应商的前缀！ */</span></span></code></pre><p>没什么惊人的！仅仅是两页之间的一个简单的渐显和渐消效果。这里唯不寻常的东西是，在页面之间实现软切换动画的时候，我们在前一页（具有<code>ng-leave</code>类的页面）的上方使用绝对定位来定位下一页（通过 <code>ng-enter</code>来指定）。因此前一页即将被删除时，它是渐消淡出的，与此同时新页渐显现在它上面。</p><p>一旦离开动画结束，元素会被移除；一旦进入动画结束 ，元素上的<code>ng-enter</code>和<code>ng-enter-active</code> CSS类会被移除，导致它用它的默认CSS代码重新呈现、重新定位（因此没有一旦动画结束就没有绝对定位了）。这动作起来非常流畅，因此页面在路由变化时流动自然，不会有任何跳动感。</p><p>应用的CSS类（开始和结束类）与<code>ng-repeat</code>很相像。每当一个新页面载入到<code>ng-view</code>指令中时，将创建它自己的一个副本，下载模板并追加内容。这确保了所有的视图都包含在一个单独的HTML元素中，该元素允许简单的动画控制。</p><p>要想了解更多关于CSS动画的信息，请参阅<a rel=\"nofollow\" href=\"http://docs.webplatform.org/wiki/css/properties/animations\" target=\"_blank\">Web 平台文档</a>。</p><h2 class=\"head2\">用JavaScript让<code>ngClass</code>动起来</h2><p>让我们向应用程序添加另一个动画。切换到<code>phone-detail.html</code>网页，我们看到已经有一个很棒的缩略图交换器。通过点击在网页列列中的缩略图，资料手机图像就变了。但是我们可以如何在改变它的同时添加动画呢？</p><p>让我们先考虑一下。基本上，当你在一个资料图上点击时，你正在改变图像的状态，以反映新选中的缩略图。在HTML中指定状态改变的最佳方法是使用样式类。和以前很相像，我们使用的CSS样式类以指定指定一个动画，当CSS类本身变化时动画将发生。</p><p>当选中了一个新的手机缩略图时，状态改变了，<code>.active</code>CSS类添加到匹配的资料图像上，并播放了动画。</p><p>让我们开始，在<code>phone-detail.html</code>网贾上微调HTML代码。注意我们已经改变了显示大图像的方式：</p><p><strong><code>app/partials/phone-detail.html</code>.</strong></p><pre><code class=\"language-html hljs xml\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">&lt;!-- We're only changing the top of the file --&gt;</span></span>\n<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">div</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">class</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"phone-images\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n  <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">img</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">ng-src</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"{{img}}\"</span></span></span><span class=\"hljs-tag\">\n       </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">class</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"phone\"</span></span></span><span class=\"hljs-tag\">\n       </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">ng-repeat</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"img in phone.images\"</span></span></span><span class=\"hljs-tag\">\n       </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">ng-class</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"{active:mainImageUrl==img}\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">div</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n\n<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">h1</span></span></span><span class=\"hljs-tag\">&gt;</span></span>{{phone.name}}<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">h1</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n\n<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">p</span></span></span><span class=\"hljs-tag\">&gt;</span></span>{{phone.description}}<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">p</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n\n<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">ul</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">class</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"phone-thumbs\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n  <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">li</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">ng-repeat</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"img in phone.images\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n    <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">img</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">ng-src</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"{{img}}\"</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">ng-mouseenter</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"setImage(img)\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n  <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">li</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">ul</span></span></span><span class=\"hljs-tag\">&gt;</span></span></code></pre><p>就像缩略图，我们使用迭代器来显示<strong>所有的</strong>资料图像作为一个列表，然而我们没有变动任何迭代相关的动画。而是，我们在<code>ng-class</code>指令上保持关注，因为每当<code>active</code>类变成true，则它将应用到元素上，将呈现为可见。否则，资料图像将隐藏。在我们的案例中，总是有一个元素具有<code>active</code>类，因此，任何时候总会有一款手机的资料图像在屏幕上可见。</p><p>当元素上添加了激活类的时候，先添加了<code>active-add</code>类和<code>adtive-add-active</code>类，以指示Angular引发一个动画。当元素上移除了激活类的时候，元素上应用了<code>active-remove</code>类和<code>active-remove-active</code>，它们反过来又会触发别的动画。</p><p>要想确保手机图像在页面第一次加载时正确地显示，我们还要微调详情页的CSS样式：</p><p><strong><code>app/css/app.css</code></strong></p><pre><code class=\"language-css hljs\"><span class=\"hljs-selector-class\"><span class=\"hljs-selector-class\">.phone-images</span></span> {\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">background-color</span></span>: white;\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">width</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">450px</span></span>;\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">height</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">450px</span></span>;\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">overflow</span></span>: hidden;\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">position</span></span>: relative;\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">float</span></span>: left;\n}\n\n...\n\n<span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\">img</span></span><span class=\"hljs-selector-class\"><span class=\"hljs-selector-class\">.phone</span></span> {\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">float</span></span>: left;\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">margin-right</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">3em</span></span>;\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">margin-bottom</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">2em</span></span>;\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">background-color</span></span>: white;\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">padding</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">2em</span></span>;\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">height</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">400px</span></span>;\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">width</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">400px</span></span>;\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">display</span></span>: none;\n}\n\n<span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\">img</span></span><span class=\"hljs-selector-class\"><span class=\"hljs-selector-class\">.phone</span></span><span class=\"hljs-selector-pseudo\"><span class=\"hljs-selector-pseudo\">:first-child</span></span> {\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\">display</span></span>: block;\n  }</code></pre><p>你可能认为我们将创建另一个CSS可用的动画。虽然我们可以那么做，但是还是让我们抓住机会学习如何用<code>abnimate</code>模块方法创建JavaScript可用的动画吧。</p><p><strong><code>app/js/animations.js</code>.</strong></p><pre><code class=\"language-js hljs javascript\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">var</span></span> phonecatAnimations = angular.module(<span class=\"hljs-string\"><span class=\"hljs-string\">'phonecatAnimations'</span></span>, [<span class=\"hljs-string\"><span class=\"hljs-string\">'ngAnimate'</span></span>]);\n\nphonecatAnimations.animation(<span class=\"hljs-string\"><span class=\"hljs-string\">'.phone'</span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span>{\n\n  <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">var</span></span> animateUp = <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">element, className, done</span></span></span><span class=\"hljs-function\">) </span></span>{\n    <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">if</span></span>(className != <span class=\"hljs-string\"><span class=\"hljs-string\">'active'</span></span>) {\n      <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">return</span></span>;\n    }\n    element.css({\n      position: <span class=\"hljs-string\"><span class=\"hljs-string\">'absolute'</span></span>,\n      top: <span class=\"hljs-number\"><span class=\"hljs-number\">500</span></span>,\n      left: <span class=\"hljs-number\"><span class=\"hljs-number\">0</span></span>,\n      display: <span class=\"hljs-string\"><span class=\"hljs-string\">'block'</span></span>\n    });\n\n    jQuery(element).animate({\n      top: <span class=\"hljs-number\"><span class=\"hljs-number\">0</span></span>\n    }, done);\n\n    <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">return</span></span> <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">cancel</span></span></span><span class=\"hljs-function\">) </span></span>{\n      <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">if</span></span>(cancel) {\n        element.stop();\n      }\n    };\n  }\n\n  <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">var</span></span> animateDown = <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">element, className, done</span></span></span><span class=\"hljs-function\">) </span></span>{\n    <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">if</span></span>(className != <span class=\"hljs-string\"><span class=\"hljs-string\">'active'</span></span>) {\n      <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">return</span></span>;\n    }\n    element.css({\n      position: <span class=\"hljs-string\"><span class=\"hljs-string\">'absolute'</span></span>,\n      left: <span class=\"hljs-number\"><span class=\"hljs-number\">0</span></span>,\n      top: <span class=\"hljs-number\"><span class=\"hljs-number\">0</span></span>\n    });\n\n    jQuery(element).animate({\n      top: <span class=\"hljs-number\"><span class=\"hljs-number\">-500</span></span>\n    }, done);\n\n    <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">return</span></span> <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">cancel</span></span></span><span class=\"hljs-function\">) </span></span>{\n      <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">if</span></span>(cancel) {\n        element.stop();\n      }\n    };\n  }\n\n  <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">return</span></span> {\n    addClass: animateUp,\n    removeClass: animateDown\n  };\n});</code></pre><p>注意，我们正在使用<a rel=\"nofollow\" href=\"http://jquery.com/\" target=\"_blank\">jQuery</a>以实现这个动画。jQuery并不要求JavaScript动画与AngularJS协作，但是我们将使用它，因为编写你自己的JavaScript动画库超过了这个教程的范围。想要了解更多关于<code>jQuery.animate</code>的信息，请参阅<a rel=\"nofollow\" href=\"http://api.jquery.com/animate/\" target=\"_blank\">jQuery文档</a>。</p><p>包含我们注册过的类的元素，无论元素上添加了一个类还是移除了一个类，都会调用<code>addClass</code>回调函数和<code>removeClass</code>回调函数；在本案例中，注册过的类是<code>.phone</code>。当元素上添加了<code>.active</code>类（通过<code>ng-class</code>指令），将引发<code>addClass</code>JavaScript回调函数，该回调函数带有一个参数<code>element</code>。最后传入的参数是<code>done</code>回调函数。<code>done</code>回调函数的目的是，通过调用该函数，当JavaScript动画结束时，可以让Angular知道。</p><p><code>removeClass</code>回调函数以同样的方式起作用，但是是在一个类从元素上移除时触发它。</p><p>在JavaScript回调函数中，你通过操纵DOM创建了该动画。在上面的代码中，这就是<code>element.css()</code>和<code>element.animate()</code>所做的事情。回调函数用<code>500px</code>的偏移定位了下一个元素，把前一个项目和新的项目往上移<code>500px</code>，使两个项目一起动起来。这导致了一个仿传送带的动画。当<code>animate</code>函数完成它的工作，它会调用 <code>done</code>。</p><p>注意<code>addClass</code>和<code>removeClass</code>两者都返回了一个函数。这是一个<strong>可选的</strong>函数，当动画被取消时（同一个元素上发生了别的动画）时或者动画完成时，会调用这个函数。向这个函数传递一个布尔参数，该参数让开发者知道动画是否被取消了。当动画完成时，这个函数可以用来做一些扫尾工作。</p><h2>总结</h2><p>现在你学会了！我们在相对短的时间里创建了一个web应用。在<a href=\"g5lr1jtn.html\" target=\"_blank\">完结篇</a>中我们将讨论接下来何去何从。</p><h2>相关教程</h2><p><a href=\"https://www.w3cschool.cn/css/\" target=\"_blank\">CSS教程</a></p></div></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 14,
      "parent_sort_index": 4,
      "chapter_level_one_id": "0e64fc8d8cc7e3ed9dc19d823d323344",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "AngularJS v1.5 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "76d38133186756dc7293f0bf333b6739",
      "chapter_level_two_parent_id": "0e64fc8d8cc7e3ed9dc19d823d323344",
      "chapter_level_two_name": "AngularJS REST和自定义服务",
      "chapter_level_two_url": "/angularjs/rgct1jua.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><div class=\"wkcontent\"><h2>REST和自定义服务</h2><p>在这一步中，你将改变我们获取数据的方法。</p><ul><li>我们定义了一个自定义服务，它代表了一个<a rel=\"nofollow\" href=\"http://en.wikipedia.org/wiki/Representational_State_Transfer\" target=\"_blank\">RESTful</a>客户端。利用该客户端，我们可以用更容易的方式制作一个向服务器索取数据的请求，不需要去处理底层?<a rel=\"nofollow\" href=\"https://docs.angularjs.org/api/ng/service/%24http\" target=\"_blank\">$http</a> API、HTTP方法以及URL。</li></ul><p>把工作空间重置到第十一步</p><pre><code class=\"hljs bash\">git checkout <span class=\"hljs-_\"><span class=\"hljs-_\">-f</span></span> step-11</code></pre><p>刷新你的浏览器或在线检查这一步：<a rel=\"nofollow\" href=\"http://angular.github.io/angular-phonecat/step-11/app\" target=\"_blank\">Step 8 Live Demo</a></p><p>下面列出了第十步和第十一步之间最重要的区别。你可以在<a rel=\"nofollow\" href=\"https://github.com/angular/angular-phonecat/compare/step-10...step-11\" target=\"_blank\" title=\"See diff on Github\">GitHub</a>上看到完整的差异。</p><h2 class=\"head2\">依赖性</h2><p>Angular在<code>ngResource</code>模块中提供了安静的功能，它是与核心Angular框架分开分布的。</p><p>我们正在使用<a rel=\"nofollow\" href=\"http://bower.io/\" target=\"_blank\">Bower</a>以安装客户端依赖性。这一步更新的<code>bower.json</code>配置文件，以包含新的依赖性：</p><pre><code class=\"hljs json\">{\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\">\"name\"</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">\"angular-seed\"</span></span>,\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\">\"description\"</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">\"A starter project for AngularJS\"</span></span>,\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\">\"version\"</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">\"0.0.0\"</span></span>,\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\">\"homepage\"</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">\"https://github.com/angular/angular-seed\"</span></span>,\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\">\"license\"</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">\"MIT\"</span></span>,\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\">\"private\"</span></span>: <span class=\"hljs-literal\"><span class=\"hljs-literal\">true</span></span>,\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\">\"dependencies\"</span></span>: {\n    <span class=\"hljs-attr\"><span class=\"hljs-attr\">\"angular\"</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">\"1.4.x\"</span></span>,\n    <span class=\"hljs-attr\"><span class=\"hljs-attr\">\"angular-mocks\"</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">\"1.4.x\"</span></span>,\n    <span class=\"hljs-attr\"><span class=\"hljs-attr\">\"jquery\"</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">\"~2.1.1\"</span></span>,\n    <span class=\"hljs-attr\"><span class=\"hljs-attr\">\"bootstrap\"</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">\"~3.1.1\"</span></span>,\n    <span class=\"hljs-attr\"><span class=\"hljs-attr\">\"angular-route\"</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">\"1.4.x\"</span></span>,\n    <span class=\"hljs-attr\"><span class=\"hljs-attr\">\"angular-resource\"</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">\"1.4.x\"</span></span>\n  }\n}</code></pre><p>新的依赖性<code>\"angular-resource\": \"1.4.x\"</code>告诉bower安装一个以angular为源的组件的版本，它与v1.4x版兼容。我们必须要求bower下载并安装这个依赖性。我们可以通过运行下面的指令来做到它：</p><pre><code class=\"hljs coffeescript\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\">npm</span></span> install</code></pre><div class=\"alert alert-warning\">  **警告：**如果自从你上一次运行`npm install`以后，Angular又发布了一个新版本，则你用`bower install`可能遇到问题，因为你安装的angular.js的版本与它有冲突。如果你想通过它，则需要在运行`npm install`之前先删除你的`app/bower_components`文件夹。</div><div class=\"alert alert-info\">  **注意：**如果你已经全局安装了bower，则你可以运行`bower install`，但是为了我们已经预配置的项目,`npm install`为我们运行了bower。</div><h2 class=\"head2\">模板</h2><p>我们的自定义源服务将被定义在<code>app/js/services.js</code>中，因此我们需要在我们的布局模板中包含这个文件。另外，我们还需要载入<code>angular-resouces.js</code>文件，它包含了<a rel=\"nofollow\" href=\"https://docs.angularjs.org/api/ngResource\" target=\"_blank\">ngResource</a>模块：</p><p>app/index.html.</p><pre><code class=\"language-html hljs xml\">...\n  <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">script</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">src</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"/attachments/image/wk/angularjs/angular-resource.js\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span><span class=\"undefined\"></span><span class=\"hljs-tag\"><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">script</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n  <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">script</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">src</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"/attachments/image/wk/angularjs/services.js\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span><span class=\"undefined\"></span><span class=\"hljs-tag\"><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">script</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n...</code></pre><h2 class=\"head2\">服务</h2><p>我们创建了自己的服务，以提供对服务器上的手机数据的访问：</p><p>app/js/services.js.</p><pre><code class=\"language-js hljs javascript\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">var</span></span> phonecatServices = angular.module(<span class=\"hljs-string\"><span class=\"hljs-string\">'phonecatServices'</span></span>, [<span class=\"hljs-string\"><span class=\"hljs-string\">'ngResource'</span></span>]);\n\nphonecatServices.factory(<span class=\"hljs-string\"><span class=\"hljs-string\">'Phone'</span></span>, [<span class=\"hljs-string\"><span class=\"hljs-string\">'$resource'</span></span>,\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">$resource</span></span></span><span class=\"hljs-function\">)</span></span>{\n    <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">return</span></span> $resource(<span class=\"hljs-string\"><span class=\"hljs-string\">'phones/:phoneId.json'</span></span>, {}, {\n      query: {method:<span class=\"hljs-string\"><span class=\"hljs-string\">'GET'</span></span>, params:{phoneId:<span class=\"hljs-string\"><span class=\"hljs-string\">'phones'</span></span>}, isArray:<span class=\"hljs-literal\"><span class=\"hljs-literal\">true</span></span>}\n    });\n  }]);</code></pre><p>我们使用模块API，利用工厂函数注册自定义的服务。我们传入服务的名称“Phone”以及工厂函数。工厂函数的结构近似于控制器，两者都可以声明依赖性，以通过函数参数注入。Phone服务在<code>$resource</code>服务上声明了一个依赖性。</p><p><a rel=\"nofollow\" href=\"https://docs.angularjs.org/api/ngResource/service/%24resource\" target=\"_blank\"><code>$resource</code></a>服务使它更容易只用寥寥几行代码创建一个<a rel=\"nofollow\" href=\"http://en.wikipedia.org/wiki/Representational_State_Transfer\" target=\"_blank\">RESTful</a>客户端。这种客户端可以用在我们的应用中，代替底层<a rel=\"nofollow\" href=\"https://docs.angularjs.org/api/ng/service/%24http\" target=\"_blank\">$http</a>服务。</p><p>app/js/app.js.</p><pre><code class=\"language-js hljs javascript\">...\nangular.module(<span class=\"hljs-string\"><span class=\"hljs-string\">'phonecatApp'</span></span>, [<span class=\"hljs-string\"><span class=\"hljs-string\">'ngRoute'</span></span>, <span class=\"hljs-string\"><span class=\"hljs-string\">'phonecatControllers'</span></span>,<span class=\"hljs-string\"><span class=\"hljs-string\">'phonecatFilters'</span></span>, <span class=\"hljs-string\"><span class=\"hljs-string\">'phonecatServices'</span></span>]).\n...</code></pre><p>我们需要把<code>phonecatServices</code>模块依赖性添加到<code>phonecatApp</code>模块的需要数列中。</p><h2 class=\"head2\">控制器</h2><p>通过重构掉底层的<a rel=\"nofollow\" href=\"https://docs.angularjs.org/api/ng/service/%24http\" target=\"_blank\">$http</a>服务，我们简化了我们的子控制器（<code>PhoneListCtrl</code>和<code>PhoneDetailCtrl</code>），用称为<code>Phone</code>的服务替代它。Angular的<a rel=\"nofollow\" href=\"https://docs.angularjs.org/api/ngResource/service/%24resource\" target=\"_blank\"><code>$resource</code></a>服务比<code>$http</code>更容易使用，用来与作为REST的源对外提供的数据源交互。现在我们更容易理解控制器中的这些代码是干什么的了。</p><p>app/js/controllers.js.</p><pre><code class=\"language-js hljs javascript\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">var</span></span> phonecatControllers = angular.module(<span class=\"hljs-string\"><span class=\"hljs-string\">'phonecatControllers'</span></span>, []);\n\n...\n\nphonecatControllers.controller(<span class=\"hljs-string\"><span class=\"hljs-string\">'PhoneListCtrl'</span></span>, [<span class=\"hljs-string\"><span class=\"hljs-string\">'$scope'</span></span>, <span class=\"hljs-string\"><span class=\"hljs-string\">'Phone'</span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">$scope, Phone</span></span></span><span class=\"hljs-function\">) </span></span>{\n  $scope.phones = Phone.query();\n  $scope.orderProp = <span class=\"hljs-string\"><span class=\"hljs-string\">'age'</span></span>;\n}]);\n\nphonecatControllers.controller(<span class=\"hljs-string\"><span class=\"hljs-string\">'PhoneDetailCtrl'</span></span>, [<span class=\"hljs-string\"><span class=\"hljs-string\">'$scope'</span></span>, <span class=\"hljs-string\"><span class=\"hljs-string\">'$routeParams'</span></span>, <span class=\"hljs-string\"><span class=\"hljs-string\">'Phone'</span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">$scope, $routeParams, Phone</span></span></span><span class=\"hljs-function\">) </span></span>{\n  $scope.phone = Phone.get({phoneId: $routeParams.phoneId}, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">phone</span></span></span><span class=\"hljs-function\">) </span></span>{\n    $scope.mainImageUrl = phone.images[<span class=\"hljs-number\"><span class=\"hljs-number\">0</span></span>];\n  });\n\n  $scope.setImage = <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">imageUrl</span></span></span><span class=\"hljs-function\">) </span></span>{\n    $scope.mainImageUrl = imageUrl;\n  }\n}]);</code></pre><p>注意我们把<code>PhoneList</code>内部替换成了什么：</p><pre><code class=\"hljs php\">$http.get(<span class=\"hljs-string\"><span class=\"hljs-string\">'phones/phones.json'</span></span>).success(<span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">(data)</span></span></span><span class=\"hljs-function\"> </span></span>{\n  $scope.phones = data;\n});</code></pre><p>换成：</p><pre><code class=\"hljs bash\"><span class=\"hljs-variable\"><span class=\"hljs-variable\">$scope</span></span>.phones = Phone.query();</code></pre><p>我们通过这条简单语句来查询所有手机。</p><p>一个需要注意的重要事情是，在上面的代码中，在引用手机服务的方法的时候，我们没有传递任何回调函数。虽然它看起来就像结果是同步返回的，但其实根本不是。同步返回的是一个“future”——一个对象，当XHR响应返回的时候，将填入数据。因为Angular中的数据绑定，我们可以使用这个future并且把它绑定到我们的模板上。然后，当数据到达的时候，视图将自动更新。</p><p>有些时候，单凭future对象和数据绑定不足以满足我们所有的需求，在那种情况下，我们可以添加一个回调函数，以处理服务器响应。<code>PhoneDetailCtrl</code>控制器通过设置回调函数中的<code>mainImageUrl</code>来演示它。</p><h2 class=\"head2\">测试</h2><p>因为我们现在使用了<a rel=\"nofollow\" href=\"https://docs.angularjs.org/api/ngResource\" target=\"_blank\">ngResource</a>模块，为了用以angular为源更新Karma配置单文件，它是必要的，这样新测试才能通过。</p><p>test/karma.conf.js:</p><pre><code class=\"language-js hljs javascript\">    files : [\n      <span class=\"hljs-string\"><span class=\"hljs-string\">'app/bower_components/angular/angular.js'</span></span>,\n      <span class=\"hljs-string\"><span class=\"hljs-string\">'app/bower_components/angular-route/angular-route.js'</span></span>,\n      <span class=\"hljs-string\"><span class=\"hljs-string\">'app/bower_components/angular-resource/angular-resource.js'</span></span>,\n      <span class=\"hljs-string\"><span class=\"hljs-string\">'app/bower_components/angular-mocks/angular-mocks.js'</span></span>,\n      <span class=\"hljs-string\"><span class=\"hljs-string\">'app/js/**/*.js'</span></span>,\n      <span class=\"hljs-string\"><span class=\"hljs-string\">'test/unit/**/*.js'</span></span>\n    ],</code></pre><p>我们已经修改了我们的单元测试，以验证我们的新服务会发起HTTP请求，并像预期那样处理它们。测试还检查了我们的控制器正确地与服务交互。</p><p><a rel=\"nofollow\" href=\"https://docs.angularjs.org/api/ngResource/service/%24resource\" target=\"_blank\">$resource</a>服务参增加了带有用来更新和删除源的方法的响应对象。如果我们打算使用标准的<code>toEqual</code>匹配器，我们的测试将失败，因为测试值不能与响应严格匹配。要想解决这个问题，我们使用了一个新定义的<code>toEqualData</code>[Jasmine matcher][jasmine匹配器]。当<code>toEqualData</code>匹配器对比两个对象的时候，它考虑对象属性属性而忽略对象方法。</p><p>test/unit/controllersSpec.js:</p><pre><code class=\"language-js hljs javascript\">describe(<span class=\"hljs-string\"><span class=\"hljs-string\">'PhoneCat controllers'</span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span>{\n\n  beforeEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>)</span></span>{\n    <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">this</span></span>.addMatchers({\n      toEqualData: <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">expected</span></span></span><span class=\"hljs-function\">) </span></span>{\n        <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">return</span></span> angular.equals(<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">this</span></span>.actual, expected);\n      }\n    });\n  });\n\n  beforeEach(<span class=\"hljs-built_in\"><span class=\"hljs-built_in\">module</span></span>(<span class=\"hljs-string\"><span class=\"hljs-string\">'phonecatApp'</span></span>));\n  beforeEach(<span class=\"hljs-built_in\"><span class=\"hljs-built_in\">module</span></span>(<span class=\"hljs-string\"><span class=\"hljs-string\">'phonecatServices'</span></span>));\n\n  describe(<span class=\"hljs-string\"><span class=\"hljs-string\">'PhoneListCtrl'</span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>)</span></span>{\n    <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">var</span></span> scope, ctrl, $httpBackend;\n\n    beforeEach(inject(<span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">_$httpBackend_, $rootScope, $controller</span></span></span><span class=\"hljs-function\">) </span></span>{\n      $httpBackend = _$httpBackend_;\n      $httpBackend.expectGET(<span class=\"hljs-string\"><span class=\"hljs-string\">'phones/phones.json'</span></span>).\n          respond([{name: <span class=\"hljs-string\"><span class=\"hljs-string\">'Nexus S'</span></span>}, {name: <span class=\"hljs-string\"><span class=\"hljs-string\">'Motorola DROID'</span></span>}]);\n\n      scope = $rootScope.$<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">new</span></span>();\n      ctrl = $controller(<span class=\"hljs-string\"><span class=\"hljs-string\">'PhoneListCtrl'</span></span>, {$scope: scope});\n    }));\n\n    it(<span class=\"hljs-string\"><span class=\"hljs-string\">'should create \"phones\" model with 2 phones fetched from xhr'</span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span>{\n      expect(scope.phones).toEqualData([]);\n      $httpBackend.flush();\n\n      expect(scope.phones).toEqualData(\n          [{name: <span class=\"hljs-string\"><span class=\"hljs-string\">'Nexus S'</span></span>}, {name: <span class=\"hljs-string\"><span class=\"hljs-string\">'Motorola DROID'</span></span>}]);\n    });\n\n    it(<span class=\"hljs-string\"><span class=\"hljs-string\">'should set the default value of orderProp model'</span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span>{\n      expect(scope.orderProp).toBe(<span class=\"hljs-string\"><span class=\"hljs-string\">'age'</span></span>);\n    });\n  });\n\n  describe(<span class=\"hljs-string\"><span class=\"hljs-string\">'PhoneDetailCtrl'</span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>)</span></span>{\n    <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">var</span></span> scope, $httpBackend, ctrl,\n        xyzPhoneData = <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span>{\n          <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">return</span></span> {\n            name: <span class=\"hljs-string\"><span class=\"hljs-string\">'phone xyz'</span></span>,\n            images: [<span class=\"hljs-string\"><span class=\"hljs-string\">'image/url1.png'</span></span>, <span class=\"hljs-string\"><span class=\"hljs-string\">'image/url2.png'</span></span>]\n          }\n        };\n\n    beforeEach(inject(<span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">_$httpBackend_, $rootScope, $routeParams, $controller</span></span></span><span class=\"hljs-function\">) </span></span>{\n      $httpBackend = _$httpBackend_;\n      $httpBackend.expectGET(<span class=\"hljs-string\"><span class=\"hljs-string\">'phones/xyz.json'</span></span>).respond(xyzPhoneData());\n\n      $routeParams.phoneId = <span class=\"hljs-string\"><span class=\"hljs-string\">'xyz'</span></span>;\n      scope = $rootScope.$<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">new</span></span>();\n      ctrl = $controller(<span class=\"hljs-string\"><span class=\"hljs-string\">'PhoneDetailCtrl'</span></span>, {$scope: scope});\n    }));\n\n    it(<span class=\"hljs-string\"><span class=\"hljs-string\">'should fetch phone detail'</span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span>{\n      expect(scope.phone).toEqualData({});\n      $httpBackend.flush();\n\n      expect(scope.phone).toEqualData(xyzPhoneData());\n    });\n  });\n});</code></pre><p>你现在可以在Karma选项卡中看到如下的输出：</p><pre>Chrome 22.0: Executed 5 of 5 SUCCESS (0.038 secs / 0.01 secs)</pre><h2>总结</h2><p>现在我们已经看到了如何建立一个自定义的服务，作为REST的客户端，我们已经准备好前往<a href=\"96381jtk.html\" target=\"_blank\">第十二步 应用动画</a>（最后一步）以学会如何用动画提高应用程序。</p></div></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 13,
      "parent_sort_index": 4,
      "chapter_level_one_id": "0e64fc8d8cc7e3ed9dc19d823d323344",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "AngularJS v1.5 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "bc70e0f45734b8b692ae98513015b3b3",
      "chapter_level_two_parent_id": "0e64fc8d8cc7e3ed9dc19d823d323344",
      "chapter_level_two_name": "AngularJS 事件处理函数",
      "chapter_level_two_url": "/angularjs/epkb1ju7.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><div class=\"wkcontent\"><h2>事件处理函数</h2><p>在这一步中，你将添加一个可点击的手机图像交换器，指向手机详情页面。</p><ul><li>手机详情视图显示了当前手机的一张大图像以及若干张小的缩略图。如果我们可以通过在想要的缩略图中点吉，从而把大图像与任何小缩略图作替换，这会很棒。让我们看一看我们可以如何用Angular做到这。</li></ul><p>把工作空间重置到第十步</p><pre><code class=\"hljs bash\">git checkout <span class=\"hljs-_\"><span class=\"hljs-_\">-f</span></span> step-10</code></pre><p>刷新你的浏览器或在线检查这一步：<a rel=\"nofollow\" href=\"http://angular.github.io/angular-phonecat/step-10/app\" target=\"_blank\">Step 10 Live Demo</a></p><p>下面列出了第九步和第十步之间最重要的区别。你可以在<a rel=\"nofollow\" href=\"https://github.com/angular/angular-phonecat/compare/step-9...step-10\" target=\"_blank\" title=\"See diff on Github\">GitHub</a>上看到完整的差异。</p><h2 class=\"head2\">控制器</h2><p>app/js/controllers.js:</p><pre><code class=\"language-js hljs javascript\">...\nvar phonecatControllers = angular.module(<span class=\"hljs-string\"><span class=\"hljs-string\">'phonecatControllers'</span></span>,[]);\n\nphonecatControllers.controller(<span class=\"hljs-string\"><span class=\"hljs-string\">'PhoneDetailCtrl'</span></span>, [<span class=\"hljs-string\"><span class=\"hljs-string\">'$scope'</span></span>, <span class=\"hljs-string\"><span class=\"hljs-string\">'$routeParams'</span></span>, <span class=\"hljs-string\"><span class=\"hljs-string\">'$http'</span></span>,\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">$scope, $routeParams, $http</span></span></span><span class=\"hljs-function\">) </span></span>{\n    $http.get(<span class=\"hljs-string\"><span class=\"hljs-string\">'phones/'</span></span> + $routeParams.phoneId + <span class=\"hljs-string\"><span class=\"hljs-string\">'.json'</span></span>).success(<span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">data</span></span></span><span class=\"hljs-function\">) </span></span>{\n      $scope.phone = data;\n      $scope.mainImageUrl = data.images[<span class=\"hljs-number\"><span class=\"hljs-number\">0</span></span>];\n    });\n\n    $scope.setImage = <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">imageUrl</span></span></span><span class=\"hljs-function\">) </span></span>{\n      $scope.mainImageUrl = imageUrl;\n    };\n  }]);</code></pre><p>在<code>PhoneDetailCtrl</code>控制器中，我们创建了<code>mainImageUrl</code>模块属性，并把它的默认值设置为第一个手机图像URL。</p><p>我们还创建了一个<code>setImage</code>事件处理函数，它将改变<code>mainImageUrl</code>的值。</p><h2 class=\"head2\">模板</h2><p>app/partials/phone-detail.html:</p><pre><code class=\"language-html hljs xml\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">img</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">ng-src</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"{{mainImageUrl}}\"</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">class</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"phone\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n\n...\n\n<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">ul</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">class</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"phone-thumbs\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n  <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">li</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">ng-repeat</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"img in phone.images\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n    <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">img</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">ng-src</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"{{img}}\"</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">ng-click</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"setImage(img)\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n  <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">li</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">ul</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n...</code></pre><p>我们把大图像的<code>ngSrc</code>指令绑定到<code>mainImageUrl</code>属性上。</p><p>我们还将利用缩略图注册一个<a rel=\"nofollow\" href=\"https://docs.angularjs.org/api/ng/directive/ngClick\" target=\"_blank\"><code>ngClick</code></a>处理函数。当用户在缩图略之一上点击时，处理函数将使用<code>setImage</code>事件处理函数以改变<code>mainImageUrl</code>属性的值，把它变成缩略图的URL。</p><div style=\"display: none\">TODO!<img class=\"diagram\" src=\"https://atts.w3cschool.cn/attachments/image/wk/angularjs/tutorial_10-11_final.png\" alt=\"\"></div><h2 class=\"head2\">测试</h2><p>要想验证这个功能，我们添加了两个端到端测试。一个验证了主图像被默认设置为每一个手机图像。另一个测试了在一些缩略图上的点击，并验证了相应的主图像改变。</p><p>test/e2e/scenarios.js:</p><pre><code class=\"language-js hljs javascript\">...\n  describe(<span class=\"hljs-string\"><span class=\"hljs-string\">'Phone detail view'</span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span>{\n\n...\n\n    it(<span class=\"hljs-string\"><span class=\"hljs-string\">'should display the first phone image as the main phone image'</span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span>{\n      expect(element(by.css(<span class=\"hljs-string\"><span class=\"hljs-string\">'img.phone'</span></span>)).getAttribute(<span class=\"hljs-string\"><span class=\"hljs-string\">'src'</span></span>)).toMatch(<span class=\"hljs-regexp\"><span class=\"hljs-regexp\">/img\\/phones\\/nexus-s.0.jpg/</span></span>);\n    });\n\n    it(<span class=\"hljs-string\"><span class=\"hljs-string\">'should swap main image if a thumbnail image is clicked on'</span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span>{\n      element(by.css(<span class=\"hljs-string\"><span class=\"hljs-string\">'.phone-thumbs li:nth-child(3) img'</span></span>)).click();\n      expect(element(by.css(<span class=\"hljs-string\"><span class=\"hljs-string\">'img.phone'</span></span>)).getAttribute(<span class=\"hljs-string\"><span class=\"hljs-string\">'src'</span></span>)).toMatch(<span class=\"hljs-regexp\"><span class=\"hljs-regexp\">/img\\/phones\\/nexus-s.2.jpg/</span></span>);\n\n      element(by.css(<span class=\"hljs-string\"><span class=\"hljs-string\">'.phone-thumbs li:nth-child(1) img'</span></span>)).click();\n      expect(element(by.css(<span class=\"hljs-string\"><span class=\"hljs-string\">'img.phone'</span></span>)).getAttribute(<span class=\"hljs-string\"><span class=\"hljs-string\">'src'</span></span>)).toMatch(<span class=\"hljs-regexp\"><span class=\"hljs-regexp\">/img\\/phones\\/nexus-s.0.jpg/</span></span>);\n    });\n  });</code></pre><p>现在你可以再次运行<code>rpn run protractor</code>以看到测试运行。</p><p>你还必须重构你的单元测试之一，因为又有一个<code>mainImageUrl</code>模块属性添加到了<code>PhoneDetailCtrl</code>控制器上了。下面，我们创建了函数<code>xyzPhoneData</code>，该函数会返回相应的带有<code>image</code>元素属性的json，从而使测试通过。</p><p>test/unit/controllersSpec.js:</p><pre><code class=\"language-js hljs javascript\">...\n  beforeEach(<span class=\"hljs-built_in\"><span class=\"hljs-built_in\">module</span></span>(<span class=\"hljs-string\"><span class=\"hljs-string\">'phonecatApp'</span></span>));\n\n...\n\n describe(<span class=\"hljs-string\"><span class=\"hljs-string\">'PhoneDetailCtrl'</span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>)</span></span>{\n    <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">var</span></span> scope, $httpBackend, ctrl,\n        xyzPhoneData = <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span>{\n          <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">return</span></span> {\n            name: <span class=\"hljs-string\"><span class=\"hljs-string\">'phone xyz'</span></span>,\n            images: [<span class=\"hljs-string\"><span class=\"hljs-string\">'image/url1.png'</span></span>, <span class=\"hljs-string\"><span class=\"hljs-string\">'image/url2.png'</span></span>]\n          }\n        };\n\n    beforeEach(inject(<span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">_$httpBackend_, $rootScope, $routeParams, $controller</span></span></span><span class=\"hljs-function\">) </span></span>{\n      $httpBackend = _$httpBackend_;\n      $httpBackend.expectGET(<span class=\"hljs-string\"><span class=\"hljs-string\">'phones/xyz.json'</span></span>).respond(xyzPhoneData());\n\n      $routeParams.phoneId = <span class=\"hljs-string\"><span class=\"hljs-string\">'xyz'</span></span>;\n      scope = $rootScope.$<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">new</span></span>();\n      ctrl = $controller(<span class=\"hljs-string\"><span class=\"hljs-string\">'PhoneDetailCtrl'</span></span>, {$scope: scope});\n    }));\n\n    it(<span class=\"hljs-string\"><span class=\"hljs-string\">'should fetch phone detail'</span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span>{\n      expect(scope.phone).toBeUndefined();\n      $httpBackend.flush();\n\n      expect(scope.phone).toEqual(xyzPhoneData());\n    });\n  });</code></pre><p>你的单元测试现在应该通过了。</p><h2>实验</h2><ul><li><p>让我们给<code>PhoneDetailCtrl</code>添加一个新的控制器方法：</p><pre><code class=\"hljs php\">$scope.hello = <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">(name)</span></span></span><span class=\"hljs-function\"> </span></span>{\n    alert(<span class=\"hljs-string\"><span class=\"hljs-string\">'Hello '</span></span> + (name || <span class=\"hljs-string\"><span class=\"hljs-string\">'world'</span></span>) + <span class=\"hljs-string\"><span class=\"hljs-string\">'!'</span></span>);\n}</code></pre><p>再添加</p><pre><code class=\"hljs xml\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">button</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">ng-click</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"hello('Elmo')\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>Hello<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">button</span></span></span><span class=\"hljs-tag\">&gt;</span></span></code></pre><p>to the <code>phone-detail.html</code> template.</p></li></ul><div style=\"display: none\">TODO!  控制器方法在控制器/作用域之间继承，因此你可以在`phone-list.html`模板内使用同样的片段。* 把`hello`方法从`PhoneCatCtrl`移到`PhoneListCtrl`，而且你将看到在`index.html`中声明的按钮将停止工作，与此同时在`phone-list.html`模板中声明的那个按钮依然在运作。</div><h2>总结</h2><p>随着手机图像交换器到位，我们准备前往<a href=\"rgct1jua.html\" target=\"_blank\">第十一步 REST和自定义服务</a>以学习取得数据的一个更好方法。</p></div></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 12,
      "parent_sort_index": 4,
      "chapter_level_one_id": "0e64fc8d8cc7e3ed9dc19d823d323344",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "AngularJS v1.5 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "6c00a93ed09a3a1e17f637dde6f97720",
      "chapter_level_two_parent_id": "0e64fc8d8cc7e3ed9dc19d823d323344",
      "chapter_level_two_name": "AngularJS 筛选器",
      "chapter_level_two_url": "/angularjs/h8ng1ju4.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><div class=\"wkcontent\"><h2>筛选器</h2><p>在使用 AngularJS 的过程中会遇到一些特殊的数据处理，你可以通过采用 AngularJS 筛选器的方式来对不同的数据处理实现想要达到的效果。</p><p>在这一步中，你将学会如何创建你自己的自定义显示筛选器。</p><ul><li>在上一步中，详情页要么显示“true”，要么显示“false”以指示某个手机功能是否存在。我们已经使用了一个自定义筛选器以将那些文本字符串转换成另一种字型：“true”变成?，“false”变成?。让我们看看筛选器代码看起来如何。</li></ul><p>把工作空间重置到第九步</p><pre><code class=\"hljs bash\">git checkout <span class=\"hljs-_\"><span class=\"hljs-_\">-f</span></span> step-9</code></pre><p>刷新你的浏览器或在线检查这一步：<a rel=\"nofollow\" href=\"http://angular.github.io/angular-phonecat/step-9/app\" target=\"_blank\">Step 9 Live Demo</a></p><p>下面列出了第八步和第九步之间最重要的区别。你可以在<a rel=\"nofollow\" href=\"https://github.com/angular/angular-phonecat/compare/step-8...step-9\" target=\"_blank\" title=\"See diff on Github\">GitHub</a>上看到完整的差异。</p><h2 class=\"head2\">自定义筛选器</h2><p>为了创建一个新筛选器，你即将创建一个<code>phonecatFilters</code>模块，并用这个模块注册你的自定义滤镜：</p><p><strong><code>app/js/filters.js</code>:</strong></p><pre><code class=\"language-js hljs javascript\">angular.module(<span class=\"hljs-string\"><span class=\"hljs-string\">'phonecatFilters'</span></span>, []).filter(<span class=\"hljs-string\"><span class=\"hljs-string\">'checkmark'</span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span>{\n  <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">return</span></span> <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">input</span></span></span><span class=\"hljs-function\">) </span></span>{\n    <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">return</span></span> input ? <span class=\"hljs-string\"><span class=\"hljs-string\">'\\u2713'</span></span> : <span class=\"hljs-string\"><span class=\"hljs-string\">'\\u2718'</span></span>;\n  };\n});</code></pre><p>我们的筛选器的名字是“checkmark”。<code>input</code>要么估值为<code>true</code>，要么估值为<code>false</code>，而且会返回我们选中用来代表true和false的两个unicode字符之一（<code>\\u2713</code>-&gt;?代表true，<code>\\u2718</code> -&gt; ?代表false）。</p><p>现在我们的筛选器已经准备好了，我们需要注册<code>phonecatFilters</code>模块作为我们的主<code>phonecatApp</code>模块的依赖性。</p><p><strong><code>app/js/app.js</code>:</strong></p><pre><code class=\"language-js hljs javascript\">...\nangular.module(<span class=\"hljs-string\"><span class=\"hljs-string\">'phonecatApp'</span></span>, [<span class=\"hljs-string\"><span class=\"hljs-string\">'ngRoute'</span></span>,<span class=\"hljs-string\"><span class=\"hljs-string\">'phonecatControllers'</span></span>,<span class=\"hljs-string\"><span class=\"hljs-string\">'phonecatFilters'</span></span>]);\n...</code></pre><h2 class=\"head2\">模板</h2><p>因为筛选器生存在<code>app/js/filters.js</code>文件夹中，我们需要在我们的布局模板中包含这个文件。</p><p><strong><code>app/index.html</code>:</strong></p><pre><code class=\"language-html hljs xml\">...\n <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">script</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">src</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"/attachments/image/wk/angularjs/controllers.js\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span><span class=\"undefined\"></span><span class=\"hljs-tag\"><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">script</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">script</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">src</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"/attachments/image/wk/angularjs/filters.js\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span><span class=\"undefined\"></span><span class=\"hljs-tag\"><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">script</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n...</code></pre><p>在Angular模板中使用筛选器的句法如下所示：</p><pre><code class=\"hljs\">{{ expression | filter }}</code></pre><p>让我们在手机详情模板中采用这个筛选器：</p><p><strong><code>app/partials/phone-detail.html</code>:</strong></p><pre><code class=\"language-html hljs xml\">...\n    <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">dl</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n      <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">dt</span></span></span><span class=\"hljs-tag\">&gt;</span></span>Infrared<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">dt</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n      <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">dd</span></span></span><span class=\"hljs-tag\">&gt;</span></span>{{phone.connectivity.infrared | checkmark}}<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">dd</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n      <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">dt</span></span></span><span class=\"hljs-tag\">&gt;</span></span>GPS<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">dt</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n      <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">dd</span></span></span><span class=\"hljs-tag\">&gt;</span></span>{{phone.connectivity.gps | checkmark}}<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">dd</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n    <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">dl</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n...</code></pre><h2 class=\"head2\">测试</h2><p>筛选器，就像任何别的组件，必须被测试，而且写这些测试很容易。</p><p><strong><code>test/unit/filtersSpec.js</code>:</strong></p><pre><code class=\"language-js hljs javascript\">describe(<span class=\"hljs-string\"><span class=\"hljs-string\">'filter'</span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span>{\n\n  beforeEach(<span class=\"hljs-built_in\"><span class=\"hljs-built_in\">module</span></span>(<span class=\"hljs-string\"><span class=\"hljs-string\">'phonecatFilters'</span></span>));\n\n  describe(<span class=\"hljs-string\"><span class=\"hljs-string\">'checkmark'</span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span>{\n\n    it(<span class=\"hljs-string\"><span class=\"hljs-string\">'should convert boolean values to unicode checkmark or cross'</span></span>,\n        inject(<span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">checkmarkFilter</span></span></span><span class=\"hljs-function\">) </span></span>{\n      expect(checkmarkFilter(<span class=\"hljs-literal\"><span class=\"hljs-literal\">true</span></span>)).toBe(<span class=\"hljs-string\"><span class=\"hljs-string\">'\\u2713'</span></span>);\n      expect(checkmarkFilter(<span class=\"hljs-literal\"><span class=\"hljs-literal\">false</span></span>)).toBe(<span class=\"hljs-string\"><span class=\"hljs-string\">'\\u2718'</span></span>);\n    }));\n  });\n});</code></pre><p>我们必须在执行任何筛选器测试之前调用<code>beforeEach(module('phonecatFilters'))</code>。这种调用把我们的<code>phonecatFilter</code>模块载入到注入器，以测试运行。</p><p>注意我们将调用助手函数<code>inject(function(checkmarkFilter) { ... })</code>，从而获得访问我们想要测试的文件。参见<a rel=\"nofollow\" href=\"https://docs.angularjs.org/api/ngMock/function/angular.mock.inject\" target=\"_blank\">angular.mock.inject()</a>。</p><p>注意在注入的时候，后缀<code>Filter</code>会追加到你的筛选器名称中。参见<a rel=\"nofollow\" href=\"https://docs.angularjs.org/guide/filter#using-filters-in-controllers-services-and-directives\" target=\"_blank\">筛选器指南</a>?部分，在那里是概述。</p><p>你现在必须在Karma选项卡中看到以下的输出：</p><pre>Chrome 22.0: Executed 4 of 4 SUCCESS (0.034 secs / 0.012 secs)</pre><h2>实验</h2><ul><li><p>让我们用一些<a rel=\"nofollow\" href=\"https://docs.angularjs.org/api/ng/filter\" target=\"_blank\">内建的Angular筛选器</a>来做实验，并把以下绑定添加到<code>index.html</code>：</p><ul><li><code>{{ \"lower cap string\" | uppercase }}</code></li><li><code>{{ {foo: \"bar\", baz: 23} | json }}</code></li><li><code>{{ 1304375948024 | date }}</code></li><li><code>{{ 1304375948024 | date:\"MM/dd/yyyy @ h:mma\" }}</code></li></ul></li><li><p>我们可以创建一个模块，带有一个输入元素，并把它与一个筛选绑定结合起来。向index.html添加以下代码：</p><pre><code class=\"language-html hljs xml\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">input</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">ng-model</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"userInput\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span> Uppercased: {{ userInput | uppercase }}</code></pre></li></ul><h2>总结</h2><p>现在你已经学会了如何编写并测试一个自定义筛选器，前往<a href=\"epkb1ju7.html\" target=\"_blank\">第十步 事件处理函数</a>以学习我们可以如何用Angular继续丰富手机详情页面。</p></div></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 11,
      "parent_sort_index": 4,
      "chapter_level_one_id": "0e64fc8d8cc7e3ed9dc19d823d323344",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "AngularJS v1.5 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "4fb2a50a634800826943e6e57dd565c3",
      "chapter_level_two_parent_id": "0e64fc8d8cc7e3ed9dc19d823d323344",
      "chapter_level_two_name": "AngularJS 更多模板",
      "chapter_level_two_url": "/angularjs/hv6b1ju1.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><div class=\"wkcontent\"><h2>更多模板</h2><p>在这一步中，你将实现手机详情视图，当用户在手机列表中点击了一款手机，就会显示这个视图。</p><ul><li>当你在列表中点击了一款手机，将显示带手机专有信息的手机详情视图。</li></ul><p>要想实现手机详情视力，我们将使用<a rel=\"nofollow\" href=\"https://docs.angularjs.org/api/ng/service/%24http\" target=\"_blank\">$http</a>以取回我们的数据，然后具体化<code>phone-detail.html</code>视图模板。</p><p>把工作空间重置到第八步</p><pre><code class=\"hljs bash\">git checkout <span class=\"hljs-_\"><span class=\"hljs-_\">-f</span></span> step-8</code></pre><p>刷新你的浏览器或在线检查这一步：<a rel=\"nofollow\" href=\"http://angular.github.io/angular-phonecat/step-8/app\" target=\"_blank\">Step 8 Live Demo</a></p><p>下面列出了第七步和第八步之间最重要的区别。你可以在<a rel=\"nofollow\" href=\"https://github.com/angular/angular-phonecat/compare/step-7...step-8\" target=\"_blank\" title=\"See diff on Github\">GitHub</a>上看到完整的差异。</p><h2 class=\"head2\">数据</h2><p>除了<code>phones.json</code>，<code>app/phones/</code>目录还包括一个针对每款手机的JSON文件：</p><p><strong><code>app/phones/nexus-s.json</code>:</strong> (sample snippet)</p><pre><code class=\"language-js hljs javascript\">{\n  <span class=\"hljs-string\"><span class=\"hljs-string\">\"additionalFeatures\"</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">\"Contour Display, Near Field Communications (NFC),...\"</span></span>,\n  <span class=\"hljs-string\"><span class=\"hljs-string\">\"android\"</span></span>: {\n      <span class=\"hljs-string\"><span class=\"hljs-string\">\"os\"</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">\"Android 2.3\"</span></span>,\n      <span class=\"hljs-string\"><span class=\"hljs-string\">\"ui\"</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">\"Android\"</span></span>\n  },\n  ...\n  <span class=\"hljs-string\"><span class=\"hljs-string\">\"images\"</span></span>: [\n      <span class=\"hljs-string\"><span class=\"hljs-string\">\"img/phones/nexus-s.0.jpg\"</span></span>,\n      <span class=\"hljs-string\"><span class=\"hljs-string\">\"img/phones/nexus-s.1.jpg\"</span></span>,\n      <span class=\"hljs-string\"><span class=\"hljs-string\">\"img/phones/nexus-s.2.jpg\"</span></span>,\n      <span class=\"hljs-string\"><span class=\"hljs-string\">\"img/phones/nexus-s.3.jpg\"</span></span>\n  ],\n  <span class=\"hljs-string\"><span class=\"hljs-string\">\"storage\"</span></span>: {\n      <span class=\"hljs-string\"><span class=\"hljs-string\">\"flash\"</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">\"16384MB\"</span></span>,\n      <span class=\"hljs-string\"><span class=\"hljs-string\">\"ram\"</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">\"512MB\"</span></span>\n  }\n}</code></pre><p>每个文件用同样的数据结构描述了手机的多种属性。我们将在手机详情视图中展示这些数据。</p><h2 class=\"head2\">控制器</h2><p>我们将使用<code>$http</code>服务以扩展<code>PhoneDetailCtrl</code>，从而取回JSON文件。这以手机列表控制器中同样的方式起作用。</p><p><strong><code>app/js/controllers.js</code>:</strong></p><pre><code class=\"language-js hljs javascript\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">var</span></span> phonecatControllers = angular.module(<span class=\"hljs-string\"><span class=\"hljs-string\">'phonecatControllers'</span></span>,[]);\n\nphonecatControllers.controller(<span class=\"hljs-string\"><span class=\"hljs-string\">'PhoneDetailCtrl'</span></span>, [<span class=\"hljs-string\"><span class=\"hljs-string\">'$scope'</span></span>, <span class=\"hljs-string\"><span class=\"hljs-string\">'$routeParams'</span></span>, <span class=\"hljs-string\"><span class=\"hljs-string\">'$http'</span></span>,\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">$scope, $routeParams, $http</span></span></span><span class=\"hljs-function\">) </span></span>{\n    $http.get(<span class=\"hljs-string\"><span class=\"hljs-string\">'phones/'</span></span> + $routeParams.phoneId + <span class=\"hljs-string\"><span class=\"hljs-string\">'.json'</span></span>).success(<span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">data</span></span></span><span class=\"hljs-function\">) </span></span>{\n      $scope.phone = data;\n    });\n  }]);</code></pre><p>要想为HTTP请求构造URL，我们使用从<code>$route</code>服务生成的当前路由中提取到的<code>$routeParames.phoneId</code>。</p><h2 class=\"head2\">模板</h2><p>该TBD占位符行已经被替换成列表，绑定包含了手机详情。注意我们使用Angular的<code>{{expression}}</code>标签以及<code>ngRepeat</code>的地方，用来从我们的模块把投射手机数据到视图中。</p><p><strong><code>app/partials/phone-detail.html</code>:</strong></p><pre><code class=\"language-html hljs xml\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">img</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">ng-src</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"{{phone.images[0]}}\"</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">class</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"phone\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">h1</span></span></span><span class=\"hljs-tag\">&gt;</span></span>{{phone.name}}<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">h1</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">p</span></span></span><span class=\"hljs-tag\">&gt;</span></span>{{phone.description}}<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">p</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">ul</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">class</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"phone-thumbs\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n  <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">li</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">ng-repeat</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"img in phone.images\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n    <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">img</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">ng-src</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"{{img}}\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n  <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">li</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">ul</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">ul</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">class</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"specs\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n  <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">li</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n    <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">span</span></span></span><span class=\"hljs-tag\">&gt;</span></span>Availability and Networks<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">span</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n    <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">dl</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n      <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">dt</span></span></span><span class=\"hljs-tag\">&gt;</span></span>Availability<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">dt</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n      <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">dd</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">ng-repeat</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"availability in phone.availability\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>{{availability}}<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">dd</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n    <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">dl</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n  <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">li</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n    ...\n  <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">li</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n    <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">span</span></span></span><span class=\"hljs-tag\">&gt;</span></span>Additional Features<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">span</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n    <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">dd</span></span></span><span class=\"hljs-tag\">&gt;</span></span>{{phone.additionalFeatures}}<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">dd</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n  <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">li</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">ul</span></span></span><span class=\"hljs-tag\">&gt;</span></span></code></pre><div style=\"display: none\">TODO!<img class=\"diagram\" src=\"https://atts.w3cschool.cn/attachments/image/wk/angularjs/tutorial_08-09_final.png\" alt=\"\"></div><h2 class=\"head2\">测试</h2><p>我们写了一个新的单元测试，类似于我们之前在第五步中为<code>PhoneListCtrl</code>控制器所写的步骤。</p><p><strong><code>test/unit/controllersSpec.js</code>:</strong></p><pre><code class=\"language-js hljs javascript\">\n  beforeEach(<span class=\"hljs-built_in\"><span class=\"hljs-built_in\">module</span></span>(<span class=\"hljs-string\"><span class=\"hljs-string\">'phonecatApp'</span></span>));\n\n  ...\n\n  describe(<span class=\"hljs-string\"><span class=\"hljs-string\">'PhoneDetailCtrl'</span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>)</span></span>{\n    <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">var</span></span> scope, $httpBackend, ctrl;\n\n    beforeEach(inject(<span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">_$httpBackend_, $rootScope, $routeParams, $controller</span></span></span><span class=\"hljs-function\">) </span></span>{\n      $httpBackend = _$httpBackend_;\n      $httpBackend.expectGET(<span class=\"hljs-string\"><span class=\"hljs-string\">'phones/xyz.json'</span></span>).respond({name:<span class=\"hljs-string\"><span class=\"hljs-string\">'phone xyz'</span></span>});\n\n      $routeParams.phoneId = <span class=\"hljs-string\"><span class=\"hljs-string\">'xyz'</span></span>;\n      scope = $rootScope.$<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">new</span></span>();\n      ctrl = $controller(<span class=\"hljs-string\"><span class=\"hljs-string\">'PhoneDetailCtrl'</span></span>, {$scope: scope});\n    }));\n\n    it(<span class=\"hljs-string\"><span class=\"hljs-string\">'should fetch phone detail'</span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span>{\n      expect(scope.phone).toBeUndefined();\n      $httpBackend.flush();\n\n      expect(scope.phone).toEqual({name:<span class=\"hljs-string\"><span class=\"hljs-string\">'phone xyz'</span></span>});\n    });\n  });\n...</code></pre><p>你现在可以看到后来在Karma标签中的输出：</p><pre>Chrome 22.0: Executed 3 of 3 SUCCESS (0.039 secs / 0.012 secs)</pre><p>我们还添加了一个新的端到端的测试，导航到Nexus S详情页面，并核查了页面上的标题是“Nexus S”。</p><p><strong><code>test/e2e/scenarios.js</code>:</strong></p><pre><code class=\"language-js hljs javascript\">...\n  describe(<span class=\"hljs-string\"><span class=\"hljs-string\">'Phone detail view'</span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span>{\n\n    beforeEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span>{\n      browser.get(<span class=\"hljs-string\"><span class=\"hljs-string\">'app/index.html#/phones/nexus-s'</span></span>);\n    });\n\n    it(<span class=\"hljs-string\"><span class=\"hljs-string\">'should display nexus-s page'</span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span>{\n      expect(element(by.binding(<span class=\"hljs-string\"><span class=\"hljs-string\">'phone.name'</span></span>)).getText()).toBe(<span class=\"hljs-string\"><span class=\"hljs-string\">'Nexus S'</span></span>);\n    });\n  });\n...</code></pre><p>你可以再次运行<code>npm run protractor</code>以看到测试运行。</p><h2>实验</h2><ul><li>使用<a rel=\"nofollow\" href=\"http://angular.github.io/protractor/#/api\" target=\"_blank\">Protractor API</a>，写一个测试核查到我们在Nexus S详情页面中显示了四个缩略图。</li></ul><h2>总结</h2><p>现在手机详情视力已经到位了，继续前往<a href=\"h8ng1ju4.html\" target=\"_blank\">第九步 筛选器</a>以学习如何编写你自己的自定义显示过滤器。</p></div></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 10,
      "parent_sort_index": 4,
      "chapter_level_one_id": "0e64fc8d8cc7e3ed9dc19d823d323344",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "AngularJS v1.5 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "69038593393700bb40c8a5aedb0596f5",
      "chapter_level_two_parent_id": "0e64fc8d8cc7e3ed9dc19d823d323344",
      "chapter_level_two_name": "AngularJS 路由与多视图",
      "chapter_level_two_url": "/angularjs/cqa31jty.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><div class=\"wkcontent\"><h2>路由与多视图</h2><p>在这一步中，你将学会如何通过使用被称为'ngRoute'的Angular模块添加路由，创建一个布局模板，以及如何绑定一个具有多视图的应用。</p><ul><li>当你导航到<code>app/index.html</code>上时，你将跳车到<code>app/index.html/#/phones</code>，而且手机列表出现在浏览器中。</li><li>当你在手机链接上点击时，url变成特定的手机，出现了手机详情页。</li></ul><p>把工作空间重置到第七步</p><pre><code class=\"hljs bash\">git checkout <span class=\"hljs-_\"><span class=\"hljs-_\">-f</span></span> step-7</code></pre><p>刷新你的浏览器或在线检查这一步：<a rel=\"nofollow\" href=\"http://angular.github.io/angular-phonecat/step-7/app\" target=\"_blank\">Step 7 Live Demo</a></p><p>下面列出了第六步和第七步之间的区别。你可以在<a rel=\"nofollow\" href=\"https://github.com/angular/angular-phonecat/compare/step-6...step-7\" target=\"_blank\">GitHub</a>里看到完整的差异。</p><h2 class=\"head2\">依赖性</h2><p>这一步中添加路由功能是由 <code>ngRoute</code>模块中的angular提供的，它与核心的Angular框架分离分布。</p><p>我们使用<a rel=\"nofollow\" href=\"http://bower.io\" target=\"_blank\">Bower</a>以安装客户端依赖性。这一步更新了<code>bower.json</code>配置文件，以包含新的依赖性：</p><pre><code class=\"language-json hljs\">{\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\">\"name\"</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">\"angular-phonecat\"</span></span>,\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\">\"description\"</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">\"A starter project for AngularJS\"</span></span>,\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\">\"version\"</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">\"0.0.0\"</span></span>,\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\">\"homepage\"</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">\"https://github.com/angular/angular-phonecat\"</span></span>,\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\">\"license\"</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">\"MIT\"</span></span>,\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\">\"private\"</span></span>: <span class=\"hljs-literal\"><span class=\"hljs-literal\">true</span></span>,\n  <span class=\"hljs-attr\"><span class=\"hljs-attr\">\"dependencies\"</span></span>: {\n    <span class=\"hljs-attr\"><span class=\"hljs-attr\">\"angular\"</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">\"1.4.x\"</span></span>,\n    <span class=\"hljs-attr\"><span class=\"hljs-attr\">\"angular-mocks\"</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">\"1.4.x\"</span></span>,\n    <span class=\"hljs-attr\"><span class=\"hljs-attr\">\"jquery\"</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">\"~2.1.1\"</span></span>,\n    <span class=\"hljs-attr\"><span class=\"hljs-attr\">\"bootstrap\"</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">\"~3.1.1\"</span></span>,\n    <span class=\"hljs-attr\"><span class=\"hljs-attr\">\"angular-route\"</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">\"1.4.x\"</span></span>\n  }\n}</code></pre><p>新的依赖性<code>\"angular-route\": \"1.4.x\"</code>告诉bower要安装与v1.4x兼容的angular-router组件版本。我们将告诉bower以下载并安装该依赖性。</p><p>如果你已经全局安装了bower，则你可以只对该项目运行<code>bower install</code>，我们已经预配置了npm，从而为我们运行bower安装：</p><pre><code class=\"hljs coffeescript\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\">npm</span></span> install</code></pre><h2 class=\"head2\">多个视图、路由和布局模板</h2><p>我们的应用渐渐地完善，变得越来越复杂。在第七步之前，应用向我们用户提供了单一视图（手机的列表），而且所有的模板代码都位于<code>index.html</code>文件中。构建应用的下一步是添加一个视图，这个视图将显示我们的列表中每款设备的详细信息。</p><p>要想添加详情视图，我们可以扩展<code>index.html</code>以包含两套视图的模板代码，但是那将很快变得混乱。因此我们不用这种方法，而是把<code>index.html</code>变成“布局模板”。这是一个模板，常用于我们应用中的所有视图。然后别的“局部布局模板”根据当前的“路由”包含到这个布局模板中，从而形成一个完整视图展示给用户。</p><p>通过<a rel=\"nofollow\" href=\"https://docs.angularjs.org/api/ngRoute/provider/%24routeProvider\" target=\"_blank\">$routeProvider</a>来声明Angular中的应用程序路由，它是<a rel=\"nofollow\" href=\"https://docs.angularjs.org/api/ngRoute/service/%24route\" target=\"_blank\">$route服务</a>的提供者。这个服务使接通控制器、视图模板以及浏览器中的当前位置变得容易。利用这个功能，我们可以实现<a rel=\"nofollow\" href=\"http://en.wikipedia.org/wiki/Deep_linking\" target=\"_blank\">深链接</a>，深链接让我们可以使用浏览器的历史（回退和前进导航）以及书签。</p><h3>一条关于DI、注入器和提供者的提醒</h3><p>如你<a rel=\"nofollow\" href=\"https://docs.angularjs.org/tutorial/step_05\" target=\"_blank\">已注意到的</a>，<a rel=\"nofollow\" href=\"https://docs.angularjs.org/guide/di\" target=\"_blank\">依赖性注入</a>（DI）是AngularJS的核心，所以对它的工作原理略知一二是很重要的。</p><p>在应用程序引导中，Angular创建了一个注入器，注入器用来寻找并注入你的应用所需要的所有的服务。注入器本身对<code>$http</code>或<code>$route</code>服务是做什么的一无所知。实际上，注入器甚至不知道这些服务是否存在，除非用适当的模板定义对它进行配置。</p><p>注入器只在以下步骤中出场：</p><ul><li>载入你在你的应用中指定的模块定义。</li><li>注册所有的在模块定义中定义的提供者。</li><li>当被要求做这的时候，注入一个指定的函数以及一些必要的依赖性（服务），它通过它们的提供者来惰性实例化。</li></ul><p>提供者是提供（创建）服务实例并且对外提供配置API的对象，API可以用来控制一个服务的创建和运行时行为。对于<code>$route</code>来说，<code>$routeProvider</code>对外提供API，API允许你定义针对你的应用程序的路由。</p><div class=\"alert alert-warning\">**注意：**只能够把提供者注入到`config`函数中。因此你不能够把`$routeProvider`注入到`PhoneListCtrl`中。</div><p>Angular模块解决了从应用程序中移除全局状态的问题，并提供配置注入器的方法。相对于AMD或require.js模块，Angular模块并不试图解决脚本载入次序问题或者懒惰式脚本取得问题。这些目标是完全独立的，两个模块系统可以并立存在，并实现他们的目标。</p><p>要想加深你对Angular上的DI的理解，请参看<a rel=\"nofollow\" href=\"https://github.com/angular/angular.js/wiki/Understanding-Dependency-Injection\" target=\"_blank\">理解依赖性注入</a>。</p><h2 class=\"head2\">模板</h2><p><code>$route</code>服务常与<a rel=\"nofollow\" href=\"https://docs.angularjs.org/api/ngRoute/directive/ngView\" target=\"_blank\">ngView</a>指令结合使用。<code>ngView</code>指令的角色是在布局模板中包含用于当前路由的视图模板。这使它完美恰合我们的<code>index.html</code>模板。</p><div class=\"alert alert-info\">**注意：**从AngularJS v1.2版开始，`ngRoute`在它自己的模块中，必须通过载入额外的`angular-route.js`文件来载入它，我们通过上面的Bower来下载`angular-route.js`文件。</div><p><strong><code>app/index.html</code>:</strong></p><pre><code class=\"language-html hljs xml\"><span class=\"hljs-meta\"><span class=\"hljs-meta\">&lt;!doctype html&gt;</span></span>\n<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">html</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">lang</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"en\"</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">ng-app</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"phonecatApp\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">head</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n...\n  <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">script</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">src</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"/attachments/image/wk/angularjs/angular.js\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span><span class=\"undefined\"></span><span class=\"hljs-tag\"><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">script</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n  <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">script</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">src</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"/attachments/image/wk/angularjs/angular-route.js\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span><span class=\"undefined\"></span><span class=\"hljs-tag\"><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">script</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n  <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">script</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">src</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"/attachments/image/wk/angularjs/app.js\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span><span class=\"undefined\"></span><span class=\"hljs-tag\"><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">script</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n  <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">script</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">src</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"/attachments/image/wk/angularjs/controllers.js\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span><span class=\"undefined\"></span><span class=\"hljs-tag\"><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">script</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">head</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">body</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n\n  <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">div</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">ng-view</span></span></span><span class=\"hljs-tag\">&gt;</span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">div</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n\n<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">body</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">html</span></span></span><span class=\"hljs-tag\">&gt;</span></span></code></pre><p>我们已经在我们的索引文件添加了两个新的<code>&lt;script&gt;</code>标记，从而把外部JavaScript文件载入到我们的应用程序中：</p><ul><li><code>angular-route.js</code> : 定义Angular <code>ngRoute</code>模块，<code>ngRoute</code>模块向我们提供了路由。</li><li><code>app.js</code> : 现在这个文件控住了我们的应用程序的根模块。</li></ul><p>注意：我们删除了<code>index.html</code>模板中的大部分代码，把它替换成一行代码，包含了一个带有元素属性<code>ng-view</code>的div。我们已经移除的这个代码被放到了<code>phone-list.html</code>模板中：</p><p><strong><code>app/partials/phone-list.html</code>:</strong></p><pre><code class=\"language-html hljs xml\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">div</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">class</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"container-fluid\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n  <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">div</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">class</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"row\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n    <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">div</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">class</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"col-md-2\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n      <span class=\"hljs-comment\"><span class=\"hljs-comment\">&lt;!--Sidebar content--&gt;</span></span>\n\n      Search: <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">input</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">ng-model</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"query\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n      Sort by:\n      <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">select</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">ng-model</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"orderProp\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n        <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">option</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">value</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"name\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>Alphabetical<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">option</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n        <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">option</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">value</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"age\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>Newest<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">option</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n      <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">select</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n\n    <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">div</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n    <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">div</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">class</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"col-md-10\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n      <span class=\"hljs-comment\"><span class=\"hljs-comment\">&lt;!--Body content--&gt;</span></span>\n\n      <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">ul</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">class</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"phones\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n        <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">li</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">ng-repeat</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"phone in phones | filter:query | orderBy:orderProp\"</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">class</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"thumbnail\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n          <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">a</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">href</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"#/phones/{{phone.id}}\"</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">class</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"thumb\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">img</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">ng-src</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"{{phone.imageUrl}}\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">a</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n          <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">a</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">href</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"#/phones/{{phone.id}}\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>{{phone.name}}<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">a</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n          <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">p</span></span></span><span class=\"hljs-tag\">&gt;</span></span>{{phone.snippet}}<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">p</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n        <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">li</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n      <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">ul</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n\n    <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">div</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n  <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">div</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">div</span></span></span><span class=\"hljs-tag\">&gt;</span></span></code></pre><div style=\"display:none\">TODO!<img class=\"diagram\" src=\"https://atts.w3cschool.cn/attachments/image/wk/angularjs/tutorial_07_final.png\" alt=\"\"></div><p>我们还为手机详情视图添加了一个占位符模板：</p><p><strong><code>app/partials/phone-detail.html</code>:</strong></p><pre><code class=\"language-html hljs xml\">TBD: detail view for <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">span</span></span></span><span class=\"hljs-tag\">&gt;</span></span>{{phoneId}}<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">span</span></span></span><span class=\"hljs-tag\">&gt;</span></span></code></pre><p>注意，我们正在使用的<code>phoneId</code>表达式将在<code>PhoneDetailCtrl</code>控制器中定义。</p><h2 class=\"head2\">应用模块</h2><p>要想增强应用的组织，我们动用了Angular的<code>ngRoute</code>模块，我们已经把控制器移到它们自己的模块<code>phonecatControllers</code>中（如下所示）。</p><p>我们给<code>index.html</code>添加<code>angular-route.js</code>，并在<code>controllers.js</code>中创建一个新的<code>phonecatControllers</code>模块。然而，要想使用它们的代码，我们需要做的不止于此。我们还需要添加模块，作为我们的应用的依赖性。通过把两个应用作为<code>phonecatApp</code>的依赖性列表，我们可以使用这些指令以及它们提供的服务。</p><p><strong><code>app/js/app.js</code>:</strong></p><pre><code class=\"language-js hljs javascript\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">var</span></span> phonecatApp = angular.module(<span class=\"hljs-string\"><span class=\"hljs-string\">'phonecatApp'</span></span>, [\n  <span class=\"hljs-string\"><span class=\"hljs-string\">'ngRoute'</span></span>,\n  <span class=\"hljs-string\"><span class=\"hljs-string\">'phonecatControllers'</span></span>\n]);\n\n...</code></pre><p>注意第二个参数传递到<code>angular.module</code>,<code>['ngRoute','phonecatControllers']</code>。这个数组列出了<code>phonecatApp</code>所依赖的模块。</p><pre><code class=\"language-js hljs javascript\">...\n\nphonecatApp.config([<span class=\"hljs-string\"><span class=\"hljs-string\">'$routeProvider'</span></span>,\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">$routeProvider</span></span></span><span class=\"hljs-function\">) </span></span>{\n    $routeProvider.\n      when(<span class=\"hljs-string\"><span class=\"hljs-string\">'/phones'</span></span>, {\n        templateUrl: <span class=\"hljs-string\"><span class=\"hljs-string\">'partials/phone-list.html'</span></span>,\n        controller: <span class=\"hljs-string\"><span class=\"hljs-string\">'PhoneListCtrl'</span></span>\n      }).\n      when(<span class=\"hljs-string\"><span class=\"hljs-string\">'/phones/:phoneId'</span></span>, {\n        templateUrl: <span class=\"hljs-string\"><span class=\"hljs-string\">'partials/phone-detail.html'</span></span>,\n        controller: <span class=\"hljs-string\"><span class=\"hljs-string\">'PhoneDetailCtrl'</span></span>\n      }).\n      otherwise({\n        redirectTo: <span class=\"hljs-string\"><span class=\"hljs-string\">'/phones'</span></span>\n      });\n  }]);</code></pre><p>使用<code>phonecatApp.config()</code>方法，我们请求了<code>$routeProvider</code>，它会被注入到我们的配置函数中，并使用?<a rel=\"nofollow\" href=\"https://docs.angularjs.org/api/ngRoute/provider/%24routeProvider#when\" target=\"_blank\"><code>$routeProvider.when()</code></a>方法以定义我们的路由。</p><p>我们的应用程序路由定义如下：</p><ul><li><code>when('/phones')</code>：当URL映射段为<code>/phones</code>的时候。将展示这个手机列表视图。要想构造这个视图，Angular将使用<code>phone-list.html</code>模板，以及<code>PhoneListCtrl</code>控制器。</li><li><code>when('/phones/:phoneId')</code>：当URL映射段匹配<code>/phones/:phoneId</code>的时候（其中<code>:phoneId</code>是URL的变量部分），将展示手机详情视图。要想构造手机详情视图，Angular将使用<code>phone-detail.html</code>模板以及<code>PhoneDetailCtrl</code>控制器。</li><li><code>otherwise({redirectTo: '/phones'})</code>：当浏览器的地址不匹配我们别的路由的时候，触发一个重定向到<code>/phones</code>。</li></ul><p>我们再次使用我们在上一步中构造的<code>PhoneListCtrl</code>控制器，并为手机详情视图向<code>app/js/controllers.js</code>文件添加了一个新的、空的<code>PhoneDetailCtrl</code>控制器。</p><p>注意在第二个路由声明中<code>:phoneId</code>参数的使用。<code>$route</code>服务使用route声明<code>'/phones/:phoneId'</code>作为匹配当前URL的模板。所有用<code>:</code>记号法定义的变量都会提取出来，放到?<a rel=\"nofollow\" href=\"https://docs.angularjs.org/api/ngRoute/service/%24routeParams\" target=\"_blank\"><code>$routeParams</code></a>对象上。</p><h2 class=\"head2\">控制器</h2><p><strong><code>app/js/controllers.js</code>:</strong></p><pre><code class=\"language-js hljs javascript\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">var</span></span> phonecatControllers = angular.module(<span class=\"hljs-string\"><span class=\"hljs-string\">'phonecatControllers'</span></span>, []);\n\nphonecatControllers.controller(<span class=\"hljs-string\"><span class=\"hljs-string\">'PhoneListCtrl'</span></span>, [<span class=\"hljs-string\"><span class=\"hljs-string\">'$scope'</span></span>, <span class=\"hljs-string\"><span class=\"hljs-string\">'$http'</span></span>,\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\"> (</span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">$scope, $http</span></span></span><span class=\"hljs-function\">) </span></span>{\n    $http.get(<span class=\"hljs-string\"><span class=\"hljs-string\">'phones/phones.json'</span></span>).success(<span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">data</span></span></span><span class=\"hljs-function\">) </span></span>{\n      $scope.phones = data;\n    });\n\n    $scope.orderProp = <span class=\"hljs-string\"><span class=\"hljs-string\">'age'</span></span>;\n  }]);\n\nphonecatControllers.controller(<span class=\"hljs-string\"><span class=\"hljs-string\">'PhoneDetailCtrl'</span></span>, [<span class=\"hljs-string\"><span class=\"hljs-string\">'$scope'</span></span>, <span class=\"hljs-string\"><span class=\"hljs-string\">'$routeParams'</span></span>,\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">$scope, $routeParams</span></span></span><span class=\"hljs-function\">) </span></span>{\n    $scope.phoneId = $routeParams.phoneId;\n  }]);</code></pre><p>再次提醒注意，我们创建了一个新的模块，称为<code>phonecatControllers</code>。对于小型的AngularJS应用，通常针对所有的控制器只创建一个模板，如果控制器只有为数不多的几个。随着你的应用程序扩大，常常要把你的代码重构到额外的模块中。为了更大的应用，你可能将会想要为你的应用的所有的主要功能创建独立的模块。</p><p>因为我们的应用比较小，我们将把我们所有的控制器添加到<code>phonecatControllers</code>模块中。</p><h2 class=\"head2\">测试</h2><p>要想自动核查所有东西都正确连通了，我们编写了一个端到端的测试，导航到不同的URL上，并核查是否呈现了正确的视图。</p><pre><code class=\"language-js hljs javascript\">...\n   it(<span class=\"hljs-string\"><span class=\"hljs-string\">'should redirect index.html to index.html#/phones'</span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span>{\n    browser.get(<span class=\"hljs-string\"><span class=\"hljs-string\">'app/index.html'</span></span>);\n    browser.getLocationAbsUrl().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">url</span></span></span><span class=\"hljs-function\">) </span></span>{\n        expect(url).toEqual(<span class=\"hljs-string\"><span class=\"hljs-string\">'/phones'</span></span>);\n      });\n  });\n\n  describe(<span class=\"hljs-string\"><span class=\"hljs-string\">'Phone list view'</span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span>{\n    beforeEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span>{\n      browser.get(<span class=\"hljs-string\"><span class=\"hljs-string\">'app/index.html#/phones'</span></span>);\n    });\n...\n\n  describe(<span class=\"hljs-string\"><span class=\"hljs-string\">'Phone detail view'</span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span>{\n\n    beforeEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span>{\n      browser.get(<span class=\"hljs-string\"><span class=\"hljs-string\">'app/index.html#/phones/nexus-s'</span></span>);\n    });\n\n    it(<span class=\"hljs-string\"><span class=\"hljs-string\">'should display placeholder page with phoneId'</span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span>{\n      expect(element(by.binding(<span class=\"hljs-string\"><span class=\"hljs-string\">'phoneId'</span></span>)).getText()).toBe(<span class=\"hljs-string\"><span class=\"hljs-string\">'nexus-s'</span></span>);\n    });\n  });</code></pre><p>你现在可以再次运行<code>npm run protractor</code>来查看测试的运行。</p><h2>实验</h2><ul><li>尝试添加一个绑定到<code>index.html</code>的<code>{{orderProp}}</code>，而且你将看到什么事也没有发生，哪怕你正在手机列表视图中。这是因为<code>orderProp</code>模块只有在<code>PhoneListCtrl</code>管理的作用域内是可见的，<code>PhoneListCtrl</code>与<code>&lt;div ng-view&gt;</code>元素关联。如果你在<code>phone-list.html</code>模板上添加同样的绑定，绑定将如你的预期运作起来。</li></ul><div style=\"display: none\">* 在`PhoneCatCtrl`中，创建一个带有`this.hero='Zoro'`的新模块，称为\"hero\"。在`PhoneListCtrl`中，让我们用`this.hero='Batman'`来遮蔽它。在`PhoneDetailCtrl`中，我们将使用`this.hero = \"Captain Proton\"`。然后 把`<p>hero = {{hero}}</p>`添加到全部三个模板`index.html`、`phone-list.html`和`phone-detail.html`上。打开应用，你将看到作用域继承以及模板属性遮蔽做了一些奇观。</div><h2>总结</h2><p>随着路由设置成功以及手机列表视力的实现，我们已经准备好前往<a href=\"hv6b1ju1.html\" target=\"_blank\">第八步  更多模板</a>，以实现手机详情视图。</p></div></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 9,
      "parent_sort_index": 4,
      "chapter_level_one_id": "0e64fc8d8cc7e3ed9dc19d823d323344",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "AngularJS v1.5 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "c7fdfc65a0371612844cc0a6c93664d2",
      "chapter_level_two_parent_id": "0e64fc8d8cc7e3ed9dc19d823d323344",
      "chapter_level_two_name": "AngularJS 模板链接和图像",
      "chapter_level_two_url": "/angularjs/an9p1jtv.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><div class=\"wkcontent\"><h2>模板连接和图像</h2><p>在这一步中，你将为手机列表中的手机添加一个缩略图，并链接到想去的地方。在后续的步骤中，你将使用这个链接显示关于目录中的这款手机的额外的信息。</p><ul><li>现在列表中的手机已经有链接和图像了。</li></ul><p>把工作空间重置到第六步</p><pre><code class=\"hljs bash\">git checkout <span class=\"hljs-_\"><span class=\"hljs-_\">-f</span></span> step-6</code></pre><p>刷新你的浏览器或在线检查这一步：<a rel=\"nofollow\" href=\"http://angular.github.io/angular-phonecat/step-6/app\" target=\"_blank\">Step 6 Live Demo</a></p><p>下面列出了第五步和第六步之间的最重要的区别。你可以在<a rel=\"nofollow\" href=\"https://github.com/angular/angular-phonecat/compare/step-5...step-6\" target=\"_blank\">GitHub</a>里看到完整的差异。</p><h2 class=\"head2\">数据</h2><p>注意，<code>phones.json</code>文件包含了针对每款手机的独一无二的ID和图像URL。URL指向<code>app/img/phones</code>目录。</p><p><strong><code>app/phones/phones.json</code></strong>（示例片段）：</p><pre><code class=\"language-js hljs javascript\">[\n  {\n    ...\n    <span class=\"hljs-string\"><span class=\"hljs-string\">\"id\"</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">\"motorola-defy-with-motoblur\"</span></span>,\n    <span class=\"hljs-string\"><span class=\"hljs-string\">\"imageUrl\"</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">\"img/phones/motorola-defy-with-motoblur.0.jpg\"</span></span>,\n    <span class=\"hljs-string\"><span class=\"hljs-string\">\"name\"</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">\"Motorola DEFY\\u2122 with MOTOBLUR\\u2122\"</span></span>,\n    ...\n  },\n  ...\n]</code></pre><h2 class=\"head2\">模板</h2><p><strong><code>app/index.html</code>:</strong></p><pre><code class=\"language-html hljs xml\">...\n        <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">ul</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">class</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"phones\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n          <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">li</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">ng-repeat</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"phone in phones | filter:query | orderBy:orderProp\"</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">class</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"thumbnail\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n            <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">a</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">href</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"#/phones/{{phone.id}}\"</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">class</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"thumb\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">img</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">ng-src</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"{{phone.imageUrl}}\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">a</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n            <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">a</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">href</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"#/phones/{{phone.id}}\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>{{phone.name}}<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">a</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n            <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">p</span></span></span><span class=\"hljs-tag\">&gt;</span></span>{{phone.snippet}}<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">p</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n          <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">li</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n        <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">ul</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n...</code></pre><p>要想未来动态生成指向手机详情页的链接，我们在元素属性<code>href</code>的值上使用了广为人知的双花括号绑定。在第二步中，我们添加了<code>{{phone.name}}</code>绑定，作为元素内容。在这一步中，<code>{{phone.id}}</code>绑定用在元素属性上。</p><p>我们还在每条记录后面添加了手机图像，用一个带<a rel=\"nofollow\" href=\"https://docs.angularjs.org/api/ng/directive/ngSrc\" target=\"_blank\">ngSrc</a>指令的图像标签。这个指令防止浏览器字面理解Anglar标签<code>{{ expression }}</code>、向无效的URL<code>http://localhost:8000/app/{{phone.imageUrl}}</code>初始化一个请求，如果我们只在一个常规的元素属性<code>src</code>上绑定这个双花括号值（<code>&lt;img src=\"{{phone.imageUrl}}\"&gt;</code>），这样的事情真的会发生。使用<code>ngSrc</code>指令以防止浏览器对一个无效的位置发起http请求。</p><h2 class=\"head2\">测试</h2><p><strong><code>test/e2e/scenarios.js</code></strong>:</p><pre><code class=\"language-js hljs javascript\">...\n    it(<span class=\"hljs-string\"><span class=\"hljs-string\">'should render phone specific links'</span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span>{\n      <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">var</span></span> query = element(by.model(<span class=\"hljs-string\"><span class=\"hljs-string\">'query'</span></span>));\n      query.sendKeys(<span class=\"hljs-string\"><span class=\"hljs-string\">'nexus'</span></span>);\n      element.all(by.css(<span class=\"hljs-string\"><span class=\"hljs-string\">'.phones li a'</span></span>)).first().click();\n      browser.getLocationAbsUrl().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">url</span></span></span><span class=\"hljs-function\">) </span></span>{\n        expect(url).toBe(<span class=\"hljs-string\"><span class=\"hljs-string\">'/phones/nexus-s'</span></span>);\n      });\n    });\n...</code></pre><p>我们添加了一个新的端到端测试，以核查应用是否生成了正确的链接，正确的链接要链到手机视图中，我们将在下一步是实现这个视图。</p><p>现在你可以重新运行<code>npm run protractor</code>以查看测试运行。</p><h2>实验</h2><ul><li><p>用扁平的旧元素属性<code>src</code>代替<code>ng-src</code>指令。使用一些工具，比如说Firebug，或者Chrome的Web Inspector，或者检查web服务器的访问日志，确保应用确实发起过了一个外部请求，指向<code>/app/%7B%7Bphone.imageUrl%7D%7D</code>（或者<code>/app/{{phone.imageUrl}}</code>）。</p><p>有个话题是，在Angular已经有机会评估表达式、并注入有效地址之前，当浏览器读取<code>img</code>标签时，浏览器将向非法的图像地址发起一个请求。</p></li></ul><h2>总结</h2><p>现在你已经添加了一个手机图像和链接，前往<a href=\"cqa31jty.html\" target=\"_blank\">第七步 路由与多视图</a>以学习关于Angular布局模板、以及Angular如何使创建具有多个视图的应用变容易。</p></div></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 8,
      "parent_sort_index": 4,
      "chapter_level_one_id": "0e64fc8d8cc7e3ed9dc19d823d323344",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "AngularJS v1.5 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "48b7bfb5a4f8e6419dc16e36948eeedb",
      "chapter_level_two_parent_id": "0e64fc8d8cc7e3ed9dc19d823d323344",
      "chapter_level_two_name": "AngularJS XHR和依赖性注入",
      "chapter_level_two_url": "/angularjs/kboz1jts.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><div class=\"wkcontent\"><h2>XHR和依赖性注入</h2><p>     本文主要为你介绍了 AngularJS XHR 和依赖注入，这里整理了详细资料和示例代码<br></p><p>在硬编码的数据集中有三款手机的数据，建立一个应用程序足够了！让我们使用Angular内建的<a rel=\"nofollow\" href=\"https://docs.angularjs.org/guide/services\" target=\"_blank\">服务</a>之一，<a rel=\"nofollow\" href=\"https://docs.angularjs.org/api/ng/service/%24http\" target=\"_blank\">$http</a>从服务器上取得更大的数据集我们将使用Angular的<a rel=\"nofollow\" href=\"https://docs.angularjs.org/guide/di\" target=\"_blank\">依赖性注入（DI）</a>来为<code>PhoneListCtrl</code>控制器提供服务。</p><ul><li>现在有一个20个电话的列表，从服务器载入。</li></ul><p>把工作空间重置到第五步</p><pre><code class=\"hljs bash\">git checkout <span class=\"hljs-_\"><span class=\"hljs-_\"><span class=\"hljs-_\">-f</span></span></span> step-5</code></pre><p>刷新你的浏览器或在线检查这一步：<a rel=\"nofollow\" href=\"http://angular.github.io/angular-phonecat/step-5/app\" target=\"_blank\">Step 5 Live Demo</a></p><p>下面列出了第四步和第五步之间的最重要的区别。你可以在<a rel=\"nofollow\" href=\"https://github.com/angular/angular-phonecat/compare/step-4...step-5\" target=\"_blank\">GitHub</a>里看到完整的差异。</p><h2 class=\"head2\">数据</h2><p>在你的项目中，<code>app/phones/phones.json</code>文件是一个数据集，包含了一个更大的手机列表，以JSON格式存储。</p><p>遵照以下文件示例：</p><pre><code class=\"language-js hljs javascript\">[\n {\n  <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\"age\"</span></span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">13</span></span></span>,\n  <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\"id\"</span></span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\"motorola-defy-with-motoblur\"</span></span></span>,\n  <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\"name\"</span></span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\"Motorola DEFY\\u2122 with MOTOBLUR\\u2122\"</span></span></span>,\n  <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\"snippet\"</span></span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">\"Are you ready for everything life throws your way?\"</span></span></span>\n  ...\n },\n...\n]</code></pre><h2 class=\"head2\">控制器</h2><p>我们将在控制器中使用Angular的<a rel=\"nofollow\" href=\"https://docs.angularjs.org/api/ng/service/%24http\" target=\"_blank\">$http</a>服务向你的Web服务器发出HTTP请求，取回<code>app/phones/phones.json</code>文件中的数据。<code>$http</code>是几个用Web应用中来处理常见的操作的内建<a rel=\"nofollow\" href=\"https://docs.angularjs.org/guide/services\" target=\"_blank\">Angular服务</a>之一。Angular在你需要的地方为你注入了这些服务。</p><p>Angular的<a rel=\"nofollow\" href=\"https://docs.angularjs.org/guide/di\" target=\"_blank\">DI子系统</a>负责管理这些服务。依赖性注入有用助于你的web应用既结构完好（例如，分离表现层、数据和控制三者）以及松弛的耦合（不能由组件自身解决的组件之间的依赖性问题，由DI子系统解决）。</p><p><strong><code>app/js/controllers.js:</code></strong></p><pre><code class=\"language-js hljs javascript\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">var</span></span></span> phonecatApp = angular.module(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'phonecatApp'</span></span></span>, []);\n\nphonecatApp.controller(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'PhoneListCtrl'</span></span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\"> (</span></span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">$scope, $http</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">) </span></span></span>{\n  $http.get(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'phones/phones.json'</span></span></span>).success(<span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">(</span></span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">data</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">) </span></span></span>{\n    $scope.phones = data;\n  });\n\n  $scope.orderProp = <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'age'</span></span></span>;\n});</code></pre><p><code>$http</code>向你的Web服务器发出一个<a href=\"https://www.w3cschool.cn/htmltags/html-httpmethods.html\" target=\"_blank\">HTTP GET请求</a>，要求<code>phones/phones.json</code>（该url相对于我们的<code>index.html</code>文件）。服务器在json文件中提供该数据，以响应该请求。（响应可能是由后端服务器动态生成的。但是在浏览器和我们的应用看来，它们没什么不同。为了简单起见，我们在本教程中使用了一个json文件。）</p><p>该<code>$http</code>服务返回了一个<a rel=\"nofollow\" href=\"https://docs.angularjs.org/api/ng/service/%24q\" target=\"_blank\">promise对象</a>?，带有<code>success</code>方法。我们调用这个方法以处理异步响应，并假定该作用域的手机数据由该控制器控制，作为一个模块，称为<code>phones</code>。注意Angular侦测了该json响应，并为我们解析了它。</p><p>要想在Angular中使用一个服务，你只要声明你所需要的依赖性的名字，作为控制器的构造函数的参数，如下所示：</p><pre><code class=\"hljs php\">phonecatApp.controller(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'PhoneListCtrl'</span></span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\"> </span></span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">($scope, $http)</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\"> </span></span></span>{...}</code></pre><p>在构造控制器时，Angular的依赖性注入器会把这些服务注入到你的控制器中。这些依赖性控制器还负责创建该服务可能需要的任何传递依赖性（一个服务通常会依赖于其它服务）。</p><p>注意，参数的名称非常重要，因为注入器会用这些名称去查阅依赖性。</p><img class=\"diagram\" src=\"https://atts.w3cschool.cn/attachments/image/wk/angularjs/tutorial_05.png\" alt=\"\"><h3><code>$</code>前缀名称约定</h3><p>你可以创建你自己的服务，而且实际上我们将在<a href=\"rgct1jua.html\" target=\"_blank\">第十一步 AngularJS REST和自定义服务</a>做这个。作为一个命名约定，Angular的内建服务，作用域方法以及一些别的Angular API在命名前面使用一个<code>$</code>前缀。</p><p>Angular提供的服务的命名空间有<code>$</code>前缀。要想避免冲突，最好避免把你的服务和模块命名成带有<code>$</code>前缀。</p><p>如果你检查一个作用域，你可能还会注意到一些属性以<code>$$</code>开头。这些属性被视为是私有属性，不能访问或者修改。</p><h3>在极简化上的一个注记</h3><p>因为Angular从参数的名称调用控制器的依赖性到控制器构造器的函数，如果你打算为<code>PhoneListCtrl</code>控制器<a rel=\"nofollow\" href=\"http://goo.gl/SAnnsm\" target=\"_blank\">缩小</a>JavaScript代码，所有的函数参数都会被压缩，而且依赖性注入器将不能正确的识别服务。</p><p>我们可以克服这个问题，通过用依赖性的名称注释这个函数，作为字符串提供，它不会被压缩。提供这种注入注释有两种方法：</p><ul><li><p>在控制器函数中创建一个<code>$inject</code>属性，它可携带一个字符串数组。在数组中的每个字符串都是要注入到对应的参数上的服务的名称。我们可以在自己的示例中这样写：</p><pre><code class=\"language-js hljs javascript\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\"> </span></span><span class=\"hljs-title\"><span class=\"hljs-function\"><span class=\"hljs-title\"><span class=\"hljs-function\"><span class=\"hljs-title\">PhoneListCtrl</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">(</span></span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">$scope, $http</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">) </span></span></span>{...}\n    PhoneListCtrl.$inject = [<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'$scope'</span></span></span>, <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'$http'</span></span></span>];\n    phonecatApp.controller(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'PhoneListCtrl'</span></span></span>, PhoneListCtrl);</code></pre></li><li><p>在那里使用一个内联注释，并非是只提供这个函数，你还提供了一个数组。这个数组包含了一系列服务名称，后跟着函数本身。</p><pre><code class=\"language-js hljs javascript\">    <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\"> </span></span><span class=\"hljs-title\"><span class=\"hljs-function\"><span class=\"hljs-title\"><span class=\"hljs-function\"><span class=\"hljs-title\">PhoneListCtrl</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">(</span></span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">$scope, $http</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">) </span></span></span>{...}\n    phonecatApp.controller(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'PhoneListCtrl'</span></span></span>, [<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'$scope'</span></span></span>, <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'$http'</span></span></span>, PhoneListCtrl]);</code></pre></li></ul><p>两种方法都能与Angular注入的任何函数完美协作，因此要选用哪种方法完全取决于你的项目的编程风格。</p><p>如果使用第二种方法，在注册控制器时，通常以匿名函数的形式提供内联的构造器函数。</p><pre><code class=\"language-js hljs javascript\">    phonecatApp.controller(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'PhoneListCtrl'</span></span></span>, [<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'$scope'</span></span></span>, <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'$http'</span></span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">(</span></span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">$scope, $http</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">) </span></span></span>{...}]);</code></pre><p>从此刻开始，我们将在本教程中使用内联方法。考虑到这一点，让我们把注释加到<code>PhoneListCtrl</code>上：</p><p><strong><code>app/js/controllers.js:</code></strong></p><pre><code class=\"language-js hljs javascript\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">var</span></span></span> phonecatApp = angular.module(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'phonecatApp'</span></span></span>, []);\n\nphonecatApp.controller(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'PhoneListCtrl'</span></span></span>, [<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'$scope'</span></span></span>, <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'$http'</span></span></span>,\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\"> (</span></span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">$scope, $http</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">) </span></span></span>{\n    $http.get(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'phones/phones.json'</span></span></span>).success(<span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">(</span></span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">data</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">) </span></span></span>{\n      $scope.phones = data;\n    });\n\n    $scope.orderProp = <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'age'</span></span></span>;\n  }]);</code></pre><h2 class=\"head2\">测试</h2><p><strong><code>test/unit/controllersSpec.js</code>:</strong></p><p>因为我们开始使用依赖性注入，而且我们的控制器包含了依赖性，在我们的测试中构造控制器就变得有点复杂了。我们可以使用<code>new</code>操作符，并提供带有某种假的<code>$http</code>实现的构造器。然而，Angular提供了一个模拟<code>$http</code>服务，我们可以用在单元测试中。我们通过调用一个称为<code>$httpBackend</code>服务上的方法，为服务器请求配置了“假的”响应。</p><pre><code class=\"language-js hljs javascript\">describe(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'PhoneCat controllers'</span></span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">(</span></span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span></span>{\n\n  describe(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'PhoneListCtrl'</span></span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">(</span></span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>)</span></span></span>{\n    <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">var</span></span></span> scope, ctrl, $httpBackend;\n\n    <span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">// 在每次测试之前载入我们的应用模块定义</span></span></span>\n    beforeEach(<span class=\"hljs-built_in\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\">module</span></span></span>(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'phonecatApp'</span></span></span>));\n\n    <span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">// 注入器会忽略前面和后面的下划线（例如_$httpBackend_）。</span></span></span>\n    <span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">// 这允许我们注入一个服务，然后把它附加到同名变量上，以避免名称冲突</span></span></span>\n    beforeEach(inject(<span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">(</span></span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">_$httpBackend_, $rootScope, $controller</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">) </span></span></span>{\n      $httpBackend = _$httpBackend_;\n      $httpBackend.expectGET(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'phones/phones.json'</span></span></span>).\n          respond([{name: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'Nexus S'</span></span></span>}, {name: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'Motorola DROID'</span></span></span>}]);\n\n      scope = $rootScope.$<span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">new</span></span></span>();\n      ctrl = $controller(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'PhoneListCtrl'</span></span></span>, {$scope: scope});\n    }));</code></pre><p>注意：因为我们在测试环境中载入了Jasmine以及<code>angular-mocks.js</code>，我们得到了两个辅助方法<a rel=\"nofollow\" href=\"https://code.angularjs.org/1.1.0/docs/api/angular.mock.module\" target=\"_blank\">module</a>和<a rel=\"nofollow\" href=\"https://code.angularjs.org/1.1.0/docs/api/angular.mock.inject\" target=\"_blank\">inject</a>，用来访问和配置注入器。</p><p>我们在测试环境中创建控制器，如下所示：</p><ul><li>我们使用<code>inject</code>辅助方法，向Jasmine的<code>beforeEach</code>函数注入<a rel=\"nofollow\" href=\"https://code.angularjs.org/1.1.0/docs/api/ng.%24rootScope\" target=\"_blank\">$rootScope</a>、<a rel=\"nofollow\" href=\"https://code.angularjs.org/1.1.0/docs/api/ng.%24controller\" target=\"_blank\">$controller</a>和<a rel=\"nofollow\" href=\"https://code.angularjs.org/1.1.0/docs/api/ng.%24httpBackend\" target=\"_blank\">$httpBackend</a>服务的实例，这些实例来自于一个注入器，在每一个测试内部都会被重新创建这个注入器。这保证了每次测试都从一个众所周知的起点开始，每次测试与其它测试相互独立。</li><li>通过调用<code>$rootScope.$new()</code>来为我们的控制器创建一个新的作用域。</li><li>调用了已注入的<code>$controller</code>函数，以参数的形式传入<code>PhoneListCtrl</code>控制器的名称和创建范围。</li></ul><p>因为我们的代码现在使用<code>$http</code>服务以取回我们的控制器中的手机列表数据，在我们创建<code>PhoneListCtrl</code>子作用域之前，我们需要告诉测试套件等待一个后面的请求，来自控制器。我们可以这样做：</p><ul><li><p>请求把<code>$httpBackend</code>服务注入到我们的<code>beforeEach</code>函数中。这是一个在产品环境中的服务的模拟版本，可以响应各种XHR和JSONP请求。该服务的模拟版本允许你编写测试，不需要处理原生的API和与它相关的全局状态——本来这两者都会使测试变成一个噩梦。</p></li><li>使用<code>$httpBackend.expectGET</code>方法规定<code>$httpBackend</code>服务等待之后的HTTP请求，并告诉它如何响应它。注意，直到我们调用<code>$httpBackend.flush</code>方法，才会返回响应。</li></ul><p>现在我们作了断言以核实在响应到达之前，作用域上不存在手机模块：</p><pre><code class=\"language-js hljs javascript\">    it(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'should create \"phones\" model with 2 phones fetched from xhr'</span></span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">(</span></span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span></span>{\n      expect(scope.phones).toBeUndefined();\n      $httpBackend.flush();\n\n      expect(scope.phones).toEqual([{name: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'Nexus S'</span></span></span>},\n                                   {name: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'Motorola DROID'</span></span></span>}]);\n    });</code></pre><ul><li><p>通过调用<code>$httpBackend.flush()</code>，我们清空了浏览器中的请求队列。这导致<code>$http</code>服务返回的promise对象由规范的应答来处理。可以在<a rel=\"nofollow\" href=\"https://docs.angularjs.org/api/ngMock/service/%24httpBackend\" target=\"_blank\">模拟$httpBackend</a>文档中了解为什么必须“清空HTTP请求”的完整解释。</p></li><li>我们制作了断言，核实作用域上已经有手机模块了。</li></ul><p>最后，我们核实已经正确设置了<code>orderProp</code>的默认值。</p><pre><code class=\"language-js hljs javascript\">    it(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'should set the default value of orderProp model'</span></span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">(</span></span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span></span>{\n      expect(scope.orderProp).toBe(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'age'</span></span></span>);\n    });</code></pre><p>现在在Karma标签卡中，你应该看到以下的输出：</p><pre>Chrome 22.0: Executed 2 of 2 SUCCESS (0.028 secs / 0.007 secs)</pre><h2>实验</h2><ul><li>在<code>index.html</code>的底部，添加一个<code>&lt;pre&gt;{{phones | filter:query | orderBy:orderProp | json}}&lt;/pre&gt;</code>绑定以查看以json格式显示的手机列表。</li><li>在<code>PhoneListCtrl</code>控制器中，通过限制手机的数量为列表的前五个来预处理http响应。在<code>$http</code>回调中使用以下的代码：</li></ul><pre><code class=\"hljs bash\"><span class=\"hljs-variable\"><span class=\"hljs-variable\"><span class=\"hljs-variable\">$scope</span></span></span>.phones = data.splice(0, 5);</code></pre><h2>总结</h2><p>现在你已经知道了使用Angular服务是多么容易（幸亏Angular的依赖性注入），前往<a href=\"an9p1jtv.html\" target=\"_blank\">第六步 模板连接和图像</a>，在那里你将添加一些手机的缩略图以及一些链接。</p></div></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 7,
      "parent_sort_index": 4,
      "chapter_level_one_id": "0e64fc8d8cc7e3ed9dc19d823d323344",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "AngularJS v1.5 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "753629534f66141f9de76ab217879696",
      "chapter_level_two_parent_id": "0e64fc8d8cc7e3ed9dc19d823d323344",
      "chapter_level_two_name": "AngularJS 双路数据绑定",
      "chapter_level_two_url": "/angularjs/y5a11jtp.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><div class=\"wkcontent\"><h2>双路数据绑定</h2><p>在这一步中，你将添加一个功能，让你的用户控制手机列表中的项目的排序。这个动态排序由创建一个新模块属性来实现，用迭代器接通它们，并且让数据绑定来完成剩余工作。</p><ul><li>除了搜索框，应用显示了一个下拉菜单，允许用户 控制列出的手机的排序。</li></ul><p>把工作空间重置到第四步</p><pre><code class=\"hljs bash\">git checkout <span class=\"hljs-_\"><span class=\"hljs-_\">-f</span></span> step-4</code></pre><p>刷新你的浏览器或在线检查这一步：<a rel=\"nofollow\" href=\"http://angular.github.io/angular-phonecat/step-4/app\" target=\"_blank\">Step 4 Live Demo</a></p><p>下面列出了第四步和第五步之间的最重要的区别。你可以在<a rel=\"nofollow\" href=\"https://github.com/angular/angular-phonecat/compare/step-3...step-4\" target=\"_blank\">GitHub</a>里看到完整的差异。</p><h2 class=\"head2\">模板</h2><p><strong><code>app/index.html</code>:</strong></p><pre><code class=\"language-html hljs xml\">  Search: <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">input</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">ng-model</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"query\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n  Sort by:\n  <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">select</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">ng-model</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"orderProp\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n    <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">option</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">value</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"name\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>Alphabetical<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">option</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n    <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">option</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">value</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"age\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>Newest<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">option</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n  <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">select</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n\n  <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">ul</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">class</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"phones\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n    <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">li</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">ng-repeat</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"phone in phones | filter:query | orderBy:orderProp\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n      <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">span</span></span></span><span class=\"hljs-tag\">&gt;</span></span>{{phone.name}}<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">span</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n      <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">p</span></span></span><span class=\"hljs-tag\">&gt;</span></span>{{phone.snippet}}<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">p</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n    <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">li</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n  <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">ul</span></span></span><span class=\"hljs-tag\">&gt;</span></span></code></pre><p>我们制作以下对<code>index.html</code>模板的改变：</p><ul><li>首先，我们添加了一个<code>&lt;select&gt;</code> html元素，命名为<code>orderProp</code>，因此我们的用户可以从两个提供的排序选择中选一个。</li></ul><img class=\"diagram\" src=\"https://atts.w3cschool.cn/attachments/image/wk/angularjs/tutorial_04.png\" alt=\"\"><ul><li>然后，我们把<code>filter</code>筛选器连与<a rel=\"nofollow\" href=\"https://docs.angularjs.org/api/ng/filter/orderBy\" target=\"_blank\"><code>orderBy</code></a>?筛选器连缀，以更进一步处理输入到迭代器的处理。<code>orderBy</code>是一个筛选器，取用一个输入数组，复制它，之后返回一个副本，重排序这个副本。</li></ul><p>Angular在<code>select</code>元素以及<code>orderProp</code>模块之间创建了双路数据绑定。然后<code>orderProp</code>被用作针对<code>orderBy</code>筛选器的输入。</p><p>正如我们在这一节第三步中讨论的，关于数据绑定和迭代器，每当模块变化时（比如说因为用户通过选择下拉菜单改变了顺序），Angular的数据绑定将导致该视图自动更新。不臃肿的DOM操作代码是必要的！</p><h2 class=\"head2\">控制器</h2><p><strong><code>app/js/controllers.js</code>:</strong></p><pre><code class=\"language-js hljs javascript\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">var</span></span> phonecatApp = angular.module(<span class=\"hljs-string\"><span class=\"hljs-string\">'phonecatApp'</span></span>, []);\n\nphonecatApp.controller(<span class=\"hljs-string\"><span class=\"hljs-string\">'PhoneListCtrl'</span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\"> (</span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">$scope</span></span></span><span class=\"hljs-function\">) </span></span>{\n  $scope.phones = [\n    {<span class=\"hljs-string\"><span class=\"hljs-string\">'name'</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">'Nexus S'</span></span>,\n     <span class=\"hljs-string\"><span class=\"hljs-string\">'snippet'</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">'Fast just got faster with Nexus S.'</span></span>,\n     <span class=\"hljs-string\"><span class=\"hljs-string\">'age'</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">1</span></span>},\n    {<span class=\"hljs-string\"><span class=\"hljs-string\">'name'</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">'Motorola XOOM? with Wi-Fi'</span></span>,\n     <span class=\"hljs-string\"><span class=\"hljs-string\">'snippet'</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">'The Next, Next Generation tablet.'</span></span>,\n     <span class=\"hljs-string\"><span class=\"hljs-string\">'age'</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">2</span></span>},\n    {<span class=\"hljs-string\"><span class=\"hljs-string\">'name'</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">'MOTOROLA XOOM?'</span></span>,\n     <span class=\"hljs-string\"><span class=\"hljs-string\">'snippet'</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">'The Next, Next Generation tablet.'</span></span>,\n     <span class=\"hljs-string\"><span class=\"hljs-string\">'age'</span></span>: <span class=\"hljs-number\"><span class=\"hljs-number\">3</span></span>}\n  ];\n\n  $scope.orderProp = <span class=\"hljs-string\"><span class=\"hljs-string\">'age'</span></span>;\n});</code></pre><ul><li><p>我们修改了<code>phones</code>模块——手机的数组——并把一个<code>age</code>属性添加到每个手机记录中。属性被用于根据年代排序手机。</p></li><li><p>我们给控制器添加了一行，把<code>orderProp</code>的默认值设置为<code>age</code>。如果我们还没有在这里设置一个默认值，<code>orderBy</code>筛选器会保持未初始化，直到我们的用户从下拉菜单中挑了一个选项。</p><p>这是讲解双路数据绑定的好时候。注意，当应用在浏览器中载入的时候，下拉菜单中的“最新”被选中。这是因为我们在控制器中把<code>orderProp</code>设置为<code>'age'</code>。从我们的模块到UI的方向中的绑定工作也同样。现在，如果你选择了下拉菜单中的“Alphabetically（字母表排序）”，模块也将被更新，而且重排序了手机。这是数据绑定在反方向中所做的工作——从UI到模块。</p></li></ul><h2 class=\"head2\">测试</h2><p>我们所做的变化将在单元测试和端到端测试中被验证。让我们先看一看单元测试。</p><p><strong><code>test/unit/controllersSpec.js</code>:</strong></p><pre><code class=\"language-js hljs javascript\">describe(<span class=\"hljs-string\"><span class=\"hljs-string\">'PhoneCat controllers'</span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span>{\n\n  describe(<span class=\"hljs-string\"><span class=\"hljs-string\">'PhoneListCtrl'</span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>)</span></span>{\n    <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">var</span></span> scope, ctrl;\n\n    beforeEach(<span class=\"hljs-built_in\"><span class=\"hljs-built_in\">module</span></span>(<span class=\"hljs-string\"><span class=\"hljs-string\">'phonecatApp'</span></span>));\n\n    beforeEach(inject(<span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">$controller</span></span></span><span class=\"hljs-function\">) </span></span>{\n      scope = {};\n      ctrl = $controller(<span class=\"hljs-string\"><span class=\"hljs-string\">'PhoneListCtrl'</span></span>, {$scope:scope});\n    }));\n\n    it(<span class=\"hljs-string\"><span class=\"hljs-string\">'should create \"phones\" model with 3 phones'</span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span>{\n      expect(scope.phones.length).toBe(<span class=\"hljs-number\"><span class=\"hljs-number\">3</span></span>);\n    });\n\n    it(<span class=\"hljs-string\"><span class=\"hljs-string\">'should set the default value of orderProp model'</span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span>{\n      expect(scope.orderProp).toBe(<span class=\"hljs-string\"><span class=\"hljs-string\">'age'</span></span>);\n    });\n  });\n});</code></pre><p>单元测试现在核实了默认的排序属性设置。</p><p>我们使用Jasmins的API，把控制器架构抽出到<code>beforeEach</code>块，它由所有的父<code>describe</code>块中的测试共享。</p><p>现在你应该在Karma选项卡中看到了以下输出：</p><pre>Chrome 22.0: Executed 2 of 2 SUCCESS (0.021 secs / 0.001 secs)</pre><p>让我们把注意力带回到端到端测试。</p><p><strong><code>test/e2e/scenarios.js</code>:</strong></p><pre><code class=\"language-js hljs javascript\">...\n    it(<span class=\"hljs-string\"><span class=\"hljs-string\">'should be possible to control phone order via the drop down select box'</span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span>{\n\n      <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">var</span></span> phoneNameColumn = element.all(by.repeater(<span class=\"hljs-string\"><span class=\"hljs-string\">'phone in phones'</span></span>).column(<span class=\"hljs-string\"><span class=\"hljs-string\">'phone.name'</span></span>));\n      <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">var</span></span> query = element(by.model(<span class=\"hljs-string\"><span class=\"hljs-string\">'query'</span></span>));\n\n      <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\"> </span><span class=\"hljs-title\"><span class=\"hljs-function\"><span class=\"hljs-title\">getNames</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span>{\n        <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">return</span></span> phoneNameColumn.map(<span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">elm</span></span></span><span class=\"hljs-function\">) </span></span>{\n          <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">return</span></span> elm.getText();\n        });\n      }\n\n      query.sendKeys(<span class=\"hljs-string\"><span class=\"hljs-string\">'tablet'</span></span>); <span class=\"hljs-comment\"><span class=\"hljs-comment\">//let's narrow the dataset to make the test assertions shorter</span></span>\n\n      expect(getNames()).toEqual([\n        <span class=\"hljs-string\"><span class=\"hljs-string\">\"Motorola XOOM\\u2122 with Wi-Fi\"</span></span>,\n        <span class=\"hljs-string\"><span class=\"hljs-string\">\"MOTOROLA XOOM\\u2122\"</span></span>\n      ]);\n\n      element(by.model(<span class=\"hljs-string\"><span class=\"hljs-string\">'orderProp'</span></span>)).element(by.css(<span class=\"hljs-string\"><span class=\"hljs-string\">'option[value=\"name\"]'</span></span>)).click();\n\n      expect(getNames()).toEqual([\n        <span class=\"hljs-string\"><span class=\"hljs-string\">\"MOTOROLA XOOM\\u2122\"</span></span>,\n        <span class=\"hljs-string\"><span class=\"hljs-string\">\"Motorola XOOM\\u2122 with Wi-Fi\"</span></span>\n      ]);\n    });...</code></pre><p>端到端测试核实了选择框的排序机制正在正常工作。</p><p>现在你可以重新运行<code>npm run protractor</code>以查看测试运行。</p><h2>实验</h2><ul><li><p>在<code>PhoneListCtrl</code>控制器中，移除设置<code>orderProp</code>值的状态，你将看到Angular给下拉列表临时地添加了一个新的空白（\"unknown\"）选项，而且排序将默认为无序/自然排序。</p></li><li><p>把一个<code>{{orderProp}}</code>绑定到<code>index.html</code>模板上，从而把它的当前值显示为文本。</p></li><li>在排序值前面添加一个<code>-</code>符号来逆转排序顺序：<code>&lt;option value=\"-age\"&gt;Oldest&lt;/option&gt;</code></li></ul><h2>总结</h2><p>现在我们已经添加了列表排序，并测试了应用，前往<a href=\"kboz1jts.html\" target=\"_blank\">第五步 XHR和依赖注入</a>以学习关于Angular服务，以及Angular如何使用依赖性注入。</p></div></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 6,
      "parent_sort_index": 4,
      "chapter_level_one_id": "0e64fc8d8cc7e3ed9dc19d823d323344",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "AngularJS v1.5 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "63f9a5ac790f11061b1bbc5956b35b71",
      "chapter_level_two_parent_id": "0e64fc8d8cc7e3ed9dc19d823d323344",
      "chapter_level_two_name": "AngularJS 筛选迭代器",
      "chapter_level_two_url": "/angularjs/wkn41jtm.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><div class=\"wkcontent\"><h2>筛选迭代器</h2><p>我们在上一步中为开发应用打基础做了很多工作，现在我们将做一些简单的事情；我们将添加全文搜索（是的，它很简单！）。我们还将编写一个端到端测试，因为一个好的端到端测试可以帮上大忙。它监视着你的应用，并在发生回归时迅速报告。</p><ul><li>现在应用有了一个搜索框。注意页面上的手机列表的变化取决于用户在搜索框中打了什么字。</li></ul><p>把工作空间重置到第三步</p><pre><code class=\"hljs bash\">git checkout <span class=\"hljs-_\"><span class=\"hljs-_\">-f</span></span> step-3</code></pre><p>刷新你的浏览器或在线检查这一步：<a rel=\"nofollow\" href=\"http://angular.github.io/angular-phonecat/step-3/app\" target=\"_blank\">Step 3 Live Demo</a></p><p>下面列出了第二步和第三步之间最重要的区别。你可以在<a rel=\"nofollow\" href=\"https://github.com/angular/angular-phonecat/compare/step-2...step-3\" target=\"_blank\">GitHub</a>里看到完整的差异。</p><h2 class=\"head2\">控制器</h2><p>我们对控制器不作修改。</p><h2 class=\"head2\">模板</h2><p><strong>app/index.html:</strong></p><pre><code class=\"language-html hljs xml\">  <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">div</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">class</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"container-fluid\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n    <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">div</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">class</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"row\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n      <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">div</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">class</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"col-md-2\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-comment\">&lt;!--Sidebar content--&gt;</span></span>\n\n        Search: <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">input</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">ng-model</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"query\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n\n      <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">div</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n      <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">div</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">class</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"col-md-10\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n        <span class=\"hljs-comment\"><span class=\"hljs-comment\">&lt;!--Body content--&gt;</span></span>\n\n        <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">ul</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">class</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"phones\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n          <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">li</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">ng-repeat</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"phone in phones | filter:query\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n            {{phone.name}}\n            <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">p</span></span></span><span class=\"hljs-tag\">&gt;</span></span>{{phone.snippet}}<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">p</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n          <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">li</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n        <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">ul</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n\n      <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">div</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n    <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">div</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n  <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">div</span></span></span><span class=\"hljs-tag\">&gt;</span></span></code></pre><p>我们添加了一个标准HTML<code>&lt;input&gt;</code>元素标记，并使用Angular的<a rel=\"nofollow\" href=\"https://docs.angularjs.org/api/ng/filter/filter\" target=\"_blank\">filter</a>函数来处理<a rel=\"nofollow\" href=\"https://docs.angularjs.org/api/ng/directive/ngRepeat\" target=\"_blank\">repeat指令</a>的输入。</p><p>这使用户输入搜索条件，并在手机列表中快速看到搜索结果。新的代码演示如下：</p><ul><li><p>数据绑定：这是Angular的一个核心功能。当网页载入时，Angular把输入框的名称绑定到数据模块的同名的变量上，并保持两者同步。</p><p>在代码中，用户打字到输入框的数据（命名为<strong><code>query</code></strong>）很快可以作为一个筛选器输入到列表迭代器（<code>phone in phones | filter:</code><strong><code>query</code></strong>）中。在改变数据模块的时候，导致迭代器的输入发生变化，迭代器有效地更新了DOM，以反映模块的当前状态。</p></li></ul><img class=\"diagram\" src=\"https://atts.w3cschool.cn/attachments/image/wk/angularjs/tutorial_03.png\" alt=\"\"><ul><li><p>使用<code>filter</code>筛选器：<a rel=\"nofollow\" href=\"https://docs.angularjs.org/api/ng/filter/filter\" target=\"_blank\">filter</a>函数使用了<code>query</code>值发创建一个新的数列，只包含匹配<code>query</code>的记录。</p><p><code>ngRepeat</code>自动更新了视力，以响应<code>filter</code>筛选器返回的手机数字的变化。该处理对开发者来说是完全透明的。</p></li></ul><h2 class=\"head2\">测试</h2><p>在第二步中，我们学会了如何编写并运行单元测试。对于测试我们的用JavaScript编写的应用程序的控制器和其它组件，单元测试是完美的，但是测试DOM操作或测试我们的应用程序的接通不太方便。针对这些，一个端到端的测试是一个更好的选择。</p><p>该搜索功能完全是通过模板和数据绑定来实现的，我们将编写我们第一个端到端的测试，以验证该功能起了什么作用。</p><p><strong><code>test/e2e/scenarios.js</code>:</strong></p><pre><code class=\"language-js hljs javascript\">describe(<span class=\"hljs-string\"><span class=\"hljs-string\">'PhoneCat App'</span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span>{\n\n  describe(<span class=\"hljs-string\"><span class=\"hljs-string\">'Phone list view'</span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span>{\n\n    beforeEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span>{\n      browser.get(<span class=\"hljs-string\"><span class=\"hljs-string\">'app/index.html'</span></span>);\n    });\n\n    it(<span class=\"hljs-string\"><span class=\"hljs-string\">'should filter the phone list as a user types into the search box'</span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span>{\n\n      <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">var</span></span> phoneList = element.all(by.repeater(<span class=\"hljs-string\"><span class=\"hljs-string\">'phone in phones'</span></span>));\n      <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">var</span></span> query = element(by.model(<span class=\"hljs-string\"><span class=\"hljs-string\">'query'</span></span>));\n\n      expect(phoneList.count()).toBe(<span class=\"hljs-number\"><span class=\"hljs-number\">3</span></span>);\n\n      query.sendKeys(<span class=\"hljs-string\"><span class=\"hljs-string\">'nexus'</span></span>);\n      expect(phoneList.count()).toBe(<span class=\"hljs-number\"><span class=\"hljs-number\">1</span></span>);\n\n      query.clear();\n      query.sendKeys(<span class=\"hljs-string\"><span class=\"hljs-string\">'motorola'</span></span>);\n      expect(phoneList.count()).toBe(<span class=\"hljs-number\"><span class=\"hljs-number\">2</span></span>);\n    });\n  });\n});</code></pre><p>这个测试验证了搜索框以及迭代器是否正确地接通了。注意，在Angular中，编写端到端测试是如此地容易。虽然这个示例只针对一个简单的测试，但是它确实很容易测试任何功能化的、可读的、端到端的测试。</p><h3>利用Protractor运行端到端的测试</h3><p>甚至虽然测试的句法看起来很像我们的用Jasmine编写的控制器单元测试，但是端到端测试使用Protractor的API。在<a rel=\"nofollow\" href=\"http://angular.github.io/protractor/#/api\" target=\"_blank\">http://angular.github.io/protractor/#/api</a>可以读到Protractor的API。</p><p>与Karma很像的是针对单元测试的测试运行者，我们使用Protractor以运行端到端测试。用<code>npm run protractor</code>来尝试它。端到端测试很慢，所以与单元测试不同，在运行测试之后Protractor将退出，不会自动在每次文件更改时重新运行测试套装。要想重新运行测试套装，需要再次执行<code>npm run protractor</code>。</p><div class=\"alert alert-info\">  注意，你必须确保你的应用通过一个web服务器提供服务，从而用Protractor测试。你可以使用`npm start`来做到这。你还需要确保你在运行`npm run protractor`之前已经安装了Protractor，并更新了web驱动器。You can do this by issuing `npm install` and `npm run update-webdriver` into your terminal.</div><h2>实验</h2><h3>显示当前查询</h3><p>通过添加一个绑定到<code>index.html</code>模板的<code>{{query}}</code>来显示<code>query</code>模块当前的值，并看到当你在输入框中打字时，它如何变化。</p><h3>在标题中显示查询</h3><p>让我们看到我们可以取得<code>query</code>模板的当前值，模块出现在HTML网页的标题上。</p><ul><li><p>把一个端到端测试添加到<code>describe</code>块中，<code>test/e2e/scenarios.js</code>看起来将如这：</p><pre><code class=\"language-js hljs javascript\">  describe(<span class=\"hljs-string\"><span class=\"hljs-string\">'PhoneCat App'</span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span>{\n\n    describe(<span class=\"hljs-string\"><span class=\"hljs-string\">'Phone list view'</span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span>{\n\n      beforeEach(<span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span>{\n        browser.get(<span class=\"hljs-string\"><span class=\"hljs-string\">'app/index.html'</span></span>);\n      });\n\n      <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">var</span></span> phoneList = element.all(by.repeater(<span class=\"hljs-string\"><span class=\"hljs-string\">'phone in phones'</span></span>));\n      <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">var</span></span> query = element(by.model(<span class=\"hljs-string\"><span class=\"hljs-string\">'query'</span></span>));\n\n      it(<span class=\"hljs-string\"><span class=\"hljs-string\">'should filter the phone list as a user types into the search box'</span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span>{\n        expect(phoneList.count()).toBe(<span class=\"hljs-number\"><span class=\"hljs-number\">3</span></span>);\n\n        query.sendKeys(<span class=\"hljs-string\"><span class=\"hljs-string\">'nexus'</span></span>);\n        expect(phoneList.count()).toBe(<span class=\"hljs-number\"><span class=\"hljs-number\">1</span></span>);\n\n        query.clear();\n        query.sendKeys(<span class=\"hljs-string\"><span class=\"hljs-string\">'motorola'</span></span>);\n        expect(phoneList.count()).toBe(<span class=\"hljs-number\"><span class=\"hljs-number\">2</span></span>);\n      });\n\n      it(<span class=\"hljs-string\"><span class=\"hljs-string\">'should display the current filter value in the title bar'</span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span>{\n        query.clear();\n        expect(browser.getTitle()).toMatch(<span class=\"hljs-regexp\"><span class=\"hljs-regexp\">/Google Phone Gallery:\\s*$/</span></span>);\n\n        query.sendKeys(<span class=\"hljs-string\"><span class=\"hljs-string\">'nexus'</span></span>);\n        expect(browser.getTitle()).toMatch(<span class=\"hljs-regexp\"><span class=\"hljs-regexp\">/Google Phone Gallery: nexus$/</span></span>);\n      });\n    });\n  });</code></pre><p>运行protractor（<code>npm run protractor</code>），看到测试失败了。</p></li><li><p>你可能认为你只需要用以下方式向标题标签添加<code>{{query}}</code>：</p><pre><code class=\"hljs xml\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">title</span></span></span><span class=\"hljs-tag\">&gt;</span></span>Google Phone Gallery: {{query}}<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">title</span></span></span><span class=\"hljs-tag\">&gt;</span></span></code></pre><p>然而，当你重载入这个网页的时候，你不会看到想要的结果。这是因为“查询”模块驻留在作用域内，由<code>ng-controller=\"PhoneListCtrl\"</code>指令在body元素上定义。</p><pre><code class=\"hljs xml\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">body</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">ng-controller</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"PhoneListCtrl\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span></code></pre><p>如果你想要从<code>&lt;title&gt;</code>元素上绑定查询模块，你必须把<code>ngController</code>声明移动到HTML元素上，因为它是body元素和title元素常用的父元素。</p><pre><code class=\"hljs xml\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">html</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">ng-app</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"phonecatApp\"</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">ng-controller</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"PhoneListCtrl\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span></code></pre><p>确保<strong>从body元素中移除</strong><code>ng-controller</code>声明。</p></li><li><p>重新运行<code>rpm run protractor</code>，看到现在测试已经看通过了。</p></li><li><p>在title元素内部使用双花工作得很好，与此同时，你可能会注意到页面加载的一瞬间它们确实显示给用户了。一个更好的解决方案是使用<a rel=\"nofollow\" href=\"https://docs.angularjs.org/api/ng/directive/ngBind\" target=\"_blank\">ngBind指令</a>或<a rel=\"nofollow\" href=\"https://docs.angularjs.org/api/ng/directive/ngBindTemplate\" target=\"_blank\">ngBindTemplate指令</a>，当页面加载时用户能看到它们。</p><pre><code class=\"hljs xml\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">title</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">ng-bind-template</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"Google Phone Gallery: {{query}}\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>Google Phone Gallery<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">title</span></span></span><span class=\"hljs-tag\">&gt;</span></span></code></pre></li></ul><h2>总结</h2><p>我们现在已经把全文搜索添加上去了，还包含了一个用来验证搜索是否起作用的测试！现在让我们前往<a href=\"y5a11jtp.html\" target=\"_blank\">第四步 双路数据绑定</a>以学会如何向手机应用添加排序功能。</p></div></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 5,
      "parent_sort_index": 4,
      "chapter_level_one_id": "0e64fc8d8cc7e3ed9dc19d823d323344",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "AngularJS v1.5 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "2a1b1242f738d9bd09245e229834dbb5",
      "chapter_level_two_parent_id": "0e64fc8d8cc7e3ed9dc19d823d323344",
      "chapter_level_two_name": "AngularJS 静态模板",
      "chapter_level_two_url": "/angularjs/o4r51jtj.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><div class=\"wkcontent\"><h2>Angular模板</h2><p>现在是时候用AngularJS制作动态网页了。我们将添加一个测试，验证用于控制器的代码，我们将添加这个控制器。</p><p>为应用程序构造代码有很多方式。针对Angular应用，我们鼓励使用<a rel=\"nofollow\" href=\"http://en.wikipedia.org/wiki/Model%E2%80%93View%E2%80%93Controller\" target=\"_blank\">模块-视图-控制器(MVC)设计模式</a>以解耦代码、分离关注点。考虑到这一点，我们使用小的Angular以及JavaScript为我们的应用添加模块、视图和控制器组件。</p><ul><li>现在下面的数据中动态生成了三款手机的列表：</li></ul><p>把工作空间重置到第二步</p><pre><code class=\"hljs bash\">git checkout <span class=\"hljs-_\"><span class=\"hljs-_\">-f</span></span> step-2</code></pre><p>刷新你的浏览器或在线检查这一步：<a rel=\"nofollow\" href=\"http://angular.github.io/angular-phonecat/step-2/app\" target=\"_blank\">Step 2 Live Demo</a></p><p>下面列出了第一步和第二步之间的最重要的区别。你可以在<a rel=\"nofollow\" href=\"https://github.com/angular/angular-phonecat/compare/step-1...step-2\" target=\"_blank\">GitHub</a>里看到完整的差异。</p><h2 class=\"head2\">视图和模板</h2><p>在Angular中，<strong>视图</strong>是模块透过HTML<strong>模板</strong>的映射。这意味着每当模块有变化时，Angular会刷新适当的绑定点，随之更新视图。</p><p>以下面代码为模板，Angular结构化了视图组件：</p><p><strong><code>app/index.html</code>:</strong></p><pre><code class=\"language-html hljs xml\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">html</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">ng-app</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"phonecatApp\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">head</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n  ...\n  <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">script</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">src</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"/attachments/image/wk/angularjs/angular.js\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span><span class=\"undefined\"></span><span class=\"hljs-tag\"><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">script</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n  <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">script</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">src</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"/attachments/image/wk/angularjs/controllers.js\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span><span class=\"undefined\"></span><span class=\"hljs-tag\"><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">script</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">head</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">body</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">ng-controller</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"PhoneListCtrl\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n\n  <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">ul</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n    <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">li</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">ng-repeat</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"phone in phones\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n      <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">span</span></span></span><span class=\"hljs-tag\">&gt;</span></span>{{phone.name}}<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">span</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n      <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">p</span></span></span><span class=\"hljs-tag\">&gt;</span></span>{{phone.snippet}}<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">p</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n    <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">li</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n  <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">ul</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n\n<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">body</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">html</span></span></span><span class=\"hljs-tag\">&gt;</span></span></code></pre><p>我们用<a rel=\"nofollow\" href=\"https://docs.angularjs.org/api/ng/directive/ngRepeat\" target=\"_blank\">ngRepeat指令</a>和两个<a rel=\"nofollow\" href=\"https://docs.angularjs.org/guide/expression\" target=\"_blank\">Angular表达式</a>替代硬编码的手机列表：</p><ul><li>在<code>&lt;li&gt;</code>元素标签上的元素属性<code>ng-repeat=\"phone in phones\"</code>是一个Angular转发器指令。该转发器告诉Angular为列表中的每款使用元素标签<code>&lt;li&gt;</code>作为模板的手机创建一个<code>&lt;li&gt;</code>元素。</li><li>用花括号包围的表达式（<code>{{phone.name}}</code>和<code>{{phone.snippet}}</code>）将被替换成表达式的值。</li></ul><p>我们已经添加了一个新指令，称为<code>ng-controller</code>，它给元素标签&lt;body&gt;附加了一个<code>PhoneListCtrl</code><strong>控制器</strong>。在这个点上：</p><ul><li>在花括号中的表达式（<code>{{phone.name}}</code>和<code>{{phone.snippet}}</code>）表示绑定，在我们的应用程序模块中参引它们，它们被设置在我们的<code>PhoneListCtrl</code>控制器上。</li></ul><div class=\"alert alert-info\">注意：我们已经指定了一个[Angular模块](https://docs.angularjs.org/api/ng/type/angular.Module)以载入使用`ng-app=\"phonecatApp\"`，在那里，`phonecatApp`是我们的模块名。该模块将包含`PhoneListCtrl`。</div><img class=\"diagram\" src=\"https://atts.w3cschool.cn/attachments/image/wk/angularjs/tutorial_02.png\" alt=\"\"><h2 class=\"head2\">模块和控制器</h2><p>数据<strong>模块</strong>（一个简单的手机数列，以对象字面记号法表达）现在在<code>PhoneListCtrl</code><strong>控制器</strong>中实例化了。该<strong>控制器</strong>只是一个构造器函数，需要一个<code>$scope</code>参数：</p><p><strong><code>app/js/controllers.js</code>:</strong></p><pre><code class=\"language-js hljs javascript\">\n<span class=\"hljs-keyword\"><span class=\"hljs-keyword\">var</span></span> phonecatApp = angular.module(<span class=\"hljs-string\"><span class=\"hljs-string\">'phonecatApp'</span></span>, []);\n\nphonecatApp.controller(<span class=\"hljs-string\"><span class=\"hljs-string\">'PhoneListCtrl'</span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\"> (</span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">$scope</span></span></span><span class=\"hljs-function\">) </span></span>{\n  $scope.phones = [\n    {<span class=\"hljs-string\"><span class=\"hljs-string\">'name'</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">'Nexus S'</span></span>,\n     <span class=\"hljs-string\"><span class=\"hljs-string\">'snippet'</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">'Fast just got faster with Nexus S.'</span></span>},\n    {<span class=\"hljs-string\"><span class=\"hljs-string\">'name'</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">'Motorola XOOM? with Wi-Fi'</span></span>,\n     <span class=\"hljs-string\"><span class=\"hljs-string\">'snippet'</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">'The Next, Next Generation tablet.'</span></span>},\n    {<span class=\"hljs-string\"><span class=\"hljs-string\">'name'</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">'MOTOROLA XOOM?'</span></span>,\n     <span class=\"hljs-string\"><span class=\"hljs-string\">'snippet'</span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\">'The Next, Next Generation tablet.'</span></span>}\n  ];\n});\n</code></pre><p>在这里，我们声明了一个控制器，称为<code>PhoneListCtrl</code>，并把它注册到一个AngularJS模块<code>PhonecatApp</code>中。注意，我们的<code>ng-app</code>指令（在元素标签<code>&lt;html&gt;</code>上）现在指定了<code>phonecatApp</code>模块名作为载入的模块，在引导应用Angular应用程序时载入该模块。</p><p>虽然控制器没有做太多的事情，但是它扮演了一个至关重要的角色。通过为我们的上下文提供数据模块，控制器允许我们在模块和视图之间建立数据绑定。我们在展示、数据和逻辑组件之间添加点状虚线，如下所示：</p><ul><li>该<a rel=\"nofollow\" href=\"https://docs.angularjs.org/api/ng/directive/ngController\" target=\"_blank\">ngController指令</a>，定位在<code>&lt;body&gt;</code>元素标签上，引用了我们的控制器的名称，<code>PhoneListCtrl</code>（放置在JavaScript文件<code>controllers.js</code>上）。</li><li><code>PhoneListCtrl</code>控件在<code>$scope</code>上附加了手机数据，把它注入到我们的控制器函数中。该<strong>作用域</strong>是<strong>根作用域</strong>的原型化的后代，在定义应用程序的时候创建了该根作用域。该控制器作用域可以在元素标签<code>&lt;body ng-controller=\"PhoneListCtrl\"&gt;</code>内部的所有绑定位置上可用。</li></ul><h3>作用域</h3><p>一个作用域的概念在Angular中是至关重要的。作用域可以被视为胶合剂，允许模板、模块和控制器一起工作。Angular使用作用域，以及模板、数据模块和控制器中包含的信息，以保持模块和视图分离，但是同步。任何对模块的改变会影响视图；任何在视图中发生的改变反应在模块中。</p><p>要想学习更多关于Angular作用域的知识，请参阅<a rel=\"nofollow\" href=\"https://docs.angularjs.org/api/ng/type/%24rootScope.Scope\" target=\"_blank\">angular作用域文档</a>。</p><h2 class=\"head2\">测试</h2><p>从视图中分离控制器的“Angular方法”，使测试代码变得容易，就像是它在被开发那样。如果你的控制器在全局命名空间中可用，则我们可以用一个模拟的<code>scope</code>对象简单把它实例化：</p><p><strong><code>test/e2e/scenarios.js</code>:</strong></p><pre><code class=\"language-js hljs javascript\">describe(<span class=\"hljs-string\"><span class=\"hljs-string\">'PhoneListCtrl'</span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>)</span></span>{\n\n  it(<span class=\"hljs-string\"><span class=\"hljs-string\">'should create \"phones\" model with 3 phones'</span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span>{\n    <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">var</span></span> scope = {},\n        ctrl = <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">new</span></span> PhoneListCtrl(scope);\n\n    expect(scope.phones.length).toBe(<span class=\"hljs-number\"><span class=\"hljs-number\">3</span></span>);\n  });\n\n});</code></pre><p>测试实例化的<code>PhoneListCtrl</code>并在包含三个记录的作用域上核查手机数列属性。这个示例演示了为Angular中的代码创建一个单元测试是多么容易。因为测试是软件开发的如此至关重要的部分，我们让在Angular中创建测试变得容易，从而可以鼓励开发员编写它们。</p><h3>测试非全局控制器</h3><p>在实践中，你应该不想让你的控制器函数在全局命名空间内。取而代之的是，你可以看到我们已经利用一个<code>phonecatApp</code>模块上的匿名构造器函数注册了控制器。</p><p>在这种情况下，Angular提供了一个服务，<code>$controller</code>，它可以以名称接收你的控制器。这里有使用<code>$controller</code>同样的测试：</p><p><strong><code>test/unit/controllersSpec.js</code>:</strong></p><pre><code class=\"language-js hljs javascript\">describe(<span class=\"hljs-string\"><span class=\"hljs-string\">'PhoneListCtrl'</span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>)</span></span>{\n\n  beforeEach(<span class=\"hljs-built_in\"><span class=\"hljs-built_in\">module</span></span>(<span class=\"hljs-string\"><span class=\"hljs-string\">'phonecatApp'</span></span>));\n\n  it(<span class=\"hljs-string\"><span class=\"hljs-string\">'should create \"phones\" model with 3 phones'</span></span>, inject(<span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span><span class=\"hljs-function\">(</span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">$controller</span></span></span><span class=\"hljs-function\">) </span></span>{\n    <span class=\"hljs-keyword\"><span class=\"hljs-keyword\">var</span></span> scope = {},\n        ctrl = $controller(<span class=\"hljs-string\"><span class=\"hljs-string\">'PhoneListCtrl'</span></span>, {$scope:scope});\n\n    expect(scope.phones.length).toBe(<span class=\"hljs-number\"><span class=\"hljs-number\">3</span></span>);\n  }));\n\n});</code></pre><ul><li>在每个测试开始之前，我们会告诉Angular要载入<code>phonecatApp</code>模块。</li><li>我们要求Angular把该<code>$controller</code>服务<code>inject</code>到我们的测试函数中。</li><li>我们使用<code>$controller</code>以创建一个<code>PhoneListCtrl</code>的实例。</li><li>利用这个实例，我们在包含三个记录的作用域上核查了手机数列属性。</li></ul><h3>编写并运行测试</h3><p>Angular喜欢使用Jasmine的行为-驱动开发（BCC）的句法。虽然Angular没有要求你使用Jasmine，但是在这个教程中，我们用Jasmine v1.3编写所有的测试。你可以在<a rel=\"nofollow\" href=\"http://jasmine.github.io/\" target=\"_blank\">Jasmine官方首页</a>和<a rel=\"nofollow\" href=\"http://jasmine.github.io/1.3/introduction.html\" target=\"_blank\">Jasmine文档</a>中学习Jasmine。</p><p>angular-seed项目是预处理的，以使用<a rel=\"nofollow\" href=\"http://karma-runner.github.io/\" target=\"_blank\">Karma</a>运行单元测试，但是你将需要确保已经安装了Karma和它的必要的插件。你可以通过运行<code>rpm install</code>来做到这。</p><p>要想运行测试，请运行<code>rpm test</code>，然后观察文件有什么改变。</p><ul><li>Karma将自动开始一个Chrome和Firefox浏览器的新实例。只需要忽略它们，让它们在后台运行。Karma将为测试执行使用这些浏览器。</li><li><p>如果你已经在你的机器上安装了这些浏览器中的一个，确保在运行测试之前更新Karma的配置文件。本地配置文件在<code>test/karma.conf.js</code>，然后更新<code>browsers</code>属性。</p><p>例如，如果你只安装了Chrome：</p><pre>  ...\n  browsers: ['Chrome'],\n  ...\n</pre></li><li><p>你将在终端看到以下或者类似的输出：</p><pre>  info: Karma server started at http://localhost:9876/\n  info (launcher): Starting  browser \"Chrome\"\n  info (Chrome 22.0): Connected on socket id tPUm9DXcLHtZTKbAEO-n\n  Chrome 22.0: Executed 1 of 1 SUCCESS (0.093 secs / 0.004 secs)\n</pre><p>耶！测试通过了！或者没有通过……</p></li><li>要想重新运行测试，只需要改变任何源或者test.js文件。Karma将注意到这些改变，并将为你重新运行测试。现在是不是甜？</li></ul><div class=\"alert alert-info\">确保你没有把Karma打开的浏览器最小化了。在一些操作系统中，分配到一个最小化的浏览器上的内存是有限的，导致你的karma测试运行变得极其缓慢。</div><h2>实验</h2><ul><li><p>添加对<code>index.html</code>的另一个绑定。例如：</p><pre><code class=\"language-html hljs xml\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">p</span></span></span><span class=\"hljs-tag\">&gt;</span></span>Total number of phones: {{phones.length}}<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">p</span></span></span><span class=\"hljs-tag\">&gt;</span></span></code></pre></li><li><p>在控制器中创建一个新模块属性，然后从模板中把它绑定到模块上。例如：</p><pre><code class=\"hljs bash\"><span class=\"hljs-variable\"><span class=\"hljs-variable\">$scope</span></span>.name = <span class=\"hljs-string\"><span class=\"hljs-string\">\"World\"</span></span>;</code></pre><p>然后向<code>index.html</code>添加一个新的绑定：</p><pre><code class=\"hljs javascript\">&lt;p&gt;Hello, {{name}}!<span class=\"xml\"><span class=\"hljs-tag\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;/</span></span><span class=\"hljs-name\"><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-name\">p</span></span></span></span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span></span></span></span></code></pre><p>刷新你的浏览器，核实它是否说了\"Hello, World!\"。</p></li><li><p>为<code>./test/unit/controllersSpec.js</code>中的控制器更新单元测试，以反映以前的变化。例如添加：</p><pre><code class=\"hljs javascript\">expect(scope.name).toBe(<span class=\"hljs-string\"><span class=\"hljs-string\">'World'</span></span>);</code></pre></li><li><p>在<code>index.html</code>中创建一个重复器，它结构化了一个简单的表格：</p><pre><code class=\"hljs javascript\">&lt;table&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;</span></span><span class=\"hljs-name\"><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-name\">tr</span></span></span></span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span></span></span><span class=\"hljs-tag\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;</span></span><span class=\"hljs-name\"><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-name\">th</span></span></span></span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span></span></span><span class=\"xml\">row number</span><span class=\"hljs-tag\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;/</span></span><span class=\"hljs-name\"><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-name\">th</span></span></span></span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span></span></span><span class=\"hljs-tag\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;/</span></span><span class=\"hljs-name\"><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-name\">tr</span></span></span></span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span></span></span></span>\n  &lt;tr ng-repeat=<span class=\"hljs-string\"><span class=\"hljs-string\">\"i in [0, 1, 2, 3, 4, 5, 6, 7]\"</span></span>&gt;<span class=\"xml\"><span class=\"hljs-tag\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;</span></span><span class=\"hljs-name\"><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-name\">td</span></span></span></span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span></span></span><span class=\"xml\">{{i}}</span><span class=\"hljs-tag\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;/</span></span><span class=\"hljs-name\"><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-name\">td</span></span></span></span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span></span></span></span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;/</span></span><span class=\"hljs-name\"><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-name\">tr</span></span></span></span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span></span></span></span>\n&lt;<span class=\"hljs-regexp\"><span class=\"hljs-regexp\">/table&gt;</span></span></code></pre><p>现在，让这个基于1的列表的<code>i</code>在绑定中增值1。</p><pre><code class=\"hljs javascript\">&lt;table&gt;\n  <span class=\"xml\"><span class=\"hljs-tag\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;</span></span><span class=\"hljs-name\"><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-name\">tr</span></span></span></span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span></span></span><span class=\"hljs-tag\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;</span></span><span class=\"hljs-name\"><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-name\">th</span></span></span></span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span></span></span><span class=\"xml\">row number</span><span class=\"hljs-tag\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;/</span></span><span class=\"hljs-name\"><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-name\">th</span></span></span></span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span></span></span><span class=\"hljs-tag\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;/</span></span><span class=\"hljs-name\"><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-name\">tr</span></span></span></span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span></span></span></span>\n  &lt;tr ng-repeat=<span class=\"hljs-string\"><span class=\"hljs-string\">\"i in [0, 1, 2, 3, 4, 5, 6, 7]\"</span></span>&gt;<span class=\"xml\"><span class=\"hljs-tag\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;</span></span><span class=\"hljs-name\"><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-name\">td</span></span></span></span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span></span></span><span class=\"xml\">{{i+1}}</span><span class=\"hljs-tag\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;/</span></span><span class=\"hljs-name\"><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-name\">td</span></span></span></span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span></span></span></span><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;/</span></span><span class=\"hljs-name\"><span class=\"xml\"><span class=\"hljs-tag\"><span class=\"hljs-name\">tr</span></span></span></span><span class=\"xml\"><span class=\"hljs-tag\">&gt;</span></span></span></span>\n&lt;<span class=\"hljs-regexp\"><span class=\"hljs-regexp\">/table&gt;</span></span></code></pre><p>另需指出：尝试并使一个8x8的表格使用一个额外的<code>ng-repeat</code>。</p></li><li>通过把<code>expect(scope.phones.length).toBe(3)</code>变成<code>toBe(4)</code>，使单元测试失败。</li></ul><h2>总结</h2><p>现在你有了一个动态的应用，功能分离开模块、视力和控制器组件，而且你测试了它们。现在，让我们前往<a href=\"wkn41jtm.html\" target=\"_blank\">第三步 筛选迭代器</a>以学习如何为应用添加全文搜索。</p><ul doc-tutorial-nav=\"2\"></ul></div></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 4,
      "parent_sort_index": 4,
      "chapter_level_one_id": "0e64fc8d8cc7e3ed9dc19d823d323344",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "AngularJS v1.5 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "44b3d72c72411d407a0fdc4b75432084",
      "chapter_level_two_parent_id": "0e64fc8d8cc7e3ed9dc19d823d323344",
      "chapter_level_two_name": "AngularJS 引导程序",
      "chapter_level_two_url": "/angularjs/n8og1ju9.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><div class=\"wkcontent\"><h2>静态模板</h2><p>为了演示Angular如何增强静态HTML，你可以创建一个纯<strong>静态</strong>HTML网页，然后仔细观察我们可以如何把这些HTML代码变成一个模板，从而Angular可以用来动态显示同样的结果、以任何数据集显示结果。</p><p>在这一步中，你将在一个HTML页面中添加关于两款手机的基本的信息。</p><ul><li>网页现在包含了一个列表，带有两款手机的信息。</li></ul><p>把工作空间重置到第一步</p><pre><code class=\"hljs bash\">git checkout <span class=\"hljs-_\"><span class=\"hljs-_\">-f</span></span> step-1</code></pre><p>刷新你的浏览器或在线检查这一步：<a rel=\"nofollow\" href=\"http://angular.github.io/angular-phonecat/step-1/app\" target=\"_blank\">Step 1 Live Demo</a></p><p>下面列出了第零步和第一步之间的最重要的区别。你可以在<a rel=\"nofollow\" href=\"https://github.com/angular/angular-phonecat/compare/step-0...step-1\" target=\"_blank\">GitHub</a>里看到完整的差异。</p><p><strong>app/index.html:</strong></p><pre><code class=\"language-html hljs xml\">  <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">ul</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n    <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">li</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n      <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">span</span></span></span><span class=\"hljs-tag\">&gt;</span></span>Nexus S<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">span</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n      <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">p</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n        Fast just got faster with Nexus S.\n      <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">p</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n    <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">li</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n    <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">li</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n      <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">span</span></span></span><span class=\"hljs-tag\">&gt;</span></span>Motorola XOOM? with Wi-Fi<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">span</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n      <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">p</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n        The Next, Next Generation tablet.\n      <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">p</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n    <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">li</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n  <span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">ul</span></span></span><span class=\"hljs-tag\">&gt;</span></span></code></pre><h2>实验</h2><ul><li>尝试向<code>index.html</code>添加更多的静态HTML。比如：</li></ul><pre><code class=\"hljs xml\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">p</span></span></span><span class=\"hljs-tag\">&gt;</span></span>Total number of phones: 2<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">p</span></span></span><span class=\"hljs-tag\">&gt;</span></span></code></pre><h2>总结</h2><p>额外对你的应用使用静态HTML以显示这个列表。现在，让我们前往<a href=\"o4r51jtj.html\" target=\"_blank\">第二步 Angular模板</a>以学习如何使用AngularJS以动态生成同一个列表。</p><p>在下一节内容中，我们将介绍 <a href=\"https://www.w3cschool.cn/angularjs/o4r51jtj.html\" target=\"_blank\">AngularJS 静态模板</a>。</p></div></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 3,
      "parent_sort_index": 4,
      "chapter_level_one_id": "0e64fc8d8cc7e3ed9dc19d823d323344",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "AngularJS v1.5 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "03a17266b9713d876a6d87e4d176a5d3",
      "chapter_level_two_parent_id": "0e64fc8d8cc7e3ed9dc19d823d323344",
      "chapter_level_two_name": "AngularJS 必要准备工作",
      "chapter_level_two_url": "/angularjs/m1ag1ju6.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><div class=\"wkcontent\"><h2>必要准备工作</h2><h2 class=\"head2\">PhoneCat教程应用程序</h2><p>AngularJS最好的入方法是跟着教程操作，它带领你经历了一个AngularJS网页应用程序的构建。你将建立的这个应用是一个目录，显示了一个安卓设备的列表，让你能够筛选列表，以只察看你感兴趣的设备，然后查看任何设备的详情。</p><p><img src=\"https://atts.w3cschool.cn/attachments/image/wk/angularjs/catalog_screen.png\" alt=\"运行在浏览器上的演示应用\"></p><p>跟随着这个教程以看到Angular如何让浏览器变得更聪明——不需要使用原生的扩展或者插件：</p><ul><li>查看如何使用客户端数据绑定的示例，以建立数据的动态视图，它会响应用户的操作立即改变自己。</li><li>查看Angular如何在与你的数据同步的同时，保持你的视图不变，不需要DOM操纵。</li><li>学一个更好的、更容易的方法，以测试你的网页应用，利用Karma以及Protractor。</li><li>学会如何使用依赖性注入和服务，以制作常见的网页任务，比如说更容易地在应用中获得数据。</li></ul><p>当你看完该教程时你将能够：</p><ul><li>创建工作在现代浏览器中的动态的应用程序。</li><li>使用数据绑定以把你的数据模块连接到你的视图中。</li><li>利用Karma创建并运行单元测试。</li><li>利用Protractor创建并运行端到端测试。</li><li>从模板中移出应用逻辑，移到控件中。</li><li>使用Angular服务从服务器端获得数据。</li><li>使用ngAnimate把动画应用到你的应用程序中。</li><li>识别资源以学习更多关于AngularJS。</li></ul><p>本教程将指导你完成建立一个应用程序的整个过程，包括编写并运行单元测试和端到端测试。每一步骤的末尾的实验向你提供了学习更多关于AngularJS的建议，以及你正在建立的应用程序的建议。</p><p>你可以在几个时内看完整个教程，或者你可能会想愉快地花一天时间真正深入挖掘它。如果你寻求更短的AngularJS的入门，请仔细阅读<a rel=\"nofollow\" href=\"https://docs.angularjs.org/misc/started\" target=\"_blank\">起步</a>文档。</p><h2>起步</h2><p>本页的剩余部分解释了你可以如何设置你的本地机器用于开发。如果你只是想阅读教程，则你可以直接查看第一步：<a href=\"n8og1ju9.html\" target=\"_blank\">第一步 引导程序</a>。</p><h2>操作代码</h2><p>你可以在你自己的电脑上跟随着这个教程、摆弄代码。用这种方法，你可以得到真正书写AngularJS代码的亲手实践，还使用了推荐的测试工具。</p><p>该教程取决于为源代码管理器使用了哪个版本的<a rel=\"nofollow\" href=\"http://git-scm.com/\" target=\"_blank\">Git</a>。除了安装并运行几段git代码，你不需要知道关于Git的任何东西，只要跟着这个教程。</p><h3>安装Git</h3><p>你可以从<a rel=\"nofollow\" href=\"http://git-scm.com/download\" target=\"_blank\">http://git-scm.com/download</a>下载并安装Git。一旦安装好了，你应该能够访问到<code>git</code>命令行工具。你将需要用到的主要命令是：</p><ul><li><code>git clone ...</code> : 把一个远程的知识库克隆到你的本地机器上</li><li><code>git checkout ...</code> : 检查一个特定的分支或一个代码的标记版本以破解</li></ul><h3>下载angular-phonecat</h3><p>运行以下命令以克隆放置在GitHub上的 <a rel=\"nofollow\" href=\"https://github.com/angular/angular-phonecat\" target=\"_blank\">angular-phonecat repository</a>：</p><pre><code class=\"hljs php\">git <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">clone</span></span></span> --depth=<span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">14</span></span></span> https:<span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">//github.com/angular/angular-phonecat.git</span></span></span></code></pre><p>该命令在你当前的目录中创建了<code>angular-phonecat</code>目录。</p><div class=\"alert alert-info\">该`--depth=14`的选项仅仅是告诉Git只拉下来最后的14次提交。这样使下载更小更快。</div><p>把你当前的目录变成<code>angular-phonecat</code>。</p><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\">cd</span></span></span> angular-phonecat</code></pre><p>从现在开始，本教程指令，假定你从<code>angular-phonecat</code>目录上运行所有的命令。</p><h3>安装Node.js</h3><p>如果你想运行预配置的本地web服务器以及测试工具，则你还需要<a rel=\"nofollow\" href=\"http://nodejs.org/\" target=\"_blank\">Node.js v0.10.27+</a>。</p><p>你可以针对你的操作系统从<a rel=\"nofollow\" href=\"http://nodejs.org/download/\" target=\"_blank\">http://nodejs.org/download/</a>下载一个Node.js安装包。</p><p>运行以下的命令行，检查你已经安装的Node.js的版本：</p><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\"><span class=\"hljs-attribute\"><span class=\"hljs-attribute\">node</span></span></span> --version</code></pre><p>在基于Debian的发行版中，与别的实用工具有一个名称冲突，它称为<code>node</code>。建议的解决方案是再安装<code>nodejs-legacy</code> apt 安装包，它会把<code>node</code>重命名为<code>nodejs</code>。</p><pre><code class=\"hljs sql\">apt-get <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">install</span></span></span> nodejs-legacy npm\nnodejs <span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">--version</span></span></span>\nnpm <span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">--version</span></span></span></code></pre><div class=\"alert alert-info\">如果你需要在你的本地环境中运行Node.js的不同版本，请考虑安装<a rel=\"nofollow\" href=\"https://github.com/creationix/nvm\" target=\"_blank\" title=\"Node Version Manager Github Repo link\">Node版本管理器（nvm）</a>。</div><p>一旦你已经在你的机器上安装了Node.js，你可以依靠运行以下代码下载该工具。</p><pre><code class=\"hljs coffeescript\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\">npm</span></span></span> install</code></pre><p>这个命令读取了angular-phonecat的<code>package.json</code>文件，并把以下工具下载到<code>node_modules</code>目录中：</p><ul><li><a rel=\"nofollow\" href=\"http://bower.io/\" target=\"_blank\">Bower</a> - 客户端代码包管理器</li><li><a rel=\"nofollow\" href=\"https://github.com/nodeapps/http-server\" target=\"_blank\">Http-Server</a> - 简单的本地静态web服务器</li><li><a rel=\"nofollow\" href=\"https://github.com/karma-runner/karma\" target=\"_blank\">Karma</a> - 单元测试运行器</li><li><a rel=\"nofollow\" href=\"https://github.com/angular/protractor\" target=\"_blank\">Protractor</a> - 端到端测试运行器</li></ul><p>运行<code>npm install</code>还将自动使用bower以把该Angular框架下载到<code>app/bower_component</code>目录。</p><div class=\"alert alert-info\">注意angular-phonecat项目被设置为通过npm脚本安装并运行这些实用工具。这意味着要想跟随这个教程，你并非一定要让实用工具中的一个全局安装在你的系统中。参见下面的**安装助手工具**以了解更多信息。</div><p>该项目用一些npm助手脚本预配置，以使它容易运行你在开发时需要用到的常见的任务：</p><ul><li><code>npm start</code> : 启动一个本地开发Web服务器</li><li><code>npm test</code> : 启动Karma单元测试运行器</li><li><code>npm run protractor</code> : 运行Protractor端到端（E2E）测试</li><li><code>npm run update-webdriver</code> : 安装Protractor所需要的驱动程序</li></ul><h3>安装助手工具（可选的）</h3><p>Bower、Http-Server、Karma和Protractor模块也都中可执行的，它们可以全局安装，也可从终端/命令提示符中直接运行。跟随着这个教程，你不需要安装它，但是如果你决定你确实想要直接运行它们，你可以使用<code>sudo npm install -g ...</code>来全局安装这些模块。</p><p>作为实例，要想安装可执行的Bower命令行，你只需要输入以下指令：</p><pre><code class=\"hljs coffeescript\">sudo <span class=\"hljs-built_in\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\">npm</span></span></span> install -g bower</code></pre><p><em>(Omit the sudo if running on Windows)</em></p><p>然后你可以直接运行该bower工具了，如下：</p><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\"><span class=\"hljs-attribute\"><span class=\"hljs-attribute\">bower</span></span></span> install</code></pre><h3>运行开发Web服务器</h3><p>虽然Angular应用程序是纯客户端代码，而且能够直接从文件系统中，在web浏览器中打开它们，但是最好从一个HTTP web服务器中供应它们。特别是，为了安全原因，如果网页直接从文件系统中加载，很多现代浏览器不允许JavaScript发起服务器请求。</p><p>为了在开发期间托管应用程序，用一个简单的静态的web服务器配置angular-phonecat项目。运行以下指令以开启web服务器。</p><pre><code class=\"hljs coffeescript\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\">npm</span></span></span> start</code></pre><p>这将创建一个本地web服务器，鉴听你的本地机器上的端口8000。现在你可以在这个地址上浏览该应用程序了：</p><pre><code class=\"hljs javascript\">http:<span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">//localhost:8000/app/index.html</span></span></span></code></pre><div class=\"alert alert-info\">要想在不同的IP地址或端口上供应该web应用程序，可以编辑package.json内部的“start”脚本。你可以使用`-a`以设置地址，使用`-p`以设置端口。</div><h3>运行单元测试</h3><p>我们使用单元测试以确保我们的应用程序中的JavaScript代码正确运行。单元测试关注于应用程序的小型的隔离部分。单元测试保存在<code>test/unit</code>目录中。</p><p>angular-phonecat项目被配置为使用<a rel=\"nofollow\" href=\"https://github.com/karma-runner/karma\" target=\"_blank\">Karma</a>以针对本应用程序运行该单元测试。运行以下指令以开始Karma。</p><pre><code class=\"hljs bash\">npm <span class=\"hljs-built_in\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\">test</span></span></span></code></pre><p>这将开始Karma单元测试运行器。Karma将读取在<code>test/karma.conf.js</code>中的配置文件。  这个配置文件告诉Karma要：</p><ul><li>打开一个Chrome浏览器，把它连接到Karma。</li><li>在该浏览器中执行所有的单元测试</li><li>报告在终端/命令行窗口中的那些测试的结果</li><li>观察所有项目的JavaScript文件，每当有变化时重新运行测试</li></ul><p>最后让它一直在后台运行，因为北会给你即时的回调，关于当你在操作代码时，你的改变是否通过了单元测试的回调。</p><h3>运行端到端测试</h3><p>我们使用端到端测试以确保应用程序作为一个整体运行。端到端测试被设计为测试整个应用客户端应用程序，特别是测试视图是否正确显示并有正确的行为。它在浏览器中运行，通过模拟真实用户与真实应用程序的交互。</p><p>端到端测试保存在<code>test/e2e</code>目录中。</p><p>该angular-phonecat项目被配置为使用<a rel=\"nofollow\" href=\"https://github.com/angular/protractor\" target=\"_blank\">Protractor</a>以针对应用程序运行端到端测试。Protractor依赖于一组允许它与浏览器交互的驱动程序。你可以通过运行以下代码以安装这些驱动程序：</p><pre><code class=\"hljs coffeescript\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\">npm</span></span></span> run update-webdriver</code></pre><p><strong>你只需要运行它一次。</strong></p><p>因为Protactor通过与正在运行的应用程序交互来起作用，我们需要开启我们的web服务器：</p><pre><code class=\"hljs coffeescript\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\">npm</span></span></span> start</code></pre><p>然后在一个单独的终端/命令行窗口中，通过运行以下指令，我们可以针对该应用程序运行Protractor测试脚本：</p><pre><code class=\"hljs coffeescript\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\">npm</span></span></span> run protractor</code></pre><p>Protractor将读取在<code>test/protractor-conf.js</code>中的配置文件。该配置文件要求Protractor做：</p><ul><li>打开一个Chrome浏览器，把它连接到应用程序上</li><li>在浏览器中执行所有的端到端测试</li><li>报告在终端/命令行窗口中的那些测试结果</li><li>关闭浏览器并退出</li></ul><p>最好在每当你对HTML视图作了改变的时候运行端到端测试，或者当你想检查该应用程序作为一个整体是否正确执行时，运行端到端测试。通常在把一个新的改变提交到远程知识库之前运行端到端测试。</p><p>现在你已经测试好了你的本地机器，让我们开始这个教程吧：<a href=\"n8og1ju9.html\" target=\"_blank\">第一步 引导程序</a>。</p></div></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 2,
      "parent_sort_index": 4,
      "chapter_level_one_id": "0e64fc8d8cc7e3ed9dc19d823d323344",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "AngularJS v1.5 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "d2bd6f102da2991ab5a96f4eb75751b2",
      "chapter_level_two_parent_id": "0e64fc8d8cc7e3ed9dc19d823d323344",
      "chapter_level_two_name": "AngularJS 开始入门",
      "chapter_level_two_url": "/angularjs/3b4i1ju3.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><div class=\"wkcontent\"><h2>快速入门</h2><h3>为什么要用AngularJS？</h3><p>HTML非常适合于声明静态的文档，但是当我们试图使用它在web应用程序中声明动态视图时，它显得力不从心。AngularJS能为您的应用程序扩展HTML的词汇。由此产生的环境非常具有有表现力、可读性强、快速发展。</p><h3>替代选择</h3><p>其他处理HTML的缺点的框架要么是抽象出HTML、CSS、和/或JavaScript，要么为操纵DOM提供一个必要的方式。它们都不能解决一个根本问题，即HTML不是为动态视图设计的。</p><h3>可扩展性</h3><p>AngularJS是用来构建框架的工具集，很适全于你的应用程序开发。它完全可扩展，而且与别的库协作得很好。每个功能可以被修改或替代，以适合你的独一无二的开发工作流以及功能需要。继续阅读以弄懂为何。</p><h3>The Basics</h3><p>index.html</p><pre><code class=\"language-htm\">&lt;!doctype html&gt;\n&lt;html ng-app&gt;\n  &lt;head&gt;\n    &lt;script src=\"https://atts.w3cschool.cn/attachments/image/wk/angularjs/angular.min.js\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div&gt;\n      &lt;label&gt;Name:&lt;/label&gt;\n      &lt;input type=\"text\" ng-model=\"yourName\" placeholder=\"Enter a name here\"&gt;\n      &lt;hr&gt;\n      &lt;h1&gt;Hello {{yourName}}!&lt;/h1&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre><h3>添加一些控件</h3><h4>数据绑定</h4><p>数据绑定是每当模型改变时更新视图的自动方法，当视图改变时，同样也会更新模型。这非常棒，因为从你需要担心的列表中它减去了DOM操纵。</p><h4>控件</h4><p>控件是DOM元素后面的行为。AngularJS让你能够用一个干净可读的形式表达行为，不需要更新DOM的通常样板、注册回调或者观察模型变化。</p><h4>扁平的JavaScript</h4><p>与别的框架不同，不需要为包装访问器方法中的模型，而继承私有类型。Angular模型是扁平的旧式JavaScript对象。这使你的代码容易读取、容易维护、可重用，还不需要样板。</p><p>index.html</p><pre><code class=\"language-htm\">&lt;!doctype html&gt;\n&lt;html ng-app=\"todoApp\"&gt;\n  &lt;head&gt;\n    &lt;script src=\"https://atts.w3cschool.cn/attachments/image/wk/angularjs/angular.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"todo.js\"&gt;&lt;/script&gt;\n    &lt;link rel=\"stylesheet\" href=\"todo.css\"&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;h2&gt;Todo&lt;/h2&gt;\n    &lt;div ng-controller=\"TodoListController as todoList\"&gt;\n      &lt;span&gt;{{todoList.remaining()}} of {{todoList.todos.length}} remaining&lt;/span&gt;\n      [ &lt;a href=\"\" ng-click=\"todoList.archive()\"&gt;archive&lt;/a&gt; ]\n      &lt;ul class=\"unstyled\"&gt;\n        &lt;li ng-repeat=\"todo in todoList.todos\"&gt;\n          &lt;input type=\"checkbox\" ng-model=\"todo.done\"&gt;\n          &lt;span class=\"done-{{todo.done}}\"&gt;{{todo.text}}&lt;/span&gt;\n        &lt;/li&gt;\n      &lt;/ul&gt;\n      &lt;form ng-submit=\"todoList.addTodo()\"&gt;\n        &lt;input type=\"text\" ng-model=\"todoList.todoText\"  size=\"30\"\n               placeholder=\"add new todo here\"&gt;\n        &lt;input class=\"btn-primary\" type=\"submit\" value=\"add\"&gt;\n      &lt;/form&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre><p>todo.js</p><pre><code class=\"language-javascript hljs\">angular.module(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'todoApp'</span></span></span>, [])\n  .controller(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'TodoListController'</span></span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">(</span></span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span></span>{\n    <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">var</span></span></span> todoList = <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">this</span></span></span>;\n    todoList.todos = [\n      {text:<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'learn angular'</span></span></span>, done:<span class=\"hljs-literal\"><span class=\"hljs-literal\"><span class=\"hljs-literal\">true</span></span></span>},\n      {text:<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'build an angular app'</span></span></span>, done:<span class=\"hljs-literal\"><span class=\"hljs-literal\"><span class=\"hljs-literal\">false</span></span></span>}];\n\n    todoList.addTodo = <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">(</span></span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span></span>{\n      todoList.todos.push({text:todoList.todoText, done:<span class=\"hljs-literal\"><span class=\"hljs-literal\"><span class=\"hljs-literal\">false</span></span></span>});\n      todoList.todoText = <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">''</span></span></span>;\n    };\n\n    todoList.remaining = <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">(</span></span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span></span>{\n      <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">var</span></span></span> count = <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">0</span></span></span>;\n      angular.forEach(todoList.todos, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">(</span></span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">todo</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">) </span></span></span>{\n        count += todo.done ? <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">0</span></span></span> : <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">1</span></span></span>;\n      });\n      <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">return</span></span></span> count;\n    };\n\n    todoList.archive = <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">(</span></span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span></span>{\n      <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">var</span></span></span> oldTodos = todoList.todos;\n      todoList.todos = [];\n      angular.forEach(oldTodos, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">(</span></span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">todo</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">) </span></span></span>{\n        <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">if</span></span></span> (!todo.done) todoList.todos.push(todo);\n      });\n    };\n  });</code></pre><p>todo.css</p><pre><code class=\"language-css hljs\"><span class=\"hljs-selector-class\"><span class=\"hljs-selector-class\"><span class=\"hljs-selector-class\">.done-true</span></span></span> {\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\"><span class=\"hljs-attribute\">text-decoration</span></span></span>: line-through;\n  <span class=\"hljs-attribute\"><span class=\"hljs-attribute\"><span class=\"hljs-attribute\">color</span></span></span>: grey;\n}</code></pre><h3>后端连接</h3><h4>深链接</h4><p>一个深链接反应了用户在应用中的哪个位置，这很有用，所以用户可以把它存为书签以及电子邮件链接，以在应用内部定位它。往返旅行的应用程序会自动获得这个功能，但Ajax应用程序按其性质不会。AngularJS结合了深链接以及类似桌面应用程序的行为的优点。</p><h4>表单验证</h4><p>客户端表单验证是完美的用户体验的一个重要的部分。AngularJS使你能够声明表单的有效性规则，而不需要书写JavaScript代码。从而事半功倍。</p><h4>服务器通信</h4><p>AngularJS提供了内建的建在在XHR的顶层的服务，以及多种多样的使用第三方库的其它后端。通过处理异步返回的数据，Promise进一步简化了您的代码。在这个示例中，我们使用AngularFire库以把一个<a rel=\"nofollow\" href=\"https://www.firebase.com/\" target=\"_blank\">Firebase</a>后端接通到一个简单的Angular应用上。</p><p>index.html</p><pre><code class=\"language-html hljs xml\"><span class=\"hljs-meta\"><span class=\"hljs-meta\"><span class=\"hljs-meta\">&lt;!doctype html&gt;</span></span></span>\n<span class=\"hljs-tag\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span></span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">html</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\"> </span></span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">ng-app</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">=</span></span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"project\"</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&gt;</span></span></span>\n  <span class=\"hljs-tag\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span></span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">head</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&gt;</span></span></span>\n    <span class=\"hljs-tag\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span></span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">script</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\"> </span></span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">src</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">=</span></span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"/attachments/image/wk/angularjs/angular.min.js\"</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&gt;</span></span></span><span class=\"undefined\"></span><span class=\"hljs-tag\"><span class=\"undefined\"></span><span class=\"hljs-tag\"><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/</span></span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">script</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&gt;</span></span></span>\n    <span class=\"hljs-tag\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span></span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">script</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\"> </span></span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">src</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">=</span></span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"/attachments/image/wk/angularjs/angular-resource.min.js\"</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&gt;</span></span></span><span class=\"undefined\"><span class=\"undefined\"><span class=\"undefined\">\n    </span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span></span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">script</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&gt;</span></span></span>\n    <span class=\"hljs-tag\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span></span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">script</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\"> </span></span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">src</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">=</span></span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"/attachments/image/wk/angularjs/angular-route.min.js\"</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&gt;</span></span></span><span class=\"undefined\"><span class=\"undefined\"><span class=\"undefined\">\n   </span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span></span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">script</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&gt;</span></span></span>\n    <span class=\"hljs-tag\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span></span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">script</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\"> </span></span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">src</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">=</span></span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"/attachments/image/wk/angularjs/firebase.js\"</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&gt;</span></span></span><span class=\"undefined\"></span><span class=\"hljs-tag\"><span class=\"undefined\"></span><span class=\"hljs-tag\"><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/</span></span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">script</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&gt;</span></span></span>\n    <span class=\"hljs-tag\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span></span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">script</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\"> </span></span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">src</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">=</span></span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"/attachments/image/wk/angularjs/angularfire.min.js\"</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&gt;</span></span></span><span class=\"undefined\"></span><span class=\"hljs-tag\"><span class=\"undefined\"></span><span class=\"hljs-tag\"><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/</span></span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">script</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&gt;</span></span></span>\n    <span class=\"hljs-tag\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span></span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">link</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\"> </span></span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">rel</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">=</span></span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"stylesheet\"</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\"> </span></span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">href</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">=</span></span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"bootstrap.css\"</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&gt;</span></span></span>\n    <span class=\"hljs-tag\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span></span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">script</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\"> </span></span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">src</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">=</span></span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"project.js\"</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&gt;</span></span></span><span class=\"undefined\"></span><span class=\"hljs-tag\"><span class=\"undefined\"></span><span class=\"hljs-tag\"><span class=\"undefined\"></span><span class=\"hljs-tag\">&lt;/</span></span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">script</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&gt;</span></span></span>\n  <span class=\"hljs-tag\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span></span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">head</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&gt;</span></span></span>\n  <span class=\"hljs-tag\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span></span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">body</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&gt;</span></span></span>\n    <span class=\"hljs-tag\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span></span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">h2</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&gt;</span></span></span>JavaScript Projects<span class=\"hljs-tag\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span></span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">h2</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&gt;</span></span></span>\n    <span class=\"hljs-tag\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span></span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">div</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\"> </span></span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">ng-view</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&gt;</span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span></span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">div</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&gt;</span></span></span>\n  <span class=\"hljs-tag\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span></span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">body</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&gt;</span></span></span>\n<span class=\"hljs-tag\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span></span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">html</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&gt;</span></span></span></code></pre><p>bootstrap.css</p><pre><code class=\"language-css hljs\">// <span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\">Uncomment</span></span></span> <span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\">this</span></span></span> <span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\">in</span></span></span> <span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\">Plunker</span></span></span> <span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\">or</span></span></span> <span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\">JSFiddle</span></span></span>: @<span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">import</span></span></span> <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'//netdna.bootstrapcdn.com/twitter-bootstrap/2.0.4/css/bootstrap-combined.min.css'</span></span></span>;</code></pre><p>project.js</p><pre><code class=\"language-javascript hljs\">angular.module(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'project'</span></span></span>, [<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'ngRoute'</span></span></span>, <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'firebase'</span></span></span>])\n\n.value(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'fbURL'</span></span></span>, <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'https://ng-projects-list.firebaseio.com/'</span></span></span>)\n.service(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'fbRef'</span></span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">(</span></span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">fbURL</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">) </span></span></span>{\n  <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">return</span></span></span> <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">new</span></span></span> Firebase(fbURL)\n})\n.service(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'fbAuth'</span></span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">(</span></span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">$q, $firebase, $firebaseAuth, fbRef</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">) </span></span></span>{\n  <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">var</span></span></span> auth;\n  <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">return</span></span></span> <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\"> (</span></span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span></span>{\n      <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">if</span></span></span> (auth) <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">return</span></span></span> $q.when(auth);\n      <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">var</span></span></span> authObj = $firebaseAuth(fbRef);\n      <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">if</span></span></span> (authObj.$getAuth()) {\n        <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">return</span></span></span> $q.when(auth = authObj.$getAuth());\n      }\n      <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">var</span></span></span> deferred = $q.defer();\n      authObj.$authAnonymously().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">(</span></span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">authData</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">) </span></span></span>{\n          auth = authData;\n          deferred.resolve(authData);\n      });\n      <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">return</span></span></span> deferred.promise;\n  }\n})\n\n.service(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'Projects'</span></span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">(</span></span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">$q, $firebase, fbRef, fbAuth</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">) </span></span></span>{\n  <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">var</span></span></span> self = <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">this</span></span></span>;\n  <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">this</span></span></span>.fetch = <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\"> (</span></span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span></span>{\n    <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">if</span></span></span> (<span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">this</span></span></span>.projects) <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">return</span></span></span> $q.when(<span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">this</span></span></span>.projects);\n    <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">return</span></span></span> fbAuth().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">(</span></span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">auth</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">) </span></span></span>{\n      <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">var</span></span></span> deferred = $q.defer();\n      <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">var</span></span></span> ref = fbRef.child(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'projects-fresh/'</span></span></span> + auth.auth.uid);\n      <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">var</span></span></span> $projects = $firebase(ref);\n      ref.on(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'value'</span></span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">(</span></span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">snapshot</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">) </span></span></span>{\n        <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">if</span></span></span> (snapshot.val() === <span class=\"hljs-literal\"><span class=\"hljs-literal\"><span class=\"hljs-literal\">null</span></span></span>) {\n          $projects.$set(<span class=\"hljs-built_in\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\">window</span></span></span>.projectsArray);\n        }\n        self.projects = $projects.$asArray();\n        deferred.resolve(self.projects);\n      });\n\n      <span class=\"hljs-comment\"><span class=\"hljs-comment\"><span class=\"hljs-comment\">//Remove projects list when no longer needed.</span></span></span>\n      ref.onDisconnect().remove();\n      <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">return</span></span></span> deferred.promise;\n    });\n  };\n})\n\n.config(<span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">(</span></span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">$routeProvider</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">) </span></span></span>{\n  <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">var</span></span></span> resolveProjects = {\n    projects: <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\"> (</span></span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">Projects</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">) </span></span></span>{\n      <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">return</span></span></span> Projects.fetch();\n    }\n  };\n\n  $routeProvider\n    .when(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'/'</span></span></span>, {\n      controller:<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'ProjectListController as projectList'</span></span></span>,\n      templateUrl:<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'list.html'</span></span></span>,\n      resolve: resolveProjects\n    })\n    .when(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'/edit/:projectId'</span></span></span>, {\n      controller:<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'EditProjectController as editProject'</span></span></span>,\n      templateUrl:<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'detail.html'</span></span></span>,\n      resolve: resolveProjects\n    })\n    .when(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'/new'</span></span></span>, {\n      controller:<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'NewProjectController as editProject'</span></span></span>,\n      templateUrl:<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'detail.html'</span></span></span>,\n      resolve: resolveProjects\n    })\n    .otherwise({\n      redirectTo:<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'/'</span></span></span>\n    });\n})\n\n.controller(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'ProjectListController'</span></span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">(</span></span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">projects</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">) </span></span></span>{\n  <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">var</span></span></span> projectList = <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">this</span></span></span>;\n  projectList.projects = projects;\n})\n\n.controller(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'NewProjectController'</span></span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">(</span></span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">$location, projects</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">) </span></span></span>{\n  <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">var</span></span></span> editProject = <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">this</span></span></span>;\n  editProject.save = <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">(</span></span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span></span>{\n      projects.$add(editProject.project).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">(</span></span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">data</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">) </span></span></span>{\n          $location.path(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'/'</span></span></span>);\n      });\n  };\n})\n\n.controller(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'EditProjectController'</span></span></span>,\n  <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">(</span></span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">$location, $routeParams, projects</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">) </span></span></span>{\n    <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">var</span></span></span> editProject = <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">this</span></span></span>;\n    <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">var</span></span></span> projectId = $routeParams.projectId,\n        projectIndex;\n\n    editProject.projects = projects;\n    projectIndex = editProject.projects.$indexFor(projectId);\n    editProject.project = editProject.projects[projectIndex];\n\n    editProject.destroy = <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">(</span></span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span></span>{\n        editProject.projects.$remove(editProject.project).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">(</span></span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">data</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">) </span></span></span>{\n            $location.path(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'/'</span></span></span>);\n        });\n    };\n\n    editProject.save = <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">(</span></span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span></span>{\n        editProject.projects.$save(editProject.project).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">(</span></span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">data</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">) </span></span></span>{\n           $location.path(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'/'</span></span></span>);\n        });\n    };\n});</code></pre><p>list.html</p><pre><code class=\"language-htm\">&lt;input type=\"text\" ng-model=\"projectList.search\" class=\"search-query\" id=\"projects_search\"\n       placeholder=\"Search\"&gt;\n&lt;table&gt;\n  &lt;thead&gt;\n  &lt;tr&gt;\n    &lt;th&gt;Project&lt;/th&gt;\n    &lt;th&gt;Description&lt;/th&gt;\n    &lt;th&gt;&lt;a href=\"#/new\"&gt;&lt;i class=\"icon-plus-sign\"&gt;&lt;/i&gt;&lt;/a&gt;&lt;/th&gt;\n  &lt;/tr&gt;\n  &lt;/thead&gt;\n  &lt;tbody&gt;\n  &lt;tr ng-repeat=\"project in projectList.projects | filter:projectList.search | orderBy:'name'\"&gt;\n    &lt;td&gt;&lt;a ng-href=\"{{project.site}}\" target=\"_blank\"&gt;{{project.name}}&lt;/a&gt;&lt;/td&gt;\n    &lt;td&gt;{{project.description}}&lt;/td&gt;\n    &lt;td&gt;\n      &lt;a ng-href=\"#/edit/{{project.$id}}\"&gt;&lt;i class=\"icon-pencil\"&gt;&lt;/i&gt;&lt;/a&gt;\n    &lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;/tbody&gt;\n&lt;/table&gt;</code></pre><p>detail.html</p><pre><code class=\"language-htm\">&lt;form name=\"myForm\"&gt;\n  &lt;div class=\"control-group\" ng-class=\"{error: myForm.name.$invalid &amp;&amp; !myForm.name.$pristine}\"&gt;\n    &lt;label&gt;Name&lt;/label&gt;\n    &lt;input type=\"text\" name=\"name\" ng-model=\"editProject.project.name\" required&gt;\n    &lt;span ng-show=\"myForm.name.$error.required &amp;&amp; !myForm.name.$pristine\" class=\"help-inline\"&gt;\n        Required {{myForm.name.$pristine}}&lt;/span&gt;\n  &lt;/div&gt;\n\n  &lt;div class=\"control-group\" ng-class=\"{error: myForm.site.$invalid &amp;&amp; !myForm.site.$pristine}\"&gt;\n    &lt;label&gt;Website&lt;/label&gt;\n    &lt;input type=\"url\" name=\"site\" ng-model=\"editProject.project.site\" required&gt;\n    &lt;span ng-show=\"myForm.site.$error.required &amp;&amp; !myForm.site.$pristine\" class=\"help-inline\"&gt;\n        Required&lt;/span&gt;\n    &lt;span ng-show=\"myForm.site.$error.url\" class=\"help-inline\"&gt;\n        Not a URL&lt;/span&gt;\n  &lt;/div&gt;\n\n  &lt;label&gt;Description&lt;/label&gt;\n  &lt;textarea name=\"description\" ng-model=\"editProject.project.description\"&gt;&lt;/textarea&gt;\n\n  &lt;br&gt;\n  &lt;a href=\"#/\" class=\"btn\"&gt;Cancel&lt;/a&gt;\n  &lt;button ng-click=\"editProject.save()\" ng-disabled=\"myForm.$invalid\"\n          class=\"btn btn-primary\"&gt;Save&lt;/button&gt;\n  &lt;button ng-click=\"editProject.destroy()\"\n          ng-show=\"editProject.project.$id\" class=\"btn btn-danger\"&gt;Delete&lt;/button&gt;\n&lt;/form&gt;</code></pre><h3>创建组件</h3><h4>指令</h4><p>指令是一个独有而且强大的功能，只在Angular中可用。指令使你能够发明新的HTML句法、专针对于你的应用程序。</p><h4>可重用的组件</h4><p>我们使用指令以创建可重复使用的组件。组件允许你隐藏复杂的DOM结构、CSS以及行为。这使你能够专注于应用程序要做什么，或者单独的应用程序看起来如何。</p><h4>本地化</h4><p>严肃的应用程序的一个重要组成部分是本地化。AngularJS的本地探知筛选器以及阻塞指令使你能够建立屏蔽，使你的应用程序在所有的地方都可用。</p><p>index.html</p><pre><code class=\"language-htm\">&lt;!doctype html&gt;\n&lt;html ng-app=\"app\"&gt;\n  &lt;head&gt;\n    &lt;script src=\"https://atts.w3cschool.cn/attachments/image/wk/angularjs/angular.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"components.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"app.js\"&gt;&lt;/script&gt;\n    &lt;link rel=\"stylesheet\" href=\"bootstrap.css\"&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;tabs&gt;\n      &lt;pane title=\"Localization\"&gt;\n        Date: {{ '2012-04-01' | date:'fullDate' }} &lt;br&gt;\n        Currency: {{ 123456 | currency }} &lt;br&gt;\n        Number: {{ 98765.4321 | number }} &lt;br&gt;\n      &lt;/pane&gt;\n      &lt;pane title=\"Pluralization\"&gt;\n        &lt;div ng-controller=\"BeerCounter\"&gt;\n          &lt;div ng-repeat=\"beerCount in beers\"&gt;\n            &lt;ng-pluralize count=\"beerCount\" when=\"beerForms\"&gt;&lt;/ng-pluralize&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/pane&gt;\n    &lt;/tabs&gt;\n  &lt;/body&gt;\n&lt;/html&gt;</code></pre><p>components.js</p><pre><code class=\"language-javascript hljs\">angular.module(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'components'</span></span></span>, [])\n\n  .directive(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'tabs'</span></span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">(</span></span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span></span>{\n    <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">return</span></span></span> {\n      restrict: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'E'</span></span></span>,\n      transclude: <span class=\"hljs-literal\"><span class=\"hljs-literal\"><span class=\"hljs-literal\">true</span></span></span>,\n      scope: {},\n      controller: <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">(</span></span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">$scope, $element</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">) </span></span></span>{\n        <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">var</span></span></span> panes = $scope.panes = [];\n\n        $scope.select = <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">(</span></span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">pane</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">) </span></span></span>{\n          angular.forEach(panes, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">(</span></span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">pane</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">) </span></span></span>{\n            pane.selected = <span class=\"hljs-literal\"><span class=\"hljs-literal\"><span class=\"hljs-literal\">false</span></span></span>;\n          });\n          pane.selected = <span class=\"hljs-literal\"><span class=\"hljs-literal\"><span class=\"hljs-literal\">true</span></span></span>;\n        }\n\n        <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">this</span></span></span>.addPane = <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">(</span></span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">pane</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">) </span></span></span>{\n          <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">if</span></span></span> (panes.length == <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">0</span></span></span>) $scope.select(pane);\n          panes.push(pane);\n        }\n      },\n      template:\n        <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'&lt;div class=\"tabbable\"&gt;'</span></span></span> +\n          <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'&lt;ul class=\"nav nav-tabs\"&gt;'</span></span></span> +\n            <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'&lt;li ng-repeat=\"pane in panes\" ng-class=\"{active:pane.selected}\"&gt;'</span></span></span>+\n              <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'&lt;a href=\"\" ng-click=\"select(pane)\"&gt;{{pane.title}}&lt;/a&gt;'</span></span></span> +\n            <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'&lt;/li&gt;'</span></span></span> +\n          <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'&lt;/ul&gt;'</span></span></span> +\n          <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'&lt;div class=\"tab-content\" ng-transclude&gt;&lt;/div&gt;'</span></span></span> +\n        <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'&lt;/div&gt;'</span></span></span>,\n      replace: <span class=\"hljs-literal\"><span class=\"hljs-literal\"><span class=\"hljs-literal\">true</span></span></span>\n    };\n  })\n\n  .directive(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'pane'</span></span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">(</span></span><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span><span class=\"hljs-function\"><span class=\"hljs-params\"></span>) </span></span></span>{\n    <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">return</span></span></span> {\n      <span class=\"hljs-built_in\"><span class=\"hljs-built_in\"><span class=\"hljs-built_in\">require</span></span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'^tabs'</span></span></span>,\n      restrict: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'E'</span></span></span>,\n      transclude: <span class=\"hljs-literal\"><span class=\"hljs-literal\"><span class=\"hljs-literal\">true</span></span></span>,\n      scope: { title: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'@'</span></span></span> },\n      link: <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">(</span></span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">scope, element, attrs, tabsController</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">) </span></span></span>{\n        tabsController.addPane(scope);\n      },\n      template:\n        <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'&lt;div class=\"tab-pane\" ng-class=\"{active: selected}\" ng-transclude&gt;'</span></span></span> +\n        <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'&lt;/div&gt;'</span></span></span>,\n      replace: <span class=\"hljs-literal\"><span class=\"hljs-literal\"><span class=\"hljs-literal\">true</span></span></span>\n    };\n  })</code></pre><p>app.js</p><pre><code class=\"language-javascript hljs\">angular.module(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'app'</span></span></span>, [<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'components'</span></span></span>])\n\n.controller(<span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'BeerCounter'</span></span></span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">(</span></span><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\"><span class=\"hljs-function\"><span class=\"hljs-params\">$scope, $locale</span></span></span></span></span><span class=\"hljs-function\"><span class=\"hljs-function\">) </span></span></span>{\n  $scope.beers = [<span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">0</span></span></span>, <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">1</span></span></span>, <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">2</span></span></span>, <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">3</span></span></span>, <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">4</span></span></span>, <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">5</span></span></span>, <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">6</span></span></span>];\n  <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">if</span></span></span> ($locale.id == <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'en-us'</span></span></span>) {\n    $scope.beerForms = {\n      <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">0</span></span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'no beers'</span></span></span>,\n      one: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'{} beer'</span></span></span>,\n      other: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'{} beers'</span></span></span>\n    };\n  } <span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">else</span></span></span> {\n    $scope.beerForms = {\n      <span class=\"hljs-number\"><span class=\"hljs-number\"><span class=\"hljs-number\">0</span></span></span>: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'?iadne pivo'</span></span></span>,\n      one: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'{} pivo'</span></span></span>,\n      few: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'{} pivá'</span></span></span>,\n      other: <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'{} pív'</span></span></span>\n    };\n  }\n});</code></pre><p>bootstrap.css</p><pre><code class=\"language-css hljs\">// <span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\">Uncomment</span></span></span> <span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\">this</span></span></span> <span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\">in</span></span></span> <span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\">Plunker</span></span></span> <span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\">or</span></span></span> <span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\"><span class=\"hljs-selector-tag\">JSFiddle</span></span></span>: @<span class=\"hljs-keyword\"><span class=\"hljs-keyword\"><span class=\"hljs-keyword\">import</span></span></span> <span class=\"hljs-string\"><span class=\"hljs-string\"><span class=\"hljs-string\">'//netdna.bootstrapcdn.com/twitter-bootstrap/2.0.4/css/bootstrap-combined.min.css'</span></span></span>;</code></pre><h3>可测性内置</h3><h4>可注入</h4><p>在AngularJS依赖性注入允许你声明式地描述你的应用程序是如何连线的。这意味着你的应用程序不需要main()方法，该方法通常是一个难以维护的大堆杂。依赖性的注入也是AngularJS的一个核心。这意味着任何不适合你的需要的组件可以轻松替换掉。</p><h4>可测试</h4><p>AngularJS设计为从根基开始都是可测试的。它鼓励行为与视图分离、用预绑定来模拟、充分利用依赖性注入。它还配备了端到端的场景分流道，它通过理解AngularJS的内部运作机制消除了测试片层分享。</p></div></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 1,
      "parent_sort_index": 4,
      "chapter_level_one_id": "0e64fc8d8cc7e3ed9dc19d823d323344",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "AngularJS v1.5 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "6a518b480aba954d9d5be280c5bd2e5c",
      "chapter_level_two_parent_id": "0e64fc8d8cc7e3ed9dc19d823d323344",
      "chapter_level_two_name": "关于 AngularJS",
      "chapter_level_two_url": "/angularjs/at3y1ju0.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><div class=\"wkcontent\"><h2>AngularJS v1.5 简明教程中文版</h2><p>本文是 樊潇洁 翻译的最新版本（v1.5版）的<strong>AngularJS </strong>教程。官方英文版请见<a rel=\"nofollow\" href=\"https://docs.angularjs.org/tutorial\" target=\"_blank\">AngularJS 官方教程</a>和<a rel=\"nofollow\" href=\"https://angularjs.org\" target=\"_blank\">AngularJS 官方站</a>。</p><p>本人凭兴趣翻译有用的Web开发教程。如发现翻译得有误，请在新浪微博上发消息给我。</p><p>本人会在百度阅读和W3Cschool教程维基上陆续发布更多自己翻译的WEb开发教程。<a rel=\"nofollow\" href=\"http://yuedu.baidu.com/partner/browse/profile?id=9a6e290e52ea551810a68775\" target=\"_blank\">在百度阅读上收听我</a>。这就开始学习AngularJS吧！</p><p>2016年1月19日</p><p><img src=\"https://atts.w3cschool.cn/attachments/image/wk/angularjs/AngularJS-large.png\" alt=\"\"></p></div></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 1,
      "parent_sort_index": 3,
      "chapter_level_one_id": "a9d0ba21bf7ae9716498e49f51b5f9f6",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "AngularJS 参考手册",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "007c4487bdb3a73fdeba0f5b051a6854",
      "chapter_level_two_parent_id": "a9d0ba21bf7ae9716498e49f51b5f9f6",
      "chapter_level_two_name": "AngularJS 参考手册",
      "chapter_level_two_url": "/angularjs/angularjs-reference.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>AngularJS <span class=\"color_h1\">参考手册</span> </h2>\n<div><span class=\"color_h1\"><p>AngularJS 参考手册总结了本教程中所用到的一些 AngularJS 指令以及 AngularJS 过滤器。</p></span>\n</div>\n<hr>\n <h2>AngularJS 指令</h2> \n<p>本教程中使用的 AngularJS 指令：</p>\n<table class=\"reference\">\n    <tbody>\n        <tr>\n            <th style=\"width:20%\">指令</th>\n            <th>描述</th>\n            <th>讲解</th>\n        </tr>\n        <tr>\n            <td>ng_app</td>\n            <td>定义应用程序的根元素。</td>\n            <td><a href=\"angularjs-directives.html\">指令</a>\n            </td>\n        </tr>\n        <tr>\n            <td>ng_bind</td>\n            <td>绑定 HTML 元素到应用程序数据。</td>\n            <td><a href=\"angularjs-intro.html\">简介</a>\n            </td>\n        </tr>\n        <tr>\n            <td>ng_click</td>\n            <td>定义元素被单击时的行为。</td>\n            <td><a href=\"angularjs-html-events.html\">HTML 事件</a>\n            </td>\n        </tr>\n        <tr>\n            <td>ng_controller</td>\n            <td>为应用程序定义控制器对象。</td>\n            <td><a href=\"angularjs-controllers.html\">控制器</a>\n            </td>\n        </tr>\n        <tr>\n            <td>ng_disabled</td>\n            <td>绑定应用程序数据到 HTML 的 disabled 属性。</td>\n            <td><a href=\"angularjs-html-dom.html\">HTML DOM</a>\n            </td>\n        </tr>\n        <tr>\n            <td>ng_init</td>\n            <td>为应用程序定义初始值。</td>\n            <td><a href=\"angularjs-directives.html\">指令</a>\n            </td>\n        </tr>\n        <tr>\n            <td>ng_model</td>\n            <td>绑定应用程序数据到 HTML 元素。</td>\n            <td><a href=\"angularjs-directives.html\">指令</a>\n            </td>\n        </tr>\n        <tr>\n            <td>ng_repeat</td>\n            <td>为控制器中的每个数据定义一个模板。</td>\n            <td><a href=\"angularjs-directives.html\">指令</a>\n            </td>\n        </tr>\n        <tr>\n            <td>ng_show</td>\n            <td>显示或隐藏 HTML 元素。</td>\n            <td><a href=\"angularjs-html-dom.html\">HTML DOM</a>\n            </td>\n        </tr>\n    </tbody>\n</table>\n<br>\n<hr>\n <h2>AngularJS 过滤器</h2> \n<p>本教程中使用的 AngularJS 过滤器：</p>\n<table class=\"reference clicked\">\n    <tbody>\n        <tr>\n            <th style=\"width:20%\">过滤器</th>\n            <th>描述</th>\n        </tr>\n        <tr>\n            <td><a href=\"https://www.w3cschool.cn/angularjs/angularjs-filters.html#currency%20%E8%BF%87%E6%BB%A4%E5%99%A8\" target=\"_blank\">currency</a>\n            </td>\n            <td>格式化数字为货币格式。</td>\n        </tr>\n        <tr>\n            <td><a href=\"https://www.w3cschool.cn/angularjs/angularjs-filters.html#filter\" target=\"_blank\">filter</a></td>\n            <td>从数组项中选择一个子集。</td>\n        </tr>\n        <tr>\n            <td><a href=\"https://www.w3cschool.cn/angularjs/angularjs-filters.html#uppercase\" target=\"_blank\">lowercase</a></td>\n            <td>格式化字符串为小写。</td>\n        </tr>\n        <tr>\n            <td><a href=\"https://www.w3cschool.cn/angularjs/angularjs-filters.html?RECACHE=1#orderBy\" target=\"_blank\">orderBy</a></td>\n            <td>根据某个表达式排列数组。</td>\n        </tr>\n        <tr>\n            <td><a href=\"https://www.w3cschool.cn/angularjs/angularjs-filters.html#uppercase\" target=\"_blank\">uppercase</a></td>\n            <td>格式化字符串为大写。</td>\n        </tr>\n    </tbody>\n</table>\n<p>有关过滤器的具体知识在 <a href=\"angularjs-filters.html\">AngularJS 过滤器</a> 一章中进行讲解。</p>\n<p>\n    <br>\n</p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 1,
      "parent_sort_index": 2,
      "chapter_level_one_id": "158e3f03979a8757b7e1346d5e2cb6cd",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "AngularJS 实例",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "e3313f35b9480998d1270b1d3eabd50c",
      "chapter_level_two_parent_id": "158e3f03979a8757b7e1346d5e2cb6cd",
      "chapter_level_two_name": "AngularJS 实例",
      "chapter_level_two_url": "/angularjs/angularjs-examples.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>AngularJS <span class=\"color_h1\">实例</span> </h2><div><span class=\"color_h1\">本节为你提供了一些 </span>AngularJS 实例，包括基础的 AngularJS 的使用、AngularJS 表达式的使用、AngularJS 指令的使用等等。</div> <hr> <h2>尝试一下</h2> <p>您可以在线编辑实例，然后点击按钮查看结果。</p> <div class=\"example\"> <h2 class=\"example\">AngularJS 实例</h2> <div class=\"example_code notranslate htmlHigh\"> &lt;div ng-app=\"\"&gt;<br><br>&lt;p&gt;Name: &lt;input type=\"text\" ng-model=\"name\"&gt;&lt;/p&gt;<br> &lt;p&gt;You wrote: {{ name }}&lt;/p&gt; <br><br>&lt;/div&gt;<br> </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_intro\" target=\"_blank\">尝试一下 »</a> </div> <br><hr> <h2>AngularJS 基础</h2> <p> <a showtry=\"1\" href=\"/tryrun/showhtml/try_ng_intro_expression\" target=\"_blank\">我的第一个 AngularJS 表达式</a><br><a showtry=\"1\" href=\"/tryrun/showhtml/try_ng_intro_directives\" target=\"_blank\">我的第一个 AngularJS 指令</a><br><a showtry=\"1\" href=\"/tryrun/showhtml/try_ng_intro_directives_html\" target=\"_blank\">我的第一个 AngularJS 指令（带有有效的 HTML5）</a><br></p> <p><b><a href=\"angularjs-intro.html\">基础的 AngularJS 讲解</a></b></p> <hr> <h2>AngularJS 表达式</h2> <p> <a showtry=\"1\" href=\"/tryrun/showhtml/try_ng_expressions\" target=\"_blank\">带有数字的表达式</a><br><a showtry=\"1\" href=\"/tryrun/showhtml/try_ng_bind_numbers\" target=\"_blank\">使用带有数字的 ng-bind</a><br><a showtry=\"1\" href=\"/tryrun/showhtml/try_ng_expressions_strings\" target=\"_blank\">带有字符串的表达式</a><br><a showtry=\"1\" href=\"/tryrun/showhtml/try_ng_bind_strings\" target=\"_blank\">使用带有字符串的 ng-bind</a><br><a showtry=\"1\" href=\"/tryrun/showhtml/try_ng_expressions_objects\" target=\"_blank\">带有对象的表达式</a><br><a showtry=\"1\" href=\"/tryrun/showhtml/try_ng_bind_objects\" target=\"_blank\">使用带有对象的 ng-bind</a><br><a showtry=\"1\" href=\"/tryrun/showhtml/try_ng_expressions_arrays\" target=\"_blank\">带有数组的表达式</a><br><a showtry=\"1\" href=\"/tryrun/showhtml/try_ng_bind_arrays\" target=\"_blank\">使用带有数组的 ng-bind</a><br></p> <p><b><a href=\"angularjs-expressions.html\">表达式讲解</a></b></p> <hr> <h2>AngularJS 指令</h2> <p> <a showtry=\"1\" href=\"/tryrun/showhtml/try_ng_directives\" target=\"_blank\">AngularJS 指令</a><br><a showtry=\"1\" href=\"/tryrun/showhtml/try_ng_binding\" target=\"_blank\">ng-model 指令</a><br><a showtry=\"1\" href=\"/tryrun/showhtml/try_ng_repeat_array\" target=\"_blank\">ng-repeat 指令（带有数组）</a><br><a showtry=\"1\" href=\"/tryrun/showhtml/try_ng_repeat_object\" target=\"_blank\">ng-repeat 指令（带有对象）</a><br></p> <p><b><a href=\"angularjs-directives.html\">指令讲解</a></b></p> <hr> <h2>AngularJS 控制器</h2> <p> <a showtry=\"1\" href=\"/tryrun/showhtml/try_ng_controller\" target=\"_blank\">AngularJS 控制器</a><br><a showtry=\"1\" href=\"/tryrun/showhtml/try_ng_controller_property\" target=\"_blank\">控制器属性</a><br><a showtry=\"1\" href=\"/tryrun/showhtml/try_ng_controller_function\" target=\"_blank\">控制器函数</a><br><a showtry=\"1\" href=\"/tryrun/showhtml/try_ng_controller_js\" target=\"_blank\">JavaScript 文件中的控制器 I</a><br><a showtry=\"1\" href=\"/tryrun/showhtml/try_ng_controller_names\" target=\"_blank\">JavaScript 文件中的控制器 II</a><br></p> <p><b><a href=\"angularjs-controllers.html\">控制器讲解</a></b></p> <hr> <h2>AngularJS 过滤器</h2> <p> <a showtry=\"1\" href=\"/tryrun/showhtml/try_ng_filters_uppercase\" target=\"_blank\">表达式过滤器 uppercase</a><br><a showtry=\"1\" href=\"/tryrun/showhtml/try_ng_filters_lowercase\" target=\"_blank\">表达式过滤器 lowercase</a><br><a showtry=\"1\" href=\"/tryrun/showhtml/try_ng_filters_orderby\" target=\"_blank\">指令过滤器 orderBy</a><br><a showtry=\"1\" href=\"/tryrun/showhtml/try_ng_filters_input\" target=\"_blank\">输入过滤器</a><br></p> <p><b><a href=\"angularjs-filters.html\">过滤器讲解</a></b></p> <hr> <h2>AngularJS HTML DOM</h2> <p> <a showtry=\"1\" href=\"/tryrun/showhtml/try_ng_html_disabled\" target=\"_blank\">The ng-disabled Directive</a></p> <p><b><a href=\"angularjs-html-dom.html\">HTML DOM 讲解</a></b></p> <hr> <h2>AngularJS HTML 事件</h2> <p> <a showtry=\"1\" href=\"/tryrun/showhtml/try_ng_events_click\" target=\"_blank\">ng-click 指令</a><br><a showtry=\"1\" href=\"/tryrun/showhtml/try_ng_events\" target=\"_blank\">ng-show 指令</a> </p> <p><b><a href=\"angularjs-html-events.html\">HTML 事件讲解</a></b></p> <hr> <h2>AngularJS 模块</h2> <p> <a showtry=\"1\" href=\"/tryrun/showhtml/try_ng_module_body\" target=\"_blank\">body 中的 AngularJS 模块</a><br><a showtry=\"1\" href=\"/tryrun/showhtml/try_ng_module_files\" target=\"_blank\">文件中的 AngularJS 模块</a> </p> <p><b><a href=\"angularjs-modules.html\">模块讲解</a></b></p> <hr> <h2>AngularJS 应用程序</h2> <p> <a showtry=\"1\" href=\"/tryrun/showhtml/try_ng_todo_app\" target=\"_blank\">AngularJS 应用程序</a> </p> <p><b><a href=\"angularjs-application.html\">应用程序讲解</a></b></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 24,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "AngularJS 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "87deee8546cc560aa374fe7fb129885e",
      "chapter_level_two_parent_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_two_name": "AngularJS 应用程序",
      "chapter_level_two_url": "/angularjs/angularjs-application.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>AngularJS <span class=\"color_h1\">应用程序</span> </h2> <hr> <p class=\"intro\">现在是时候创建一个真正的 AngularJS 应用程序了。</p><p class=\"intro\">你可以通过本节的 AngularJS 应用程序来熟悉 AngularJS 的使用。</p> <hr> <h2>AngularJS 应用程序</h2> <p>您已经学习了足够多关于 AngularJS 的知识，现在可以开始创建您的第一个 AngularJS 应用程序：</p> <div style=\"width:400px;border:1px solid black;padding:10px;background-color:yellow\"> <h2>我的笔记</h2> <br><br><button>保存</button> <button>清除</button> <p> 剩下的字符数：<span></span> </p> </div> <br><hr> <h2>应用程序讲解</h2> <div class=\"example\"> <h2 class=\"example\">AngularJS 实例</h2> <div class=\"example_code notranslate htmlHigh\"> <div><span>&lt;</span><span>html</span> <span>ng-app=</span><span>\"myNoteApp\"</span><span>&gt;</span><br><span>&lt;</span><span>head</span><span>&gt;</span><br><span>&lt;</span><span>meta</span> <span>charset</span>=<span>\"utf-8\"</span><span>&gt;</span><br><span>&lt;</span><span>script</span> <span>src=</span><span>\"http://apps.bdimg.com/libs/angular.js/1.4.6/angular.min.js\"</span><span>&gt;</span><span>&lt;</span><span>/script</span><span>&gt;</span><br><span>&lt;</span><span>/head</span><span>&gt;</span><br><span>&lt;</span><span>body</span><span>&gt;</span><br><br><span>&lt;</span><span>div</span> <span>ng-controller=</span><span>\"myNoteCtrl\"</span><span>&gt;</span><br><br><span>&lt;</span><span>h2</span><span>&gt;</span>我的笔记<span>&lt;</span><span>/h2</span><span>&gt;</span><br><br><span>&lt;</span><span>p</span><span>&gt;</span><span>&lt;</span><span>textarea</span> <span>ng-model=</span><span>\"message\"</span> <span>cols=</span><span>\"40\"</span> <span>rows=</span><span>\"10\"</span><span>&gt;</span><span>&lt;</span><span>/textarea</span><span>&gt;</span><span>&lt;</span><span>/p</span><span>&gt;</span><br><br><span>&lt;</span><span>p</span><span>&gt;</span><br><span>&lt;</span><span>button</span> <span>ng-click=</span><span>\"save()\"</span><span>&gt;</span>保存<span>&lt;</span><span>/button</span><span>&gt;</span><br><span>&lt;</span><span>button</span> <span>ng-click=</span><span>\"clear()\"</span><span>&gt;</span>清除<span>&lt;</span><span>/button</span><span>&gt;</span><br><span>&lt;</span><span>/p</span><span>&gt;</span><br><br><span>&lt;</span><span>p</span><span>&gt;</span>Number of characters left: <span>&lt;</span><span>span</span> <span>ng-bind=</span><span>\"left()\"</span><span>&gt;</span><span>&lt;</span><span>/span</span><span>&gt;</span><span>&lt;</span><span>/p</span><span>&gt;</span><br><br><span>&lt;</span><span>/div</span><span>&gt;</span><br><br><span>&lt;</span><span>script</span> <span>src=</span><span>\"myNoteApp.js\"</span><span>&gt;</span><span>&lt;</span><span>/script</span><span>&gt;</span><br><span>&lt;</span><span>script</span> <span>src=</span><span>\"myNoteCtrl.js\"</span><span>&gt;</span><span>&lt;</span><span>/script</span><span>&gt;</span><br><br><span>&lt;</span><span>/body</span><span>&gt;</span><br><span>&lt;</span><span>/html</span><span>&gt;</span></div></div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_note_app\" target=\"_blank\">尝试一下 »</a> </div> <p>应用程序文件 \"myTodoApp.js\"：</p> <div class=\"example\"> <div class=\"example_code notranslate htmlHigh\"> var app = angular.module(\"myTodoApp\", []); </div> </div> <p>控制器文件 \"myTodoCtrl.js\"：</p> <div class=\"example\"> <div class=\"example_code notranslate htmlHigh\"> app.controller(\"myTodoCtrl\", function($scope) {<br>     $scope.message = \"\";<br>    $scope.left  = function() {return 100 - $scope.message.length;};<br>    $scope.clear = function() {$scope.message=\"\";};<br>     $scope.save  = function() {$scope.message=\"\";};<br> }); </div> </div> <p>HTML 页面中的一个 &lt;div&gt;，指向 ng-app=\"<strong>myTodoApp</strong>\" 和 ng-controller=\"<strong>myTodoCtrl</strong>\"：</p> <div class=\"example\"> <div class=\"example_code notranslate htmlHigh\"> &lt;div ng-app=\"myTodoApp\" ng-controller=\"myTodoCtrl\"&gt; </div> </div> <p>一个 <strong>ng-model</strong> 指令，绑定一个 &lt;textarea&gt; 到控制器变量 <strong> message</strong>：</p> <div class=\"example\"> <div class=\"example_code notranslate htmlHigh\"> &lt;textarea ng-model=\"message\" cols=\"40\" rows=\"10\"&gt;&lt;/textarea&gt;</div> </div> <p>两个 <strong>ng-click</strong> 事件，调用控制器函数 <strong>clear()</strong> 和 <strong>save()</strong>：</p> <div class=\"example\"> <div class=\"example_code notranslate htmlHigh\"> &lt;button ng-click=\"save()\"&gt;保存&lt;/button&gt;<br> &lt;button ng-click=\"clear()\"&gt;清除&lt;/button&gt; </div> </div> <p>一个 <strong>ng-bind</strong> 指令，绑定控制器函数 <strong>left()</strong> 到一个 &lt;span&gt;，字符会向左对齐显示：</p> <div class=\"example\"> <div class=\"example_code notranslate htmlHigh\"> 剩下的字符数：&lt;span ng-bind=\"left()\"&gt;&lt;/span&gt; </div> </div> <p>两个应用程序库被添加到 HTML 页面：</p> <div class=\"example\"> <div class=\"example_code notranslate htmlHigh\"> &lt;script src=\"myTodoApp.js\"&gt;&lt;/script&gt;<br> &lt;script src=\"myTodoCtrl.js\"&gt;&lt;/script&gt; </div> </div><p> 以上就是相关的 AngularJS 应用程序解析了。</p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 23,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "AngularJS 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "17a8752d852429b5a151e2c4bffc11b9",
      "chapter_level_two_parent_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_two_name": "AngularJS 路由",
      "chapter_level_two_url": "/angularjs/angularjs-routing.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><div class=\"article-body\"><div class=\"article-intro\" id=\"content\"><h2>AngularJS 路由</h2><p>本章节我们将为大家介绍 AngularJS 路由。</p><p>AngularJS 路由允许我们通过不同的 URL 访问不同的内容。</p><p>通过 AngularJS 可以实现多视图的单页Web应用（single page web application，SPA）。</p><p>通常我们的URL形式为 <strong>http://w3cschool.cn/first/page</strong>，但在单页Web应用中 AngularJS 通过 <strong># + 标记</strong> 实现，例如：</p><pre>http://w3cschool.cn/#/first\nhttp://w3cschool.cn/#/second\nhttp://w3cschool.cn/#/third\n</pre><p>当我们点击以上的任意一个链接时，向服务端请的地址都是一样的 (http://w3cschool.cn/)。 因为 # 号之后的内容在向服务端请求时会被浏览器忽略掉。 所以我们就需要在客户端实现 # 号后面内容的功能实现。 AngularJS 路由 就通过 <strong># + 标记</strong>  帮助我们区分不同的逻辑页面并将不同的页面绑定到对应的控制器上。</p><p><img src=\"https://atts.w3cschool.cn/attachments/image/20161010/1476087696337969.png\" alt=\"\"><br></p><p>在以上图形中，我们可以看到创建了两个 URL： /ShowOrders 和 /AddNewOrder。每个 URL 都有对应的视图和控制器。</p><p>接下来我们来看一个简单的实例：</p><pre>&lt;html&gt;\n    &lt;head&gt;\n    \t&lt;meta charset=\"utf-8\"&gt;\n        &lt;title&gt;AngularJS 路由实例 - W3Cschool教程&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body ng-app='routingDemoApp'&gt;\n     \n        &lt;h2&gt;AngularJS 路由应用&lt;/h2&gt;\n        &lt;ul&gt;\n            &lt;li&gt;&lt;a href=\"#/\"&gt;首页&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"#/computers\"&gt;电脑&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"#/printers\"&gt;打印机&lt;/a&gt;&lt;/li&gt;\n            &lt;li&gt;&lt;a href=\"#/blabla\"&gt;其他&lt;/a&gt;&lt;/li&gt;\n        &lt;/ul&gt;\n         \n        &lt;div ng-view&gt;&lt;/div&gt;\n        &lt;script src=\"http://apps.bdimg.com/libs/angular.js/1.4.6/angular.min.js\" rel=\"external nofollow\"  rel=\"external nofollow\" &gt;&lt;/script&gt;\n        &lt;script src=\"http://apps.bdimg.com/libs/angular-route/1.3.13/angular-route.js\" rel=\"external nofollow\"  rel=\"external nofollow\" &gt;&lt;/script&gt;\n        &lt;script&gt;\n            angular.module('routingDemoApp',['ngRoute'])\n            .config(['$routeProvider', function($routeProvider){\n                $routeProvider\n                .when('/',{template:'这是首页页面'})\n                .when('/computers',{template:'这是电脑分类页面'})\n                .when('/printers',{template:'这是打印机页面'})\n                .otherwise({redirectTo:'/'});\n            }]);\n        &lt;/script&gt;     \n    &lt;/body&gt;\n&lt;/html&gt;\n</pre><p> <a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_routing1&amp;basepath=0\" target=\"_blank\">尝试一下 »</a> </p><p>实例解析：</p><ul><li><p>1、载入了实现路由的 js 文件：angular-route.js。</p></li><li><p>2、包含了 ngRoute 模块作为主应用模块的依赖模块。</p><pre>angular.module('routingDemoApp',['ngRoute'])\n</pre></li><li><p>3、使用 ngView 指令。</p><pre>&lt;div ng-view&gt;&lt;/div&gt;</pre><p>该 div 内的 HTML 内容会根据路由的变化而变化。</p></li><li><p>配置 $routeProvider，AngularJS $routeProvider 用来定义路由规则。</p><pre>module.config(['$routeProvider', function($routeProvider){\n    $routeProvider\n        .when('/',{template:'这是首页页面'})\n        .when('/computers',{template:'这是电脑分类页面'})\n        .when('/printers',{template:'这是打印机页面'})\n        .otherwise({redirectTo:'/'});\n}]);\n</pre><p>AngularJS 模块的 config 函数用于配置路由规则。通过使用 configAPI，我们请求把$routeProvider注入到我们的配置函数并且使用$routeProvider.whenAPI来定义我们的路由规则。</p><p>$routeProvider 为我们提供了 when(path,object) &amp; otherwise(object) 函数按顺序定义所有路由，函数包含两个参数:</p><ul><li>第一个参数是 URL 或者 URL 正则规则。</li><li>第二个参数是路由配置对象。</li></ul></li><hr><h2>路由设置对象</h2><p>AngularJS 路由也可以通过不同的模板来实现。</p>$routeProvider.when 函数的第一个参数是  URL 或者 URL 正则规则，第二个参数为路由配置对象。<p></p><p>路由配置对象语法规则如下：</p></ul><pre>$routeProvider.when(url, {\n    template: string,\n    templateUrl: string,\n    controller: string, function 或 array,\n    controllerAs: string,\n    redirectTo: string, function,\n    resolve: object&lt;key, function&gt;\n});\n</pre><p>参数说明：</p><ul><li><p><strong>template:</strong></p><p>如果我们只需要在 ng-view  中插入简单的 HTML 内容，则使用该参数：</p><pre>.when('/computers',{template:'这是电脑分类页面'})</pre></li><li><p><strong>templateUrl:</strong></p><p>如果我们只需要在 ng-view  中插入 HTML 模板文件，则使用该参数：</p><pre>$routeProvider.when('/computers', {\n    templateUrl: 'views/computers.html',\n});\n</pre><p>以上代码会从服务端获取 views/computers.html 文件内容插入到 ng-view 中。</p></li><li><p><strong>controller:</strong></p><p>function、string或数组类型，在当前模板上执行的controller函数，生成新的scope。</p></li><li><p><strong>controllerAs:</strong></p><p>string类型，为controller指定别名。</p></li><li><p><strong>redirectTo:</strong></p><p>重定向的地址。</p></li><li><p><strong>resolve:</strong></p><p>指定当前controller所依赖的其他模块。</p></li><li><h3>实例</h3><pre>&lt;html&gt;\n&lt;head&gt;\n&lt;meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\"&gt;\n&lt;script src=\"http://apps.bdimg.com/libs/angular.js/1.4.6/angular.min.js\" rel=\"external nofollow\"  rel=\"external nofollow\" &gt;&lt;/script&gt;\n&lt;script src=\"http://apps.bdimg.com/libs/angular-route/1.3.13/angular-route.js\" rel=\"external nofollow\"  rel=\"external nofollow\" &gt;&lt;/script&gt;\n\n&lt;script type=\"text/javascript\"&gt;\nangular.module('ngRouteExample', ['ngRoute'])\n.controller('HomeController', function ($scope) { $scope.$route = $route;})\n.controller('AboutController', function ($scope) { $scope.$route = $route;})\n.config(function ($routeProvider) {\n    $routeProvider.\n    when('/home', {\n        templateUrl: 'embedded.home.html',\n        controller: 'HomeController'\n    }).\n    when('/about', {\n        templateUrl: 'embedded.about.html',\n        controller: 'AboutController'\n    }).\n    otherwise({\n        redirectTo: '/home'\n    });\n});\n&lt;/script&gt;\n\n  \n&lt;/head&gt;\n\n&lt;body ng-app=\"ngRouteExample\" class=\"ng-scope\"&gt;\n  &lt;script type=\"text/ng-template\" id=\"embedded.home.html\"&gt;\n      &lt;h1&gt; Home &lt;/h1&gt;\n  &lt;/script&gt;\n\n  &lt;script type=\"text/ng-template\" id=\"embedded.about.html\"&gt;\n      &lt;h1&gt; About &lt;/h1&gt;\n  &lt;/script&gt;\n\n  &lt;div&gt; \n    &lt;div id=\"navigation\"&gt;  \n      &lt;a href=\"#/home\"&gt;Home&lt;/a&gt;\n      &lt;a href=\"#/about\"&gt;About&lt;/a&gt;\n    &lt;/div&gt;\n      \n    &lt;div ng-view=\"\"&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</pre><p> <a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_routing2&amp;basepath=0\" target=\"_blank\">尝试一下 »</a> </p></li></ul></div></div></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 22,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "AngularJS 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "2598bd8bb5fe885774a76726ba90dca5",
      "chapter_level_two_parent_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_two_name": "AngularJS 依赖注入",
      "chapter_level_two_url": "/angularjs/angularjs-dependency-injection.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><div class=\"article-body\">\n\t\t\n\t\t\t<div class=\"article-intro\" id=\"content\">\n\t\t\t\n\t\t\t<h2>AngularJS 依赖注入</h2><p>依赖注入是 AngularJS 的重要特性之一，它简化了 Angular 解析模块/组件之间依赖的过程。<br></p>\n<hr>\n<h2>什么是依赖注入</h2>\n<p>wiki 上的解释是：依赖注入（Dependency Injection，简称DI）是一种软件设计模式，在这种模式下，一个或更多的依赖（或服务）被注入（或者通过引用传递）到一个独立的对象（或客户端）中，然后成为了该客户端状态的一部分。\n</p><p>该模式分离了客户端依赖本身行为的创建，这使得程序设计变得松耦合，并遵循了依赖反转和单一职责原则。与服务定位器模式形成直接对比的是，它允许客户端了解客户端如何使用该系统找到依赖\n</p>\n<blockquote>\n<p>一句话 --- 没事你不要来找我，有事我会去找你。</p>\n</blockquote>\n<p>AngularJS 提供很好的依赖注入机制。以下5个核心组件用来作为依赖注入：</p>\n<ul class=\"list\">\n<li>value</li>\n<li>factory</li>\n<li>service</li>\n<li>provider</li>\n<li>constant</li>\n</ul>\n<hr>\n<h2>value\n</h2>\n<p>\nValue 是一个简单的 javascript 对象，用于向控制器传递值（配置阶段）：\n</p>\n<pre>// 定义一个模块\nvar mainApp = angular.module(\"mainApp\", []);\n\n// 创建 value 对象 \"defaultInput\" 并传递数据\nmainApp.value(\"defaultInput\", 5);\n...\n\n// 将 \"defaultInput\" 注入到控制器\nmainApp.controller('CalcController', function($scope, CalcService, defaultInput) {\n   $scope.number = defaultInput;\n   $scope.result = CalcService.square($scope.number);\n   \n   $scope.square = function() {\n      $scope.result = CalcService.square($scope.number);\n   }\n});\n</pre>\n<hr>\n<h2>factory</h2>\n<p>factory 是一个函数用于返回值。在 service 和 controller 需要时创建。</p>\n<p>通常我们使用 factory 函数来计算或返回值。</p>\n<pre>// 定义一个模块\nvar mainApp = angular.module(\"mainApp\", []);\n\n// 创建 factory \"MathService\" 用于两数的乘积 provides a method multiply to return multiplication of two numbers\nmainApp.factory('MathService', function() {\n   var factory = {};\n   \n   factory.multiply = function(a, b) {\n      return a * b\n   }\n   return factory;\n}); \n\n// 在 service 中注入 factory \"MathService\"\nmainApp.service('CalcService', function(MathService){\n   this.square = function(a) {\n      return MathService.multiply(a,a);\n   }\n});\n...\n</pre>\n<hr>\n<h2>provider</h2>\n<p>\nAngularJS 中通过 provider 创建一个 service、factory等(配置阶段)。</p>\n<p>Provider 中提供了一个 factory 方法 get()，它用于返回 value/service/factory。</p>\n<pre>// 定义一个模块\nvar mainApp = angular.module(\"mainApp\", []);\n...\n\n// 使用 provider 创建 service 定义一个方法用于计算两数乘积\nmainApp.config(function($provide) {\n   $provide.provider('MathService', function() {\n      this.$get = function() {\n         var factory = {};  \n         \n         factory.multiply = function(a, b) {\n            return a * b; \n         }\n         return factory;\n      };\n   });\n});\n</pre>\n<hr>\n<h2>constant</h2>\n<p>constant(常量)用来在配置阶段传递数值，注意这个常量在配置阶段是不可用的。</p>\n<pre>mainApp.constant(\"configParam\", \"constant value\");\n</pre>\n\n<hr>\n<h2>实例</h2>\n<p>以下实例提供了以上几个依赖注入机制的演示。</p>\n<pre>&lt;html&gt;\n   \n   &lt;head&gt;\n      &lt;meta charset=\"utf-8\"&gt;\n      &lt;title&gt;AngularJS  依赖注入&lt;/title&gt;\n   &lt;/head&gt;\n   \n   &lt;body&gt;\n      &lt;h2&gt;AngularJS 简单应用&lt;/h2&gt;\n      \n      &lt;div ng-app = \"mainApp\" ng-controller = \"CalcController\"&gt;\n         &lt;p&gt;输入一个数字: &lt;input type = \"number\" ng-model = \"number\" /&gt;&lt;/p&gt;\n         &lt;button ng-click = \"square()\"&gt;X&lt;sup&gt;2&lt;/sup&gt;&lt;/button&gt;\n         &lt;p&gt;结果: {{result}}&lt;/p&gt;\n      &lt;/div&gt;\n      \n      &lt;script src=\"http://apps.bdimg.com/libs/angular.js/1.4.6/angular.min.js\" rel=\"external nofollow\" &gt;&lt;/script&gt;\n      \n      &lt;script&gt;\n         var mainApp = angular.module(\"mainApp\", []);\n         \n         mainApp.config(function($provide) {\n            $provide.provider('MathService', function() {\n               this.$get = function() {\n                  var factory = {};\n                  \n                  factory.multiply = function(a, b) {\n                     return a * b;\n                  }\n                  return factory;\n               };\n            });\n         });\n\t\t\t\n         mainApp.value(\"defaultInput\", 5);\n         \n         mainApp.factory('MathService', function() {\n            var factory = {};\n            \n            factory.multiply = function(a, b) {\n               return a * b;\n            }\n            return factory;\n         });\n         \n         mainApp.service('CalcService', function(MathService){\n            this.square = function(a) {\n               return MathService.multiply(a,a);\n            }\n         });\n         \n         mainApp.controller('CalcController', function($scope, CalcService, defaultInput) {\n            $scope.number = defaultInput;\n            $scope.result = CalcService.square($scope.number);\n\n            $scope.square = function() {\n               $scope.result = CalcService.square($scope.number);\n            }\n         });\n\t\t\t\n      &lt;/script&gt;\n      \n   &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>\n\t<a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_dependency_injection\" target=\"_blank\">尝试一下 »</a></p></div></div></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 21,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "AngularJS 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "157c9be2acd077850bb447ea731b7c06",
      "chapter_level_two_parent_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_two_name": "AngularJS 动画",
      "chapter_level_two_url": "/angularjs/angularjs-animations.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><div class=\"article-body\"><div class=\"article-intro\" id=\"content\"><h2>AngularJS 动画</h2><p class=\"intro\">AngularJS 提供了动画效果，可以配合 CSS 使用。</p><p>AngularJS 使用动画需要引入 angular-animate.min.js 库。</p><pre>&lt;script src=\"http://apps.bdimg.com/libs/angular.js/1.4.6/angular-animate.min.js\" rel=\"external nofollow\" &gt;&lt;/script&gt;\n</pre><p>还需在应用中使用模型 ngAnimate：</p><pre>&lt;body ng-app=\"ngAnimate\"&gt;\n</pre><hr><h2>什么是动画？</h2><p>动画是通过改变 <a href=\"https://www.w3cschool.cn/html/html-elements.html\" target=\"_blank\">HTML 元素</a>产生的动态变化效果。</p><div class=\"example\"><h3>实例</h3><p>勾选复选框隐藏 DIV:</p><div class=\"example_code\"><span class=\"highLT\">&lt;</span><span class=\"highELE\">body</span> <span class=\"highATT\">ng-app=</span><span class=\"highVAL\">\"ngAnimate\"</span><span class=\"highGT\">&gt;</span><br><br>隐藏 DIV: <span class=\"highLT\">&lt;</span><span class=\"highELE\">input</span> <span class=\"highATT\">type=</span><span class=\"highVAL\">\"checkbox\"</span> <span class=\"highATT\">ng-model=</span><span class=\"highVAL\">\"myCheck\"</span><span class=\"highGT\">&gt;</span><br><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">div</span> <span class=\"highATT\">ng-hide=</span><span class=\"highVAL\">\"myCheck\"</span><span class=\"highGT\">&gt;</span><span class=\"highLT\">&lt;</span><span class=\"highELE\">/div</span><span class=\"highGT\">&gt;</span><br><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">/body</span><span class=\"highGT\">&gt;</span><br></div><br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_animation\" target=\"_blank\">尝试一下 »</a></div><table class=\"lamp  \"><tbody><tr><th style=\"width:34px\"><img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" alt=\"Note\" style=\"height:32px;width:32px\"></th><td>应用中动画不宜太多，但合适的使用动画可以增加页面的丰富性，也可以更易让用户理解。</td></tr></tbody></table><p>如果我们应用已经设置了应用名，可以把 ngAnimate 直接添加在模型中：</p><div class=\"example\"><h3>实例</h3><div class=\"example_code\"><div class=\"htmlHigh\"><span class=\"highLT\">&lt;</span><span class=\"highELE\">body</span> <span class=\"highATT\">ng-app=</span><span class=\"highVAL\">\"myApp\"</span><span class=\"highGT\">&gt;</span><br><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">h1</span><span class=\"highGT\">&gt;</span>隐藏 DIV: <span class=\"highLT\">&lt;</span><span class=\"highELE\">input</span> <span class=\"highATT\">type=</span><span class=\"highVAL\">\"checkbox\"</span> <span class=\"highATT\">ng-model=</span><span class=\"highVAL\">\"myCheck\"</span><span class=\"highGT\">&gt;</span><span class=\"highLT\">&lt;</span><span class=\"highELE\">/h1</span><span class=\"highGT\">&gt;</span><br><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">div</span> <span class=\"highATT\">ng-hide=</span><span class=\"highVAL\">\"myCheck\"</span><span class=\"highGT\">&gt;</span><span class=\"highLT\">&lt;</span><span class=\"highELE\">/div</span><span class=\"highGT\">&gt;</span><br><br><span class=\"highLT\">&lt;</span><span class=\"highELE\">script</span><span class=\"highGT\">&gt;</span><br></div><div class=\"jsHigh\"><span class=\"highELE\">var</span> app = angular.module(<span class=\"highVAL\">'myApp'</span>, [<span class=\"highVAL\">'ngAnimate'</span>]);<br></div><div class=\"htmlHigh\"><span class=\"highLT\">&lt;</span><span class=\"highELE\">/script</span><span class=\"highGT\">&gt;</span></div></div>\t<br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_animation2\" target=\"_blank\">尝试一下 »</a></div><hr><h2>ngAnimate 做了什么?</h2><p>ngAnimate 模型可以添加或移除 class 。</p><p>ngAnimate 模型并不能使 HTML 元素产生动画，但是 ngAnimate 会监测事件，类似隐藏显示 HTML 元素 ，如果事件发生 ngAnimate 就会使用预定义的 class 来设置 HTML 元素的动画。</p><p>AngularJS 添加/移除 class 的指令:</p><ul><li><code>ng-show</code></li><li><code>ng-hide</code></li><li><code>ng-class</code></li><li><code>ng-view</code></li><li><code>ng-include</code></li><li><code>ng-repeat</code></li><li><code>ng-if</code></li><li><code>ng-switch</code></li></ul><p><code>ng-show</code> 和 <code>ng-hide</code> 指令用于添加或移除 <code>ng-hide</code> class 的值。</p><p>其他指令会在进入 DOM 会添加 <code>ng-enter</code> 类，移除 DOM 会添加 <code>ng-leave</code> 属性。</p><p>当 HTML 元素位置改变时，<code>ng-repeat</code> 指令同样可以添加 <code>ng-move</code> 类 。 </p><p>此外， 在动画完成后，HTML 元素的类集合将被移除。例如：<code>ng-hide</code> 指令会添加一下类：</p><ul><li><code>ng-animate</code></li><li><code>ng-hide-animate</code></li><li><code>ng-hide-add</code> (如果元素将被隐藏)</li><li><code>ng-hide-remove</code> (如果元素将显示)</li><li><code>ng-hide-add-active</code> (如果元素将隐藏)</li><li><code>ng-hide-remove-active</code> (如果元素将显示)</li></ul><hr><h2>使用 CSS 动画</h2><p>我们可以使用 CSS transition(过渡) 或 CSS 动画让 HTML 元素产生动画效果，该部分内容你可以参阅我们的<a href=\"/css3/css3-transitions.html\" target=\"_blank\">CSS 过渡教程</a>，<a href=\"/css3/css3-animations.html\" target=\"_blank\">CSS 动画教程</a>。</p><hr><h2>CSS 过渡</h2><p>CSS 过渡可以让我们平滑的将一个 CSS 属性值修改为另外一个：</p><div class=\"example\"><h3>实例</h3><p>在 DIV 元素设置了 <code>.ng-hide</code> 类时，过渡需要花费 0.5 秒，高度从 100px 变为 0:</p><div class=\"example_code\"><span class=\"highLT\">&lt;</span><span class=\"highELE\">style</span><span class=\"highGT\">&gt;</span><br>div {<br>    transition: all linear 0.5s;<br>    background-color: lightblue;<br>    height: 100px;<br>}<br>.ng-hide {<br>    height: 0;<br>}<br><span class=\"highLT\">&lt;</span><span class=\"highELE\">/style</span><span class=\"highGT\">&gt;</span><br></div><br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_animation_css\" target=\"_blank\">尝试一下 »</a></div><hr><h2>CSS 动画</h2><p>CSS 动画允许你平滑的修改 CSS 属性值:</p><div class=\"example\"><h3>实例</h3><p>在 DIV 元素设置了 <code>.ng-hide</code> 类时,  <code>myChange</code> 动画将执行，它会平滑的将高度从 100px 变为 0:</p><div class=\"example_code\"><span class=\"highLT\">&lt;</span><span class=\"highELE\">style</span><span class=\"highGT\">&gt;</span><br>@keyframes myChange {<br>    from {<br>        height: 100px;<br>    } to {<br>        height: 0;<br>    }<br>}<br>div {<br>    height: 100px;<br>    background-color: lightblue;<br>}<br>div.ng-hide {<br>    animation: 0.5s myChange;<br>}<br><span class=\"highLT\">&lt;</span><span class=\"highELE\">/style</span><span class=\"highGT\">&gt;</span><br></div><br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_animation_css2\" target=\"_blank\">尝试一下 »</a></div></div></div><h2>相关教程</h2><p><a href=\"https://www.w3cschool.cn/css/css-intro.html\" target=\"_blank\">CSS教程</a></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 20,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "AngularJS 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "af366e9be82a877b79e9bd0b6ed55bd9",
      "chapter_level_two_parent_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_two_name": "AngularJS Include(包含)",
      "chapter_level_two_url": "/angularjs/angularjs-include.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>AngularJS <span class=\"color_h1\">Include（包含）</span> </h2><div><span class=\"color_h1\">本节介绍了 </span>AngularJS Include(包含) 的知识，你将学习如何使用 ng-include 指令。</div> <hr> <p class=\"intro\">使用 AngularJS, 你可以在 HTML 中包含 HTML 文件。</p> <hr> <h2>在未来的HTML中包含 HTML 文件</h2> <p>在 HTML 中，目前还不支持包含 HTML 文件的功能。</p> <p>W3C 已经建议 <a target=\"_blank\" href=\"//www.w3.org/TR/html-imports\" rel=\"external nofollow\"> http://www.w3.org</a> 在未来的 HTML 中支持包含HTML的功能，格式如下:</p> <div class=\"example\"> <div class=\"example_code\" style=\"color: #404040\"> &lt;link rel=\"import\" href=\"/path/navigation.html\"&gt;</div> </div> <br><hr> <h2>服务端包含</h2> <p>大部分web服务器支持服务端脚本的包含 (<strong>SSI：Server Side Includes</strong>)。</p> <p>使用 SSI, 你可以在HTML页面发送至浏览器前包含 HTML。</p> <div class=\"example\"> <h2 class=\"example\">PHP 实例</h2> <div class=\"example_code\"> &lt;?php require(\"navigation.php\"); ?&gt; </div> </div> <br><hr> <h2>客户端包含</h2> <p>客户端在 HTML 中使用 JavaScript 有多种方式可以包含 HTML 文件。</p> <p>通常我们使用 http 请求 (<strong>AJAX</strong>) 从服务端获取数据，返回的数据我们可以通过 使用 <strong>innerHTML</strong> 写入到 HTML 元素中。 </p> <hr> <h2>AngularJS 包含</h2> <p>使用 AngularJS, 你可以使用 <strong>ng-include</strong> 指令来包含 HTML 内容:</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code\"> &lt;body&gt;<br><br>&lt;div class=\"container\"&gt;<br>  &lt;div ng-include=\"'myUsers_List.htm'\"&gt;&lt;/div&gt;<br>  &lt;div ng-include=\"'myUsers_Form.htm'\"&gt;&lt;/div&gt;<br>&lt;/div&gt;<br><br> &lt;/body&gt;</div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_includes\" target=\"_blank\">尝试一下 »</a> </div> <p>步骤如下。<br></p> <hr> <h2>步骤 1: 创建 HTML 列表 </h2> <div class=\"example\"> <h2 class=\"example\">myUsers_List.html</h2> <div class=\"example_code notranslate htmlHigh\"> &lt;table class=\"table table-striped\"&gt;<br>  &lt;thead&gt;&lt;tr&gt;<br>    &lt;th&gt;Edit&lt;/th&gt;<br>    &lt;th&gt;First Name&lt;/th&gt;<br>    &lt;th&gt;Last Name&lt;/th&gt;<br>  &lt;/tr&gt;&lt;/thead&gt;<br>  &lt;tbody&gt;&lt;tr ng-repeat=\"user in users\"&gt;<br>    &lt;td&gt;<br>      &lt;button class=\"btn\" ng-click=\"editUser(user.id)\"&gt;<br>        &lt;span class=\"glyphicon glyphicon-pencil\"&gt;&lt;/span&gt; &amp;nbsp;Edit<br>       &lt;/button&gt;<br>    &lt;/td&gt;<br>    &lt;td&gt;{{ user.fName }}&lt;/td&gt;<br>    &lt;td&gt;{{ user.lName }}&lt;/td&gt;<br>  &lt;/tr&gt;&lt;/tbody&gt;<br>&lt;/table&gt; </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/myUsers_List\" target=\"_blank\">尝试一下 »</a> </div> <br><hr> <h2>步骤 2: 创建 HTML 表单</h2> <div class=\"example\"> <h2 class=\"example\">myUsers_List.html</h2> <div class=\"example_code\"> &lt;button class=\"btn btn-success\" ng-click=\"editUser('new')\"&gt;<br>   &lt;span class=\"glyphicon glyphicon-user\"&gt;&lt;/span&gt; Create New User<br> &lt;/button&gt;<br>&lt;hr&gt;<br><br>&lt;h3 ng-show=\"edit\"&gt;Create New User:&lt;/h3&gt;<br>&lt;h3 ng-hide=\"edit\"&gt;Edit User:&lt;/h3&gt;<br><br>&lt;form class=\"form-horizontal\"&gt;<br>&lt;div class=\"form-group\"&gt;<br>  &lt;label class=\"col-sm-2 control-label\"&gt;First Name:&lt;/label&gt;<br>  &lt;div class=\"col-sm-10\"&gt;<br>    &lt;input type=\"text\" ng-model=\"fName\" ng-disabled=\"!edit\" placeholder=\"First Name\"&gt;<br>   &lt;/div&gt;<br>&lt;/div&gt; <br>&lt;div class=\"form-group\"&gt;<br>  &lt;label class=\"col-sm-2 control-label\"&gt;Last Name:&lt;/label&gt;<br>  &lt;div class=\"col-sm-10\"&gt;<br>    &lt;input type=\"text\" ng-model=\"lName\" ng-disabled=\"!edit\" placeholder=\"Last Name\"&gt;<br>  &lt;/div&gt;<br>&lt;/div&gt;<br>&lt;div class=\"form-group\"&gt;<br>  &lt;label class=\"col-sm-2 control-label\"&gt;Password:&lt;/label&gt;<br>  &lt;div class=\"col-sm-10\"&gt;<br>    &lt;input type=\"password\" ng-model=\"passw1\" placeholder=\"Password\"&gt;<br>  &lt;/div&gt;<br>&lt;/div&gt;<br>&lt;div class=\"form-group\"&gt;<br>  &lt;label class=\"col-sm-2 control-label\"&gt;Repeat:&lt;/label&gt;<br>  &lt;div class=\"col-sm-10\"&gt;<br>    &lt;input type=\"password\" ng-model=\"passw2\" placeholder=\"Repeat Password\"&gt;<br>  &lt;/div&gt;<br>&lt;/div&gt;<br>&lt;/form&gt;<br><br>&lt;hr&gt;<br>&lt;button class=\"btn btn-success\" ng-disabled=\"error || incomplete\"&gt;<br>  &lt;span class=\"glyphicon glyphicon-save\"&gt;&lt;/span&gt; Save Changes<br>&lt;/button&gt; </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/myUsers_Form\" target=\"_blank\">尝试一下 »</a> </div> <br><hr> <h2>步骤 3: 创建主页</h2> <div class=\"example\"> <h2 class=\"example\">myUsers.html</h2> <div class=\"example_code notranslate htmlHigh\"> &lt;!DOCTYPE html&gt;<br>&lt;html ng-app=\"\"&gt;<br>&lt;head&gt;<br>&lt;link rel=\"stylesheet\" href = \"http://apps.bdimg.com/libs/bootstrap/3.2.0/css/bootstrap.min.css\"&gt;<br> &lt;/head&gt;<br><br>&lt;body ng-controller=\"userController\"&gt;<br><br>&lt;div class=\"container\"&gt;<br>&lt;div ng-include=\"'myUsers_List.htm'\"&gt;&lt;/div&gt;<br>&lt;div ng-include=\"'myUsers_Form.htm'\"&gt;&lt;/div&gt;<br>&lt;/div&gt;<br><br>&lt;script src= \"http://apps.bdimg.com/libs/angular.js/1.2.15/angular.min.js\"&gt;&lt;/script&gt;<br> &lt;script src= \"myUsers.js\"&gt;&lt;/script&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;</div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_includes\" target=\"_blank\">尝试一下 »</a></div></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 4,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "AngularJS 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "fb02985926b0b8733bc939005fcf3f0a",
      "chapter_level_two_parent_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_two_name": "AngularJS 指令",
      "chapter_level_two_url": "/angularjs/angularjs-directives.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>AngularJS <span class=\"color_h1\">指令</span> </h2>\n<div><span class=\"color_h1\">本节为你介绍 </span>AngularJS 使用的一些指令。</div>\n<hr>\n<p class=\"intro\">AngularJS 通过被称为 <strong>指令</strong> 的新属性来扩展 HTML。</p>\n<hr>\n <h2>AngularJS 指令</h2> \n<p>AngularJS 指令是扩展的 HTML 属性，带有前缀 <strong>ng-</strong>。</p>\n<p><strong>ng-app</strong> 指令初始化一个 AngularJS 应用程序。</p>\n<p><strong>ng-init</strong> 指令初始化应用程序数据。</p>\n<p><strong>ng-model</strong> 指令把元素值（比如输入域的值）绑定到应用程序。</p>\n<div class=\"example\">\n     <h2 class=\"example\">AngularJS 实例</h2> \n    <div class=\"example_code notranslate htmlHigh\">&lt;div ng-app=\"\" ng-init=\"firstName='John'\"&gt;\n        <br>\n        <br>  &lt;p&gt;在输入框中尝试输入：&lt;/p&gt;\n        <br>  &lt;p&gt;姓名：&lt;input type=\"text\" ng-model=\"firstName\"&gt;&lt;/p&gt;\n        <br>  &lt;p&gt;你输入的为： {{ firstName }}&lt;/p&gt;\n        <br>\n        <br>&lt;/div&gt;</div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_directives\" target=\"_blank\">尝试一下 »</a> \n</div>\n<p><strong>ng-app</strong> 指令告诉 AngularJS，&lt;div&gt; 元素是 AngularJS <strong>应用程序</strong> 的\"所有者\"。</p>\n<table class=\"lamp\">\n    <tbody>\n        <tr>\n            <th style=\"width:34px\">\n                <img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" alt=\"Note\" style=\"height:32px;width:32px\">\n            </th>\n            <td>一个网页可以包含多个运行在不同元素中的 AngularJS 应用程序。\n                <br>\n            </td>\n        </tr>\n    </tbody>\n</table>\n<hr>\n <h2>数据绑定</h2> \n<p>上面实例中的 <strong>{{ firstName }}</strong> 表达式是一个 AngularJS 数据绑定表达式。</p>\n<p>AngularJS 中的数据绑定，同步了 AngularJS 表达式与 AngularJS 数据。</p>\n<p><strong>{{ firstName }}</strong> 是通过 <strong>ng-model=\"firstName\"</strong> 进行同步。</p>\n<p>在下一个实例中，两个文本域是通过两个 ng-model 指令同步的：</p>\n<div class=\"example\">\n     <h2 class=\"example\">AngularJS 实例</h2> \n    <div class=\"example_code notranslate htmlHigh\">&lt;div ng-app=\"\" ng-init=\"quantity=1;price=5\"&gt;\n        <br>\n        <br>&lt;h2&gt;价格计算器&lt;/h2&gt;\n        <br>\n        <br>数量： &lt;input type=\"number\" ng-model=\"quantity\"&gt;\n        <br>价格： &lt;input type=\"number\" ng-model=\"price\"&gt;\n        <br>\n        <br>&lt;p&gt;&lt;b&gt;总价：&lt;/b&gt; {{ quantity * price }}&lt;/p&gt;\n        <br>\n        <br>&lt;/div&gt;</div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_binding\" target=\"_blank\">尝试一下 »</a> \n</div>\n<table class=\"lamp\">\n    <tbody>\n        <tr>\n            <th style=\"width:34px\">\n                <img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" alt=\"Note\" style=\"height:32px;width:32px\">\n            </th>\n            <td>使用 <strong>ng-init</strong> 不是很常见。您将在控制器一章中学习到一个更好的初始化数据的方式。</td>\n        </tr>\n    </tbody>\n</table>\n<hr>\n <h2 id=\"ng-repeat\">重复 HTML 元素</h2> \n<p><strong>ng-repeat</strong> 指令会重复一个 HTML 元素：</p>\n<div class=\"example\">\n     <h2 class=\"example\">AngularJS 实例</h2> \n    <div class=\"example_code notranslate htmlHigh\">&lt;div ng-app=\"\" ng-init=\"names=['Jani','Hege','Kai']\"&gt;\n        <br>  &lt;p&gt;使用 ng-repeat 来循环数组&lt;/p&gt;\n        <br>  &lt;ul&gt;\n        <br>    &lt;li ng-repeat=\"x in names\"&gt;\n        <br>      {{ x }}\n        <br>    &lt;/li&gt;\n        <br>  &lt;/ul&gt;\n        <br>&lt;div&gt;\n        <br>\n    </div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_repeat_array\" target=\"_blank\">尝试一下 »</a> \n</div>\n<p><strong>ng-repeat</strong> 指令用在一个对象数组上：</p>\n<div class=\"example\">\n     <h2 class=\"example\">AngularJS 实例</h2> \n    <div class=\"example_code notranslate htmlHigh\">&lt;div ng-app=\"\" ng-init=\"names=[\n        <br>{name:'Jani',country:'Norway'},\n        <br>{name:'Hege',country:'Sweden'},\n        <br>{name:'Kai',country:'Denmark'}]\"&gt;\n        <br>\n        <br>&lt;p&gt;循环对象：&lt;/p&gt;\n        <br>&lt;ul&gt;\n        <br>  &lt;li ng-repeat=\"x in names\"&gt;\n        <br>    {{ x.name + ', ' + x.country }}\n        <br>  &lt;/li&gt;\n        <br>&lt;/ul&gt;\n        <br>\n        <br>&lt;/div&gt;</div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_repeat_object\" target=\"_blank\">尝试一下 »</a> \n</div>\n<table class=\"lamp\">\n    <tbody>\n        <tr>\n            <th style=\"width:34px\">\n                <img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" alt=\"Note\" style=\"height:32px;width:32px\">\n            </th>\n            <td>AngularJS 完美支持数据库的 CRUD（增加Create、读取Read、更新Update、删除Delete）应用程序。\n                <br>把实例中的对象想象成数据库中的记录。</td>\n        </tr>\n    </tbody>\n</table>\n<hr>\n <h2>ng-app 指令</h2> \n<p><strong>ng-app</strong> 指令定义了 AngularJS 应用程序的 <strong>根元素</strong>。</p>\n<p><strong>ng-app</strong> 指令在网页加载完毕时会<strong>自动引导</strong>（自动初始化）应用程序。</p>\n<p>稍后您将学习到 <strong>ng-app</strong> 如何通过一个值（比如 ng-app=\"myModule\"）连接到代码模块。</p>\n<hr>\n <h2>ng-init 指令</h2> \n<p><strong>ng-init</strong> 指令为 AngularJS 应用程序定义了 <strong>初始值</strong>。</p>\n<p>通常情况下，不使用 ng-init。您将使用一个控制器或模块来代替它。</p>\n<p>稍后您将学习更多有关控制器和模块的知识。</p>\n<hr>\n <h2>ng-model 指令</h2> \n<p><strong>ng-model</strong> 指令 <strong>绑定 HTML 元素</strong> 到应用程序数据。</p>\n<p><strong>ng-model</strong> 指令也可以：</p>\n<ul>\n    <li>为应用程序数据提供类型验证（number、email、required）。</li>\n    <li>为应用程序数据提供状态（invalid、dirty、touched、error）。</li>\n    <li>为 HTML 元素提供 CSS 类。</li>\n    <li>绑定 HTML 元素到 HTML 表单。</li>\n</ul>\n<hr>\n <h2>ng-repeat 指令</h2> \n<p><strong>ng-repeat</strong> 指令对于集合中（数组中）的每个项会 <strong>克隆一次 HTML 元素</strong>。</p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 3,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "AngularJS 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "0b7762e7cc440efa827d1ae22ec07f61",
      "chapter_level_two_parent_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_two_name": "AngularJS 表达式",
      "chapter_level_two_url": "/angularjs/angularjs-expressions.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>AngularJS <span class=\"color_h1\">表达式</span> </h2><div><span class=\"color_h1\">本节介绍了 </span>AngularJS 表达式的作用与使用方法。</div> <hr> <p class=\"intro\">AngularJS 使用 <strong>表达式</strong> 把数据绑定到 HTML。</p> <hr> <h2>AngularJS 表达式</h2> <p>AngularJS 表达式写在双大括号内：<strong>{{ expression }}</strong>。</p> <p>AngularJS 表达式把数据绑定到 HTML，这与 <strong>ng-bind</strong> 指令有异曲同工之妙。</p> <p>AngularJS 将在表达式书写的位置\"输出\"数据。</p> <p><strong>AngularJS 表达式</strong> 很像 <strong>JavaScript 表达式</strong>：它们可以包含文字、运算符和变量。</p> <p>实例 {{ 5 + 5 }} 或 {{ firstName + \" \" + lastName }}</p> <hr> <h2>AngularJS 数字</h2> <p>AngularJS 数据就像 JavaScript 数字：</p> <div class=\"example\"> <h2 class=\"example\">AngularJS 实例</h2> <div class=\"example_code notranslate htmlHigh\"> &lt;div ng-app=\"\" ng-init=\"quantity=1;cost=5\"&gt;<br><br> &lt;p&gt;总价： {{ quantity * cost }}&lt;/p&gt;<br><br> &lt;/div&gt; </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_expressions\" target=\"_blank\">尝试一下 »</a> </div> <p>使用 ng-bind 的相同实例：</p> <div class=\"example\"> <h2 class=\"example\">AngularJS 实例</h2> <div class=\"example_code notranslate htmlHigh\"> &lt;div ng-app=\"\" ng-init=\"quantity=1;cost=5\"&gt;<br><br> &lt;p&gt;总价： &lt;span ng-bind=\"quantity * cost\"&gt;&lt;/span&gt;&lt;/p&gt;<br><br> &lt;/div&gt; </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_bind_numbers\" target=\"_blank\">尝试一下 »</a> </div>  <table class=\"lamp\"><tbody><tr> <th style=\"width:34px\"><img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" alt=\"Note\" style=\"height:32px;width:32px\"></th> <td> 使用 <strong>ng-init</strong> 不是很常见。您将在控制器一章中学习到一个更好的初始化数据的方式。</td> </tr></tbody></table> <hr> <h2>AngularJS 字符串</h2> <p>AngularJS 字符串就像 <a href=\"https://www.w3cschool.cn/javascript/js-strings.html\" target=\"_blank\">JavaScript 字符串</a>：</p> <div class=\"example\"> <h2 class=\"example\">AngularJS 实例</h2> <div class=\"example_code notranslate htmlHigh\"> &lt;div ng-app=\"\" ng-init=\"firstName='John';lastName='Doe'\"&gt;<br><br>&lt;p&gt;姓名： {{ firstName + \" \" + lastName }}&lt;/p&gt;<br><br>&lt;/div&gt; </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_expressions_strings\" target=\"_blank\">尝试一下 »</a> </div> <p>使用 ng-bind 的相同实例：</p> <div class=\"example\"> <h2 class=\"example\">AngularJS 实例</h2> <div class=\"example_code notranslate htmlHigh\"> &lt;div ng-app=\"\" ng-init=\"firstName='John';lastName='Doe'\"&gt;<br><br> &lt;p&gt;姓名： &lt;span ng-bind=\"firstName + ' ' + lastName\"&gt;&lt;/span&gt;&lt;/p&gt;<br><br>&lt;/div&gt; </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_bind_strings\" target=\"_blank\">尝试一下 »</a> </div> <br><hr> <h2>AngularJS 对象</h2> <p>AngularJS 对象就像 <a href=\"https://www.w3cschool.cn/javascript/js-objects.html\" target=\"_blank\">JavaScript 对象</a>：</p> <div class=\"example\"> <h2 class=\"example\">AngularJS 实例</h2> <div class=\"example_code notranslate htmlHigh\"> &lt;div ng-app=\"\" ng-init=\"person={firstName:'John',lastName:'Doe'}\"&gt;<br><br> &lt;p&gt;姓为 {{ person.lastName }}&lt;/p&gt;<br><br> &lt;/div&gt; </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_expressions_objects\" target=\"_blank\">尝试一下 »</a> </div> <p>使用 ng-bind 的相同实例：</p> <div class=\"example\"> <h2 class=\"example\">AngularJS 实例</h2> <div class=\"example_code notranslate htmlHigh\"> &lt;div ng-app=\"\" ng-init=\"person={firstName:'John',lastName:'Doe'}\"&gt;<br><br> &lt;p&gt;姓为 &lt;span ng-bind=\"person.lastName\"&gt;&lt;/span&gt;&lt;/p&gt;<br><br> &lt;/div&gt; </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_bind_objects\" target=\"_blank\">尝试一下 »</a> </div> <br><hr> <h2>AngularJS 数组</h2> <p>AngularJS 数组就像 JavaScript 数组：</p> <div class=\"example\"> <h2 class=\"example\">AngularJS 实例</h2> <div class=\"example_code notranslate htmlHigh\"> &lt;div ng-app=\"\" ng-init=\"points=[1,15,19,2,40]\"&gt;<br><br> &lt;p&gt;第三个值为 {{ points[2] }}&lt;/p&gt;<br><br> &lt;/div&gt; </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_expressions_arrays\" target=\"_blank\">尝试一下 »</a> </div> <p>使用 ng-bind 的相同实例：</p> <div class=\"example\"> <h2 class=\"example\">AngularJS 实例</h2> <div class=\"example_code notranslate htmlHigh\"> &lt;div ng-app=\"\" ng-init=\"points=[1,15,19,2,40]\"&gt;<br><br> &lt;p&gt;第三个值为 &lt;span ng-bind=\"points[2]\"&gt;&lt;/span&gt;&lt;/p&gt;<br><br> &lt;/div&gt; </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_bind_arrays\" target=\"_blank\">尝试一下 »</a></div></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "AngularJS 教程",
      "teach_introduction": "AngularJS 通过新的属性和表达式扩展了 HTML。",
      "sort_index": 2,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "AngularJS 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "2957139d0f6a0bf28993adc0685a99fd",
      "chapter_level_two_parent_id": "d7f7f095831345c95b555b364fabc958",
      "chapter_level_two_name": "AngularJS 简介",
      "chapter_level_two_url": "/angularjs/angularjs-intro.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>AngularJS <span class=\"color_h1\">简介</span> </h2> <hr> <p class=\"intro\">AngularJS 是一个 <strong>JavaScript 框架</strong>。它可通过 <a href=\"https://www.w3cschool.cn/htmltags/tag-script.html\" target=\"_blank\">&lt;script&gt; 标签</a>添加到 HTML 页面。</p> <p class=\"intro\">AngularJS 通过 <strong><a href=\"angularjs-directives.html\">指令</a></strong> 扩展了 HTML，且通过 <strong><a href=\"angularjs-expressions.html\">表达式</a></strong> 绑定数据到 HTML。</p> <hr> <h2>AngularJS 是一个 JavaScript 框架</h2> <p>AngularJS 是一个 JavaScript 框架。它是一个以 JavaScript 编写的库。</p> <p>AngularJS 是以一个 JavaScript 文件形式发布的，可通过 script 标签添加到网页中：</p> <div class=\"example\"> <div class=\"example_code\"> &lt;script src=\"http://apps.bdimg.com/libs/angular.js/1.4.6/angular.min.js\" rel=\"external nofollow\"  rel=\"external nofollow\"  rel=\"external nofollow\" &gt;&lt;/script&gt;</div> </div>  <table class=\"lamp    \"><tbody><tr> <th style=\"width:34px\"><img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" alt=\"Note\" style=\"height:32px;width:32px\"></th> <td>我们建议把脚本放在 &lt;body&gt; 元素的底部。<br> 这会提高网页加载速度，因为 HTML 加载不受制于脚本加载。</td> </tr></tbody></table> <hr> <h2>AngularJS 扩展了 HTML</h2> <p>AngularJS 通过 <strong>ng-directives</strong> 扩展了 HTML。</p> <p><strong>ng-app</strong> 指令定义一个 AngularJS 应用程序。</p> <p><strong>ng-model</strong> 指令把元素值（比如输入域的值）绑定到应用程序。</p> <p><strong>ng-bind</strong> 指令把应用程序数据绑定到 HTML 视图。</p> <div class=\"example\"> <h2 class=\"example\">AngularJS 实例</h2> <div class=\"example_code notranslate htmlHigh\"> &lt;!DOCTYPE html&gt;<br> &lt;html&gt;<br> &lt;body&gt;<br><br>&lt;div ng-app=\"\"&gt;<br>   &lt;p&gt;在输入框中尝试输入：&lt;/p&gt;<br>   &lt;p&gt;姓名：&lt;input type=\"text\" ng-model=\"name\"&gt;&lt;/p&gt;<br>   &lt;p ng-bind=\"name\"&gt;&lt;/p&gt;<br> &lt;/div&gt;<br><br> &lt;script src=\"http://apps.bdimg.com/libs/angular.js/1.4.6/angular.min.js\" rel=\"external nofollow\"  rel=\"external nofollow\"  rel=\"external nofollow\" &gt;&lt;/script&gt;<br><br> &lt;/body&gt;<br> &lt;/html&gt;<br> </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_intro\" target=\"_blank\">尝试一下 »</a> </div> <p>实例讲解：</p> <p>当网页加载完毕，AngularJS 自动开启。</p> <p><strong>ng-app</strong> 指令告诉 AngularJS，&lt;div&gt; 元素是 AngularJS <strong>应用程序</strong> 的\"所有者\"。</p> <p><strong>ng-model</strong> 指令把输入域的值绑定到应用程序变量 <strong>name</strong>。</p> <p><strong>ng-bind</strong> 指令把应用程序变量 name 绑定到某个段落的 innerHTML。</p>  <table class=\"lamp    \"><tbody><tr> <th style=\"width:34px\"><img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" alt=\"Note\" style=\"height:32px;width:32px\"></th> <td>如果您移除了 <strong>ng-app</strong> 指令，HTML 将直接把表达式显示出来，不会去计算表达式的结果。</td> </tr></tbody></table> <hr> <h2>什么是 AngularJS？</h2> <p>\"AngularJS 是专门为应用程序设计的 HTML。\"</p> <p>AngularJS 使得开发现代的单一页面应用程序（SPAs：Single Page Applications）变得更加容易。 </p> <ul> <li>AngularJS 把应用程序数据绑定到 HTML 元素。</li> <li>AngularJS 可以克隆和重复 HTML 元素。</li> <li>AngularJS 可以隐藏和显示 HTML 元素。</li> <li>AngularJS 可以在 HTML 元素\"背后\"添加代码。</li> <li>AngularJS 支持输入验证。</li> </ul> <hr> <h2>AngularJS 指令</h2> <p>正如您所看到的，AngularJS 指令是以 <strong>ng</strong> 作为前缀的 HTML 属性。</p> <p><strong>ng-init</strong> 指令初始化 AngularJS 应用程序变量。</p> <div class=\"example\"> <h2 class=\"example\">AngularJS 实例</h2> <div class=\"example_code notranslate htmlHigh\"> &lt;div ng-app=\"\" ng-init=\"firstName='John'\"&gt;<br><br> &lt;p&gt;姓名为 &lt;span ng-bind=\"firstName\"&gt;&lt;/span&gt;&lt;/p&gt;<br><br> &lt;/div&gt; </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_intro_directives\" target=\"_blank\">尝试一下 »</a> </div>  <table class=\"lamp    \"><tbody><tr> <th style=\"width:34px\"><img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" alt=\"Note\" style=\"height:32px;width:32px\"></th> <td>HTML5 允许扩展的（自制的）属性，以 <strong>data-</strong> 开头。<br> AngularJS 属性以 <strong>ng-</strong> 开头，但是您可以使用 <strong>data-ng-</strong> 来让网页对 HTML5 有效。</td> </tr></tbody></table> <p>带有有效的 HTML5：</p> <div class=\"example\"> <h2 class=\"example\">AngularJS 实例</h2> <div class=\"example_code notranslate htmlHigh\"> &lt;div data-ng-app=\"\" data-ng-init=\"firstName='John'\"&gt;<br><br> &lt;p&gt;姓名为 &lt;span data-ng-bind=\"firstName\"&gt;&lt;/span&gt;&lt;/p&gt;<br><br> &lt;/div&gt; </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_intro_directives_html\" target=\"_blank\">尝试一下 »</a> </div> <br><hr> <h2>AngularJS 表达式</h2> <p>AngularJS 表达式写在双大括号内：<strong>{{ expression }}</strong>。</p> <p>AngularJS 表达式把数据绑定到 HTML，这与 <strong>ng-bind</strong> 指令有异曲同工之妙。</p> <p>AngularJS 将在表达式书写的位置\"输出\"数据。</p> <p><strong>AngularJS 表达式</strong> 很像 <strong>JavaScript 表达式</strong>：它们可以包含文字、运算符和变量。</p> <p>实例 {{ 5 + 5 }} 或 {{ firstName + \" \" + lastName }}</p> <div class=\"example\"> <h2 class=\"example\">AngularJS 实例</h2> <div class=\"example_code notranslate htmlHigh\"> &lt;!DOCTYPE html&gt;<br> &lt;html&gt;<br> &lt;body&gt;<br><br>&lt;div ng-app=\"\"&gt;<br>   &lt;p&gt;我的第一个表达式： {{ 5 + 5 }}&lt;/p&gt;<br> &lt;/div&gt;<br><br> &lt;script src=\"http://apps.bdimg.com/libs/angular.js/1.4.6/angular.min.js\" rel=\"external nofollow\"  rel=\"external nofollow\"  rel=\"external nofollow\" &gt;&lt;/script&gt;<br><br> &lt;/body&gt;<br> &lt;/html&gt;<br> </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_ng_intro_expression\" target=\"_blank\">尝试一下 »</a></div></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    }
  ]
}
