{
  "name": "JavaScript 教程",
  "author": "admin",
  "type": "前端入门",
  "introduction": "JavaScript 是世界上最流行的脚本语言。\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\nJavaScript 被设计为向 HTML 页面增加交互性。\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
  "data": [{
    "teach_name": "JavaScript 教程",
    "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
    "sort_index": 1,
    "parent_sort_index": 1,
    "chapter_level_one_id": "d5794f320cee2e7bf3481f2fb51a6c52",
    "chapter_level_one_parent_id": "0",
    "chapter_level_one_name": "JavaScript 教程",
    "chapter_level_one_url": "",
    "chapter_level_two_id": "55143c75a778f1e105a34dc8dace9247",
    "chapter_level_two_parent_id": "d5794f320cee2e7bf3481f2fb51a6c52",
    "chapter_level_two_name": "JavaScript 教程导读",
    "chapter_level_two_url": "/javascript/js-tutorial.html",
    "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">教程导读</span></h2> <div class=\"tutintro\"> <p>JavaScript 是 Web 的编程语言。</p> <p>所有现代的 HTML 页面都使用 JavaScript，可以用于改进设计、验证表单、检测浏览器、创建cookies等。</p> <p>JavaScript 非常容易学。</p> <p>本教程将教你学习从初级到高级JavaScript知识。</p> </div> <h2 class=\"tutheader\">JavaScript 在线实例</h2> <p>本教程包含了大量的 JavaScript 实例， 您可以点击 \"尝试一下\" 来在线查看实例。</p> <div class=\"example\"> <h2 class=\"example_head\">实例</h2> <div class=\"example_result\">  <h2>我的第一个 JavaScript 程序</h2> <p id=\"demo\">这是一个段落</p> <button type=\"button\">显示日期</button> <br><br> </div> <br><a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_events\">尝试一下 »</a> </div> <p>在每个页面您可以点击 \"尝试一下\" 在线查看实例！！！</p> <p>尝试每个实例，并且在线修改代码，查看不同的运行效果！！！</p> <table class=\"lamp   \"><tbody><tr> <th style=\"width:34px\"><img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" alt=\"Note\" style=\"height:32px;width:32px\"></th> <td>如果能根据本站的实例一步一个脚印学习，你将会在很短的时间内学会 JavaScript。</td> </tr></tbody></table> <br> <h2 class=\"tutheader\">为什么学习 JavaScript?</h2> <p>JavaScript web 开发人员必须学习的 3 门语言中的一门：</p> <ol> <li><strong>HTML</strong> 定义了网页的内容</li> <li><strong>CSS</strong> 描述了网页的布局</li> <li><strong>JavaScript</strong> 网页的行为</li> </ol> <p>本教程是关于 JavaScript 及介绍 JavaScript 如何与 HTML 和 CSS 一起工作。</p> <br><h2 class=\"tutheader\">谁适合阅读本教程?</h2> <p>1. 如果您想学习 JavaScript，您可以学习本教程：</p> <p>了解 JavaScript 是如何与 HTML 和 CSS 一起工作的。</p> <p>2. 如果在此之前您已经使用过 JavaScript，您也可以阅读本教程：</p> <p>JavaScript 一直在升级，所以我们需要时刻了解 JavaScript 的新技术。</p> <br><h2 class=\"tutheader\">阅读本教程前，您需要了解的知识：</h2> <p>阅读本教程，您需要有以下基础：</p> <ul> <li>HTML 和 CSS 基础</li> </ul> <p>如果您想学习这些基础知识，您可以在我们的首页找到相应的教程<a href=\"/\">W3CSchool教程</a>。</p> <h2>JavaScript 实战闯关</h2><span>我们为学习者准备了大量的JavaScript编程实战练习，供大家通过亲自编程实验来熟练编程操作</span><p><a href=\"//www.w3cschool.cn/codecamp/list?ccid=3\" target=\"_blank\">开始JavaScript编程闯关</a></p><h2 class=\"tutheader\">JavaScript 实例</h2> <p>学习 100 多个 JavaScript 实例！</p> <p>在实例页面中，您可以点击 \"尝试一下\" 来查看 JavaScript 在线实例。</p> <ul> <li><a href=\"js-examples.html\">JavaScript 实例</a></li> <li><a href=\"js-ex-objects.html\">JavaScript 对象实例</a></li> <li><a href=\"js-ex-browser.html\">JavaScript 浏览器支持实例</a></li> <li><a href=\"js-ex-dom.html\">JavaScript HTML DOM 实例</a></li></ul><h2 class=\"tutheader\">JavaScript 测验</h2> <p>在 W3CSchool 中测试您的 JavaScript 技能！</p><h2 class=\"tutheader\">JavaScript 参考手册</h2> <p>在 W3CSchool 中，我们为您提供完整的 JavaScript 对象、浏览器对象、HTML DOM 对象参考手册。</p> <p>以下手册包含了每个对象、属性、方法的实例。</p> <ul> <li><a href=\"/jsref/jsref-tutorial.html\">JavaScript 内置对象</a></li> <li><a href=\"/jsref/jsref-tutorial.html\">Browser 对象</a></li> <li><a href=\"/jsref/jsref-tutorial.html\">HTML DOM 对象</a></li> </ul><h2>相关教程</h2><p><a href=\"https://www.w3cschool.cn/html/\" target=\"_blank\">HTML教程</a></p><p><a href=\"https://www.w3cschool.cn/css/\" target=\"_blank\">CSS教程</a></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
  },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 16,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JavaScript 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "3c9256623d4c6945bf8f9389d5f0facb",
      "chapter_level_two_parent_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_two_name": "JavaScript 比较和逻辑运算符",
      "chapter_level_two_url": "/javascript/js-comparisons.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\"> 比较</span> 和<span class=\"color_h1\"> 逻辑运算符</span> </h2> \n<hr>\n<p class=\"intro\">比较和逻辑运算符用于测试 <em>true</em> 或者 <em>false</em>。</p>\n<hr>\n <h2>比较运算符</h2> \n<p>比较运算符在逻辑语句中使用，以测定变量或值是否相等。</p>\n<p>给定</p><strong> x=5，下面的表格解释了比较运算符：</strong> \n<table class=\"reference\">\n    <tbody>\n        <tr>\n            <th width=\"15%\" align=\"left\">运算符</th>\n            <th width=\"40%\" align=\"left\">描述</th>\n            <th width=\"18%\" align=\"left\">比较</th>\n            <th width=\"17%\" align=\"left\">返回值</th>\n            <th width=\"10%\" align=\"left\">实例</th>\n        </tr>\n        <tr style=\"background-color:#ffffff\">\n            <td valign=\"top\" rowspan=\"2\">==</td>\n            <td valign=\"top\" rowspan=\"2\">等于</td>\n            <td valign=\"top\">x==8</td>\n            <td valign=\"top\"><em>false</em>\n            </td>\n            <td valign=\"top\"><a target=\"_blank\" class=\"tryitbtn\" style=\"float:right;width:55px;padding-top:0px;padding-bottom:1px\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_comparison1\">实例 »</a>\n            </td>\n        </tr>\n        <tr style=\"background-color:#ffffff\">\n            <td valign=\"top\">x==5</td>\n            <td valign=\"top\"><em>true</em>\n            </td>\n            <td valign=\"top\"><a target=\"_blank\" class=\"tryitbtn\" style=\"float:right;width:55px;padding-top:0px;padding-bottom:1px\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_comparison2\">实例 »</a>\n            </td>\n        </tr>\n        <tr class=\"fixzebra\">\n            <td valign=\"top\" rowspan=\"2\">===</td>\n            <td valign=\"top\" rowspan=\"2\">绝对等于（值和类型均相等）</td>\n            <td valign=\"top\">x===\"5\"</td>\n            <td valign=\"top\"><em>false</em>\n            </td>\n            <td valign=\"top\"><a target=\"_blank\" class=\"tryitbtn\" style=\"float:right;width:55px;padding-top:0px;padding-bottom:1px\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_comparison3\">实例 »</a>\n            </td>\n        </tr>\n        <tr class=\"fixzebra\">\n            <td valign=\"top\">x===5</td>\n            <td valign=\"top\"><em>true</em>\n            </td>\n            <td valign=\"top\"><a target=\"_blank\" class=\"tryitbtn\" style=\"float:right;width:55px;padding-top:0px;padding-bottom:1px\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_comparison4\">实例 »</a>\n            </td>\n        </tr>\n        <tr>\n            <td valign=\"top\">!=</td>\n            <td valign=\"top\">不等于</td>\n            <td valign=\"top\">x!=8</td>\n            <td valign=\"top\"><em>true</em>\n            </td>\n            <td valign=\"top\"><a target=\"_blank\" class=\"tryitbtn\" style=\"float:right;width:55px;padding-top:0px;padding-bottom:1px\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_comparison5\">实例 »</a>\n            </td>\n        </tr>\n        <tr>\n            <td valign=\"top\" rowspan=\"2\">!==</td>\n            <td valign=\"top\" rowspan=\"2\">不绝对等于（值和类型有一个不相等，或两个都不相等）</td>\n            <td valign=\"top\">x!==\"5\"</td>\n            <td valign=\"top\"><em>true</em>\n            </td>\n            <td valign=\"top\"><a target=\"_blank\" class=\"tryitbtn\" style=\"float:right;width:55px;padding-top:0px;padding-bottom:1px\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_comparison6\">实例 »</a>\n            </td>\n        </tr>\n        <tr class=\"fixzebra\">\n            <td valign=\"top\">x!==5</td>\n            <td valign=\"top\"><em>false</em>\n            </td>\n            <td valign=\"top\"><a target=\"_blank\" class=\"tryitbtn\" style=\"float:right;width:55px;padding-top:0px;padding-bottom:1px\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_comparison7\">实例 »</a>\n            </td>\n        </tr>\n        <tr style=\"background-color:#ffffff\">\n            <td valign=\"top\">&gt;</td>\n            <td valign=\"top\"> 大于</td>\n            <td valign=\"top\">x&gt;8</td>\n            <td valign=\"top\"><em>false</em>\n            </td>\n            <td valign=\"top\"><a target=\"_blank\" class=\"tryitbtn\" style=\"float:right;width:55px;padding-top:0px;padding-bottom:1px\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_comparison8\">实例 »</a>\n            </td>\n        </tr>\n        <tr class=\"fixzebra\">\n            <td valign=\"top\">&lt;</td>\n            <td valign=\"top\"> 小于</td>\n            <td valign=\"top\">x&lt;8</td>\n            <td valign=\"top\"><em>true</em>\n            </td>\n            <td valign=\"top\"><a target=\"_blank\" class=\"tryitbtn\" style=\"float:right;width:55px;padding-top:0px;padding-bottom:1px\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_comparison9\">实例 »</a>\n            </td>\n        </tr>\n        <tr style=\"background-color:#ffffff\">\n            <td valign=\"top\">&gt;=</td>\n            <td valign=\"top\"> 大于或等于</td>\n            <td valign=\"top\">x&gt;=8</td>\n            <td valign=\"top\"><em>false</em>\n            </td>\n            <td valign=\"top\"><a target=\"_blank\" class=\"tryitbtn\" style=\"float:right;width:55px;padding-top:0px;padding-bottom:1px\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_comparison10\">实例 »</a>\n            </td>\n        </tr>\n        <tr class=\"fixzebra\">\n            <td valign=\"top\">&lt;=</td>\n            <td valign=\"top\"> 小于或等于</td>\n            <td valign=\"top\">x&lt;=8</td>\n            <td valign=\"top\"><em>true</em>\n            </td>\n            <td valign=\"top\"><a target=\"_blank\" class=\"tryitbtn\" style=\"float:right;width:55px;padding-top:0px;padding-bottom:1px\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_comparison11\">实例 »</a>\n            </td>\n        </tr>\n    </tbody>\n</table>\n<br>\n<hr>\n <h2>如何使用</h2> \n<p>可以在条件语句中使用比较运算符对值进行比较，然后根据结果来采取行动：</p><div class=\"code notranslate\"><div>if (age&lt;18) x=\"Too young\";</div></div>\n<p>您将在本教程的下一节中学习更多有关条件语句的知识。</p>\n<hr>\n <h2>逻辑运算符</h2> \n<p>逻辑运算符用于测定变量或值之间的逻辑。</p>\n<p>给定 x=6 以及 y=3，下表解释了逻辑运算符：</p>\n<table class=\"reference notranslate\">\n    <tbody>\n        <tr>\n            <th width=\"15%\" align=\"left\">运算符</th>\n            <th width=\"45%\" align=\"left\">描述</th>\n            <th width=\"40%\" align=\"left\">例子</th>\n        </tr>\n        <tr>\n            <td valign=\"top\">&amp;&amp;</td>\n            <td valign=\"top\">and</td>\n            <td valign=\"top\">(x &lt; 10 &amp;&amp; y &gt; 1) 为 true</td>\n        </tr>\n        <tr>\n            <td valign=\"top\">||</td>\n            <td valign=\"top\">or</td>\n            <td valign=\"top\">(x==5 || y==5) 为 false</td>\n        </tr>\n        <tr>\n            <td valign=\"top\">!</td>\n            <td valign=\"top\">not</td>\n            <td valign=\"top\">!(x==y) 为 true</td>\n        </tr>\n    </tbody>\n</table>\n<p><b> 提示：</b>JavaScript逻辑运算符的优先级是：！、&amp;&amp; 、||。</p>\n<hr>\n <h2>条件运算符</h2> \n<p>JavaScript 还包含了基于某些条件对变量进行赋值的条件运算符。</p>\n <h3>语法</h3> \n<div class=\"code notranslate\"><font color=\"#c0c0c0\"> </font><font color=\"#FFFFFF\">variablename=(condition)?value1:value2</font>\n</div>\n <h3>例子</h3> \n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <p class=\"example\">如果变量 age 中的值小于 18，则向变量 voteable 赋值 \"年龄太小\"，否则赋值 \"年龄已达到\"。</p>\n    <div class=\"example_code notranslate\">voteable=(age&lt;18)?\"年龄太小\":\"年龄已达到\";\n        <br>\n    </div><a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_comparison\">尝试一下 »</a>\n</div>\n<p>\n    <br>\n</p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 15,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JavaScript 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "9e5c195393d078f154cd2fcbd99836d7",
      "chapter_level_two_parent_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_two_name": "JavaScript 运算符",
      "chapter_level_two_url": "/javascript/js-operators.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">运算符</span> </h2>\n<div><span class=\"color_h1\">本节将介绍JavaScript中的三种类型的运算符：算术运算符、赋值运算符以及字符串连接运算符。</span>\n</div>\n<hr>\n<p><strong>运算符 = 用于赋值。</strong>\n</p>\n<p><strong>运算符 + 用于加值。</strong>\n</p>\n<hr>\n<p>运算符 = 用于给 JavaScript 变量赋值。</p>\n<p>算术运算符 + 用于把值加起来。</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <p class=\"example\">指定变量值，并将值相加：</p>\n    <div class=\"example_code notranslate\">y=5;\n        <br>z=2;\n        <br>x=y+z;</div>\n    <p>在以上语句执行后，<em>x</em> 的值是：</p>\n    <div class=\"example_code notranslate\">7</div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_operators1\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>JavaScript 算术运算符</h2>\n<p>算术运算符用于执行变量与/或值之间的算术运算。 给定</p><strong> y=5</strong>\n<p>，下面的表格解释了这些算术运算符：</p>\n<table class=\"reference notranslate  \">\n    <tbody>\n        <tr>\n            <th width=\"13%\" align=\"left\">运算符</th>\n            <th width=\"32%\" align=\"left\">描述</th>\n            <th width=\"15%\" align=\"left\">例子</th>\n            <th width=\"15%\" align=\"left\">x 运算结果</th>\n            <th width=\"15%\" align=\"left\">y 运算结果</th>\n            <th width=\"10%\" align=\"left\">在线实例</th>\n        </tr>\n        <tr>\n            <td valign=\"top\">+</td>\n            <td valign=\"top\">加法</td>\n            <td valign=\"top\">x=y+2</td>\n            <td valign=\"top\">7</td>\n            <td valign=\"top\">5</td>\n            <td valign=\"top\"><a target=\"_blank\" class=\"tryitbtn\" style=\"float:right;width:55px;padding-top:0px;padding-bottom:1px\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_oper_add\">实例 »</a>\n            </td>\n        </tr>\n        <tr>\n            <td valign=\"top\">-</td>\n            <td valign=\"top\">减法</td>\n            <td valign=\"top\">x=y-2</td>\n            <td valign=\"top\">3</td>\n            <td valign=\"top\">5</td>\n            <td valign=\"top\"><a target=\"_blank\" class=\"tryitbtn\" style=\"float:right;width:55px;padding-top:0px;padding-bottom:1px\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_oper_sub\">实例 »</a>\n            </td>\n        </tr>\n        <tr>\n            <td valign=\"top\">*</td>\n            <td valign=\"top\">乘法</td>\n            <td valign=\"top\">x=y*2</td>\n            <td valign=\"top\">10</td>\n            <td valign=\"top\">5</td>\n            <td valign=\"top\"><a target=\"_blank\" class=\"tryitbtn\" style=\"float:right;width:55px;padding-top:0px;padding-bottom:1px\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_oper_mult\">实例 »</a>\n            </td>\n        </tr>\n        <tr>\n            <td valign=\"top\">/</td>\n            <td valign=\"top\">除法</td>\n            <td valign=\"top\">x=y/2</td>\n            <td valign=\"top\">2.5</td>\n            <td valign=\"top\">5</td>\n            <td valign=\"top\"><a target=\"_blank\" class=\"tryitbtn\" style=\"float:right;width:55px;padding-top:0px;padding-bottom:1px\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_oper_div\">实例 »</a>\n            </td>\n        </tr>\n        <tr>\n            <td valign=\"top\">%</td>\n            <td valign=\"top\">取模（余数）</td>\n            <td valign=\"top\">x=y%2</td>\n            <td valign=\"top\">1</td>\n            <td valign=\"top\">5</td>\n            <td valign=\"top\"><a target=\"_blank\" class=\"tryitbtn\" style=\"float:right;width:55px;padding-top:0px;padding-bottom:1px\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_oper_mod\">实例 »</a>\n            </td>\n        </tr>\n        <tr>\n            <td rowspan=\"2\" valign=\"top\">++</td>\n            <td rowspan=\"2\" valign=\"top\">自增</td>\n            <td valign=\"top\">x=++y</td>\n            <td valign=\"top\">6</td>\n            <td valign=\"top\">6</td>\n            <td valign=\"top\"><a target=\"_blank\" class=\"tryitbtn\" style=\"float:right;width:55px;padding-top:0px;padding-bottom:1px\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_oper_incr\">实例 »</a>\n            </td>\n        </tr>\n        <tr class=\"fixzebra\">\n            <td valign=\"top\">x=y++</td>\n            <td valign=\"top\">5</td>\n            <td valign=\"top\">6</td>\n            <td valign=\"top\"><a target=\"_blank\" class=\"tryitbtn\" style=\"float:right;width:55px;padding-top:0px;padding-bottom:1px\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_oper_incr2\">实例 »</a>\n            </td>\n        </tr>\n        <tr style=\"background-color:#ffffff\">\n            <td rowspan=\"2\" valign=\"top\">--</td>\n            <td rowspan=\"2\" valign=\"top\">自减</td>\n            <td valign=\"top\">x=--y</td>\n            <td valign=\"top\">4</td>\n            <td valign=\"top\">4</td>\n            <td valign=\"top\"><a target=\"_blank\" class=\"tryitbtn\" style=\"float:right;width:55px;padding-top:0px;padding-bottom:1px\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_oper_decr\">实例 »</a>\n            </td>\n        </tr>\n        <tr style=\"background-color:#ffffff\">\n            <td valign=\"top\">x=y--</td>\n            <td valign=\"top\">5</td>\n            <td valign=\"top\">4</td>\n            <td valign=\"top\"><a target=\"_blank\" class=\"tryitbtn\" style=\"float:right;width:55px;padding-top:0px;padding-bottom:1px\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_oper_decr2\">实例 »</a>\n            </td>\n        </tr>\n    </tbody>\n</table>\n<br>\n<hr>\n <h2>JavaScript 赋值运算符</h2> \n<p>赋值运算符用于给 JavaScript 变量赋值。</p>\n<p>给定 <strong>x=10 </strong>和<strong> y=5</strong>，下面的表格解释了赋值运算符：</p>\n<table class=\"reference notranslate  \">\n    <tbody>\n        <tr>\n            <th width=\"13%\" align=\"left\">运算符</th>\n            <th width=\"32%\" align=\"left\">例子</th>\n            <th width=\"20%\" align=\"left\">等同于</th>\n            <th width=\"25%\" align=\"left\">运算结果</th>\n            <th width=\"10%\" align=\"left\">在线实例</th>\n        </tr>\n        <tr>\n            <td valign=\"top\">=</td>\n            <td valign=\"top\">x=y</td>\n            <td valign=\"top\"> </td>\n            <td valign=\"top\">x=5</td>\n            <td valign=\"top\"><a target=\"_blank\" class=\"tryitbtn\" style=\"float:right;width:55px;padding-top:0px;padding-bottom:1px\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_oper_equal\">实例 »</a>\n            </td>\n        </tr>\n        <tr>\n            <td valign=\"top\">+=</td>\n            <td valign=\"top\">x+=y</td>\n            <td valign=\"top\">x=x+y</td>\n            <td valign=\"top\">x=15</td>\n            <td valign=\"top\"><a target=\"_blank\" class=\"tryitbtn\" style=\"float:right;width:55px;padding-top:0px;padding-bottom:1px\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_oper_plusequal\">实例 »</a>\n            </td>\n        </tr>\n        <tr>\n            <td valign=\"top\">-=</td>\n            <td valign=\"top\">x-=y</td>\n            <td valign=\"top\">x=x-y</td>\n            <td valign=\"top\">x=5</td>\n            <td valign=\"top\"><a target=\"_blank\" class=\"tryitbtn\" style=\"float:right;width:55px;padding-top:0px;padding-bottom:1px\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_oper_minequal\">实例 »</a>\n            </td>\n        </tr>\n        <tr>\n            <td valign=\"top\">*=</td>\n            <td valign=\"top\">x*=y</td>\n            <td valign=\"top\">x=x*y</td>\n            <td valign=\"top\">x=50</td>\n            <td valign=\"top\"><a target=\"_blank\" class=\"tryitbtn\" style=\"float:right;width:55px;padding-top:0px;padding-bottom:1px\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_oper_multequal\">实例 »</a>\n            </td>\n        </tr>\n        <tr>\n            <td valign=\"top\">/=</td>\n            <td valign=\"top\">x/=y</td>\n            <td valign=\"top\">x=x/y</td>\n            <td valign=\"top\">x=2</td>\n            <td valign=\"top\"><a target=\"_blank\" class=\"tryitbtn\" style=\"float:right;width:55px;padding-top:0px;padding-bottom:1px\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_oper_divequal\">实例 »</a>\n            </td>\n        </tr>\n        <tr>\n            <td valign=\"top\">%=</td>\n            <td valign=\"top\">x%=y</td>\n            <td valign=\"top\">x=x%y</td>\n            <td valign=\"top\">x=0</td>\n            <td valign=\"top\"><a target=\"_blank\" class=\"tryitbtn\" style=\"float:right;width:55px;padding-top:0px;padding-bottom:1px\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_oper_modequal\">实例 »</a>\n            </td>\n        </tr>\n    </tbody>\n</table>\n<br>\n<hr>\n <h2>用于字符串的 + 运算符</h2> \n<p>+ 运算符用于把文本值或字符串变量加起来（连接起来）。</p>\n<p>如需把两个或多个字符串变量连接起来，请使用 + 运算符。</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <p class=\"example\">如需把两个或多个字符串变量连接起来，请使用 + 运算符：</p>\n    <div class=\"example_code notranslate\">txt1=\"What a very\";\n        <br>txt2=\"nice day\";\n        <br>txt3=txt1+txt2;</div>\n    <p> <em>txt3</em> 运算结果如下:</p>\n    <div class=\"example_code notranslate\">What a verynice day</div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_operators2\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<p>要想在两个字符串之间增加空格，需要把空格插入一个字符串之中：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">txt1=\"What a very \";\n        <br>txt2=\"nice day\";\n        <br>txt3=txt1+txt2;</div>\n    <p>在以上语句执行后，变量 <em>txt3</em>包含的值是：</p>\n    <div class=\"example_code notranslate\">What a very nice day</div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_operators3\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<p>或者把空格插入表达式中：:</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">txt1=\"What a very\";\n        <br>txt2=\"nice day\";\n        <br>txt3=txt1+\" \"+txt2;</div>\n    <p>在以上语句执行后，变量<em>txt3</em> 包含的值是：</p>\n    <div class=\"example_code notranslate\">What a very nice day</div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_operators4\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>对字符串和数字进行加法运算</h2> \n<p>两个数字相加，返回数字相加的和，如果数字与字符串相加，返回字符串，如下实例：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">x=5+5;\n        <br>y=\"5\"+5;\n        <br>z=\"Hello\"+5;\n        <br>\n    </div>\n    <p><em>x</em>,<em>y</em>, 和 <em>z</em> 输出结果为:</p>\n    <div class=\"example_code notranslate\">10\n        <br>55\n        <br>Hello5</div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_operators5\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<p> <strong>规则:</strong>如果把数字与字符串相加，结果将成为字符串！</p>\n<p><b>提示：</b>为了熟悉JavaScript运算符的使用，你可以参考本站的<a href=\"https://www.w3cschool.cn/codecamp/list?pename=basic_javascript_camp\" target=\"_blank\">JavaScript编程实战</a>！</p>\n<h2>JavaScript运算符学习脑图</h2>\n<div>\n    <img src=\"https://atts.w3cschool.cn/attachments/image/20170921/1505989160659350.gif\" alt=\"1470710264211893\" style=\"max-width:100%;\">\n</div><hr>\n<h2>参考文章</h2>\n<p>轻松学习 JavaScript：<a href=\"https://www.w3cschool.cn/wkjavascript/vpur1o8p.html\" target=\"_blank\">JavaScript 运算符</a>\n</p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 14,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JavaScript 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "bb7af6e8844e7a5147e105856bb95da0",
      "chapter_level_two_parent_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_two_name": "JavaScript 字符串",
      "chapter_level_two_url": "/javascript/js-strings.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">字符串</span> </h2> <hr> <p class=\"intro\">JavaScript 字符串用于存储和处理文本。</p> <hr> <h2>JavaScript 字符串</h2> <p>字符串可以存储一系列字符，如 \"John Doe\"。</p> <p>字符串可以是插入到引号中的任何字符。你可以使用单引号或双引号：</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code\"> var carname = \"Volvo XC60\";<br> var carname = 'Volvo XC60';</div> </div> <p>你可以使用索引位置来访问字符串中的每个字符：</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code\"> var character = carname[7];</div> </div> <p>字符串的索引从 0 开始，这意味着第一个字符索引值为 [0],第二个为 [1], 以此类推。</p> <p>你可以在字符串中使用引号，字符串中的引号不要与字符串的引号相同:</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code\"> var answer = \"It's alright\";<br> var answer = \"He is called 'Johnny'\";<br> var answer = 'He is called \"Johnny\"';</div> </div> <p>你也可以在字符串添加转义字符来使用引号：</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code\"> var answer = 'It<span>\\'</span>s alright';<br> var answer = \"He is called \\\"Johnny\\\"\";</div> <br><a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_datatypes_string\">尝试一下 »</a> </div> <br><hr> <h2>字符串长度</h2> <p>可以使用内置属性 <strong>length</strong> 来计算字符串的长度：</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code\"> var txt = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";<br>var sln = txt.length;</div> <br><a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_string_length\">尝试一下 »</a> </div><p><b> 提示：</b>你可以通过本站的JavaScript编程实战部分来进一步了解<a href=\"https://www.w3cschool.cn/codecamp/find-the-length-of-a-string.html\" target=\"_blank\">JavaScript获取字符串长度</a>的操作。</p><hr> <h2>特殊字符</h2> <p>在 JavaScript 中，字符串写在单引号或双引号中。</p> <p>因为这样，以下实例 JavaScript 无法解析：x</p> <div class=\"code\">  \"We are the so-called \"Vikings\" from the north.\"<br></div> <p>字符串 \"We are the so-called \" 被截断。</p> <p>如何解决以上的问题呢？可以使用反斜杠 (\\) 来转义 \"Vikings\" 字符串中的双引号，如下:</p> <div class=\"code\"><div>  \"We are the so-called \\\"Vikings\\\" from the north.\" </div></div> <p> 反斜杠是一个<strong>转义字符</strong>。 转义字符将特殊字符转换为字符串字符：</p> <p>转义字符 () 可以用于转义撇号，换行，引号，等其他特殊字符。</p> <p>下表中列举了在字符串中可以使用转义字符转义的特殊字符： </p> <table class=\"reference      \"> <tbody><tr> <th>代码</th> <th>输出</th> </tr> <tr> <td>\\'</td> <td>单引号</td> </tr> <tr> <td>\\\"</td> <td>双引号</td> </tr> <tr> <td>\\\\</td> <td>反斜杠</td> </tr> <tr> <td>\\n</td> <td>换行</td> </tr> <tr> <td>\\r</td> <td>回车</td> </tr> <tr> <td>\\t</td> <td>tab(制表符)</td> </tr> <tr> <td>\\b</td> <td>退格符</td> </tr> <tr> <td>\\f</td> <td>换页符</td> </tr> </tbody></table> <br><hr> <h2>字符串可以是对象</h2> <p>通常， JavaScript 字符串是原始值，可以使用字符创建： <strong>var firstName = \"John\"</strong></p> <p>但我们也可以使用 new 关键字将字符串定义为一个对象： <strong>var firstName = new String(\"John\")</strong></p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code\"> var x = \"John\";<br> var y = new String(\"John\");<br> typeof x // returns String<br> typeof y // returns Object </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_object_string_type\" target=\"_blank\">尝试一下 »</a> </div>  <table class=\"lamp      \"><tbody><tr> <th style=\"width:34px\"><img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" alt=\"Note\" style=\"height:32px;width:32px\"></th> <td>不要创建 String 对象。它会拖慢执行速度，并可能产生其他副作用：</td> </tr></tbody></table><br> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code\"> var x = \"John\";              <br> var y = new String(\"John\");<br> (x === y) // is false because x is a string and y is an object. </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_object_string\" target=\"_blank\">尝试一下 »</a> </div> <br><hr> <h2>字符串属性和方法</h2> <p>原始值字符串，如 \"John\", 没有属性和方法(因为他们不是对象)。 </p> <p>原始值可以使用 JavaScript 的属性和方法，因为 JavaScript 在执行方法和属性时可以把原始值当作对象。</p> <p><strong>字符串方法我们将在下一章节中介绍。</strong></p> <hr> <h2>字符串属性</h2> <table class=\"reference      \"> <tbody><tr> <th style=\"width:24%\">属性</th> <th>描述</th> </tr> <tr> <td>constructor</td> <td>返回创建字符串属性的函数</td> </tr> <tr> <td>length</td> <td>返回字符串的长度</td> </tr> <tr> <td>prototype</td> <td>允许您向对象添加属性和方法</td> </tr> </tbody></table> <br><hr> <h2>字符串方法</h2> <table class=\"reference\"> <tbody><tr> <th style=\"width:24%\">Method</th> <th>描述</th> </tr> <tr> <td>charAt()</td> <td>返回指定索引位置的字符</td> </tr> <tr> <td>charCodeAt()</td> <td>返回指定索引位置字符的 Unicode 值</td> </tr> <tr> <td>concat()</td> <td>连接两个或多个字符串，返回连接后的字符串</td> </tr> <tr> <td>fromCharCode()</td> <td>将指定的 Unicode 值转换为字符串</td> </tr> <tr> <td>indexOf()</td> <td>返回字符串中检索指定字符第一次出现的位置</td> </tr> <tr> <td>lastIndexOf()</td> <td>返回字符串中检索指定字符最后一次出现的位置</td> </tr> <tr> <td>localeCompare()</td> <td>用本地特定的顺序来比较两个字符串</td> </tr> <tr> <td>match()</td> <td>找到一个或多个正则表达式的匹配</td> </tr> <tr> <td>replace()</td> <td>替换与正则表达式匹配的子串</td> </tr> <tr> <td>search()</td> <td>检索与正则表达式相匹配的值</td> </tr> <tr> <td>slice()</td> <td>提取字符串的片断，并在新的字符串中返回被提取的部分</td> </tr> <tr> <td>split()</td> <td>把字符串分割为子字符串数组</td> </tr> <tr> <td>substr()</td> <td>从起始索引号提取字符串中指定数目的字符</td> </tr> <tr> <td>substring()</td> <td>提取字符串中两个指定的索引号之间的字符</td> </tr> <tr> <td>toLocaleLowerCase()</td> <td>根据主机的语言环境把字符串转换为小写，只有几种语言（如土耳其语）具有地方特有的大小写映射</td> </tr> <tr> <td>toLocaleUpperCase()</td> <td>根据主机的语言环境把字符串转换为大写，只有几种语言（如土耳其语）具有地方特有的大小写映射</td> </tr> <tr> <td>toLowerCase()</td> <td>把字符串转换为小写</td> </tr> <tr> <td>toString()</td> <td>返回字符串对象值</td> </tr> <tr> <td>toUpperCase()</td> <td>把字符串转换为大写</td> </tr> <tr> <td>trim()</td> <td>移除字符串首尾空白</td> </tr> <tr> <td>valueOf()</td> <td>返回某个字符串对象的原始值</td> </tr> </tbody></table><h2>相关文章</h2><p>JavaScript 标准参考手册：<a href=\"https://www.w3cschool.cn/javascript_guide/javascript_guide-f12o268v.html\" target=\"_blank\">JavaScript String对象</a></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 13,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JavaScript 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "17c9331e68942f38859f949bf22d563d",
      "chapter_level_two_parent_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_two_name": "JavaScript 事件",
      "chapter_level_two_url": "/javascript/js-events.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">事件</span> </h2><div><span class=\"color_h1\"><p>事件是可以被 JavaScript 侦测到的行为。</p></span></div> <hr> <p class=\"intro\">HTML 事件是发生在 HTML 元素上的事情。</p> <p class=\"intro\">当在 HTML 页面中使用 JavaScript 时， JavaScript 可以触发这些事件。</p> <hr> <h2>HTML 事件</h2> <p> HTML 事件可以是浏览器行为，也可以是用户行为。</p><p>HTML 网页中的每个元素都可以产生某些可以触发 JavaScript 函数的事件。<br></p> <p>以下是 HTML 事件的实例：</p> <ul> <li> HTML 页面完成加载</li> <li> HTML input 字段改变时</li> <li> HTML 按钮被点击</li> </ul> <p>通常，当事件发生时，你可以做些事情。</p> <p>在事件触发时 JavaScript 可以执行一些代码。</p> <p>HTML 元素中可以添加事件属性，使用 JavaScript 代码来添加 HTML 元素。</p> <p>单引号:</p><div class=\"code\"><div> &lt;<em>some-HTML-element</em> <em>some-event</em>=<strong>'</strong><em><strong>some JavaScript</strong></em><strong>'</strong>&gt;</div></div> <p>双引号:</p><div class=\"code\"><div> &lt;<em>some-HTML-element</em> <em>some-event</em>=<strong>\"</strong><em><strong>some JavaScript</strong></em><strong>\"</strong>&gt;</div></div> <p>在以下实例中，按钮元素中添加了 onclick 属性 (并加上代码):</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code\"> &lt;button onclick='getElementById(\"demo\").innerHTML=Date()'&gt;The time is?&lt;/button&gt;<br> </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_event_onclick1\" target=\"_blank\">尝试一下 »</a> </div> <p>以上实例中，JavaScript 代码将修改 id=\"demo\" 元素的内容。</p> <p>在下一个实例中，代码将修改自身元素的内容 (使用 <strong>this</strong>.innerHTML): </p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code\"> &lt;button onclick=\"this.innerHTML=Date()\"&gt;The time is?&lt;/button&gt;<br> </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_event_onclick\" target=\"_blank\">尝试一下 »</a> </div> <br><table class=\"lamp\"><tbody><tr> <th style=\"width:34px\"><img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" alt=\"Note\" style=\"height:32px;width:32px\"></th> <td>JavaScript代码通常是几行代码。比较常见的是通过事件属性来调用：</td> </tr></tbody></table> <br><div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code\"> &lt;button onclick=\"displayDate()\"&gt;The time is?&lt;/button&gt;</div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_events1\" target=\"_blank\">尝试一下 »</a> </div> <br><hr> <h2>常见的HTML事件</h2> <p>下面是一些常见的HTML事件的列表:</p> <table class=\"reference\" style=\"width: 100%\"> <tbody><tr> <th>事件</th> <th>描述</th> </tr> <tr> <td>onchange</td> <td> HTML 元素改变</td> </tr> <tr> <td>onclick</td> <td>用户点击 HTML 元素</td> </tr> <tr> <td>onmouseover</td> <td>用户在一个HTML元素上移动鼠标</td> </tr> <tr> <td>onmouseout</td> <td>用户从一个HTML元素上移开鼠标</td> </tr> <tr> <td>onkeydown</td> <td>用户按下键盘按键</td> </tr> <tr> <td>onload</td> <td>浏览器已完成页面的加载</td> </tr> </tbody></table> <p>更多事件列表: <a href=\"/jsref/dom-obj-event.html\"> JavaScript 参考手册 - HTML DOM 事件</a>。</p> <hr> <h2> JavaScript 可以做什么?</h2> <p>事件可以用于处理表单验证，用户输入，用户行为及浏览器动作:</p> <ul> <li>页面加载时触发事件</li> <li>页面关闭时触发事件</li> <li>用户点击按钮执行动作</li> <li>验证用户输入内容的合法性</li> <li>等等 ...</li> </ul> <p>可以使用多种方法来执行 JavaScript 事件代码：</p> <ul> <li>HTML 事件属性可以直接执行 JavaScript 代码</li> <li>HTML 事件属性可以调用 JavaScript 函数</li> <li>你可以为 HTML 元素指定自己的事件处理程序</li> <li>你可以阻止事件的发生。</li> <li>等等 ...</li> </ul> <table class=\"lamp\"><tbody><tr> <th style=\"width:34px\"><img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" alt=\"Note\" style=\"height:32px;width:32px\"></th> <td>在 HTML DOM 章节中你将会学到更多关于事件及事件处理程序的知识。</td></tr></tbody></table></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 12,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JavaScript 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "60acb14be8b19a28114c3af782482250",
      "chapter_level_two_parent_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_two_name": "JavaScript 作用域",
      "chapter_level_two_url": "/javascript/js-scope.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">作用域</span> </h2> \n<hr>\n<p class=\"intro\">作用域是可访问变量的集合。</p>\n<p class=\"intro\">在JavaScript中，能够定义全局作用域或者局部作用域。\n    <br>\n</p>\n<hr>\n <h2>JavaScript 作用域</h2> \n<p>在 JavaScript 中, 对象和函数同样也是变量。</p>\n<p><strong>在 JavaScript 中, 作用域为可访问变量，对象，函数的集合。</strong>\n</p>\n<p>JavaScript 函数作用域: 作用域在函数内修改。</p>\n<hr>\n <h2>JavaScript 局部作用域</h2> \n<p>变量在函数内声明，变量为局部作用域。</p>\n<p>局部变量：只能在函数内部访问。</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code\">// 此处不能调用 carName 变量\n        <br>\n        <br>function myFunction() {\n        <br>    var carName = \"Volvo\";\n        <br>\n        <br>    // 函数内可调用 carName 变量\n        <br>\n        <br>}</div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_scope_local\" target=\"_blank\">尝试一下 »</a> \n</div>\n<p>因为局部变量只作用于函数内，所以不同的函数可以使用相同名称的变量。</p>\n<p>局部变量在函数开始执行时创建，函数执行完后局部变量会自动销毁。</p>\n<hr>\n <h2> JavaScript 全局变量</h2> \n<p>变量在函数外定义，即为全局变量。</p>\n<p>全局变量有 <strong>全局作用域</strong>: 网页中所有脚本和函数均可使用。 </p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code\">var carName = \" Volvo\";\n        <br>\n        <br>// 此处可调用 carName 变量\n        <br>\n        <br>function myFunction() {\n        <br>\n        <br>    // 函数内可调用 carName 变量\n        <br>\n        <br>}</div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_scope_global\" target=\"_blank\">尝试一下 »</a> \n</div>\n<br>\n<p>如果变量在函数内没有声明（没有使用 var 关键字），该变量为全局变量。</p>\n<p>以下实例中 carName 在函数内，但是为全局变量。</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code\">// 此处可调用 carName 变量\n        <br>\n        <br>function myFunction() {\n        <br>    carName = \"Volvo\";\n        <br>\n        <br>    // 此处可调用 carName 变量\n        <br>\n        <br>}</div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_local_global\" target=\"_blank\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2> JavaScript 变量生命周期</h2> \n<p>JavaScript 变量生命周期在它声明时初始化。</p>\n<p>局部变量在函数执行完毕后销毁。</p>\n<p>全局变量在页面关闭后销毁。</p>\n<hr>\n <h2>函数参数</h2> \n<p>函数参数只在函数内起作用，是局部变量。</p>\n<hr>\n <h2>HTML 中的全局变量</h2> \n<p>在 HTML 中, 全局变量是 window 对象: 所有数据变量都属于 window 对象。</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code\">//此处可使用 window.carName\n        <br>\n        <br>function myFunction() {\n        <br>    carName = \"Volvo\";\n        <br>}</div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_scope_window\" target=\"_blank\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>你知道吗?</h2> \n<table class=\"lamp\">\n    <tbody>\n        <tr>\n            <th style=\"width:34px\">\n                <img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" alt=\"Note\" style=\"height:32px;width:32px\">\n            </th>\n            <td>你的全局变量，或者函数，可以覆盖 window 对象的变量或者函数。\n                <br>局部变量，包括 window 对象可以覆盖全局变量和函数。</td>\n        </tr>\n    </tbody>\n</table>\n<table class=\"lamp\">\n    <tbody>\n        <tr>\n            <th style=\"width:34px\">\n                <img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" alt=\"Note\" style=\"height:32px;width:32px\">\n            </th>\n            <td><p>在 ES6 中，提供了 let 关键字和 const 关键字。</p>\n<p>let 的声明方式与 var 相同，用 let 来代替 var 来声明变量，就可以把变量限制在当前代码块中。</p>\n<p>使用 const 声明的是常量，其值一旦被设定便不可被更改。</p></td></tr></tbody></table></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 11,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JavaScript 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "da465a0a7832117a6a987c8c96055ab8",
      "chapter_level_two_parent_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_two_name": "JavaScript 函数",
      "chapter_level_two_url": "/javascript/js-functions.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">函数</span> </h2><div><span class=\"color_h1\">在JavaScript中，函数即对象，可以随意地被程序操控，函数可以嵌套在其他函数中定义，</span>这样可以访问它们被定义时所处的作用域中的任何变量。</div> <hr> <p class=\"intro\">函数是由事件驱动的或者当它被调用时执行的可重复使用的代码块。</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code notranslate\"> &lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br> &lt;head&gt;<br> &lt;script&gt;<br><span class=\"marked\"> function myFunction()<br> {<br> alert(\"Hello World!\");<br> }</span><br> &lt;/script&gt;<br> &lt;/head&gt;<br><br> &lt;body&gt;<br> &lt;button onclick=\"<span class=\"marked\">myFunction()</span>\"&gt;Try it&lt;/button&gt;<br> &lt;/body&gt;<br> &lt;/html&gt;</div> </div> <br><hr> <h2>JavaScript 函数语法</h2> <p>函数就是包裹在花括号中的代码块，前面使用了关键词 function：</p> <div class=\"code notranslate\"><div> function <em>functionname</em>()<br> {<br><em>执行代码</em><br> }</div></div> <p>当调用该函数时，会执行函数内的代码。</p> <p>可以在某事件发生时直接调用函数（比如当用户点击按钮时），并且可由 JavaScript 在任何位置进行调用。</p> <table class=\"lamp \"><tbody><tr> <th width=\"34\"><img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" width=\"32\" height=\"32\" alt=\"lamp\"></th> <td>JavaScript 对大小写敏感。关键词 function 必须是小写的，并且必须以与函数名称相同的大小写来调用函数。</td> </tr></tbody></table><p><b>提示：</b>function 中的花括号是必需的，即使函数体内只包含一条语句，仍然必须使用花括号将其括起来。</p><br><hr> <h2>调用带参数的函数</h2> <p>在调用函数时，您可以向其传递值，这些值被称为参数。</p> <p>这些参数可以在函数中使用。</p> <p>您可以发送任意多的参数，由逗号 (,) 分隔：</p> <div class=\"code notranslate\"> myFunction(<em>argument1,argument2</em>)<br></div> <p>当您声明函数时，请把参数作为变量来声明： </p> <div class=\"code notranslate\"><div> function myFunction(<em><span class=\"marked\">var1</span></em>,<em><span class=\"marked\">var2</span></em>)<br>{<br><em>代码</em><br> }</div></div> <p>变量和参数必须以一致的顺序出现。第一个变量就是第一个被传递的参数的给定的值，以此类推。</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code notranslate\"> &lt;button onclick=\"myFunction(<span class=\"marked\">'Harry Potter'</span>,<span class=\"marked\">'Wizard'</span>)\"&gt;Try it&lt;/button&gt;<br><br> &lt;script&gt;<br> function myFunction(<span class=\"marked\">name</span>,<span class=\"marked\">job</span>)<br> {<br> alert(\"Welcome \" + <span class=\"marked\">name</span> + \", the \" + <span class=\"marked\"> job</span>);<br> }<br> &lt;/script&gt;</div> <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_function2\" class=\"tryitbtn\">尝试一下 »</a> </div> <p>上面的函数在按钮被点击时会提示 \"Welcome Harry Potter, the Wizard\"。</p> <p>函数很灵活，您可以使用不同的参数来调用该函数，这样就会给出不同的消息：</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code notranslate\"> &lt;button onclick=\"myFunction(<span class=\"marked\">'Harry Potter'</span>,<span class=\"marked\">'Wizard'</span>)\"&gt;Try it&lt;/button&gt;<br>&lt;button onclick=\"myFunction(<span class=\"marked\">'Bob'</span>,<span class=\"marked\">'Builder'</span>)\"&gt;Try it&lt;/button&gt;</div> <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_function3\" class=\"tryitbtn\">尝试一下 »</a> </div> <p>根据您点击的不同的按钮，上面的例子会提示 \"Welcome Harry Potter, the Wizard\" 或 \"Welcome Bob, the Builder\"。</p> <hr> <h2>带有返回值的函数</h2> <p>有时，我们会希望函数将值返回调用它的地方。</p> <p>通过使用 return 语句就可以实现。</p> <p>在使用 return 语句时，函数会停止执行，并返回指定的值。</p> <h3>语法</h3> <div class=\"code notranslate\"><div> function myFunction()<br> {<br>var x=5;<br>return x;<br>}</div></div> <p>上面的函数会返回值 5。</p> <p><strong>注意：</strong> 整个 JavaScript 并不会停止执行，仅仅是函数。JavaScript 将继续执行代码，从调用函数的地方。</p> <p>函数调用将被返回值取代：</p> <div class=\"code notranslate\"><div> var myVar=myFunction();</div></div> <p>myVar 变量的值是 5，也就是函数 \"myFunction()\" 所返回的值。</p> <p>即使不把它保存为变量，您也可以使用返回值：</p> <div class=\"code notranslate\"><div> document.getElementById(\"demo\").innerHTML=myFunction();</div></div> <p>\"demo\" 元素的 innerHTML 将成为 5，也就是函数 \"myFunction()\" 所返回的值。</p> <p>您可以使返回值基于传递到函数中的参数：</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <p>计算两个数字的乘积，并返回结果：</p> <div class=\"example_code notranslate\"> function myFunction(a,b)<br>{<br>return a*b;<br>}<br><br> document.getElementById(\"demo\").innerHTML=myFunction(4,3);<br> </div> <p>\"demo\" 元素的 innerHTML 将是：</p> <div class=\"example_code notranslate\"> 12 </div> <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_function_return\" class=\"tryitbtn\">尝试一下 »</a> </div> <p>在您仅仅希望退出函数时 ，也可使用 return 语句。返回值是可选的：</p> <div class=\"code notranslate\"><div> function myFunction(a,b)<br> {<br>if (a&gt;b)<br>  {<br>  <span class=\"marked\">return;</span><br>  }<br>x=a+b<br>}</div></div> <p>如果 a 大于 b，则上面的代码将退出函数，并不会计算 a 和 b 的总和。</p> <hr> <h2>局部 JavaScript 变量</h2> <p>在 JavaScript 函数内部声明的变量（使用 var）是<em>局部</em>变量，所以只能在函数内部访问它。（该变量的作用域是局部的）。</p> <p>您可以在不同的函数中使用名称相同的局部变量，因为只有声明过该变量的函数才能识别出该变量。</p> <p>只要函数运行完毕，本地变量就会被删除。</p><p>局部变量比同名全局变量的优先级高，所以局部变量会隐藏同名的全局变量。<br></p> <hr> <h2>全局 JavaScript 变量</h2> <p>在函数外声明的变量是<em>全局</em>变量，网页上的所有脚本和函数都能访问它。</p> <hr> <h2>JavaScript 变量的生存期</h2> <p>JavaScript 变量的生命期从它们被声明的时间开始。</p> <p>局部变量会在函数运行以后被删除。</p> <p>全局变量会在页面关闭后被删除。</p> <hr> <h2>向未声明的 JavaScript 变量分配值</h2> <p>如果您把值赋给尚未声明的变量，该变量将被自动作为全局变量声明。</p> <p>这条语句：</p> <div class=\"code notranslate\"><div> carname=\"Volvo\";</div></div> <p>将声明一个全局变量 carname，即使它在函数内执行。</p><p><br></p><p>JavaScript函数学习脑图</p><p><img src=\"https://atts.w3cschool.cn/attachments/image/20160809/1470709911288582.gif\" alt=\"\" class=\"\"><br></p><h2>相关文章</h2><p><a href=\"https://www.w3cschool.cn/umsno/umsno-yx7325wg.html\" target=\"_blank\">JavaScript学习笔记整理（6）：函数</a></p><p><br></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 10,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JavaScript 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "c4a356a81c2851d045aa88caf93b7808",
      "chapter_level_two_parent_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_two_name": "JavaScript 数据类型",
      "chapter_level_two_url": "/javascript/js-datatypes.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">数据类型</span> </h2> <hr> <p class=\"intro\">字符串（String）、数字(Number)、布尔(Boolean)、数组(Array)、对象(Object)、空（Null）、未定义（Undefined）。<br></p> <hr> <h2>JavaScript 拥有动态类型</h2> <p>JavaScript 拥有动态类型。这意味着相同的变量可用作不同的类型：</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code notranslate\"> var x;               // x 为 undefined<br>var x = 5;           // 现在 x 为数字<br> var x = \"John\";      // 现在 x 为字符串</div> </div> <br><hr> <h2>JavaScript 字符串</h2> <p>字符串是存储字符（比如 \"Bill Gates\"）的变量。</p> <p>字符串可以是引号中的任意文本。您可以使用单引号或双引号：</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code notranslate\"> var carname=\"Volvo XC60\";<br> var carname='Volvo XC60';</div> </div> <p>您可以在字符串中使用引号，只要不匹配包围字符串的引号即可：</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code notranslate\"> var answer=\"It's alright\";<br> var answer=\"He is called 'Johnny'\";<br> var answer='He is called \"Johnny\"';</div> <br><a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_datatypes_string\">尝试一下 »</a> </div> <p>您将在本教程的高级部分学到更多关于字符串的知识。</p> <hr> <h2>JavaScript 数字</h2> <p>JavaScript 只有一种数字类型。数字可以带小数点，也可以不带：<br></p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code notranslate\"> var x1=34.00;      // 使用小数点来写<br> var x2=34;         // 不使用小数点来写</div> </div> <p>极大或极小的数字可以通过科学（指数）计数法来书写：</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code notranslate\"> var y=123e5;      // 12300000<br> var z=123e-5;     // 0.00123</div> <br><a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_numbers\">尝试一下 »</a> </div> <p>您将在本教程的高级部分学到更多关于数字的知识。</p> <hr> <h2>JavaScript 布尔</h2> <p>布尔（逻辑）只能有两个值：true 或 false。</p><div class=\"code notranslate\"><div> var x=true;<br> var y=false;</div></div> <p>布尔常用在条件测试中。您将在本教程稍后的章节中学到更多关于条件测试的知识。</p> <hr> <h2>JavaScript 数组</h2> <p> 下面的代码创建名为 cars 的数组：<span style='background-color: rgb(239, 239, 239); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'> </span></p><div class=\"code notranslate\"><div> var cars=new Array();<br> cars[0]=\"Saab\";<br> cars[1]=\"Volvo\";<br> cars[2]=\"BMW\";</div></div> <p>或者 (condensed array):</p><div class=\"code notranslate\"><div> var cars=new Array(\"Saab\",\"Volvo\",\"BMW\");</div></div> <p>或者 (literal array):</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code notranslate\"> var cars=[\"Saab\",\"Volvo\",\"BMW\"]; </div> <br><a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_datatypes_array\">尝试一下 »</a> </div> <p>数组下标是基于零的，所以第一个项目是 [0]，第二个是 [1]，以此类推。</p> <p>您将在本教程稍后的章节中学到更多关于数组的知识。</p> <hr> <h2>JavaScript 对象</h2> <p>对象由花括号分隔。在括号内部，对象的属性以名称和值对的形式 (name : value) 来定义。属性由逗号分隔：</p><div class=\"code notranslate\"><div> var person={firstname:\"John\", lastname:\"Doe\", id:5566};</div></div> <p>上面例子中的对象 (person) 有三个属性：firstname、lastname 以及 id。</p> <p>空格和折行无关紧要。声明可横跨多行：</p><div class=\"code notranslate\"><div> var person={<br> firstname : \"John\",<br> lastname  : \"Doe\",<br> id        :  5566<br> };</div></div> <p>对象属性有两种寻址方式： </p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code notranslate\"> name=person.lastname;<br> name=person[\"lastname\"]; </div> <br><a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_datatypes_object\">尝试一下 »</a> </div> <p>您将在本教程稍后的章节中学到更多关于对象的知识。</p> <hr> <h2>Undefined 和 Null</h2> <p>Undefined 这个值表示变量不含有值。</p> <p>可以通过将变量的值设置为 null 来清空变量。</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code notranslate\"> cars=null;<br> person=null;<br> </div> <br><a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_undefined\">尝试一下 »</a> </div> <br><hr> <h2>声明变量类型</h2> <p>当您声明新变量时，可以使用关键词 \"new\" 来声明其类型： </p> <div class=\"code notranslate\"> var carname=new String;<div> var x=      new Number;<br> var y=      new Boolean;<br> var cars=   new Array;<br> var person= new Object;</div></div><table class=\"lamp   \"><tbody><tr> <th width=\"34\"><img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" width=\"32\" height=\"32\" alt=\"lamp\"></th> <td>JavaScript 变量均为对象。当您声明一个变量时，就创建了一个新的对象。</td></tr></tbody></table><p><b>提示：</b>JavaScript具有隐含的全局概念，意味着你不声明的任何变量都会成为一个全局对象属性。</p><h2>JavaScript数据类型学习脑图：</h2><p><img src=\"https://atts.w3cschool.cn/attachments/image/20160809/1470710140220491.gif\" alt=\"\"><br></p><p><br></p><h2>相关文章</h2><p>JavaScript 标准参考教程：<a href=\"https://www.w3cschool.cn/javascript_guide/javascript_guide-fzsj268d.html\" target=\"_blank\">JavaScript数据类型</a></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 9,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JavaScript 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "a7736c7f53fb8cb4ae8bffce9dc43679",
      "chapter_level_two_parent_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_two_name": "JavaScript 变量",
      "chapter_level_two_url": "/javascript/js-variables.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\"> 变量</span> </h2> \n<hr>\n<p class=\"intro\">变量是用于存储信息的\"容器\"。</p>\n<div class=\"example\">\n     <h2 class=\"example_head\">实例</h2> \n    <div class=\"example_code notranslate\">var x=5;\n        <br>var y=6;\n        <br>var z=x+y;\n        <br>\n    </div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_data1\" target=\"_blank\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>就像代数那样</h2> \n<p>x=5\n    <br>y=6\n    <br>z=x+y</p>\n<p>在代数中，我们使用字母（比如 x）来保存值（比如 5）。</p>\n<p>通过上面的表达式 z=x+y，我们能够计算出 z 的值为 11。</p>\n<p>在 JavaScript 中，这些字母被称为变量。</p>\n<table class=\"lamp \">\n    <tbody>\n        <tr>\n            <th width=\"34\">\n                <img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" width=\"32\" height=\"32\" alt=\"lamp\">\n            </th>\n            <td>您可以把变量看做存储数据的容器。</td>\n        </tr>\n    </tbody>\n</table>\n<br>\n<hr>\n <h2>JavaScript 变量</h2> \n<p>与代数一样，JavaScript 变量可用于存放值（比如 x=5）和表达式（比如 z=x+y）。</p>\n<p>变量可以使用短名称（比如 x 和 y），也可以使用描述性更好的名称（比如 age, sum, totalvolume）。</p>\n<ul>\n    <li>变量必须以字母开头</li>\n    <li>变量也能以 $ 和 _ 符号开头（不过我们不推荐这么做）</li>\n    <li>变量名称对大小写敏感（y 和 Y 是不同的变量）</li>\n</ul>\n<table class=\"lamp \">\n    <tbody>\n        <tr>\n            <th width=\"34\">\n                <img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" width=\"32\" height=\"32\" alt=\"lamp\">\n            </th>\n            <td>JavaScript 语句和 JavaScript 变量都对大小写敏感。</td>\n        </tr>\n    </tbody>\n</table>\n<br>\n<hr>\n <h2>JavaScript 数据类型</h2> \n<p>JavaScript 变量还能保存其他数据类型，比如文本值 (name=\"Bill Gates\")。</p>\n<p>在 JavaScript 中，类似 \"Bill Gates\" 这样一条文本被称为字符串。</p>\n<p>JavaScript 变量有很多种类型，但是现在，我们只关注数字和字符串。</p>\n<p>当您向变量分配文本值时，应该用双引号或单引号包围这个值。</p>\n<p>当您向变量赋的值是数值时，不要使用引号。如果您用引号包围数值，该值会被作为文本来处理。</p>\n<div class=\"example\">\n     <h2 class=\"example_head\">实例</h2> \n    <div class=\"example_code notranslate\">var pi=3.14;\n        <br>var person=\"John Doe\";\n        <br>var answer='Yes I am!';\n        <br>\n    </div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_data2\" target=\"_blank\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>声明（创建） JavaScript 变量</h2> \n<p>在 JavaScript 中创建变量通常称为\"声明\"变量。</p>\n<p>我们使用 var 关键词来声明变量：<span style='background-color: rgb(239, 239, 239); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'>    </span></p><div class=\"code notranslate\"><div>var carname;</div></div>\n<p>变量声明之后，该变量是空的（它没有值）。</p>\n<p>如需向变量赋值，请使用等号：<span style='background-color: rgb(239, 239, 239); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'>    </span></p><div class=\"code notranslate\"><div>carname=\"Volvo\";</div></div>\n<p>不过，您也可以在声明变量时对其赋值：<span style='background-color: rgb(239, 239, 239); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'>    </span></p><div class=\"code notranslate\"><div>var carname=\"Volvo\";</div></div>\n<p>在下面的例子中，我们创建了名为 carname 的变量，并向其赋值 \"Volvo\"，然后把它放入 id=\"demo\" 的 HTML 段落中：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">&lt;p id=\"demo\"&gt;&lt;/p&gt;\n        <br>var carname=\"Volvo\";\n        <br>document.getElementById(\"demo\").innerHTML=carname;</div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_variables1\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<p><b>提示：</b>你可以通过本站的JavaScript编程实战部分来练习如何<a href=\"https://www.w3cschool.cn/codecamp/declare-javascript-variables.html\" target=\"_blank\" style=\"background-color: rgb(255, 255, 255);\">声明JavaScript变量</a>。</p>\n<table class=\"lamp \">\n    <tbody>\n        <tr>\n            <th width=\"34\">\n                <img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" width=\"32\" height=\"32\" alt=\"lamp\">\n            </th>\n            <td>一个好的编程习惯是，在代码开始处，统一对需要的变量进行声明。</td>\n        </tr>\n    </tbody>\n</table>\n<br>\n<hr>\n <h2>一条语句，多个变量</h2> \n<p>您可以在一条语句中声明很多变量。该语句以 var 开头，并使用逗号分隔变量即可：<span style='background-color: rgb(239, 239, 239); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'>    </span></p><div class=\"code notranslate\"><div>var lastname=\"Doe\", age=30, job=\"carpenter\";</div></div>\n<p>声明也可横跨多行：<span style='background-color: rgb(239, 239, 239); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'>    </span></p><div class=\"code notranslate\"><div>var lastname=\"Doe\",        <br>age=30,        <br>job=\"carpenter\";</div></div>\n<br>\n<hr>\n <h2>Value = undefined</h2> \n<p>在计算机程序中，经常会声明无值的变量。未使用值来声明的变量，其值实际上是 undefined。</p>\n<p>在执行过以下语句后，变量 carname 的值将是 undefined：<span style='background-color: rgb(239, 239, 239); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'>    </span></p><div class=\"code notranslate\"><div>var carname;</div></div>\n<br>\n<hr>\n <h2>重新声明 JavaScript 变量</h2> \n<p>如果重新声明 JavaScript 变量，该变量的值不会丢失：</p>\n<p>在以下两条语句执行后，变量 carname 的值依然是 \"Volvo\"：<span style='background-color: rgb(239, 239, 239); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'>    </span></p><div class=\"code notranslate\"><div>var carname=\"Volvo\";        <br>var carname;</div></div>\n<br>\n<hr>\n <h2>JavaScript 算数</h2> \n<p>您可以通过 JavaScript 变量来做算数，使用的是 = 和 + 这类运算符：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">y=5;\n        <br>x=y+2;</div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_oper_add\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<p>您将在本教程稍后的章节学到更多有关 JavaScript 运算符的知识。</p>\n<p>您可以在<a href=\"https://www.w3cschool.cn/codecamp/list?pename=basic_javascript_camp\" target=\"_blank\">JavaScript编程实战</a>部分中了解JavaScript算数。</p>\n<p></p>\n\n<h2>JavaScript变量学习图</h2>\n\n<div>\n    <img src=\"https://atts.w3cschool.cn/attachments/image/20160809/1470709822216279.gif\" alt=\"\">\n    <br>\n</div></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 8,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JavaScript 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "a78e7926594ced9b105b1ab41f942a69",
      "chapter_level_two_parent_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_two_name": "JavaScript 注释",
      "chapter_level_two_url": "/javascript/js-comments.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">注释</span> </h2> \n<hr>\n<p class=\"intro\">JavaScript 注释可用于提高代码的可读性。</p>\n<hr>\n <h2>JavaScript 注释</h2> \n<p>JavaScript 不会执行注释。</p>\n<p>我们可以添加注释来对 JavaScript 进行解释，或者提高代码的可读性。</p>\n<p>单行注释以 // 开头。</p>\n<p>本例用单行注释来解释代码：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">// 输出标题：\n        <br>document.getElementById(\"myH1\").innerHTML=\"欢迎来到我的主页\";\n        <br>// 输出段落：\n        <br>document.getElementById(\"myP\").innerHTML=\"这是我的第一个段落。\";</div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_comments1\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>JavaScript 多行注释</h2> \n<p>多行注释以 /* 开始，以 */ 结尾。</p>\n<p>下面的例子使用多行注释来解释代码：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">/*\n        <br>下面的这些代码会输出\n        <br>一个标题和一个段落\n        <br>并将代表主页的开始\n        <br>*/\n        <br>document.getElementById(\"myH1\").innerHTML=\"欢迎来到我的主页\";\n        <br>document.getElementById(\"myP\").innerHTML=\"这是我的第一个段落。\";</div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_comments2\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>使用注释来阻止执行</h2> \n<p>在下面的例子中，注释用于阻止其中一条代码行的执行（可用于调试）：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">//document.getElementById(\"myH1\").innerHTML=\"欢迎来到我的主页\";\n        <br>document.getElementById(\"myP\").innerHTML=\"这是我的第一个段落。\";</div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_comments3\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<p>在下面的例子中，注释用于阻止代码块的执行（可用于调试）：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">/*\n        <br>document.getElementById(\"myH1\").innerHTML=\"欢迎来到我的主页\";\n        <br>document.getElementById(\"myP\").innerHTML=\"这是我的第一个段落。\";\n        <br>*/</div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_comments4\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<div>\n    <br>\n</div>\n<hr>\n <h2>在行末使用注释</h2> \n<p>在下面的例子中，我们把注释放到代码行的结尾处：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">var x=5;    // 声明 x 并把 5 赋值给它\n        <br>var y=x+2;  // 声明 y 并把 x+2 赋值给它</div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_comments5\" class=\"tryitbtn\">尝试一下 »</a> \n</div><hr>\n<h2>相关练习</h2>\n<p>《JavaScript编程实战》：<a href=\"https://www.w3cschool.cn/codecamp/comment-your-javascript-code.html\" target=\"_blank\">JavaScript 注释语句操作</a></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 7,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JavaScript 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "0c912aa7a84e64fa62bc4a11e8b74cc3",
      "chapter_level_two_parent_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_two_name": "JavaScript 语句",
      "chapter_level_two_url": "/javascript/js-statements.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">语句</span> </h2> \n<hr>\n<p class=\"intro\">JavaScript 语句向浏览器发出的命令。语句的作用是告诉浏览器该做什么。</p>\n<hr>\n <h2>JavaScript 语句</h2> \n<p>JavaScript 语句是发给浏览器的命令。</p>\n<p>这些命令的作用是告诉浏览器要做的事情。</p>\n<p>下面的 JavaScript 语句向 id=\"demo\" 的 HTML 元素输出文本 \"Hello Dolly\" ：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate jsHigh\">document.getElementById(<span class=\"highVAL\">\"demo\"</span>).innerHTML = <span class=\"highVAL\">\"你好 Dolly.\"</span>;</div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_statement\" target=\"_blank\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>分号 ;</h2> \n<p>分号用于分隔 JavaScript 语句。</p>\n<p>通常我们在每条可执行的语句结尾添加分号。</p>\n<p>使用分号的另一用处是在一行中编写多条语句。</p>\n<div class=\"example\">Writing:\n    <br>\n    <br>\n    <div class=\"example_code\">a = <span class=\"highVAL\">5</span>;\n        <br>b = <span class=\"highVAL\">6</span>;\n        <br>c = a + b;\n        <br>\n    </div>\n    <p>Is the same as writing:</p>\n    <div class=\"example_code\">a = <span class=\"highVAL\">5</span>; b = <span class=\"highVAL\">6</span>; c = a + b;</div>\n    <br> <a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_semicolon\" target=\"_blank\">尝试一下 »</a> \n</div>\n<table class=\"lamp\">\n    <tbody>\n        <tr>\n            <th width=\"34\">\n                <img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" width=\"32\" height=\"32\" alt=\"lamp\">\n            </th>\n            <td>您也可能看到不带有分号的案例。\n                <br>在 JavaScript 中，用分号来结束语句是可选的。</td>\n        </tr>\n    </tbody>\n</table>\n<br>\n<hr>\n <h2>JavaScript 代码</h2> \n<p>JavaScript 代码是 JavaScript 语句的序列。</p>\n<p>浏览器按照编写顺序依次执行每条语句。</p>\n<p>本例向网页输出一个标题和两个段落：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">document.getElementById(\"demo\").innerHTML=\"你好 Dolly\";\n        <br>document.getElementById(\"myDIV\").innerHTML=\"你最近怎么样?\";\n        <br>\n    </div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_statements\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>JavaScript 代码块</h2> \n<p>JavaScript 可以分批地组合起来。</p>\n<p>代码块以左花括号开始，以右花括号结束。</p>\n<p>代码块的作用是一并地执行语句序列。</p>\n<p>本例向网页输出一个标题和两个段落：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">function myFunction()\n        <br>{\n        <br>document.getElementById(\"demo\").innerHTML=\"你好Dolly\";\n        <br>document.getElementById(\"myDIV\").innerHTML=\"你最近怎么样?\";\n        <br>}\n        <br>\n    </div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_blocks\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<p>您将在稍后的章节学到更多有关函数的知识。</p>\n<hr>\n <h2>JavaScript 语句标识符</h2> \n<p>JavaScript 语句通常以一个 <strong>语句标识符</strong> 为开始，并执行该语句。</p>\n<p>语句标识符是保留关键字不能作为变量名使用。</p>\n<p>下表列出了 JavaScript 语句标识符 (关键字) ：</p>\n<table class=\"reference\">\n    <tbody>\n        <tr>\n            <th>语句</th>\n            <th>描述</th>\n        </tr>\n        <tr>\n            <td>break</td>\n            <td>用于跳出循环。</td>\n        </tr>\n        <tr>\n            <td>catch</td>\n            <td>语句块，在 try 语句块执行出错时执行 catch 语句块。</td>\n        </tr>\n        <tr>\n            <td>continue</td>\n            <td>跳过循环中的一个迭代。</td>\n        </tr>\n        <tr>\n            <td>do ... while</td>\n            <td>执行一个语句块，在条件语句为 true 时继续执行该语句块。</td>\n        </tr>\n        <tr>\n            <td>for</td>\n            <td>在条件语句为 true 时，可以将代码块执行指定的次数。</td>\n        </tr>\n        <tr>\n            <td>for ... in</td>\n            <td>用于遍历数组或者对象的属性（对数组或者对象的属性进行循环操作）。</td>\n        </tr>\n        <tr>\n            <td>function</td>\n            <td>定义一个函数</td>\n        </tr>\n        <tr>\n            <td>if ... else</td>\n            <td>用于基于不同的条件来执行不同的动作。</td>\n        </tr>\n        <tr>\n            <td>return</td>\n            <td>退出函数</td>\n        </tr>\n        <tr>\n            <td>switch</td>\n            <td>用于基于不同的条件来执行不同的动作。</td>\n        </tr>\n        <tr>\n            <td>throw</td>\n            <td>抛出（生成）错误 。</td>\n        </tr>\n        <tr>\n            <td>try</td>\n            <td>实现错误处理，与 catch 一同使用。</td>\n        </tr>\n        <tr>\n            <td>var</td>\n            <td>声明一个变量。</td>\n        </tr>\n        <tr>\n            <td>while</td>\n            <td>当条件语句为 true 时，执行语句块。</td>\n        </tr>\n    </tbody>\n</table>\n<p>\n    <br>\n</p>\n<hr>\n\n<h2>空格</h2>\n\n<p>JavaScript 会忽略多余的空格。您可以向脚本添加空格，来提高其可读性。下面的两行代码是等效的：<span style='background-color: rgb(239, 239, 239); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'>    </span></p><div class=\"code notranslate\"><div>var person=\"Hege\";\nvar person = \"Hege\";</div></div>\n\n<hr>\n\n<h2>对代码行进行折行</h2>\n\n<p>您可以在文本字符串中使用反斜杠对代码行进行换行。下面的例子会正确地显示：<span style='background-color: rgb(239, 239, 239); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'>    </span><span style='background-color: rgb(239, 239, 239); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'>    </span></p><div class=\"code notranslate\"><div>document.write(\"你好 \\ W3Cschool!\");</div></div>\n<p>不过，您不能像这样折行：<span style='background-color: rgb(239, 239, 239); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'>    </span><span style='background-color: rgb(239, 239, 239); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'>   </span></p><div class=\"code notranslate\"><div>document.write \\ (\"你好W3Cschool!\");</div></div>\n<hr>\n\n<h2>JavaScript 语句练习</h2>\n\n<p><a href=\"https://www.w3cschool.cn/codecamp/comment-your-javascript-code.html\" target=\"_blank\">JavaScript 注释语句操作</a>\n\n</p>\n<p>练习如何在JavaScript中对语句进行注释，被注释的代码块在JavaScript之中是不会被运行的。 </p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 6,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JavaScript 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "665db1563f57e493a75c3df63413bd05",
      "chapter_level_two_parent_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_two_name": "JavaScript 语法",
      "chapter_level_two_url": "/javascript/js-syntax.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">语法</span> </h2> \n<hr>\n<p class=\"intro\">JavaScript 是一个程序语言。语法规则定义了语言结构。</p>\n<hr>\n <h2>JavaScript 语法</h2> \n<p>JavaScript 是一个脚本语言。</p>\n<p>它是一个轻量级，但功能强大的编程语言。</p>\n<hr>\n <h2>JavaScript 字面量</h2> \n<p>在编程语言中，一个字面量是一个常量，如 3.14。</p>\n<p><strong>数字（Number）字面量</strong> 可以是整数或者是小数，或者是科学计数(e)。</p>\n<div class=\"example\">\n    <div class=\"example_code\">3.14\n        <br>\n        <br>1001\n        <br>\n        <br>123e5</div>\n    <br><a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_syntax_numbers\" link23623207019662873=\"1\">尝试一下 »</a> \n</div>\n<p><strong>字符串（String）字面量</strong> 可以使用单引号或双引号 :</p>\n<div class=\"example\">\n    <div class=\"example_code\">\"John Doe\"\n        <br>\n        <br>'John Doe'</div>\n    <br><a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_syntax_strings\" link23623207019662873=\"1\">尝试一下 »</a> \n</div>\n<p><strong>表达式字面量</strong> 用于计算：</p>\n<div class=\"example\">\n    <div class=\"example_code\">5 + 6\n        <br>\n        <br>5 * 10</div>\n    <br><a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_syntax_expressions\" link23623207019662873=\"1\">尝试一下 »</a> \n</div>\n<p><strong>数组（Array）字面量</strong> 定义一个数组：</p>\n<div class=\"example\">\n    <div class=\"example_code\">[40, 100, 1, 5, 25, 10]</div>\n</div>\n<p><strong>对象（Object）字面量</strong> 定义一个对象：</p>\n<div class=\"example\">\n    <div class=\"example_code\">{firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"}</div>\n</div>\n<p><strong>函数（Function）字面量</strong> 定义一个函数：</p>\n<div class=\"example\">\n    <div class=\"example_code\">function myFunction(a, b) { return a * b;}</div>\n</div>\n<br>\n<hr>\n <h2>JavaScript 变量</h2> \n<p>在编程语言中，变量用于存储数据值。</p>\n<p>JavaScript 使用关键字 <strong>var</strong> 来定义变量， 使用等号来为变量赋值：</p>\n<div class=\"example\">\n    <div class=\"example_code\">var x, length\n        <br>\n        <br>x = 5\n        <br>\n        <br>length = 6</div>\n    <br><a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_syntax_variables\" link23623207019662873=\"1\">尝试一下 »</a> \n</div>\n<p>变量可以通过变量名访问。在指令式语言中，变量通常是可变的。字面量是一个恒定的值。</p>\n<table class=\"lamp    \">\n    <tbody>\n        <tr>\n            <th style=\"width:34px\">\n                <img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" alt=\"Note\" style=\"height:32px;width:32px\">\n            </th>\n            <td>变量是一个<strong>名称</strong>。字面量是一个<strong>值</strong>。</td>\n        </tr>\n    </tbody>\n</table>\n<hr>\n <h2>JavaScript 操作符</h2> \n<p>JavaScript使用 <strong>算术运算符</strong> 来计算值:</p>\n<div class=\"example\">\n    <div class=\"example_code\">(5 + 6) * 10\n        <br>\n    </div>\n    <br><a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_syntax_operators\" link23623207019662873=\"1\">尝试一下 »</a> \n</div>\n<p>JavaScript使用<strong>赋值运算符</strong>给变量赋值：</p>\n<div class=\"example\">\n    <div class=\"example_code\">x = 5\n        <br>y = 6\n        <br>z = (x + y) * 10</div>\n    <br><a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_syntax_assign\" link23623207019662873=\"1\">尝试一下 »</a> \n</div>\n<p>JavaScript语言有多种类型的运算符：</p>\n<table class=\"reference    \">\n    <tbody>\n        <tr>\n            <th>Type</th>\n            <th>实例</th>\n            <th>描述</th>\n        </tr>\n        <tr>\n            <td>赋值，算术和位运算符</td>\n            <td>=  +  -  *  /</td>\n            <td>在 JS 运算符中描述</td>\n        </tr>\n        <tr>\n            <td>条件，比较及逻辑运算符</td>\n            <td>==  != &lt;  &gt; </td>\n            <td>在 JS 比较运算符中描述</td>\n        </tr>\n    </tbody>\n</table>\n<br>\n<hr>\n <h2>JavaScript 语句</h2> \n<p>在 HTML 中，JavaScript 语句向浏览器发出的命令。浏览器通过 JavaScript 语句明白要执行什么操作。</p>\n<p>语句是用分号分隔：</p>\n<div class=\"example\">\n    <div class=\"example_code\">x = 5 + 6;\n        <br>y = x * 10;</div>\n</div>\n<br>\n<hr>\n <h2>JavaScript 关键词</h2> \n<p>JavaScript 语句通常以<strong>关键词</strong>为开头。 <strong>var</strong> 关键词告诉浏览器创建一个新的变量：</p>\n<div class=\"example\">\n    <div class=\"example_code\">var x = 5 + 6;\n        <br>var y = x * 10;</div>\n</div>\n<br>\n<hr>\n\n<h2>JavaScript 标识符</h2> \n<p>和其他任何编程语言一样，JavaScript 保留了一些标识符为自己所用。</p>\n<p>JavaScript 同样保留了一些关键字，这些关键字在当前的语言版本中并没有使用，但在以后 JavaScript 扩展中会用到。</p>\n<p>JavaScript 标识符必须以字母、下划线（_）或美元符（$）开始。</p>\n<p>后续的字符可以是字母、数字、下划线或美元符（数字是不允许作为首字符出现的，以便 JavaScript 可以轻易区分开标识符和数字）。</p>\n<p>以下是 JavaScript 中最​​重要的保留字（按字母顺序）：</p>\n<table class=\"reference    \">\n    <tbody>\n        <tr>\n            <td>abstract</td>\n            <td>else</td>\n            <td>instanceof</td>\n            <td>super</td>\n        </tr>\n        <tr></tr>\n        <tr>\n            <td>boolean</td>\n            <td>enum</td>\n            <td>int</td>\n            <td>switch</td>\n        </tr>\n        <tr></tr>\n        <tr>\n            <td>break</td>\n            <td>export</td>\n            <td>interface</td>\n            <td>synchronized</td>\n        </tr>\n        <tr></tr>\n        <tr>\n            <td>byte</td>\n            <td>extends</td>\n            <td>let</td>\n            <td>this</td>\n        </tr>\n        <tr></tr>\n        <tr>\n            <td>case</td>\n            <td>false</td>\n            <td>long</td>\n            <td>throw</td>\n        </tr>\n        <tr></tr>\n        <tr>\n            <td>catch</td>\n            <td>final</td>\n            <td>native</td>\n            <td>throws</td>\n        </tr>\n        <tr></tr>\n        <tr>\n            <td>char</td>\n            <td>finally</td>\n            <td>new</td>\n            <td>transient</td>\n        </tr>\n        <tr></tr>\n        <tr>\n            <td>class</td>\n            <td>float</td>\n            <td>null</td>\n            <td>true</td>\n        </tr>\n        <tr></tr>\n        <tr>\n            <td>const</td>\n            <td>for</td>\n            <td>package</td>\n            <td>try</td>\n        </tr>\n        <tr></tr>\n        <tr>\n            <td>continue</td>\n            <td>function</td>\n            <td>private</td>\n            <td>typeof</td>\n        </tr>\n        <tr></tr>\n        <tr>\n            <td>debugger</td>\n            <td>goto</td>\n            <td>protected</td>\n            <td>var</td>\n        </tr>\n        <tr></tr>\n        <tr>\n            <td>default</td>\n            <td>if</td>\n            <td>public</td>\n            <td>void</td>\n        </tr>\n        <tr></tr>\n        <tr>\n            <td>delete</td>\n            <td>implements</td>\n            <td>return</td>\n            <td>volatile</td>\n        </tr>\n        <tr></tr>\n        <tr>\n            <td>do</td>\n            <td>import</td>\n            <td>short</td>\n            <td>while</td>\n        </tr>\n        <tr></tr>\n        <tr>\n            <td>double</td>\n            <td>in</td>\n            <td>static</td>\n            <td>with</td>\n        </tr>\n        <tr></tr>\n    </tbody>\n</table>\n<hr>\n <h2>JavaScript 注释</h2> \n<p>不是所有的 JavaScript 语句都是\"命令\"。双斜杠 <strong>//</strong> 后的内容将会被浏览器忽略：</p>\n<div class=\"example\">\n    <div class=\"example_code\">// 我不会执行</div>\n</div>\n<hr>\n <h2>JavaScript 数据类型</h2> \n<p>JavaScript 有多种数据类型：数字，字符串，数组，对象等等：</p>\n<div class=\"example\">\n    <div class=\"example_code\">var length = 16;                                  // Number 通过数字字面量赋值\n        <br>var points = x * 10;                              // Number 通过表达式字面量赋值\n        <br>var lastName = \"Johnson\";                         // String 通过字符串字面量赋值\n        <br>var cars = [\"Saab\", \"Volvo\", \"BMW\"];              // Array  通过数组字面量赋值\n        <br>var person = {firstName:\"John\", lastName:\"Doe\"};  // Object 通过对象字面量赋值</div>\n</div>\n<br>\n<hr>\n <h2>数据类型的概念</h2> \n<p>编程语言中，数据类型是一个非常重要的内容。</p>\n<p>为了可以操作变量，了解数据类型的概念非常重要。</p>\n<p>如果没有使用数据类型，以下实例将无法执行：</p>\n<div class=\"example\">\n    <div class=\"example_code\">16 + \"Volvo\"</div>\n</div>\n<p>16 加上 \"Volvo\" 是如何计算呢? 以上会产生一个错误还是输出以下结果呢？</p>\n<div class=\"example\">\n    <div class=\"example_code\">\"16Volvo\"</div>\n</div>\n<p>你可以在浏览器尝试执行以上代码查看效果。</p>\n<p>在接下来的章节中你将学到更多关于数据类型的知识。</p>\n<hr>\n <h2>JavaScript 函数</h2> \n<p>JavaScript 语句可以写在函数内，函数可以重复引用：</p>\n<p> <strong>引用一个函数</strong> = 调用函数(执行函数内的语句)。</p>\n<div class=\"example\">\n    <div class=\"example_code\">function myFunction(a, b) {\n        <br>    return a * b;                                // 返回 a 乘于 b 的结果\n        <br>}</div>\n</div>\n<br>\n<hr>\n <h2>JavaScript 对大小写敏感。</h2> \n<p>JavaScript 对大小写是敏感的。</p>\n<p>当编写 JavaScript 语句时，请留意是否关闭大小写切换键。</p>\n<p>函数 <strong>getElementById</strong> 与 <strong>getElementbyID</strong> 是不同的。</p>\n<p>同样，变量 <strong>myVariable</strong> 与 <strong>MyVariable</strong> 也是不同的。</p>\n<p><b>提示：</b>在本站的编程实战中，你可以通过练习<a href=\"https://www.w3cschool.cn/codecamp/understanding-case-sensitivity-in-variables.html\" target=\"_blank\">理解JavaScript变量的大小写敏感性</a>。</p>\n<hr>\n <h2>JavaScript 字符集</h2> \n<p>JavaScript 使用 Unicode 字符集。</p>\n<p>Unicode 覆盖了所有的字符，包含标点等字符。</p>\n<p>如需进一步了解，请学习我们的 <a href=\"/charsets/ref-html-utf8.html\" link23623207019662873=\"1\">完整 Unicode 参考手册</a>。</p>\n<hr>\n <h2>您知道吗?</h2> \n<table class=\"lamp     clicked\">\n    <tbody>\n        <tr>\n            <th style=\"width:34px\">\n                <img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" alt=\"Note\" style=\"height:32px;width:32px\">\n            </th>\n            <td>JavaScript 中，常见的是驼峰法的命名规则，如 lastName (而不是lastname)。</td>\n        </tr>\n    </tbody>\n</table>\n<table class=\"lamp\">\n    <tbody>\n        <tr>\n            <th style=\"width:34px\">\n                <img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" alt=\"Note\" style=\"height:32px;width:32px\">\n            </th>\n            <td>JavaScript 是脚本语言。浏览器会在读取代码时，逐行地执行脚本代码。而对于传统编程来说，会在执行前对所有代码进行编译。</td>\n        </tr>\n    </tbody>\n</table></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 5,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JavaScript 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "d40f2d485e2cbb1978aefee7e74fd02e",
      "chapter_level_two_parent_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_two_name": "JavaScript 输出",
      "chapter_level_two_url": "/javascript/js-output.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">输出</span></h2> \n<hr>\n<p>JavaScript 没有任何打印或者输出的函数。</p>\n<p>JavaScript 可以通过不同的方式来输出数据：</p>\n<ul>\n    <li>使用 <strong>window.alert()</strong> 弹出警告框。</li>\n    <li>使用 <strong>document.write()</strong> 方法将内容写到 HTML 文档中。</li>\n    <li>使用 <strong>innerHTML</strong> 写入到 HTML 元素。</li>\n    <li>使用 <strong>console.log()</strong> 写入到浏览器的控制台。</li>\n</ul>\n<hr>\n <h2></h2>\n<h2>使用 window.alert()</h2>\n<p>你可以弹出警告框来显示数据：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code\"> <span class=\"highLT\"></span><span>&lt;</span><span>!DOCTYPE</span><span> </span><span>html</span><span>&gt;</span>\n        <br><span>&lt;</span><span>html</span><span>&gt;</span>\n        <br><span>&lt;</span><span>body</span><span>&gt;</span>\n        <br>\n        <br><span>&lt;</span><span>h1</span><span>&gt;</span><span>我的第一个页面</span><span>&lt;</span><span>/h1</span><span>&gt;</span>\n        <br><span>&lt;</span><span>p</span><span>&gt;</span><span>我的第一个段落。</span><span>&lt;</span><span>/p</span><span>&gt;</span>\n        <br>\n        <br><span>&lt;</span><span>script</span><span>&gt;</span>\n        <br><span>window.alert(5 + 6);</span>\n        <br><span>&lt;</span><span>/script</span><span>&gt;</span>\n        <br>\n        <br><span>&lt;</span><span>/body</span><span>&gt;</span>\n        <br><span>&lt;</span><span>/html</span><span>&gt;</span>\n        <br><span class=\"highGT\"></span> \n    </div>\n    <br> <a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_output_alert\">尝试一下 »</a> \n</div>\n<hr>\n<h2>操作 HTML 元素</h2> \n<p>如需从 JavaScript 访问某个 HTML 元素，您可以使用 document.getElementById(<em>id</em>) 方法。</p>\n<p>请使用 \"id\" 属性来标识 HTML 元素，并 innerHTML 来获取或插入元素内容：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code\"> <span class=\"highLT\">&lt;</span><span class=\"highELE\">!DOCTYPE</span>  <span class=\"highATT\">html</span><span class=\"highGT\">&gt;</span>\n        <br><span class=\"highLT\">&lt;</span><span class=\"highELE\">html</span><span class=\"highGT\">&gt;</span>\n        <br> <span class=\"highLT\">&lt;</span><span class=\"highELE\">body</span><span class=\"highGT\">&gt;</span>\n        <br>\n        <br> <span class=\"highLT\">&lt;</span><span class=\"highELE\">h1</span><span class=\"highGT\">&gt;</span>我的第一个 Web 页面<span class=\"highLT\">&lt;</span><span class=\"highELE\">/h1</span><span class=\"highGT\">&gt;</span>\n        <br>\n        <br> <span class=\"highLT\">&lt;</span><span class=\"highELE\">p</span>  <span class=\"highATT\">id=</span><span class=\"highVAL\">\"demo\"</span><span class=\"highGT\">&gt;</span>我的第一个段落<span class=\"highLT\">&lt;</span><span class=\"highELE\">/p</span><span class=\"highGT\">&gt;</span>\n        <br>\n        <br> <span class=\"highLT\">&lt;</span><span class=\"highELE\">script</span><span class=\"highGT\">&gt;</span>\n        <br>document.getElementById(\"demo\").innerHTML = \"段落已修改。\";\n        <br> <span class=\"highLT\">&lt;</span><span class=\"highELE\">/script</span><span class=\"highGT\">&gt;</span>\n        <br>\n        <br> <span class=\"highLT\">&lt;</span><span class=\"highELE\">/body</span><span class=\"highGT\">&gt;</span>\n        <br> <span class=\"highLT\">&lt;</span><span class=\"highELE\">/html</span><span class=\"highGT\">&gt;</span> \n    </div>\n    <br> <a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_dom\">尝试一下 »</a> \n</div>\n<p>以上 JavaScript 语句（在 &lt;script&gt; 标签中）可以在 web 浏览器中执行：</p>\n<p><strong>document.getElementById(\"demo\")</strong> 是使用 id 属性来查找 HTML 元素的 JavaScript 代码 。该方法是 <a href=\"https://www.w3cschool.cn/htmldom/\" target=\"_blank\">HTML DOM</a> 中定义的。</p>\n<p><strong>innerHTML = \"Paragraph changed.\"</strong> 是用于修改元素的 HTML 内容(innerHTML)的 JavaScript 代码。</p>\n<hr>\n <h2>在本教程中</h2> \n<p>在大多数情况下，在本教程中，我们将使用上面描述的方法来输出：</p>\n<p>下面的例子直接把 id=\"demo\" 的 &lt;p&gt; 元素写到 HTML 文档输出中：</p>\n<hr>\n <h2>写到 HTML 文档</h2>\n<p>使用<b> document.write() </b>方法将内容写到 HTML 文档中。此功能可用于写入文本和HTML。</p> \n<p>出于测试目的，您可以将JavaScript直接写在HTML 文档中：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code\"> <span class=\"highLT\">&lt;</span><span class=\"highELE\">!DOCTYPE</span>  <span class=\"highATT\">html</span><span class=\"highGT\">&gt;</span>\n        <br><span class=\"highLT\">&lt;</span><span class=\"highELE\">html</span><span class=\"highGT\">&gt;</span>\n        <br> <span class=\"highLT\">&lt;</span><span class=\"highELE\">body</span><span class=\"highGT\">&gt;</span>\n        <br>\n        <br><span class=\"highLT\">&lt;</span><span class=\"highELE\">h1</span><span class=\"highGT\">&gt;</span>我的第一个 Web 页面<span class=\"highLT\">&lt;</span><span class=\"highELE\">/h1</span><span class=\"highGT\">&gt;</span>\n        <br>\n        <br><span class=\"highLT\">&lt;</span><span class=\"highELE\">p</span><span class=\"highGT\">&gt;</span>我的第一个段落。<span class=\"highLT\">&lt;</span><span class=\"highELE\">/p</span><span class=\"highGT\">&gt;</span>\n        <br>\n        <br><span class=\"highLT\">&lt;</span><span class=\"highELE\">script</span><span class=\"highGT\">&gt;</span>\n        <br>document.write(Date());\n        <br> <span class=\"highLT\">&lt;</span><span class=\"highELE\">/script</span><span class=\"highGT\">&gt;</span>\n        <br>\n        <br> <span class=\"highLT\">&lt;</span><span class=\"highELE\">/body</span><span class=\"highGT\">&gt;</span>\n        <br> <span class=\"highLT\">&lt;</span><span class=\"highELE\">/html</span><span class=\"highGT\">&gt;</span> \n    </div>\n    <br> <a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_write\">尝试一下 »</a> \n</div>\n<table class=\"lamp\">\n    <tbody>\n        <tr>\n            <th style=\"width:34px\">\n                <img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" alt=\"Note\" style=\"height:32px;width:32px\" class=\"\">\n            </th>\n            <td>\n                <p>请使用 <b>document.write()</b> 仅仅向文档输出写内容。</p>\n                <p>如果在文档已完成加载后执行 document.write，整个 HTML 页面将被覆盖。</p>\n            </td>\n        </tr>\n    </tbody>\n</table>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code\"> <span class=\"highLT\">&lt;</span><span class=\"highELE\">!DOCTYPE</span>  <span class=\"highATT\">html</span><span class=\"highGT\">&gt;</span>\n        <br> <span class=\"highLT\">&lt;</span><span class=\"highELE\">html</span><span class=\"highGT\">&gt;</span>\n        <br> <span class=\"highLT\">&lt;</span><span class=\"highELE\">body</span><span class=\"highGT\">&gt;</span>\n        <br>\n        <br> <span class=\"highLT\">&lt;</span><span class=\"highELE\">h1</span><span class=\"highGT\">&gt;</span>我的第一个 Web 页面<span class=\"highLT\">&lt;</span><span class=\"highELE\">/h1</span><span class=\"highGT\">&gt;</span>\n        <br>\n        <br><span class=\"highLT\">&lt;</span><span class=\"highELE\">p</span><span class=\"highGT\">&gt;</span>我的第一个段落。<span class=\"highLT\">&lt;</span><span class=\"highELE\">/p</span><span class=\"highGT\">&gt;</span>\n        <br>\n        <br> <span class=\"highLT\">&lt;</span><span class=\"highELE\">button</span>  <span class=\"highATT\">onclick=</span><span class=\"highVAL\">\"myFunction()\"</span><span class=\"highGT\">&gt;</span>点我<span class=\"highLT\">&lt;</span><span class=\"highELE\">/button</span>\n        <span class=\"highGT\">&gt;</span>\n            <br>\n            <br> <span class=\"highLT\">&lt;</span><span class=\"highELE\">script</span><span class=\"highGT\">&gt;</span>\n            <br>function myFunction() {\n            <br>    document.write(Date());\n            <br>}\n            <br> <span class=\"highLT\">&lt;</span><span class=\"highELE\">/script</span><span class=\"highGT\">&gt;</span>\n            <br>\n            <br> <span class=\"highLT\">&lt;</span><span class=\"highELE\">/body</span><span class=\"highGT\">&gt;</span>\n            <br> <span class=\"highLT\">&lt;</span><span class=\"highELE\">/html</span><span class=\"highGT\">&gt;</span> \n    </div>\n    <br> <a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_write_over\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>写到控制台</h2> \n<p>如果您的浏览器支持调试，你可以使用 <strong>console.log()</strong> 方法在浏览器中显示 JavaScript 值。</p>\n<p>浏览器中使用 F12 来启用调试模式， 在调试窗口中点击 \"Console\" 菜单。</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code\"> <span class=\"highLT\">&lt;</span><span class=\"highELE\">!DOCTYPE</span>  <span class=\"highATT\">html</span><span class=\"highGT\">&gt;</span>\n        <br> <span class=\"highLT\">&lt;</span><span class=\"highELE\">html</span><span class=\"highGT\">&gt;</span>\n        <br> <span class=\"highLT\">&lt;</span><span class=\"highELE\">body</span><span class=\"highGT\">&gt;</span>\n        <br>\n        <br> <span class=\"highLT\">&lt;</span><span class=\"highELE\">h1</span><span class=\"highGT\">&gt;</span>我的第一个 Web 页面<span class=\"highLT\">&lt;</span><span class=\"highELE\">/h1</span><span class=\"highGT\">&gt;</span>\n        <br>\n        <br> <span class=\"highLT\">&lt;</span><span class=\"highELE\">script</span><span class=\"highGT\">&gt;</span>\n        <br>a = 5;\n        <br>b = 6;\n        <br>c = a + b;\n        <br>console.log(c);\n        <br> <span class=\"highLT\">&lt;</span><span class=\"highELE\">/script</span><span class=\"highGT\">&gt;</span>\n        <br>\n        <br> <span class=\"highLT\">&lt;</span><span class=\"highELE\">/body</span><span class=\"highGT\">&gt;</span>\n        <br> <span class=\"highLT\">&lt;</span><span class=\"highELE\">/html</span><span class=\"highGT\">&gt;</span> \n    </div>\n    <br> <a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_console\" target=\"_blank\">尝试一下 »</a> \n</div>\n<div><b>提示：</b>console.log() 方法能够让你看到你在页面中的输出内容，让你更容易调试javascript；与alert相比，console不会打断你页面的操作，console里面的内容非常丰富，你可以在控制台输入 console。</div>\n<hr>\n <h2>您知道吗?</h2> \n<table class=\"lamp     \">\n    <tbody>\n        <tr>\n            <th style=\"width:34px\">\n                <img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" alt=\"Note\" style=\"height:32px;width:32px\">\n            </th>\n            <td>程序中调试是测试，查找及减少bug(错误)的过程。</td></tr></tbody></table></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 4,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JavaScript 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "adb8f422a19d2cabc3055f9535a6dd77",
      "chapter_level_two_parent_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_two_name": "JavaScript 用法",
      "chapter_level_two_url": "/javascript/js-howto.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">用法</span> </h2> \n<hr>\n<p class=\"intro\">HTML 中的脚本必须位于 &lt;script&gt; 与 &lt;/script&gt; 标签之间。</p>\n<p class=\"intro\">脚本可被放置在 HTML 页面的 &lt;body&gt; 和 &lt;head&gt; 部分中。</p>\n<hr>\n <h2>&lt;script&gt; 标签</h2><p>如需在 HTML 页面中插入 JavaScript，请使用 &lt;script&gt; 标签。</p>\n<p>&lt;script&gt; 和 &lt;/script&gt; 会告诉 JavaScript 在何处开始和结束。</p>\n<p>&lt;script&gt; 和 &lt;/script&gt; 之间的代码行包含了 JavaScript:</p>\n<div class=\"code notranslate\"><span style=\"line-height: 1.7;\">&lt;script&gt;</span>\n    <div>alert(\"我的第一个 JavaScript\");\n        <br>&lt;/script&gt;</div>\n</div>\n<p>您无需理解上面的代码。只需明白，浏览器会解释并执行位于 &lt;script&gt; 和 &lt;/script&gt;之间的 JavaScript 代码 </p>\n<table class=\"lamp\">\n    <tbody>\n        <tr>\n            <th width=\"34\">\n                <img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" width=\"32\" height=\"32\" alt=\"lamp\">\n            </th>\n            <td>那些老旧的实例可能会在 &lt;script&gt; 标签中使用 type=\"text/javascript\"。现在已经不必这样做了。JavaScript 是所有现代浏览器以及 HTML5 中的默认脚本语言。</td>\n        </tr>\n    </tbody>\n</table>\n<hr>\n <h2> &lt;body&gt; 中的 JavaScript </h2> \n<p>在本例中，JavaScript 会在页面加载时向 HTML 的 &lt;body&gt; 写文本：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">&lt;!DOCTYPE html&gt;\n        <br>&lt;html&gt;\n        <br>&lt;body&gt;\n        <br>.\n        <br>.\n        <br><span class=\"marked\">&lt;script&gt;<br> document.write(\"&lt;h1&gt;这是一个标题&lt;/h1&gt;\");<br>document.write(\"&lt;p&gt;这是一个段落&lt;/p&gt;\");<br> &lt;/script&gt;<br></span>.\n        <br>.\n        <br>&lt;/body&gt;\n        <br>&lt;/html&gt;</div>\n    <br><a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_intro_document_write\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>JavaScript 函数和事件</h2> \n<p>上面例子中的 JavaScript 语句，会在页面加载时执行。</p>\n<p>通常，我们需要在某个事件发生时执行代码，比如当用户点击按钮时。</p>\n<p>如果我们把 JavaScript 代码放入函数中，就可以在事件发生时调用该函数。</p>\n<p>您将在稍后的章节学到更多有关 JavaScript 函数和事件的知识。</p>\n<hr>\n <h2>在 &lt;head&gt; 或者 &lt;body&gt; 的JavaScript </h2> \n<p>您可以在 HTML 文档中放入不限数量的脚本。</p>\n<p>脚本可位于 HTML 的 &lt;body&gt; 或 &lt;head&gt; 部分中，或者同时存在于两个部分中。</p>\n<p>通常的做法是把函数放入 &lt;head&gt; 部分中，或者放在页面底部。这样就可以把它们安置到同一处位置，不会干扰页面的内容。</p>\n<hr>\n <h2>&lt;head&gt; 中的 JavaScript 函数</h2> \n<p>在本例中，我们把一个 JavaScript 函数放置到 HTML 页面的 &lt;head&gt; 部分。</p>\n<p>该函数会在点击按钮时被调用：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">&lt;!DOCTYPE html&gt;\n        <br>&lt;html&gt;\n        <p>&lt;head&gt;\n            <br><span class=\"marked\">&lt;script&gt;<br> function myFunction()<br> {<br> document.getElementById(\"demo\").innerHTML=\"我的第一个 JavaScript 函数\";<br> }<br> &lt;/script&gt;</span>\n            <br>&lt;/head&gt;</p>\n        <p>&lt;body&gt;</p>\n        <p>&lt;h1&gt;我的 Web 页面&lt;/h1&gt;</p>\n        <p>&lt;p id=\"demo\"&gt;一个段落&lt;/p&gt;</p>\n        <p>&lt;button type=\"button\" <span class=\"marked\">onclick=\"myFunction()\"</span>&gt;尝试一下&lt;/button&gt;</p>\n        <p>&lt;/body&gt;\n            <br>&lt;/html&gt;</p>\n    </div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_whereto_head\" target=\"_blank\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>&lt;body&gt; 中的 JavaScript 函数</h2> \n<p>在本例中，我们把一个 JavaScript 函数放置到 HTML 页面的 &lt;body&gt; 部分。</p>\n<p>该函数会在点击按钮时被调用：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">&lt;!DOCTYPE html&gt;\n        <br>&lt;html&gt;\n        <br>&lt;body&gt;\n        <p>&lt;h1&gt;我的 Web 页面&lt;/h1&gt;</p>\n        <p>&lt;p id=\"demo\"&gt;一个段落&lt;/p&gt;</p>\n        <p>&lt;button type=\"button\" onclick=\"<span class=\"marked\">myFunction()</span>\"&gt;尝试一下&lt;/button&gt;</p>\n        <p> <span class=\"marked\">&lt;script&gt;<br> function myFunction()<br> {<br> document.getElementById(\"demo\").innerHTML=\"我的第一个 JavaScript 函数\";<br> }<br> &lt;/script&gt;</span>\n        </p>\n        <p>&lt;/body&gt;\n            <br>&lt;/html&gt;</p>\n    </div>\n    <br><a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_whereto_body\">尝试一下 »</a> \n</div>\n<p><b> 提示：</b>我们把 JavaScript 放到了页面代码的底部，这样就可以确保在 &lt;p&gt; 元素创建之后再执行脚本。</p>\n<br>\n<hr>\n <h2>外部的 JavaScript</h2> \n<p>也可以把脚本保存到外部文件中。外部文件通常包含被多个网页使用的代码。</p>\n<p>外部 JavaScript 文件的文件扩展名是 .js。</p>\n<p>如需使用外部文件，请在 &lt;script&gt; 标签的 \"src\" 属性中设置该 .js 文件：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">&lt;!DOCTYPE html&gt;\n        <br>&lt;html&gt;\n        <br>&lt;body&gt;\n        <br><span class=\"marked\">&lt;script src=\"myScript.js\"&gt;&lt;/script&gt;</span>\n        <br>&lt;/body&gt;\n        <br>&lt;/html&gt;</div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_externalexample\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<p>你可以将脚本放置于 &lt;head&gt; 或者 &lt;body&gt;中 实际运行效果与您在 &lt;script&gt; 标签中编写脚本完全一致。\n    <br>\n</p>\n<table class=\"lamp   \">\n    <tbody>\n        <tr>\n            <th width=\"34\">\n                <img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" width=\"32\" height=\"32\" alt=\"lamp\">\n            </th>\n            <td>外部脚本不能包含 &lt;script&gt; 标签。</td>\n        </tr>\n    </tbody>\n</table>\n<p>\n    <br>\n</p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 3,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JavaScript 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "bd040565056bf7bd00acb9f34383a1be",
      "chapter_level_two_parent_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_two_name": "JavaScript 知识图谱",
      "chapter_level_two_url": "/javascript/javascript-skillmap.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><p>以下学习脑图在各个学习章节里面也有，具体学到相应章节可以仔细研读，本篇只是做个规整 。</p>\n<div style=\"text-align: center;\">\n    <a href=\"https://atts.w3cschool.cn/attachments/image/20170306/1488780841257569.gif\" target=\"_blank\" style=\"line-height: 1.7;\">\n        <img src=\"https://atts.w3cschool.cn/attachments/image/20170306/1488780841257569.gif\" alt=\"价值10000元的javascript知识图谱，值得你珍藏。\">\n    </a>\n    <a href=\"/attachments/image/20170306/1488780841257569.gif\" target=\"_blank\">\n        <br>\n    </a>\n</div>\n<div style=\"text-align: center;\">\n    <a href=\"/attachments/image/20160910/1473476925658848.gif\" target=\"_blank\">\n        <img src=\"https://atts.w3cschool.cn/attachments/image/20171209/1512802772947435.png\" alt=\"M8T)~}ASYH82XGK5B74G0BF\">\n        <br>\n    </a>\n</div>\n<div style=\"text-align: center;\">\n    <a href=\"/attachments/image/20160910/1473476935836031.gif\" target=\"_blank\" style=\"line-height: 1.7;\">\n        <img src=\"https://atts.w3cschool.cn/attachments/image/20160910/1473476935836031.gif\" alt=\"价值10000元的javascript知识图谱，值得你珍藏。\">\n    </a>\n    <a href=\"/attachments/image/20160910/1473476935836031.gif\" target=\"_blank\">\n        <br>\n    </a>\n</div>\n<p>\n    <a href=\"/attachments/image/20160910/1473476945739921.gif\" target=\"_blank\" style=\"line-height: 1.7;\">\n        <img src=\"https://atts.w3cschool.cn/attachments/image/20160910/1473476945739921.gif\" alt=\"价值10000元的javascript知识图谱，值得你珍藏。\" class=\"\">\n    </a>\n    <br>\n</p>\n<p>\n    <br>\n</p>\n<p>\n    <img src=\"https://atts.w3cschool.cn/attachments/image/20180205/1517813267879178.png\" alt=\"未标题-1\" style=\"max-width:100%;\">\n</p>\n<p>\n    <br>\n</p>\n<div style=\"text-align: center;\">\n    <a href=\"/attachments/image/20160910/1473476952296809.gif\" target=\"_blank\" style=\"line-height: 1.7;\">\n        <img src=\"https://atts.w3cschool.cn/attachments/image/20160910/1473476952296809.gif\" alt=\"价值10000元的javascript知识图谱，值得你珍藏。\">\n    </a>\n    <a href=\"/attachments/image/20160910/1473476952296809.gif\" target=\"_blank\">\n        <br>\n    </a>\n</div>\n<div style=\"text-align: center;\">\n    <a href=\"/attachments/image/20160910/1473476960662589.gif\" target=\"_blank\" style=\"line-height: 1.7;\">\n        <img src=\"https://atts.w3cschool.cn/attachments/image/20160910/1473476960662589.gif\" alt=\"价值10000元的javascript知识图谱，值得你珍藏。\">\n    </a>\n    <a href=\"/attachments/image/20160910/1473476960662589.gif\" target=\"_blank\">\n        <br>\n    </a>\n</div>\n<div style=\"text-align: center;\">\n    <a href=\"/attachments/image/20160910/1473476968735757.gif\" target=\"_blank\">\n        <br>\n    </a>\n</div>\n<div style=\"text-align: center;\">\n    <a href=\"/attachments/image/20160910/1473476975191386.gif\" target=\"_blank\" style=\"line-height: 1.7;\">\n        <img src=\"https://atts.w3cschool.cn/attachments/image/20160910/1473476975191386.gif\" alt=\"价值10000元的javascript知识图谱，值得你珍藏。\">\n    </a>\n    <a href=\"/attachments/image/20160910/1473476975191386.gif\" target=\"_blank\">\n        <br>\n    </a>\n</div>\n<div style=\"text-align: center;\">\n    <a href=\"/attachments/image/20160910/1473476981856911.gif\" target=\"_blank\" style=\"line-height: 1.7;\">\n        <img src=\"https://atts.w3cschool.cn/attachments/image/20160910/1473476981856911.gif\" alt=\"价值10000元的javascript知识图谱，值得你珍藏。\">\n    </a>\n    <a href=\"/attachments/image/20160910/1473476981856911.gif\" target=\"_blank\">\n        <br>\n    </a>\n</div>\n<div style=\"text-align: center;\">\n    <a href=\"/attachments/image/20160910/1473476987139357.gif\" target=\"_blank\"></a>\n    <a href=\"/attachments/image/20160910/1473476987139357.gif\" target=\"_blank\" style=\"line-height: 1.7;\">\n        <img src=\"https://atts.w3cschool.cn/attachments/image/20160910/1473476987139357.gif\" alt=\"价值10000元的javascript知识图谱，值得你珍藏。\">\n    </a>\n</div>\n<p>\n    <br>\n</p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 2,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JavaScript 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "41d98b5eacdb0e6c1acb326b6748af68",
      "chapter_level_two_parent_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_two_name": "javascript 简介",
      "chapter_level_two_url": "/javascript/js-intro.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">简介</span> </h2> \n<hr>\n<p class=\"intro\">JavaScript 是互联网上最流行的脚本语言，这门语言可用于 HTML 和 web，更可广泛用于服务器、PC、笔记本电脑、平板电脑和智能手机等设备。</p>\n<hr>\n <h2>JavaScript 是脚本语言</h2> \n<p>JavaScript 是一种轻量级的编程语言。</p>\n<p>JavaScript 是可插入 HTML 页面的编程代码。</p>\n<p>JavaScript 插入 HTML 页面后，可由所有的现代浏览器执行。</p>\n<p>JavaScript 很容易学习。</p>\n<hr>\n <h2>您将学到什么</h2> \n<p>下面是您将在本教程中学到的主要内容。</p>\n<hr>\n <h2>JavaScript：直接写入 HTML 输出流</h2> \n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code\">document.write(\"&lt;h1&gt;这是一个标题&lt;/h1&gt;\");\n        <br>document.write(\"&lt;p&gt;这是一个段落。&lt;/p&gt;\");</div>\n    <br><a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_intro_document_write\">尝试一下 »</a> \n</div>\n<br>\n<table class=\"lamp           \">\n    <tbody>\n        <tr>\n            <th width=\"34\">\n                <img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" alt=\"lamp\" width=\"32\" height=\"32\">\n            </th>\n            <td>您只能在 HTML 输出中使用 document.write。如果您在文档加载完成后使用该方法，会覆盖整个文档。</td>\n        </tr>\n    </tbody>\n</table>\n<br>\n<hr>\n <h2>JavaScript：对事件的反应</h2> \n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">&lt;button type=\"button\" onclick=\"alert('欢迎!')\"&gt;点我!&lt;/button&gt;</div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_intro_alert\" target=\"_blank\">尝试一下 »</a> \n</div>\n<p>alert() 函数在 JavaScript 中并不常用，但它对于代码测试非常方便。</p>\n<p><a href=\"https://www.w3cschool.cn/jsref/jsref-event-onclick.html\" target=\"_blank\"> onclick 事件</a>只是您即将在本教程中学到的众多事件之一。</p>\n<hr>\n <h2>JavaScript：改变 HTML 内容</h2> \n<p>使用 JavaScript 来处理 HTML 内容是非常强大的功能。</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">x=document.getElementById(\"demo\")  //查找元素\n        <br>x.innerHTML=\"Hello JavaScript\";    //改变内容</div>\n    <br><a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_intro_inner_html\">尝试一下 »</a> \n</div>\n<p>您会经常看到 <strong>document.getElementById(\"</strong><em><strong>some id</strong></em><strong>\")</strong>。这个方法是 HTML DOM 中定义的。</p>\n<p>DOM (<strong>D</strong>ocument <strong>O</strong>bject <strong>M</strong>odel)（文档对象模型）是用于访问 HTML 元素的正式 W3C 标准。</p>\n<p>您将在本教程的多个章节中学到有关 HTML DOM 的知识。</p>\n<hr>\n <h2>JavaScript：改变 HTML 图像</h2> \n<p>本例会动态地改变 HTML 图像的来源（src）：</p>\n<div class=\"example\">\n     <h2 class=\"example_head\">点亮灯泡</h2> \n    <div class=\"example_result notranslate\" style=\"text-align:center\">\n        <img id=\"myimage\" src=\"https://7n.w3cschool.cn/statics/images/course/pic_bulboff.gif\" alt=\"\" width=\"100\" height=\"180\" border=\"0\">\n        <p>点击灯泡就可以打开或关闭这盏灯</p>\n    </div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_lightbulb\" target=\"_blank\">尝试一下 »</a> \n</div>\n<p>\n    <br>\n</p>\n<p>“点亮灯泡”实现代码详解：</p><pre lang=\"html\"><code class=\"html\">&lt;script&gt;\nfunction changeImage()\n{\n    element=document.getElementById('myimage')\n    if (element.src.match(\"bulbon\"))\n    {\n        element.src=\"/images/pic_bulboff.gif\";\n    }\n    else\n    {\n        element.src=\"/images/pic_bulbon.gif\";\n    }\n}\n&lt;/script&gt;\n&lt;img id=\"myimage\" onclick=\"changeImage()\" src=\"/images/pic_bulboff.gif\" width=\"100\" height=\"180\"&gt;</code></pre>\n<p>以上实例中代码 <strong>element.src.match(\"bulbon\") </strong>的作用意思是：</p>\n<p>检索 <strong>&lt;img id=\"myimage\" onclick=\"changeImage()\" src=\"/images/pic_bulboff.gif\" width=\"100\" height=\"180\"&gt;</strong> 里面 src 属性的值有没有包含 bulbon 这个字符串，如果存在字符串 <strong>bulbon</strong>，图片 <strong>src</strong> 更新为 <strong>bulboff.gif</strong>，若匹配不到 <strong>bulbon</strong> 字符串，<strong>src</strong> 则更新为 <strong>bulbon.gif</strong>\n    <br>\n</p>\n<p>\n    <br>\n</p>\n<p>JavaScript 能够改变任意 HTML 元素的大多数属性，而不仅仅是图片。</p>\n<hr>\n <h2>JavaScript：改变 HTML 样式</h2> \n<p>改变 HTML 元素的样式，属于改变 HTML 属性的变种。</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">x=document.getElementById(\"demo\")  //找到元素\n        <br>x.style.color=\"#ff0000\";           //改变样式</div>\n    <br><a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_intro_style\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>JavaScript：验证输入 </h2> \n<p>JavaScript 常用于验证用户的输入。</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">if isNaN(x) {alert(\"不是数字\")};</div>\n    <br><a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_intro_validate\">尝试一下 »</a> \n</div>\n<p>以上实例只是普通的验证，如果要在生产环境中使用，需要严格判断，如果输入的空格，或者连续空格 isNaN 是判别不出来的。</p>\n <h2>您知道吗？</h2> \n<table class=\"lamp\">\n    <tbody>\n        <tr>\n            <th width=\"34\">\n                <img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" alt=\"lamp\" width=\"32\" height=\"32\">\n            </th>\n            <td>JavaScript 与 Java 是两种完全不同的语言，无论在概念上还是设计上。\n                <br>Java（由 Sun 发明）是更复杂的编程语言。\n                <br>\n                <br>ECMA-262 是 JavaScript 标准的官方名称。\n                <br>\n                <br>JavaScript 由 Brendan Eich 发明。它于 1995 年出现在 Netscape 中（该浏览器已停止更新），并于 1997 年被 ECMA（一个标准协会）采纳。</td>\n        </tr>\n    </tbody>\n</table>\n<hr>\n\n<h2>javaScript和ECMAScript的关系</h2>\n\n<p>ECMAScript是<a href=\"https://baike.baidu.com/item/%E6%AC%A7%E6%B4%B2%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%88%B6%E9%80%A0%E5%95%86%E5%8D%8F%E4%BC%9A\" rel=\"external nofollow\" target=\"_blank\">欧洲计算机制造商协会</a>通过ECMA-262标准化的脚本程序设计语言。</p>\n<p>JavaScript 已经由 ECMA 通过 ECMAScript 实现语言的标准化。\n    <br>\n</p>\n<hr>\n\n<h2>相关教程</h2>\n\n<p><a href=\"https://www.w3cschool.cn/ecmascript/\" target=\"_blank\">ECMAScript教程</a>\n</p>\n<p>\n    <br>\n</p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 5,
      "parent_sort_index": 10,
      "chapter_level_one_id": "f9c3cdf0269ab285b5d83b86cecc8373",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "相关课程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "3066b5b9b247944a893bbedfce3c9c94",
      "chapter_level_two_parent_id": "f9c3cdf0269ab285b5d83b86cecc8373",
      "chapter_level_two_name": "Web前端入门扫盲课程",
      "chapter_level_two_url": "/minicourse/play/wsfnp?fcode=tutorial-javascript",
      "book_content": ""
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 1,
      "parent_sort_index": 11,
      "chapter_level_one_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "相关文章",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "02ca7f24f53e68c48f831bf9e6ecd5ab",
      "chapter_level_two_parent_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_two_name": "W3Cschool前端开发入门学习路线2021",
      "chapter_level_two_url": "/article/63914971.html",
      "book_content": ""
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 2,
      "parent_sort_index": 11,
      "chapter_level_one_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "相关文章",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "0fc9552e695bd1ffcbb100274095f531",
      "chapter_level_two_parent_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_two_name": "2020年10月编程语言排行榜：Python 即将超越 Java",
      "chapter_level_two_url": "/article/cf0fe6dbee7042.html",
      "book_content": ""
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 4,
      "parent_sort_index": 10,
      "chapter_level_one_id": "f9c3cdf0269ab285b5d83b86cecc8373",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "相关课程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "00ecea722b1d0666458353b1c43ca231",
      "chapter_level_two_parent_id": "f9c3cdf0269ab285b5d83b86cecc8373",
      "chapter_level_two_name": "Flexbox布局基础入门",
      "chapter_level_two_url": "/minicourse/play/flexboxcourse?fcode=tutorial-javascript",
      "book_content": ""
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 4,
      "parent_sort_index": 9,
      "chapter_level_one_id": "d9e0bc6fb0580d43866364c06954f0cc",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "相关教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "9d20d69f1cad92daa9c3b3663a885a4e",
      "chapter_level_two_parent_id": "d9e0bc6fb0580d43866364c06954f0cc",
      "chapter_level_two_name": "CSS 教程",
      "chapter_level_two_url": "/css/",
      "book_content": ""
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 2,
      "parent_sort_index": 10,
      "chapter_level_one_id": "f9c3cdf0269ab285b5d83b86cecc8373",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "相关课程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "912813f7ecefa19d5f9aec86c4dd9416",
      "chapter_level_two_parent_id": "f9c3cdf0269ab285b5d83b86cecc8373",
      "chapter_level_two_name": "ES6 入门课程",
      "chapter_level_two_url": "/minicourse/play/ecmascript6?fcode=tutorial-javascript",
      "book_content": ""
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 2,
      "parent_sort_index": 9,
      "chapter_level_one_id": "d9e0bc6fb0580d43866364c06954f0cc",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "相关教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "a3ee1e6530153dce0798a6f7d2d81ae6",
      "chapter_level_two_parent_id": "d9e0bc6fb0580d43866364c06954f0cc",
      "chapter_level_two_name": "Google地图教程",
      "chapter_level_two_url": "/googleditu/",
      "book_content": ""
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 3,
      "parent_sort_index": 9,
      "chapter_level_one_id": "d9e0bc6fb0580d43866364c06954f0cc",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "相关教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "35a10d8a00a4e7d9dba5f2b12a67410e",
      "chapter_level_two_parent_id": "d9e0bc6fb0580d43866364c06954f0cc",
      "chapter_level_two_name": "whatsns开源内容付费问答系统",
      "chapter_level_two_url": "/whatsns/",
      "book_content": ""
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 3,
      "parent_sort_index": 10,
      "chapter_level_one_id": "f9c3cdf0269ab285b5d83b86cecc8373",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "相关课程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "9c5bfc41420aff41b03e54caf6ca70ba",
      "chapter_level_two_parent_id": "f9c3cdf0269ab285b5d83b86cecc8373",
      "chapter_level_two_name": "JavaScript：数据交互从基础到进阶",
      "chapter_level_two_url": "/minicourse/play/javascript_mblx?fcode=tutorial-javascript",
      "book_content": ""
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 5,
      "parent_sort_index": 9,
      "chapter_level_one_id": "d9e0bc6fb0580d43866364c06954f0cc",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "相关教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "3c810060ea14581005a36fa01b02e7f7",
      "chapter_level_two_parent_id": "d9e0bc6fb0580d43866364c06954f0cc",
      "chapter_level_two_name": "喧喧使用手册",
      "chapter_level_two_url": "/xuanim/",
      "book_content": ""
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 1,
      "parent_sort_index": 10,
      "chapter_level_one_id": "f9c3cdf0269ab285b5d83b86cecc8373",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "相关课程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "7cd75ab4487b7ef02c5cd566e104e661",
      "chapter_level_two_parent_id": "f9c3cdf0269ab285b5d83b86cecc8373",
      "chapter_level_two_name": "JavaScript 入门课程",
      "chapter_level_two_url": "/minicourse/play/jscourse?fcode=tutorial-javascript",
      "book_content": ""
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 1,
      "parent_sort_index": 9,
      "chapter_level_one_id": "d9e0bc6fb0580d43866364c06954f0cc",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "相关教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "23de0b68ad2ab31effc9fc3c99d4c29c",
      "chapter_level_two_parent_id": "d9e0bc6fb0580d43866364c06954f0cc",
      "chapter_level_two_name": "JSON 教程",
      "chapter_level_two_url": "/json/",
      "book_content": ""
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 6,
      "parent_sort_index": 8,
      "chapter_level_one_id": "3b40e721f4d97e317036b3fc4c37a177",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "拓展阅读",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "341e36ee8665f48f50049e97b16e9422",
      "chapter_level_two_parent_id": "3b40e721f4d97e317036b3fc4c37a177",
      "chapter_level_two_name": "JavaScript 原型链的理解",
      "chapter_level_two_url": "/javascript/javascript-5isn2lax.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><p>在讲原型之前我们先来了解一下函数。</p><p>在JS中，函数的本质就是对象，它与其他对象不同的是，创建它的构造函数与创建其他对象的构造函数不一样。那产生函数对象的构造函数是什么呢？是一个叫做Function的特殊函数，通过new Function 产生的对象就是一个函数。</p><pre><code>function f1() {}\n//上面的函数等同于：\nvar f1 = new Function();\n\nfunction sum(a, b) {\n    return a + b;\n}\n//上面的函数等同于：\nvar sum = new Function(\"a\", \"b\", \"return a + b\");//前面的是函数形参名，最后一个参数是函数体</code></pre><p>也就是说：只要通过Function创建的对象就是函数，函数都是通过Function创建的。</p><p>看下面这张图片：<a href=\"https://img2018.cnblogs.com/blog/1706422/201906/1706422-20190607001144211-1584623881.png\" rel=\"external nofollow\" target=\"_blank\"><img src=\"https://atts.w3cschool.cn/attachments/day_200727/202007271628593897.png\" class=\"clicked\"></a></p><p>以上我们可以看到普通对象是由函数创建的，函数是由Function创建的。那我们会有一个疑问Function是从哪里来的？其实Function是不通过其他函数得到，它是JS执行引擎初始化就直接通过本地代码直接放置到内存中的。</p><p>当一个函数被创建后，这个函数就会自动附带一个属性prototype，它就是一个Object对象，代表着函数的原型。也就是说prototype就是原型对象</p><p>原型对象中包含两个属性：constructor和__proto__。constructor这个属性是指创建原型的函数,它指向函数本身。所以有以下关系：<a href=\"https://img2018.cnblogs.com/blog/1706422/201906/1706422-20190607001224337-1789053965.png\" rel=\"external nofollow\" target=\"_blank\"><img src=\"https://atts.w3cschool.cn/attachments/day_200727/202007271629175955.png\" class=\"\"></a></p><p>看这样一段代码：</p><pre lang=\"javascript\"><code class=\"javascript\">var Person = function () { };\nvar p = new Person();    </code></pre><p>我们来看看这个 new 究竟做了什么？</p><blockquote><p>我们把 new 的过程拆分成以下三步：</p><p>1. var p={}; 也就是说，初始化一个对象p。</p><p>2. p.__proto__=Person.prototype;</p><p>3. Person.call(p);也就是说构造p，也可以称之为初始化p。</p></blockquote><p>我们来证明一下：</p><pre lang=\"javascript\"><code class=\"javascript\">var Person = function () { };\nvar p = new Person();\nalert(p.__proto__ === Person.prototype); // true\n</code></pre><p>这段代码会返回 true。说明我们步骤2是正确的。</p><p><br></p><p>那么__proto__是什么？</p><blockquote><p>每个对象都会在其内部初始化一个属性，就是 __proto__，当我们访问一个对象的属性 时，如果这个对象内部不存在这个属性，那么他就会去__proto__里找这个属性，这个__proto__又会有自己的__proto__，于是就这样 一直找下去，也就是我们平时所说的原型链的概念。</p></blockquote><p>按照标准，__proto__是不对外公开的，也就是说是个私有属性，但是 Firefox 的引擎将他暴露了出来成为了一个共有的属性，我们可以对外访问和设置。</p><p>我们看一下下面这些代码：</p><pre lang=\"javascript\"><code class=\"javascript\">var Person = function () { };\n    Person.prototype.Say = function () {\n    alert(\"Person say\");\n}\nvar p = new Person();\np.Say();</code></pre><p>我们看下为什么 p 可以访问 Person 的 Say。</p><p>首先var p=new Person()；</p><p>可以得出 p.__proto__=Person.prototype。那么当我们调用 p.Say() 时，首先 p 中没有 Say 这个属性， 于是，他就需要到他的 __proto__ 中去找，也就是 Person.prototype，而我们在上面定义了 Person.prototype.Say = function(){}; 于是，就找到了这个方法。</p><p>好，接下来，让我们看个更复杂的。</p><p><br></p><p>我们来做这样的推导：</p><p>var p=new Programmer()可以得出p.__proto__=Programmer.prototype;</p><p>我们指定了Programmer.prototype=new Person();我们来这样拆分，var p1=new Person();Programmer.prototype=p1;那么:</p><p>p1.__proto__=Person.prototype;</p><p>Programmer.prototype.__proto__=Person.prototype;</p><p>由根据上面得到p.__proto__=Programmer.prototype。可以得到p.__proto__.__proto__=Person.prototype。</p><p>好，算清楚了之后我们来看上面的结果,p.Say()。由于p没有Say这个属性，于是去p.__proto__，也就是 Programmer.prototype，也就是p1中去找，由于p1中也没有Say，那就去p.__proto__.__proto__，也就是 Person.prototype中去找，于是就找到了alert(“Person say”)的方法。</p><p>其余的也都是同样的道理。</p><p>这也就是原型链的实现原理。</p><p>最后，其实prototype只是一个假象，他在实现原型链中只是起到了一个辅助作用，换句话说，他只是在new的时候有着一定的价值，而原型链的本质，其实在于__proto__！</p><p><br></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 5,
      "parent_sort_index": 8,
      "chapter_level_one_id": "3b40e721f4d97e317036b3fc4c37a177",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "拓展阅读",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "a40543174d7beca787cdd7e5ca18a08a",
      "chapter_level_two_parent_id": "3b40e721f4d97e317036b3fc4c37a177",
      "chapter_level_two_name": "javascript正则表达式知识拓展总结",
      "chapter_level_two_url": "/javascript/javascript-expression.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><p>javascript的正则表达式是前端中比较重要的部分，正则表达式主要用于字符串处理，表单验证等场合，实用高效。JavaScript中的正则表达式比起C#中的正则表达式要弱很多，但基本够用了。在js中定义正则表达式很简单，有两种方式，一种是通过构造函数，一种是通过//，也就是两个斜杠：</p><p></p><pre><code class=\"html hljs xml\">var   re =new RegExp(\"?(w{1,}=w{1,}&amp;){1,}w{1,}=w{1,}\");\n</code></pre><p>使用构造函数定义正则表达式，注意大小写，否则就会不起作用。由于构造函数的参数是一个字符串，也可以是两个斜杠的方式定义，遇到一些特殊字符就需要使用进行转义通过双斜杠的方式定义同样的正则表达式。</p><br><p></p><p></p><pre><code class=\"html hljs xml\">var   re =/?(w{1,}=w{1,}&amp;){1,}w{1,}=w{1,}/;\n</code></pre><pre><code class=\"html hljs xml\">var re =new RegExp( /^?(w{1,}=w{1,}&amp;){1,}w{1,}=w{1,}/);\n</code></pre><span>可以和构造函数达到同样的效果，但仔细分析，发现，通过构造函数需要更多的转义字符</span><br><br><p></p><p><span>如何在javascript中真正使用正则表达式呢？在javascript中RegExp和String对象都有处理正则表达式的方法。</span><br><br></p><p></p><ul><li><strong>test</strong> -- RegExp的test方法用来测试字符串是否匹配给出的匹配模式，返回布尔值；</li><li><strong>exec</strong> -- RegExp的exec方法返回包含第一个匹配的的数组或null；</li><li><strong>match</strong> -- String的match方法返回包含所有匹配子字符串的数组；</li><li><strong>replace</strong> -- String的replace方法完成string的替换操作，支持正则表达式；</li><li><strong>search</strong> -- 与String的indexof方法类似，不同的是search支持正则表达式，而不仅仅是字符串；</li><li><strong>split</strong> -- 按照一定规则拆分字符串并将子字符串存储到数组中的String方法。</li></ul><p></p><p>关于这些函数的具体使用方法，可以参阅JS的相关函数手册。</p><p>一个实例对象除了方法当然还有属性，一个正则表达式有以下属性：</p><ul><li><strong>global</strong> -- 布尔值，若全局选项g已设置则返回true，否则返回false；</li><li><strong>ignoreCase</strong> -- 布尔值，若忽略大小写选项i已设置则返回true，否则返回false；</li><li><strong>lastIndex</strong> -- 整数，使用exec或test方法时被填入，表示下次匹配将会从哪个字符位置开始；</li><li><strong>multiline</strong> -- 布尔值，表示多行模式选项m是否设置，若设置则返回true，否则返回false；</li><li><strong>source</strong> -- 正则表达式的元字符串形式。/\\\\/的source将返回”\\\\“。</li></ul><div style=\"text-align: center;\"><br></div><div style=\"text-align: center;\"><img src=\"https://atts.w3cschool.cn/attachments/day_161128/201611281135283373.png\" style=\"font-size: 13px; line-height: 1.7;\" alt=\"javascript\"></div><div style=\"text-align: center;\"><br></div><h2>常用的经典Javascript正则表达式</h2><div><span>匹配中文字符的正则表达式：</span><br><pre><code class=\"html hljs xml\">[\\u4e00-\\u9fa5]\n</code></pre><br></div><div><span>匹配双字节字符(包括汉字在内)：</span><br><pre><code class=\"html hljs xml\">[^\\x00-\\xff]\n</code></pre><span></span><div><span><br></span></div>应用：计算字符串的长度（一个双字节字符长度计2，ASCII字符计1）</div><div><pre><code class=\"html hljs xml\">String.prototype.len=function(){ return this.replace([^\\x00-\\xff]/g,\"aa\").length; }\n</code></pre><div><br></div><span>匹配空行的正则表达式：</span><br><pre><code class=\"html hljs xml\">\\n[\\s|]*\\r\n</code></pre><br><p>匹配HTML标记的正则表达式：</p><div><pre><code class=\"html hljs xml\">/<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">(.*)</span></span></span><span class=\"hljs-tag\">&gt;</span></span>.*<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">\\</span></span></span><span class=\"hljs-tag\">/\\</span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">1</span></span></span><span class=\"hljs-tag\">&gt;</span></span>|<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">(.*)</span></span></span><span class=\"hljs-tag\"> \\/&gt;</span></span>/\n</code></pre><br></div><div>匹配首尾空格的正则表达式：<br></div><div><pre><code class=\"html hljs xml\">(^\\s*)|(\\s*$)\n</code></pre><br></div><span>应用：j avascript中没有像v bscript那样的trim函数，我们就可以利用这个表达式来实现，如下：</span><br><pre><code class=\"html hljs xml\">String.prototype.trim = function()\n{\n    return this.replace(/(^\\s*)|(\\s*$)/g, \"\");\n}\n</code></pre><br></div><div><span>利用正则表达式分解和转换IP地址：</span><br><span>下面是利用正则表达式匹配IP地址，并将IP地址转换成对应数值的Javascript程序：</span><br><pre><code class=\"html hljs xml\">function IP2V(ip)\n{\n    re=/(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)/g  //匹配IP地址的正则表达式\n    if(re.test(ip))\n    {\n        return RegExp.$1*Math.pow(255,3))+RegExp.$2*Math.pow(255,2))+RegExp.$3*255+RegExp.$4*1\n    }\n    else\n    {\n        throw new Error(\"Not a valid IP address!\")\n    }\n}\n</code></pre><br></div><div><span>不过上面的程序如果不用正则表达式，而直接用split函数来分解可能更简单，程序如下：</span><br><pre><code class=\"html hljs xml\">var ip=\"10.100.20.168\"\nip=ip.split(\".\")\nalert(\"IP值是：\"+(ip[0]*255*255*255+ip[1]*255*255+ip[2]*255+ip[3]*1))\n</code></pre><br></div><div><span>匹配Email地址的正则表达式：</span><br><pre><code class=\"html hljs xml\">\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*\n</code></pre><br></div><div><span>匹配网址URL的正则表达式：</span><br><pre><code class=\"html hljs xml\">http://([\\w-]+\\.)+[\\w-]+(/[\\w- ./?%&amp;=]*)?\n</code></pre><br></div><div><span>利用正则表达式去除字串中重复的字符的算法程序：[*注：此程序不正确]</span><br><pre><code class=\"html hljs xml\">var s=\"abacabefgeeii\"\nvar s1=s.replace(/(.).*\\1/g,\"$1\")\nvar re=new RegExp(\"[\"+s1+\"]\",\"g\")\nvar s2=s.replace(re,\"\")\nalert(s1+s2)  //结果为：abcefgi\n</code></pre><span>*注</span><br><span>===============================</span><br><span>如果var s = “abacabefggeeii”</span><br><span>结果就不对了，结果为：abeicfgg</span><br><span>正则表达式的能力有限</span><br><span>===============================</span><br><br></div><div>表达式来实现去除重复字符的方法：</div><div>使用后向引用取出包括重复的字符，再以重复的字符建立第二个表达式，取到不重复的字符，两者串连。这个方法对于字符顺序有要求的字符串可能不适用，得用正则表达式从URL地址中提取文件名的javascript程序，如下结果为page1<br></div><div><pre><code class=\"html hljs xml\">s=\"http://blog.penner.cn/page1.htm\"\ns=s.replace(/(.*\\/){ 0, }([^\\.]+).*/ig,\"$2\")\nalert(s)\n</code></pre><p><br></p><p>利用正则表达式限制网页表单里的文本框输入内容：</p><p>用正则表达式限制只能输入中文：</p><pre><code class=\"html hljs xml\">onkeyup=\"value=value.replace(/[^\\u4E00-\\u9FA5]/g,'')\" onbeforepaste=\"clipboardData.setData('text',clipboardData.getData('text').replace(/[^\\u4E00-\\u9FA5]/g,''))\"\n</code></pre><span></span><div><span><br></span></div>用正则表达式限制只能输入全角字符：</div><div><pre><code class=\"html hljs xml\">onkeyup=\"value=value.replace(/[^\\uFF00-\\uFFFF]/g,'')\" onbeforepaste=\"clipboardData.setData('text',clipboardData.getData('text').replace(/[^\\uFF00-\\uFFFF]/g,''))\"\n</code></pre><br><span>用正则表达式限制只能输入数字：</span><br><pre><code class=\"html hljs xml\">onkeyup=\"value=value.replace(/[^\\d]/g,'') \"onbeforepaste=\"clipboardData.setData('text',clipboardData.getData('text').replace(/[^\\d]/g,''))\"\n</code></pre><br></div><div><span>用正则表达式限制只能输入数字和英文：</span><br><pre><code class=\"html hljs xml\">onkeyup=\"value=value.replace(/[\\W]/g,'') \"onbeforepaste=\"clipboardData.setData('text',clipboardData.getData('text').replace(/[^\\d]/g,''))\"\n</code></pre><br></div><div><span>匹配非负整数（正整数 + 0）</span><br><pre><code class=\"html hljs xml\">^\\d+$\n</code></pre><br></div><div><span>匹配正整数</span><br><pre><code class=\"html hljs xml\">^[0-9]*[1-9][0-9]*$\n</code></pre><br></div><div><span>匹配非正整数（负整数 + 0）</span><br><pre><code class=\"html hljs xml\">^((-\\d+)|(0+))$\n</code></pre><br></div><div><span>匹配负整数</span><br><pre><code class=\"html hljs xml\">^-[0-9]*[1-9][0-9]*$\n</code></pre><br></div><div><span>匹配整数</span><br><pre><code class=\"html hljs xml\">^-?\\d+$\n</code></pre><br></div><div><span>匹配非负浮点数（正浮点数 + 0）</span><br><pre><code class=\"html hljs xml\">^\\d+(\\.\\d+)?$\n</code></pre><br></div><div><span>匹配正浮点数</span><br><pre><code class=\"html hljs xml\">^(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*))$\n</code></pre><br></div><div><span>匹配非正浮点数（负浮点数 + 0）</span><br><pre><code class=\"html hljs xml\">^((-\\d+(\\.\\d+)?)|(0+(\\.0+)?))$\n</code></pre><br></div><div><span>匹配负浮点数</span><br><pre><code class=\"html hljs xml\">^(-(([0-9]+\\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\\.[0-9]+)|([0-9]*[1-9][0-9]*)))$\n</code></pre><br></div><div><span>匹配浮点数</span><br><pre><code class=\"html hljs xml\">^(-?\\d+)(\\.\\d+)?$\n</code></pre><br></div><div><span>匹配由26个英文字母组成的字符串</span><br><pre><code class=\"html hljs xml\">^[A-Za-z]+$\n</code></pre><br></div><div><span>匹配由26个英文字母的大写组成的字符串</span><br><pre><code class=\"html hljs xml\">^[A-Z]+$\n</code></pre><br></div><div><span>匹配由26个英文字母的小写组成的字符串</span><br><pre><code class=\"html hljs xml\">^[a-z]+$\n</code></pre><br></div><div><span>匹配由数字和26个英文字母组成的字符串</span><br><pre><code class=\"html hljs xml\">^[A-Za-z0-9]+$\n</code></pre><br></div><div><span>匹配由数字、26个英文字母或者下划线组成的字符串</span><br><pre><code class=\"html hljs xml\">^\\w+$\n</code></pre><br></div><div><span>匹配email地址</span><br><pre><code class=\"html hljs xml\">^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)+$\n</code></pre><span></span><div><span><br></span></div>匹配url<br><pre><code class=\"html hljs xml\">^[a-zA-z]+://匹配(\\w+(-\\w+)*)(\\.(\\w+(-\\w+)*))*(\\?\\S*)?$\n</code></pre><br></div><div><span>匹配html tag</span><br><pre><code class=\"html hljs xml\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">\\s*(\\S+)(\\s[^</span></span></span><span class=\"hljs-tag\">&gt;</span></span>]*)?&gt;(.*?)<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">\\s*\\</span></span></span><span class=\"hljs-tag\">/\\</span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">1</span></span></span><span class=\"hljs-tag\">\\</span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">s</span></span></span><span class=\"hljs-tag\">*&gt;</span></span>\n</code></pre><div style=\"text-align: center;\"><br></div><div style=\"text-align: center;\"><img src=\"https://atts.w3cschool.cn/attachments/day_161128/201611281138082691.png\" style=\"font-size: 13px; line-height: 1.7;\" alt=\"js\"></div></div><div style=\"text-align: center;\"><br></div><h2>javascript常用的正则表达式实例</h2><div><pre><code class=\"html hljs xml\">/**\n* 取得字符串的字节长度\n*/\n \n    function strlen(str)   \n    {   \n        var i;   \n        var len;   \n\n        len = 0;   \n        for (i=0;i<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">str.length;i++)</span>   \n        {   \n            <span class=\"hljs-attr\">if</span> (<span class=\"hljs-attr\">str.charCodeAt</span>(<span class=\"hljs-attr\">i</span>)&gt;</span>255) len+=2; else len++;   \n        }   \n        return len;   \n    }   \n       \n\n/*\n* 判断是否为数字，是则返回true,否则返回false\n*/\n \n    function f_check_number(obj)   \n    {          \n        if (/^\\d+$/.test(obj.value))   \n        {   \n           return true;   \n        }    \n        else    \n        {   \n           f_alert(obj,\"请输入数字\");   \n           return false;   \n        }   \n    }   \n       \n\n/*\n* 判断是否为自然数，是则返回true,否则返回false\n*/\n \n    function f_check_naturalnumber(obj)   \n    {          \n        var s = obj.value;   \n        if (/^[0-9]+$/.test( s ) &amp;&amp; (s &gt; 0))   \n        {   \n           return true;   \n        }    \n        else    \n        {   \n            f_alert(obj,\"请输入自然数\");   \n            return false;   \n        }   \n    }   \n       \n\n/*\n* 判断是否为整数，是则返回true,否则返回false\n*/\n \n    function f_check_integer(obj)   \n    {          \n        if (/^(\\+|-)?\\d+$/.test( obj.value ))    \n        {   \n           return true;   \n        }    \n        else    \n        {   \n            f_alert(obj,\"请输入整数\");   \n            return false;   \n        }   \n    }   \n       \n\n/*\n* 判断是否为实数，是则返回true,否则返回false\n*/\n \n    function f_check_float(obj)   \n    {          \n        if (/^(\\+|-)?\\d+($|\\.\\d+$)/.test( obj.value ))    \n        {   \n           return true;   \n        }    \n        else    \n        {   \n            f_alert(obj,\"请输入实数\");   \n           return false;   \n        }   \n    }   \n       \n\n/*\n* 校验数字的长度和精度\n*/\n \n    function f_check_double(obj){   \n        var numReg;   \n        var value = obj.value;   \n        var strValueTemp, strInt, strDec;      \n        var dtype = obj.eos_datatype;   \n        var pos_dtype = dtype.substring(dtype.indexOf(\"(\")+1,dtype.indexOf(\")\")).split(\",\");   \n        var len = pos_dtype[0], prec = pos_dtype[1];   \n        try  \n        {          \n            numReg =/[\\-]/;   \n            strValueTemp = value.replace(numReg, \"\");   \n            numReg =/[\\+]/;   \n            strValueTemp = strValueTemp.replace(numReg, \"\");   \n            //整数   \n            if(prec==0){   \n                numReg =/[\\.]/;   \n                if(numReg.test(value) == true){   \n                    f_alert(obj, \"输入必须为整数类型\");   \n                    return false;      \n                }              \n            }          \n            if(strValueTemp.indexOf(\".\") <span class=\"hljs-tag\">&lt; <span class=\"hljs-attr\">0</span> ){   \n                <span class=\"hljs-attr\">if</span>(<span class=\"hljs-attr\">strValueTemp.length</span> &gt;</span>( len - prec)){   \n                    f_alert(obj, \"整数位不能超过\"+ (len - prec) +\"位\");   \n                    return false;   \n                }          \n            }else{   \n                strInt = strValueTemp.substr( 0, strValueTemp.indexOf(\".\") );          \n                if(strInt.length &gt;( len - prec)){   \n                    f_alert(obj, \"整数位不能超过\"+ (len - prec) +\"位\");   \n                    return false;   \n                }   \n                strDec = strValueTemp.substr( (strValueTemp.indexOf(\".\")+1), strValueTemp.length );    \n                if(strDec.length &gt; prec){   \n                    f_alert(obj, \"小数位不能超过\"+  prec +\"位\");   \n                    return false;   \n                }          \n            }          \n            return true;   \n        }catch(e){   \n            alert(\"in f_check_double = \" + e);   \n            return false;   \n        }      \n    }   \n       \n\n/*\n* 校验数字的最小最大值\n* 返回bool\n*/\n \n    function f_check_interval(obj)   \n    {   \n        var value = parseFloat(obj.value);   \n\n        var dtype = obj.eos_datatype;   \n        var pos_dtype = dtype.substring(dtype.indexOf(\"(\")+1,dtype.indexOf(\")\")).split(\",\");   \n\n        var minLimit = pos_dtype[0];   \n        var maxLimit = pos_dtype[1];   \n        var minVal = parseFloat(pos_dtype[0]);   \n        var maxVal = parseFloat(pos_dtype[1]);    \n\n        if(isNaN(value))   \n        {   \n            f_alert(obj, \"值必须为数字\");   \n            return false;   \n        }   \n        if((isNaN(minVal) &amp;&amp; (minLimit != \"-\")) || (isNaN(maxVal) &amp;&amp; (maxLimit != \"+\")))   \n        {   \n            f_alert(obj, \"边界值必须为数字或-、+\");   \n            return false;   \n        }   \n\n        if(minLimit == \"-\" &amp;&amp; !isNaN(maxVal))   \n        {   \n            if(value &gt; maxVal)   \n            {   \n                f_alert(obj, \"值不能超过\" + maxVal);   \n                return false;   \n            }   \n        }   \n\n        if(!isNaN(minVal) &amp;&amp; maxLimit == \"+\")   \n        {          \n            if(value <span class=\"hljs-tag\">&lt; <span class=\"hljs-attr\">minVal</span>)   \n            {   \n                <span class=\"hljs-attr\">f_alert</span>(<span class=\"hljs-attr\">obj</span>, \"值不能小于\" + <span class=\"hljs-attr\">minVal</span>);   \n                <span class=\"hljs-attr\">return</span> <span class=\"hljs-attr\">false</span>;   \n            }   \n        }   \n\n        <span class=\"hljs-attr\">if</span>(!<span class=\"hljs-attr\">isNaN</span>(<span class=\"hljs-attr\">minVal</span>) &amp;&amp; !<span class=\"hljs-attr\">isNaN</span>(<span class=\"hljs-attr\">maxVal</span>))   \n        {   \n            <span class=\"hljs-attr\">if</span>(<span class=\"hljs-attr\">minVal</span> &gt;</span> maxVal)   \n            {   \n                f_alert(obj, \"起始值\" + minVal + \"不能大于终止值\" + maxVal);   \n            }else  \n            {   \n                if(!(value <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">=</span> <span class=\"hljs-attr\">maxVal</span> &amp;&amp; <span class=\"hljs-attr\">value</span> &gt;</span>= minVal))   \n                {   \n                    f_alert(obj, \"值应该在\" + minVal + \"和\" + maxVal + \"之间\");   \n                    return false;   \n                }   \n            }   \n        }   \n        return true;   \n    }   \n       \n\n/*\n用途：检查输入字符串是否只由汉字组成\n如果通过验证返回true,否则返回false\n*/\n \n    function f_check_zh(obj){   \n        if (/^[\\u4e00-\\u9fa5]+$/.test(obj.value)) {   \n          return true;   \n        }   \n        f_alert(obj,\"请输入汉字\");   \n        return false;   \n    }   \n       \n\n/*\n* 判断是否为小写英文字母，是则返回true,否则返回false\n*/\n \n    function f_check_lowercase(obj)   \n    {          \n        if (/^[a-z]+$/.test( obj.value ))    \n        {   \n           return true;   \n        }    \n        f_alert(obj,\"请输入小写英文字母\");   \n        return false;   \n    }   \n       \n\n/*\n* 判断是否为大写英文字母，是则返回true,否则返回false\n*/\n \n    function f_check_uppercase(obj)   \n    {          \n        if (/^[A-Z]+$/.test( obj.value ))    \n        {   \n           return true;   \n        }    \n        f_alert(obj,\"请输入大写英文字母\");   \n        return false;   \n    }   \n       \n\n/*\n* 判断是否为英文字母，是则返回true,否则返回false\n*/\n \n    function f_check_letter(obj)   \n    {          \n        if (/^[A-Za-z]+$/.test( obj.value ))    \n        {   \n           return true;   \n        }    \n        f_alert(obj,\"请输入英文字母\");   \n        return false;   \n    }   \n       \n\n/*\n用途：检查输入字符串是否只由汉字、字母、数字组成\n输入：\nvalue：字符串\n返回：\n如果通过验证返回true,否则返回false\n*/\n \n    function f_check_ZhOrNumOrLett(obj){    //判断是否是汉字、字母、数字组成   \n        var regu = \"^[0-9a-zA-Z\\u4e00-\\u9fa5]+$\";      \n        var re = new RegExp(regu);   \n        if (re.test( obj.value )) {   \n          return true;   \n        }   \n        f_alert(obj,\"请输入汉字、字母或数字\");   \n        return false;   \n    }   \n       \n\n/*\n用途：校验ip地址的格式\n输入：strIP：ip地址\n返回：如果通过验证返回true,否则返回false；\n*/\n \n    function f_check_IP(obj)    \n    {    \n        var re=/^(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)$/; //匹配IP地址的正则表达式   \n        if(re.test( obj.value ))   \n        {   \n            if(   RegExp.$1<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">=255</span> &amp;&amp; <span class=\"hljs-attr\">RegExp.</span>$<span class=\"hljs-attr\">1</span>&gt;</span>=0 \n    &amp;&amp;RegExp.$2<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">=255</span> &amp;&amp; <span class=\"hljs-attr\">RegExp.</span>$<span class=\"hljs-attr\">2</span>&gt;</span>=0 \n    &amp;&amp;RegExp.$3<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">=255</span> &amp;&amp; <span class=\"hljs-attr\">RegExp.</span>$<span class=\"hljs-attr\">3</span>&gt;</span>=0  \n    &amp;&amp;RegExp.$4<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">=255</span> &amp;&amp; <span class=\"hljs-attr\">RegExp.</span>$<span class=\"hljs-attr\">4</span>&gt;</span>=0 )\n    {\n     return true;\n    } \n        }   \n        f_alert(obj,\"请输入合法的计算机IP地址\");   \n        return false;    \n    }   \n       \n\n/*\n用途：检查输入对象的值是否符合端口号格式\n输入：str 输入的字符串\n返回：如果通过验证返回true,否则返回false\n*/\n \n    function f_check_port(obj)   \n    {   \n        if(!f_check_number(obj))   \n            return false;   \n        if(obj.value <span class=\"hljs-tag\">&lt; <span class=\"hljs-attr\">65536</span>)   \n            <span class=\"hljs-attr\">return</span> <span class=\"hljs-attr\">true</span>;   \n        <span class=\"hljs-attr\">f_alert</span>(<span class=\"hljs-attr\">obj</span>,\"请输入合法的计算机<span class=\"hljs-attr\">IP</span>地址端口号\");   \n        <span class=\"hljs-attr\">return</span> <span class=\"hljs-attr\">false</span>;    \n    }   \n       \n\n/*\n用途：检查输入对象的值是否符合网址格式\n输入：<span class=\"hljs-attr\">str</span> 输入的字符串\n返回：如果通过验证返回<span class=\"hljs-attr\">true</span>,否则返回<span class=\"hljs-attr\">false</span>\n*/\n \n    <span class=\"hljs-attr\">function</span> <span class=\"hljs-attr\">f_check_URL</span>(<span class=\"hljs-attr\">obj</span>){     \n        <span class=\"hljs-attr\">var</span> <span class=\"hljs-attr\">myReg</span> = <span class=\"hljs-string\">/^((http:[/][/])?\\w+([.]\\w+|[/]\\w*)*)?$/;</span>    \n        <span class=\"hljs-attr\">if</span>(<span class=\"hljs-attr\">myReg.test</span>( <span class=\"hljs-attr\">obj.value</span> )) <span class=\"hljs-attr\">return</span> <span class=\"hljs-attr\">true</span>;    \n        <span class=\"hljs-attr\">f_alert</span>(<span class=\"hljs-attr\">obj</span>,\"请输入合法的网页地址\");   \n        <span class=\"hljs-attr\">return</span> <span class=\"hljs-attr\">false</span>;    \n    }   \n       \n\n/*\n用途：检查输入对象的值是否符合<span class=\"hljs-attr\">E-Mail</span>格式\n输入：<span class=\"hljs-attr\">str</span> 输入的字符串\n返回：如果通过验证返回<span class=\"hljs-attr\">true</span>,否则返回<span class=\"hljs-attr\">false</span>\n*/\n \n    <span class=\"hljs-attr\">function</span> <span class=\"hljs-attr\">f_check_email</span>(<span class=\"hljs-attr\">obj</span>){     \n        <span class=\"hljs-attr\">var</span> <span class=\"hljs-attr\">myReg</span> = <span class=\"hljs-string\">/^([-_A-Za-z0-9\\.]+)@([_A-Za-z0-9]+\\.)+[A-Za-z0-9]{2,3}$/;</span>    \n        <span class=\"hljs-attr\">if</span>(<span class=\"hljs-attr\">myReg.test</span>( <span class=\"hljs-attr\">obj.value</span> )) <span class=\"hljs-attr\">return</span> <span class=\"hljs-attr\">true</span>;    \n        <span class=\"hljs-attr\">f_alert</span>(<span class=\"hljs-attr\">obj</span>,\"请输入合法的电子邮件地址\");   \n        <span class=\"hljs-attr\">return</span> <span class=\"hljs-attr\">false</span>;    \n    }   \n       \n\n/*\n要求：一、移动电话号码为<span class=\"hljs-attr\">11</span>或<span class=\"hljs-attr\">12</span>位，如果为<span class=\"hljs-attr\">12</span>位,那么第一位为<span class=\"hljs-attr\">0</span>\n二、<span class=\"hljs-attr\">11</span>位移动电话号码的第一位和第二位为\"<span class=\"hljs-attr\">13</span>\"\n三、<span class=\"hljs-attr\">12</span>位移动电话号码的第二位和第三位为\"<span class=\"hljs-attr\">13</span>\"\n用途：检查输入手机号码是否正确\n输入：\n<span class=\"hljs-attr\">s</span>：字符串\n返回：\n如果通过验证返回<span class=\"hljs-attr\">true</span>,否则返回<span class=\"hljs-attr\">false</span>\n*/\n \n    <span class=\"hljs-attr\">function</span> <span class=\"hljs-attr\">f_check_mobile</span>(<span class=\"hljs-attr\">obj</span>){      \n        <span class=\"hljs-attr\">var</span> <span class=\"hljs-attr\">regu</span> =<span class=\"hljs-string\">/(^[1][3][0-9]{9}$)|(^0[1][3][0-9]{9}$)/;</span>   \n        <span class=\"hljs-attr\">var</span> <span class=\"hljs-attr\">re</span> = <span class=\"hljs-string\">new</span> <span class=\"hljs-attr\">RegExp</span>(<span class=\"hljs-attr\">regu</span>);   \n        <span class=\"hljs-attr\">if</span> (<span class=\"hljs-attr\">re.test</span>( <span class=\"hljs-attr\">obj.value</span> )) {   \n          <span class=\"hljs-attr\">return</span> <span class=\"hljs-attr\">true</span>;   \n        }   \n        <span class=\"hljs-attr\">f_alert</span>(<span class=\"hljs-attr\">obj</span>,\"请输入正确的手机号码\");   \n        <span class=\"hljs-attr\">return</span> <span class=\"hljs-attr\">false</span>;      \n    }   \n       \n\n/*\n要求：一、电话号码由数字、\"(\"、\")\"和\"<span class=\"hljs-attr\">-</span>\"构成\n二、电话号码为<span class=\"hljs-attr\">3</span>到<span class=\"hljs-attr\">8</span>位\n三、如果电话号码中包含有区号，那么区号为三位或四位\n四、区号用\"(\"、\")\"或\"<span class=\"hljs-attr\">-</span>\"和其他部分隔开\n用途：检查输入的电话号码格式是否正确\n输入：\n<span class=\"hljs-attr\">strPhone</span>：字符串\n返回：\n如果通过验证返回<span class=\"hljs-attr\">true</span>,否则返回<span class=\"hljs-attr\">false</span>\n*/\n \n    <span class=\"hljs-attr\">function</span> <span class=\"hljs-attr\">f_check_phone</span>(<span class=\"hljs-attr\">obj</span>)    \n    {   \n        <span class=\"hljs-attr\">var</span> <span class=\"hljs-attr\">regu</span> =<span class=\"hljs-string\">/(^([0][1-9]{2,3}[-])?\\d{3,8}(-\\d{1,6})?$)|(^\\([0][1-9]{2,3}\\)\\d{3,8}(\\(\\d{1,6}\\))?$)|(^\\d{3,8}$)/;</span>    \n        <span class=\"hljs-attr\">var</span> <span class=\"hljs-attr\">re</span> = <span class=\"hljs-string\">new</span> <span class=\"hljs-attr\">RegExp</span>(<span class=\"hljs-attr\">regu</span>);   \n        <span class=\"hljs-attr\">if</span> (<span class=\"hljs-attr\">re.test</span>( <span class=\"hljs-attr\">obj.value</span> )) {   \n          <span class=\"hljs-attr\">return</span> <span class=\"hljs-attr\">true</span>;   \n        }   \n        <span class=\"hljs-attr\">f_alert</span>(<span class=\"hljs-attr\">obj</span>,\"请输入正确的电话号码\");   \n        <span class=\"hljs-attr\">return</span> <span class=\"hljs-attr\">false</span>;   \n    }   \n       \n\n/* 判断是否为邮政编码 */\n \n    <span class=\"hljs-attr\">function</span> <span class=\"hljs-attr\">f_check_zipcode</span>(<span class=\"hljs-attr\">obj</span>)   \n    {   \n        <span class=\"hljs-attr\">if</span>(!<span class=\"hljs-attr\">f_check_number</span>(<span class=\"hljs-attr\">obj</span>))   \n            <span class=\"hljs-attr\">return</span> <span class=\"hljs-attr\">false</span>;   \n        <span class=\"hljs-attr\">if</span>(<span class=\"hljs-attr\">obj.value.length</span>!=<span class=\"hljs-string\">6)</span>   \n        {   \n            <span class=\"hljs-attr\">f_alert</span>(<span class=\"hljs-attr\">obj</span>,\"邮政编码长度必须是<span class=\"hljs-attr\">6</span>位\");   \n            <span class=\"hljs-attr\">return</span> <span class=\"hljs-attr\">false</span>;   \n        }   \n        <span class=\"hljs-attr\">return</span> <span class=\"hljs-attr\">true</span>;   \n    }   \n       \n\n/*\n用户<span class=\"hljs-attr\">ID</span>，可以为数字、字母、下划线的组合，\n第一个字符不能为数字,且总长度不能超过<span class=\"hljs-attr\">20</span>。\n*/\n \n    <span class=\"hljs-attr\">function</span> <span class=\"hljs-attr\">f_check_userID</span>(<span class=\"hljs-attr\">obj</span>)   \n    {   \n        <span class=\"hljs-attr\">var</span> <span class=\"hljs-attr\">userID</span> = <span class=\"hljs-string\">obj.value;</span>   \n        <span class=\"hljs-attr\">if</span>(<span class=\"hljs-attr\">userID.length</span> &gt;</span> 20)   \n        {   \n            f_alert(obj,\"ID长度不能大于20\");   \n            return false;   \n        }   \n\n        if(!isNaN(userID.charAt(0)))   \n        {   \n            f_alert(obj,\"ID第一个字符不能为数字\");   \n            return false;   \n        }   \n        if(!/^\\w{1,20}$/.test(userID))    \n        {   \n            f_alert(obj,\"ID只能由数字、字母、下划线组合而成\");   \n            return false;   \n        }   \n        return true;   \n    }   \n       \n\n/*\n功能：验证身份证号码是否有效\n提示信息：未输入或输入身份证号不正确！\n使用：f_check_IDno(obj)\n返回：bool\n*/\n \n    function f_check_IDno(obj)   \n    {    \n        var aCity={11:\"北京\",12:\"天津\",13:\"河北\",14:\"山西\",15:\"内蒙古\",21:\"辽宁\",22:\"吉林\",23:\"黑龙江\",31:\"上海\",32:\"江苏\",33:\"浙江\",34:\"安徽\",35:\"福建\",36:\"江西\",37:\"山东\",41:\"河南\",42:\"湖北\",43:\"湖南\",44:\"广东\",45:\"广西\",46:\"海南\",50:\"重庆\",51:\"四川\",52:\"贵州\",53:\"云南\",54:\"西藏\",61:\"陕西\",62:\"甘肃\",63:\"青海\",64:\"宁夏\",65:\"新疆\",71:\"台湾\",81:\"香港\",82:\"澳门\",91:\"国外\"};   \n\n        var iSum = 0;   \n        var info = \"\";   \n        var strIDno = obj.value;   \n        var idCardLength = strIDno.length;     \n        if(!/^\\d{17}(\\d|x)$/i.test(strIDno)&amp;&amp;!/^\\d{15}$/i.test(strIDno))    \n        {   \n            f_alert(obj,\"非法身份证号\");   \n            return false;   \n        }   \n\n        //在后面的运算中x相当于数字10,所以转换成a   \n        strIDno = strIDno.replace(/x$/i,\"a\");   \n\n        if(aCity[parseInt(strIDno.substr(0,2))]==null)   \n        {   \n            f_alert(obj,\"非法地区\");   \n            return false;   \n        }   \n\n        if (idCardLength==18)   \n        {   \n            sBirthday=strIDno.substr(6,4)+\"-\"+Number(strIDno.substr(10,2))+\"-\"+Number(strIDno.substr(12,2));   \n            var d = new Date(sBirthday.replace(/-/g,\"/\"))   \n            if(sBirthday!=(d.getFullYear()+\"-\"+ (d.getMonth()+1) + \"-\" + d.getDate()))   \n            {          \n                f_alert(obj,\"非法生日\");   \n                return false;   \n            }   \n\n            for(var i = 17;i&gt;=0;i --)   \n                iSum += (Math.pow(2,i) % 11) * parseInt(strIDno.charAt(17 - i),11);   \n\n            if(iSum%11!=1)   \n            {   \n                f_alert(obj,\"非法身份证号\");   \n                return false;   \n            }   \n        }   \n        else if (idCardLength==15)   \n        {   \n            sBirthday = \"19\" + strIDno.substr(6,2) + \"-\" + Number(strIDno.substr(8,2)) + \"-\" + Number(strIDno.substr(10,2));   \n            var d = new Date(sBirthday.replace(/-/g,\"/\"))   \n            var dd = d.getFullYear().toString() + \"-\" + (d.getMonth()+1) + \"-\" + d.getDate();      \n            if(sBirthday != dd)   \n            {   \n                f_alert(obj,\"非法生日\");   \n                return false;   \n            }   \n        }   \n        return true;    \n    }   \n       \n\n/*\n* 判断字符串是否符合指定的正则表达式\n*/\n \n    function f_check_formatStr(obj)   \n    {   \n        var str = obj.value;   \n        var dtype = obj.eos_datatype;   \n        var regu = dtype.substring(dtype.indexOf(\"(\")+1,dtype.indexOf(\")\"));    //指定的正则表达式   \n        var re = new RegExp(regu);   \n        if(re.test(str))   \n            return true;   \n        f_alert(obj , \"不符合指定的正则表达式要求\");   \n        return false;      \n    }   \n       \n\n/*\n功能：判断是否为日期(格式:yyyy年MM月dd日,yyyy-MM-dd,yyyy/MM/dd,yyyyMMdd)\n提示信息：未输入或输入的日期格式错误！\n使用：f_check_date(obj)\n返回：bool\n*/\n \n    function f_check_date(obj)   \n    {   \n        var date = Trim(obj.value);   \n        var dtype = obj.eos_datatype;   \n        var format = dtype.substring(dtype.indexOf(\"(\")+1,dtype.indexOf(\")\"));  //日期格式   \n        var year,month,day,datePat,matchArray;   \n\n        if(/^(y{4})(-|\\/)(M{1,2})\\2(d{1,2})$/.test(format))   \n            datePat = /^(\\d{4})(-|\\/)(\\d{1,2})\\2(\\d{1,2})$/;   \n        else if(/^(y{4})(年)(M{1,2})(月)(d{1,2})(日)$/.test(format))   \n            datePat = /^(\\d{4})年(\\d{1,2})月(\\d{1,2})日$/;   \n        else if(format==\"yyyyMMdd\")   \n            datePat = /^(\\d{4})(\\d{2})(\\d{2})$/;   \n        else  \n        {   \n            f_alert(obj,\"日期格式不对\");   \n            return false;   \n        }   \n        matchArray = date.match(datePat);   \n        if(matchArray == null)    \n        {   \n            f_alert(obj,\"日期长度不对,或日期中有非数字符号\");   \n            return false;   \n        }   \n        if(/^(y{4})(-|\\/)(M{1,2})\\2(d{1,2})$/.test(format))   \n        {   \n            year = matchArray[1];   \n            month = matchArray[3];   \n            day = matchArray[4];   \n        } else  \n        {   \n            year = matchArray[1];   \n            month = matchArray[2];   \n            day = matchArray[3];   \n        }   \n        if (month <span class=\"hljs-tag\">&lt; <span class=\"hljs-attr\">1</span> || <span class=\"hljs-attr\">month</span> &gt;</span> 12)   \n        {                \n            f_alert(obj,\"月份应该为1到12的整数\");   \n            return false;   \n        }   \n        if (day <span class=\"hljs-tag\">&lt; <span class=\"hljs-attr\">1</span> || <span class=\"hljs-attr\">day</span> &gt;</span> 31)   \n        {   \n            f_alert(obj,\"每个月的天数应该为1到31的整数\");   \n            return false;   \n        }        \n        if ((month==4 || month==6 || month==9 || month==11) &amp;&amp; day==31)   \n        {   \n            f_alert(obj,\"该月不存在31号\");   \n            return false;   \n        }        \n        if (month==2)   \n        {   \n            var isleap=(year % 4==0 &amp;&amp; (year % 100 !=0 || year % 400==0));   \n            if (day&gt;29)   \n            {                  \n                f_alert(obj,\"2月最多有29天\");   \n                return false;   \n            }   \n            if ((day==29) &amp;&amp; (!isleap))   \n            {                  \n                f_alert(obj,\"闰年2月才有29天\");   \n                return false;   \n            }   \n        }   \n        return true;   \n    }   \n       \n\n/*\n功能：校验的格式为yyyy年MM月dd日HH时mm分ss秒,yyyy-MM-dd HH:mm:ss,yyyy/MM/dd HH:mm:ss,yyyyMMddHHmmss\n提示信息：未输入或输入的时间格式错误\n使用：f_check_time(obj)\n返回：bool\n*/\n \n    function f_check_time(obj)   \n    {   \n        var time = Trim(obj.value);   \n        var dtype = obj.eos_datatype;   \n        var format = dtype.substring(dtype.indexOf(\"(\")+1,dtype.indexOf(\")\"));  //日期格式   \n        var datePat,matchArray,year,month,day,hour,minute,second;   \n\n        if(/^(y{4})(-|\\/)(M{1,2})\\2(d{1,2}) (HH:mm:ss)$/.test(format))   \n            datePat = /^(\\d{4})(-|\\/)(\\d{1,2})\\2(\\d{1,2}) (\\d{1,2}):(\\d{1,2}):(\\d{1,2})$/;   \n        else if(/^(y{4})(年)(M{1,2})(月)(d{1,2})(日)(HH时mm分ss秒)$/.test(format))   \n            datePat = /^(\\d{4})年(\\d{1,2})月(\\d{1,2})日(\\d{1,2})时(\\d{1,2})分(\\d{1,2})秒$/;   \n        else if(format == \"yyyyMMddHHmmss\")   \n            datePat = /^(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})$/;   \n        else  \n        {   \n            f_alert(obj,\"日期格式不对\");   \n            return false;   \n        }   \n        matchArray = time.match(datePat);   \n        if(matchArray == null)    \n        {   \n            f_alert(obj,\"日期长度不对,或日期中有非数字符号\");   \n            return false;   \n        }   \n        if(/^(y{4})(-|\\/)(M{1,2})\\2(d{1,2}) (HH:mm:ss)$/.test(format))   \n        {   \n            year = matchArray[1];   \n            month = matchArray[3];   \n            day = matchArray[4];   \n            hour = matchArray[5];   \n            minute = matchArray[6];   \n            second = matchArray[7];   \n        } else  \n        {   \n            year = matchArray[1];   \n            month = matchArray[2];   \n            day = matchArray[3];   \n            hour = matchArray[4];   \n            minute = matchArray[5];   \n            second = matchArray[6];   \n        }   \n        if (month <span class=\"hljs-tag\">&lt; <span class=\"hljs-attr\">1</span> || <span class=\"hljs-attr\">month</span> &gt;</span> 12)   \n        {                \n            f_alert(obj,\"月份应该为1到12的整数\");   \n            return false;   \n        }   \n        if (day <span class=\"hljs-tag\">&lt; <span class=\"hljs-attr\">1</span> || <span class=\"hljs-attr\">day</span> &gt;</span> 31)   \n        {              \n            f_alert(obj,\"每个月的天数应该为1到31的整数\");   \n            return false;   \n        }        \n        if ((month==4 || month==6 || month==9 || month==11) &amp;&amp; day==31)   \n        {            \n            f_alert(obj,\"该月不存在31号\");   \n            return false;   \n        }        \n        if (month==2)   \n        {   \n            var isleap=(year % 4==0 &amp;&amp; (year % 100 !=0 || year % 400==0));   \n            if (day&gt;29)   \n            {                  \n                f_alert(obj,\"2月最多有29天\");   \n                return false;   \n            }   \n            if ((day==29) &amp;&amp; (!isleap))   \n            {                  \n                f_alert(obj,\"闰年2月才有29天\");   \n                return false;   \n            }   \n        }   \n        if(hour<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">0</span> || <span class=\"hljs-attr\">hour</span>&gt;</span>23)   \n        {   \n            f_alert(obj,\"小时应该是0到23的整数\");   \n            return false;   \n        }   \n        if(minute<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">0</span> || <span class=\"hljs-attr\">minute</span>&gt;</span>59)   \n        {   \n            f_alert(obj,\"分应该是0到59的整数\");   \n            return false;   \n        }   \n        if(second<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">0</span> || <span class=\"hljs-attr\">second</span>&gt;</span>59)   \n        {   \n            f_alert(obj,\"秒应该是0到59的整数\");   \n            return false;   \n        }   \n        return true;   \n    }   \n       \n\n/*判断当前对象是否可见*/\n \n    function isVisible(obj){   \n        var visAtt,disAtt;   \n        try{   \n            disAtt=obj.style.display;   \n            visAtt=obj.style.visibility;   \n        }catch(e){}   \n        if(disAtt==\"none\" || visAtt==\"hidden\")   \n            return false;   \n        return true;   \n    }   \n       \n\n/*判断当前对象及其父对象是否可见*/\n \n    function checkPrVis(obj){   \n        var pr=obj.parentNode;   \n        do{   \n            if(pr == undefined || pr == \"undefined\") return true;   \n            else{   \n                if(!isVisible(pr)) return false;   \n            }   \n        }while(pr=pr.parentNode);   \n        return true;   \n    }   \n       \n\n/* 弹出警告对话框，用户点确定后将光标置于出错文本框上， 并且将原来输入内容选中。*/\n \n    function f_alert(obj,alertInfo)   \n    {   \n        var caption = obj.getAttribute(\"eos_displayname\");   \n        if(caption == null)   \n            caption = \"\";   \n        alert(caption + \"：\" + alertInfo + \"！\");    \n        obj.select();   \n        if(isVisible(obj) &amp;&amp; checkPrVis(obj))   \n            obj.focus();   \n    }   \n       \n\n/**\n* 检测字符串是否为空\n*/\n \n    function isnull(str)   \n    {   \n        var i;   \n        if(str.length == 0)   \n            return true;   \n        for (i=0;i<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">str.length;i++)</span>   \n        {   \n            <span class=\"hljs-attr\">if</span> (<span class=\"hljs-attr\">str.charAt</span>(<span class=\"hljs-attr\">i</span>)!=<span class=\"hljs-string\">' '</span>)    \n                <span class=\"hljs-attr\">return</span> <span class=\"hljs-attr\">false</span>;   \n        }   \n        <span class=\"hljs-attr\">return</span> <span class=\"hljs-attr\">true</span>;   \n    }   \n       \n\n/**\n* 检测指定文本框输入是否合法。\n* 如果用户输入的内容有错，则弹出提示对话框，\n* 同时将焦点置于该文本框上，并且该文本框前面\n* 会出现一个警告图标(输入正确后会自动去掉)。\n*/\n \n    <span class=\"hljs-attr\">function</span> <span class=\"hljs-attr\">checkInput</span>(<span class=\"hljs-attr\">object</span>)   \n    {   \n        <span class=\"hljs-attr\">var</span> <span class=\"hljs-attr\">image</span>;   \n        <span class=\"hljs-attr\">var</span> <span class=\"hljs-attr\">i</span>;   \n        <span class=\"hljs-attr\">var</span> <span class=\"hljs-attr\">length</span>;   \n\n        <span class=\"hljs-attr\">if</span>(<span class=\"hljs-attr\">object.eos_maxsize</span> + \"\" != <span class=\"hljs-string\">\"undefined\"</span>) <span class=\"hljs-attr\">length</span> = <span class=\"hljs-string\">object.eos_maxsize;</span>   \n        <span class=\"hljs-attr\">else</span> <span class=\"hljs-attr\">length</span> = <span class=\"hljs-string\">0;</span>   \n\n        <span class=\"hljs-attr\">if</span> (<span class=\"hljs-attr\">object.eos_isnull</span>==<span class=\"hljs-string\">\"true\"</span> &amp;&amp; <span class=\"hljs-attr\">isnull</span>(<span class=\"hljs-attr\">object.value</span>))  <span class=\"hljs-attr\">return</span> <span class=\"hljs-attr\">true</span>;   \n\n        /* 长度校验 */  \n        <span class=\"hljs-attr\">if</span>(<span class=\"hljs-attr\">length</span> != <span class=\"hljs-string\">0</span> &amp;&amp; <span class=\"hljs-attr\">strlen</span>(<span class=\"hljs-attr\">object.value</span>) &gt;</span> parseInt(length)) {   \n                f_alert(object, \"超出最大长度\" + length);   \n                return false;   \n        }    \n        /* 数据类型校验 */  \n        else {   \n            if (object.eos_datatype + \"\" != \"undefined\")   \n            {          \n\n                var dtype = object.eos_datatype;   \n                var objName = object.name;   \n                //如果类型名后面带有括号，则视括号前面的字符串为校验类型   \n                if(dtype.indexOf(\"(\") != -1)   \n                    dtype = dtype.substring(0,dtype.indexOf(\"(\"));   \n                //根据页面元素的校验类型进行校验   \n                try{   \n                    if(eval(\"f_check_\" + dtype + \"(object)\") != true)   \n                        return false;   \n                }catch(e){return true;}   \n                /*  如果form中存在name前半部分相同，并且同时存在以\"min\"和\"max\"结尾的表单域，  \n                    那么视为按区间查询。即\"min\"结尾的表单域的值要小于等于\"max\"结尾的表单域的值。 */ \n                if(objName.substring((objName.length-3),objName.length)==\"min\")   \n                {   \n                    var objMaxName = objName.substring(0, (objName.length-3)) + \"max\";   \n                    if(document.getElementById(objMaxName) != undefined &amp;&amp; document.getElementById(objMaxName) != \"undefined\" )   \n                    {   \n                        if(checkIntervalObjs(object, document.getElementById(objMaxName)) != true)   \n                            return false;                      \n                    }   \n                }              \n            }   \n        }   \n        return true;   \n    }   \n       \n\n/* 检测表单中所有输入项的正确性，一般用于表单的onsubmit事件 */\n \n    function checkForm(myform)   \n    {   \n        var i;   \n        for (i=0;i<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">myform.elements.length;i++)</span>   \n        {   \n            /* 非自定义属性的元素不予理睬 */        \n            <span class=\"hljs-attr\">if</span> (<span class=\"hljs-attr\">myform.elements</span>[<span class=\"hljs-attr\">i</span>]<span class=\"hljs-attr\">.eos_displayname</span> + \"\" == <span class=\"hljs-string\">\"undefined\"</span>) <span class=\"hljs-attr\">continue</span>;   \n            /* 非空校验 */  \n            <span class=\"hljs-attr\">if</span> (<span class=\"hljs-attr\">myform.elements</span>[<span class=\"hljs-attr\">i</span>]<span class=\"hljs-attr\">.eos_isnull</span>==<span class=\"hljs-string\">\"false\"</span> &amp;&amp; <span class=\"hljs-attr\">isnull</span>(<span class=\"hljs-attr\">myform.elements</span>[<span class=\"hljs-attr\">i</span>]<span class=\"hljs-attr\">.value</span>)){   \n                <span class=\"hljs-attr\">f_alert</span>(<span class=\"hljs-attr\">myform.elements</span>[<span class=\"hljs-attr\">i</span>],\"不能为空\");   \n                <span class=\"hljs-attr\">return</span> <span class=\"hljs-attr\">false</span>;   \n            }          \n            /* 数据类型校验 */  \n            <span class=\"hljs-attr\">if</span> (<span class=\"hljs-attr\">checkInput</span>(<span class=\"hljs-attr\">myform.elements</span>[<span class=\"hljs-attr\">i</span>])==<span class=\"hljs-string\">false)</span>   \n                <span class=\"hljs-attr\">return</span> <span class=\"hljs-attr\">false</span>;                  \n        }   \n        <span class=\"hljs-attr\">return</span> <span class=\"hljs-attr\">true</span>;   \n    }   \n       \n\n/**\n* 校验两个表单域数据的大小，目前只允许比较日期和数字。\n* @<span class=\"hljs-attr\">param</span> <span class=\"hljs-attr\">obj1</span> 小值表单域\n* @<span class=\"hljs-attr\">param</span> <span class=\"hljs-attr\">obj2</span> 大值表单域\n*/\n \n    <span class=\"hljs-attr\">function</span> <span class=\"hljs-attr\">checkIntervalObjs</span>(<span class=\"hljs-attr\">obj1</span> , <span class=\"hljs-attr\">obj2</span>)   \n    {      \n        <span class=\"hljs-attr\">var</span> <span class=\"hljs-attr\">caption1</span> = <span class=\"hljs-string\">obj1.getAttribute(</span>\"<span class=\"hljs-attr\">eos_displayname</span>\");   \n        <span class=\"hljs-attr\">var</span> <span class=\"hljs-attr\">caption2</span> = <span class=\"hljs-string\">obj2.getAttribute(</span>\"<span class=\"hljs-attr\">eos_displayname</span>\");   \n        <span class=\"hljs-attr\">var</span> <span class=\"hljs-attr\">val1</span> = <span class=\"hljs-string\">parseFloat(obj1.value);</span>   \n        <span class=\"hljs-attr\">var</span> <span class=\"hljs-attr\">val2</span> = <span class=\"hljs-string\">parseFloat(obj2.value);</span>   \n        // 非自定义属性的元素不予理睬   \n        <span class=\"hljs-attr\">if</span> (<span class=\"hljs-attr\">obj1.eos_displayname</span> + \"\" == <span class=\"hljs-string\">\"undefined\"</span> || <span class=\"hljs-attr\">obj2.eos_displayname</span> + \"\" == <span class=\"hljs-string\">\"undefined\"</span>) {   \n            <span class=\"hljs-attr\">return</span> <span class=\"hljs-attr\">false</span>;   \n        }   \n        // 日期类型的比较   \n        <span class=\"hljs-attr\">if</span>(<span class=\"hljs-attr\">f_check_date</span>(<span class=\"hljs-attr\">obj1</span>) == <span class=\"hljs-string\">true</span> &amp;&amp; <span class=\"hljs-attr\">f_check_date</span>(<span class=\"hljs-attr\">obj2</span>) == <span class=\"hljs-string\">true){</span>   \n            <span class=\"hljs-attr\">var</span> <span class=\"hljs-attr\">dtype</span> = <span class=\"hljs-string\">obj1.eos_datatype;</span>   \n            <span class=\"hljs-attr\">var</span> <span class=\"hljs-attr\">format</span> = <span class=\"hljs-string\">dtype.substring(dtype.indexOf(</span>\"(\")+<span class=\"hljs-attr\">1</span>,<span class=\"hljs-attr\">dtype.indexOf</span>(\")\"));  //日期格式   \n            <span class=\"hljs-attr\">val1</span> = <span class=\"hljs-string\">getDateByFormat(obj1.value,</span> <span class=\"hljs-attr\">format</span>);   \n            <span class=\"hljs-attr\">dtype</span> = <span class=\"hljs-string\">obj2.eos_datatype;</span>   \n            <span class=\"hljs-attr\">format</span> = <span class=\"hljs-string\">dtype.substring(dtype.indexOf(</span>\"(\")+<span class=\"hljs-attr\">1</span>,<span class=\"hljs-attr\">dtype.indexOf</span>(\")\"));  //日期格式   \n            <span class=\"hljs-attr\">val2</span> = <span class=\"hljs-string\">getDateByFormat(obj2.value,</span> <span class=\"hljs-attr\">format</span>);   \n            <span class=\"hljs-attr\">if</span>(<span class=\"hljs-attr\">val1</span> &gt;</span> val2){   \n            obj2.select();   \n            if(isVisible(obj) &amp;&amp; checkPrVis(obj))   \n                obj2.focus();   \n            alert(caption1 + \"的起始日期不能大于其终止日期！\");   \n            return false;   \n            }   \n        }   \n        // 数字类型的比较   \n        if((isNaN(val1) &amp;&amp; !isnull(val1)) || (isNaN(val2) &amp;&amp; !isnull(val2))){   \n            alert(caption1 + \"的值不全为数字则不能比较！\");   \n            return false;   \n        }   \n        if(val1 &gt; val2){   \n            obj2.select();   \n            if(isVisible(obj) &amp;&amp; checkPrVis(obj))   \n                obj2.focus();   \n            alert(caption1 + \"的起始值不能大于其终止值！\");   \n            return false;   \n        }   \n        return true;   \n    }   \n       \n \n/*根据日期格式，将字符串转换成Date对象。\n格式：yyyy-年，MM-月，dd-日，HH-时，mm-分，ss-秒。\n（格式必须写全，例如:yy-M-d，是不允许的，否则返回null；格式与实际数据不符也返回null。）\n默认格式：yyyy-MM-dd HH:mm:ss,yyyy-MM-dd。*/\n \n    function getDateByFormat(str){   \n        var dateReg,format;   \n        var y,M,d,H,m,s,yi,Mi,di,Hi,mi,si;   \n        if((arguments[1] + \"\") == \"undefined\") format = \"yyyy-MM-dd HH:mm:ss\";   \n        else format = arguments[1];   \n        yi = format.indexOf(\"yyyy\");   \n        Mi = format.indexOf(\"MM\");   \n        di = format.indexOf(\"dd\");   \n        Hi = format.indexOf(\"HH\");   \n        mi = format.indexOf(\"mm\");   \n        si = format.indexOf(\"ss\");   \n        if(yi == -1 || Mi == -1 || di == -1) return null;   \n        else{   \n            y = parseInt(str.substring(yi, yi+4));   \n            M = parseInt(str.substring(Mi, Mi+2));   \n            d = parseInt(str.substring(di, di+2));   \n        }   \n        if(isNaN(y) || isNaN(M) || isNaN(d)) return null;   \n        if(Hi == -1 || mi == -1 || si == -1) return new Date(y, M-1, d);   \n        else{   \n            H = str.substring(Hi, Hi+4);   \n            m = str.substring(mi, mi+2);   \n            s = str.substring(si, si+2);   \n        }   \n        if(isNaN(parseInt(y)) || isNaN(parseInt(M)) || isNaN(parseInt(d))) return new Date(y, M-1, d);   \n        else return new Date(y, M-1, d,H, m, s);   \n    }   \n       \n\n/*LTrim(string):去除左边的空格*/\n \n    function LTrim(str){   \n        var whitespace = new String(\" \\t\\n\\r\");   \n        var s = new String(str);      \n\n        if (whitespace.indexOf(s.charAt(0)) != -1){   \n            var j=0, i = s.length;   \n            while (j <span class=\"hljs-tag\">&lt; <span class=\"hljs-attr\">i</span> &amp;&amp; <span class=\"hljs-attr\">whitespace.indexOf</span>(<span class=\"hljs-attr\">s.charAt</span>(<span class=\"hljs-attr\">j</span>)) != <span class=\"hljs-string\">-1){</span>   \n                <span class=\"hljs-attr\">j</span>++;   \n            }   \n            <span class=\"hljs-attr\">s</span> = <span class=\"hljs-string\">s.substring(j,</span> <span class=\"hljs-attr\">i</span>);   \n        }   \n        <span class=\"hljs-attr\">return</span> <span class=\"hljs-attr\">s</span>;   \n    }   \n       \n\n/*<span class=\"hljs-attr\">RTrim</span>(<span class=\"hljs-attr\">string</span>)<span class=\"hljs-attr\">:</span>去除右边的空格*/\n \n    <span class=\"hljs-attr\">function</span> <span class=\"hljs-attr\">RTrim</span>(<span class=\"hljs-attr\">str</span>){   \n        <span class=\"hljs-attr\">var</span> <span class=\"hljs-attr\">whitespace</span> = <span class=\"hljs-string\">new</span> <span class=\"hljs-attr\">String</span>(\" \\<span class=\"hljs-attr\">t</span>\\<span class=\"hljs-attr\">n</span>\\<span class=\"hljs-attr\">r</span>\");   \n        <span class=\"hljs-attr\">var</span> <span class=\"hljs-attr\">s</span> = <span class=\"hljs-string\">new</span> <span class=\"hljs-attr\">String</span>(<span class=\"hljs-attr\">str</span>);   \n\n        <span class=\"hljs-attr\">if</span> (<span class=\"hljs-attr\">whitespace.indexOf</span>(<span class=\"hljs-attr\">s.charAt</span>(<span class=\"hljs-attr\">s.length-1</span>)) != <span class=\"hljs-string\">-1){</span>   \n            <span class=\"hljs-attr\">var</span> <span class=\"hljs-attr\">i</span> = <span class=\"hljs-string\">s.length</span> <span class=\"hljs-attr\">-</span> <span class=\"hljs-attr\">1</span>;   \n            <span class=\"hljs-attr\">while</span> (<span class=\"hljs-attr\">i</span> &gt;</span>= 0 &amp;&amp; whitespace.indexOf(s.charAt(i)) != -1){   \n                i--;   \n            }   \n            s = s.substring(0, i+1);   \n        }   \n        return s;   \n    }   \n       \n\n/*Trim(string):去除字符串两边的空格*/\n \n    function Trim(str){   \n        return RTrim(LTrim(str));   \n    }\n</code></pre><div style=\"text-align: center;\"><img src=\"https://atts.w3cschool.cn/attachments/day_161128/201611281142011859.png\" style=\"font-size: 13px; line-height: 1.7;\" alt=\"js正则表达式\"></div></div><h2>正则表达式在<span>JavaScript</span>中的高级应用</h2><div><br></div><div><strong>子模式</strong><br></div><div>子模式了。用来指定重复次数的元字符只能作用于紧挨着它的字符或元字符，而在实际应用中我们需要进行重复匹配的字符往往不一定就只是一个字符或元字符，就如reUrl中所要匹配的“http”和“net”就是多个字符，这时候就可以使用（和）将多个字符括起来作为一个独立的元素来使用。<br><br>比如验证email地址的正则表达式var reMail = /\\w+@\\w+\\.\\w+/i;并不完善，一个有效的用户名除了可以是字母、数字、下划线外，还可以是点号，同时域名部分也不能保证是mail.com这行的形式，也完全有可能是mail.mymail.com这样的形式，所以一个更为完善的匹配有效email地址的正则表达式是这样的：<br></div><div><pre><code class=\"html hljs xml\">var reEmail = /(\\w+\\.)*\\w+@(\\w+\\.)+\\w+/i;\n</code></pre><br></div><div><strong>回溯引用</strong><br></div><div><span>在web开发中，我们经常需要去匹配HTML标签，大多数的HTML标签都有一个开始标记和结束标记如&lt;h1&gt;&lt;/h1&gt;,&lt;div&gt;&lt;/div&gt;，如果只需单纯的匹配H1和DIV我们可以很容易的构造出该正则表达式：</span><br><pre><code class=\"html hljs xml\">var reH1 = /<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>.*?<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">\\</span>/<span class=\"hljs-attr\">h1</span>&gt;</span>/gi;\nvar reDiv = /<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>.*?<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">\\</span>/<span class=\"hljs-attr\">div</span>&gt;</span>/gi;\n</code></pre><span>但是我们所要匹配的并不是某个或某几个HTML标签，事实上HTML具体是什么样的形式我们完全是未知的，比如XML的标记我们是完全无法预计的，所以分组匹配在这里完全排不上用场。幸运的是，在正则表达式中回溯引用允许正则表达式模式引用前面的匹配结果。具体应用可以参考下面匹配HTML标签的正则表达式。</span></div><div><pre><code class=\"html hljs xml\">var html = \"<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>nowamagic<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\";\nvar reTag = /<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">(\\w+\\d?)</span>&gt;</span>.*?<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">\\</span>/\\<span class=\"hljs-attr\">1</span>&gt;</span>/gi;\ndocument.write(html.match(reTag));//<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>nowamagic<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n</code></pre><span>reTag最后部分的\\1便是一个回溯引用，引用的前面的第一个子模式(\\w+\\d?)，当然如果前面还存在第二个子模式我们也可以使用\\2引用、。注意：回溯引用只能引用前面已经匹配过的结果，而下面这样的写法就是错误的。</span></div><div><pre><code class=\"html hljs xml\">var reTag = /<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">\\1</span>&gt;</span>.*?<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">\\</span>/(\\<span class=\"hljs-attr\">w</span>+\\<span class=\"hljs-attr\">d</span>?)&gt;</span>/gi;\n</code></pre>回溯引用在替换操作中有着十分广泛的应用。比如我们要将一段文本中的所有网址自动添加上其对应的超链接，即是将“http://nowamagic.net”的字符串替换成nowamagic的形式。我们就可以这样处理：<br><pre><code class=\"html hljs xml\">var url = \"http://nowamagic.net\";\nvar reUrl = /(http[s]*:\\/{2}(\\w+\\.)+\\w+)/gi;\n//<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"http://nowamagic.net\"</span>&gt;</span>http://nowamagic.net<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>\ndocument.write(url.replace(reUrl,'<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">a</span> <span class=\"hljs-attr\">href</span>=<span class=\"hljs-string\">\"$1\"</span>&gt;</span>$1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">a</span>&gt;</span>'));\n</code></pre><span>$1引用了前面的子模式(http[s]*:\\/{2}(\\w+\\.)+\\w+)。注意：javascript中进行替换操作时回溯引用使用”$”而不是”\\”。</span><br></div><div><br><strong>前后查找</strong><br></div><div><span>如果我们需要获取h1标签中的文本（包含在h1标签中的文本，不包括h1本身），这个正则表达式应该如何写？比如”&lt;h1&gt;front-end&lt;/h1&gt;”，在所有介绍过的方法中，似乎都还没有提及过要匹配某个字符串，但却只返回某些字符前或后的字符串的情况，正则表达式中确实是存在这样的语法。</span><br><pre><code class=\"html hljs xml\">var fe = \"<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>front-end<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\";\nvar reInnerText = /(?<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">=</span>&lt;<span class=\"hljs-attr\">h1</span>&gt;</span>).*?(?=<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">\\</span>/<span class=\"hljs-attr\">h1</span>&gt;</span>))/i;\n</code></pre><p>在reInnerText和/&lt;h1&gt;.*?&lt;\\/h1&gt;/i的匹配模式是相同的，唯一不同的返回结果，/&lt;h1&gt;.*?&lt;\\/h1&gt;/i会返回整个fe字符串，而reInnerText只返回”front-end”，比较这两个正则表达式可以发现两处不同的写法：(?&lt;=&lt;h1&gt;)，(?=&lt;\\/h1&gt;)。(?&lt;=&lt;h1&gt;)定义了一个向后查找模式，即匹配结果只包括”&lt;h1&gt;”后面的部分；(?=&lt;\\/h1&gt;)则定义的是一个向前查找模式，匹配结果只返回”&lt;/h1&gt;”前的结果；所以reInnerText的匹配结果只返回”&lt;h1&gt;”和”&lt;/h1&gt;”之间的内容！前后查找的语法很简单，向前查找是一个以”?=”开头的字表达式，而向后查找确实一个以”?&lt;=”开头的字表达式。</p><p><br></p><p>遗憾的是javascript并不支持正则表达式的向后查找，所以事实上reInnerText的写法在javascript是有语法错误的。有条件可以使用其他支持前后查找的语言进行验证，比如PHP。</p><p></p><pre><code class=\"html hljs xml\">$title = '<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>front-end<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>';\nif(preg_match('/(?<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">=</span>&lt;<span class=\"hljs-attr\">h1</span>&gt;</span>).*?(?=<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">\\</span>/<span class=\"hljs-attr\">h1</span>&gt;</span>)/i',$title,$rst)){\n   echo $rst[0];//front-end\n}\n</code></pre><p></p><b>提示：</b>如果您想要进一步巩固对于JavaScript正则表达式的使用，请参考本站的<a href=\"https://www.w3cschool.cn/codecamp/list?pename=basic_javascript_camp\" target=\"_blank\">JavaScript编程实战部分</a>！</div></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 4,
      "parent_sort_index": 8,
      "chapter_level_one_id": "3b40e721f4d97e317036b3fc4c37a177",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "拓展阅读",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "fa0294bdc58e93b50cdf91ea8b67c99e",
      "chapter_level_two_parent_id": "3b40e721f4d97e317036b3fc4c37a177",
      "chapter_level_two_name": "JavaScript性能优化小窍门汇总（含实例）",
      "chapter_level_two_url": "/javascript/javascript-optimization.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><p>在众多语言中，JavaScript已经占有重要的一席之地，利用JavaScript我们可以做很多事情 ， 应用广泛。在web应用项目中，需要大量JavaScript的代码，将来也会越来越多。但是由于JavaScript是一个作为解释执行的语言，而且它的单线程机制，决定了性能问题是JavaScript的弱点，也是开发者在写JavaScript的时候需注意的一个问题，因为经常会遇到Web 2.0应用性能欠佳的问题，主因就是JavaScript性能不足，导致浏览器负荷过重。 Javascript性能优化绝不是一种书面的技能，那么应该如何正确的加载和执行 JavaScript代码，从而提高其在浏览器中的性能呢？下面就给大家做一些优化小窍门的知识汇总。<br></p><p><br></p><p>无论当前 JavaScript 代码是内嵌还是在外链文件中，页面的下载和渲染都必须停下来等待脚本执行完成。JavaScript 执行过程耗时越久，浏览器等待响应用户输入的时间就越长。浏览器在下载和执行脚本时出现阻塞的原因在于，脚本可能会改变页面或JavaScript的命名空间，它们会对后面页面内容造成影响。一个典型的例子就是在页面中使用：</p><pre><code>document.write()\n</code></pre><span>示例：</span><br><pre><code><span><span>&lt;</span><span><span><span>html</span></span></span><span>&gt;</span></span>\n<span><span>&lt;</span><span><span><span>head</span></span></span><span>&gt;</span></span>\n    <span><span>&lt;</span><span><span><span>title</span></span></span><span>&gt;</span></span>Source Example<span><span>&lt;/</span><span><span><span>title</span></span></span><span>&gt;</span></span>\n<span><span>&lt;/</span><span><span><span>head</span></span></span><span>&gt;</span></span>\n<span><span>&lt;</span><span><span><span>body</span></span></span><span>&gt;</span></span>\n    <span><span>&lt;</span><span><span><span>p</span></span></span><span>&gt;</span></span>\n    <span><span>&lt;</span><span><span><span>script</span></span></span><span> </span><span><span><span>type</span></span></span><span>=</span><span><span><span>\"text/javascript\"</span></span></span><span>&gt;</span></span><span><span>\n        </span><span><span><span>document</span></span></span><span>.write(</span><span><span><span>\"Today is \"</span></span></span><span> + (</span><span><span><span>new</span></span></span><span> </span><span><span><span>Date</span></span></span><span>()).toDateString());\n    </span></span><span><span>&lt;/</span><span><span><span>script</span></span></span><span>&gt;</span></span>\n    <span><span>&lt;/</span><span><span><span>p</span></span></span><span>&gt;</span></span>\n<span><span>&lt;/</span><span><span><span>body</span></span></span><span>&gt;</span></span>\n<span><span>&lt;/</span><span><span><span>html</span></span></span><span>&gt;</span></span>\n</code></pre><span>当浏览器遇到&lt;script&gt;标签时，当前 HTML 页面无从获知 JavaScript 是否会向&lt;p&gt; 标签添加内容，或引入其他元素，或甚至移除该标签。因此，这时浏览器会停止处理页面，先执行 JavaScript代码，然后再继续解析和渲染页面。同样的情况也发生在使用 src 属性加载 JavaScript的过程中，浏览器必须先花时间下载外链文件中的代码，然后解析并执行它。在这个过程中，页面渲染和用户交互完全被阻塞了。</span><br><br><h2>不要使用 with() 语句</h2><div>这是因为 with() 语句将会在作用域链的开始添加额外的变量。额外的变量意味着，当任何变量需要被访问的时候，JavaScript引擎都需要先扫描with()语句产生的变量，然后才是局部变量，最后是全局变量。 So with() essentially gives local variables all the performance drawbacks of global ones, and in turn derails Javascript optimization. 因此with()语句同时给局部变量和全局变量的性能带来负面影响，最终使我们优化JavaScript性能的计划破产。<br></div><p><br></p><h2>对象属性和数组元素的速度都比变量慢</h2><span>谈到JavaScript的数据，一般来说有4种访问方式：数值、变量、对象属性和数组元素。在考虑优化时，数值和变量的性能差不多，并且速度显著优于对象属性和数组元素。<br></span><p>因此当你多次引用一个对象属性或者数组元素的时候，你可以通过定义一个变量来获得性能提升。（这一条在读、写数据时都有效）虽然这条规则在绝大多数情况下是正确的，但是Firefox在优化数组索引上做了一些有意思的工作，能够让它的实际性能优于变量。但是考虑到数组元素在其他浏览器上的性能弊端，还是应该尽量避免数组查找，除非你真的只针对于火狐浏览器的性能而进行开发。</p><p><br></p><h2>避免全局查找</h2><div>在一个函数中会用到全局对象存储为局部变量来减少全局查找，因为访问局部变量的速度要比访问全局变量的速度更快些<br></div><pre><code>function search() {\n            //当我要使用当前页面地址和主机域名\n            alert(window.location.href + window.location.host);\n        }\n        //最好的方式是如下这样  先用一个简单变量保存起来\n        function search() {\n            var location = window.location;\n            alert(location.href + location.host);\n        }\n</code></pre><p><br></p><h2>避免with语句</h2><div>和函数类似 ，with语句会创建自己的作用域，因此会增加其中执行的代码的作用域链的长度，由于额外的作用域链的查找，在with语句中执行的代码肯定会比外面执行的代码要慢，在能不使用with语句的时候尽量不要使用with语句。<br></div><div><pre><code>with (a.b.c.d) {\n            property1 = 1;\n            property2 = 2;\n        }\n        //可以替换为：\n        var obj = a.b.c.d;\n        obj.property1 = 1;\n        obj.property2 = 2;\n</code></pre><br></div><h2>数字转换成字符串</h2><div>般最好用”\" + 1来将数字转换成字符串，虽然看起来比较丑一点，但事实上这个效率是最高的，性能上来说：<br></div><div><pre><code>(“” +) &gt; String() &gt; .toString() &gt; new String()\n</code></pre><br></div><h2>通过模板元素clone，替代createElement</h2><div>很多人喜欢在JavaScript中使用<a href=\"https://www.w3cschool.cn/jsref/met-doc-write.html\" target=\"_blank\">document.write</a>来给页面生成内容。事实上这样的效率较低，如果需要直接插入HTML，可以找一个容器元素，比如指定一个div或者span，并设置他们的innerHTML来将自己的HTML代码插入到页面中。通常我们可能会使用字符串直接写HTML来创建节点，其实这样做，1：无法保证代码的有效性，2：字符串操作效率低，所以应该是用<a href=\"https://www.w3cschool.cn/jsref/met-document-createelement.html\" target=\"_blank\">document.createElement()方法</a>，而如果文档中存在现成的样板节点，应该是用cloneNode()方法，因为使用createElement()方法之后，你需要设置多次元素的属性，使用cloneNode()则可以减少属性的设置次数——同样如果需要创建很多元素，应该先准备一个样板节点。<br></div><div><pre><code> var frag = document.createDocumentFragment();\n        for (var i = 0; i <span>&lt; <span>1000</span>; <span>i</span>++) {\n            <span>var</span> <span>el</span> = <span>document.createElement(</span>'<span>p</span>');\n            <span>el.innerHTML</span> = <span>i;</span>\n            <span>frag.appendChild</span>(<span>el</span>);\n        }\n        <span>document.body.appendChild</span>(<span>frag</span>);\n        //替换为：\n        <span>var</span> <span>frag</span> = <span>document.createDocumentFragment();</span>\n        <span>var</span> <span>pEl</span> = <span>document.getElementsByTagName(</span>'<span>p</span>')[<span>0</span>];\n        <span>for</span> (<span>var</span> <span>i</span> = <span>0;</span> <span>i</span> &lt; <span>1000</span>; <span>i</span>++) {\n            <span>var</span> <span>el</span> = <span>pEl.cloneNode(false);</span>\n            <span>el.innerHTML</span> = <span>i;</span>\n            <span>frag.appendChild</span>(<span>el</span>);\n        }\n        <span>document.body.appendChild</span>(<span>frag</span>);\n</span></code></pre><br></div><h2>避免低效率的脚本位置</h2><div>HTML 4 规范指出 &lt;script&gt; 标签可以放在 HTML 文档的&lt;head&gt;或&lt;body&gt;中，并允许出现多次。Web 开发人员一般习惯在 &lt;head&gt; 中加载外链的 JavaScript，接着用 &lt;link&gt; 标签用来加载外链的 CSS 文件或者其他页面信息。<br></div><div><br></div><div>低效率脚本位置示例：<br></div><div><pre><code><span>&lt;<span>html</span>&gt;</span>\n<span>&lt;<span>head</span>&gt;</span>\n    <span>&lt;<span>title</span>&gt;</span>Source Example<span>&lt;/<span>title</span>&gt;</span>\n    <span>&lt;<span>script</span> <span>type</span>=<span>\"text/javascript\"</span> <span>src</span>=<span>\"script1.js\"</span>&gt;</span><span></span><span>&lt;/<span>script</span>&gt;</span>\n    <span>&lt;<span>script</span> <span>type</span>=<span>\"text/javascript\"</span> <span>src</span>=<span>\"script2.js\"</span>&gt;</span><span></span><span>&lt;/<span>script</span>&gt;</span>\n    <span>&lt;<span>script</span> <span>type</span>=<span>\"text/javascript\"</span> <span>src</span>=<span>\"script3.js\"</span>&gt;</span><span></span><span>&lt;/<span>script</span>&gt;</span>\n    <span>&lt;<span>link</span> <span>rel</span>=<span>\"stylesheet\"</span> <span>type</span>=<span>\"text/css\"</span> <span>href</span>=<span>\"styles.css\"</span>&gt;</span>\n<span>&lt;/<span>head</span>&gt;</span>\n<span>&lt;<span>body</span>&gt;</span>\n    <span>&lt;<span>p</span>&gt;</span>Hello world!<span>&lt;/<span>p</span>&gt;</span>\n<span>&lt;/<span>body</span>&gt;</span>\n<span>&lt;/<span>html</span>&gt;</span>\n</code></pre>然而这种常规的做法却隐藏着严重的性能问题。在清单 2 的示例中，当浏览器解析到 &lt;script&gt; 标签（第 4 行）时，浏览器会停止解析其后的内容，而优先下载脚本文件，并执行其中的代码，这意味着，其后的 styles.css 样式文件和&lt;body&gt;标签都无法被加载，由于&lt;body&gt;标签无法被加载，那么页面自然就无法渲染了。因此在该 JavaScript 代码完全执行完之前，页面都是一片空白。下图描述了页面加载过程中脚本和样式文件的下载过程。<br></div><div><br></div><div style=\"text-align: center;\"><img src=\"https://atts.w3cschool.cn/attachments/day_161128/201611280809593247.jpg\" alt=\"脚本位置\"></div><div><br></div><div>我们可以发现一个有趣的现象：第一个 JavaScript 文件开始下载，与此同时阻塞了页面其他文件的下载。此外，从 script1.js 下载完成到 script2.js 开始下载前存在一个延时，这段时间正好是 script1.js 文件的执行过程。每个文件必须等到前一个文件下载并执行完成才会开始下载。在这些文件逐个下载过程中，用户看到的是一片空白的页面。<br><br>从 IE 8、Firefox 3.5、Safari 4 和 Chrome 2 开始都允许并行下载 JavaScript 文件。这是个好消息，因为&lt;script&gt;标签在下载外部资源时不会阻塞其他&lt;script&gt;标签。遗憾的是，JavaScript 下载过程仍然会阻塞其他资源的下载，比如样式文件和图片。尽管脚本的下载过程不会互相影响，但页面仍然必须等待所有 JavaScript 代码下载并执行完成才能继续。因此，尽管最新的浏览器通过允许并行下载提高了性能，但问题尚未完全解决，脚本阻塞仍然是一个问题。<br><br>由于脚本会阻塞页面其他资源的下载，因此推荐将所有&lt;script&gt;标签尽可能放到&lt;body&gt;标签的底部，以尽量减少对整个页面下载的影响。<br></div><div><br></div><div>推荐的代码放置位置示例：</div><div><pre><code><span>&lt;<span>head</span>&gt;</span>\n    <span>&lt;<span>title</span>&gt;</span>Source Example<span>&lt;/<span>title</span>&gt;</span>\n    <span>&lt;<span>link</span> <span>rel</span>=<span>\"stylesheet\"</span> <span>type</span>=<span>\"text/css\"</span> <span>href</span>=<span>\"styles.css\"</span>&gt;</span>\n<span>&lt;/<span>head</span>&gt;</span>\n<span>&lt;<span>body</span>&gt;</span>\n    <span>&lt;<span>p</span>&gt;</span>Hello world!<span>&lt;/<span>p</span>&gt;</span>\n    <span>&lt;!-- Example of efficient script positioning --&gt;</span>\n    <span>&lt;<span>script</span> <span>type</span>=<span>\"text/javascript\"</span> <span>src</span>=<span>\"script1.js\"</span>&gt;</span><span></span><span>&lt;/<span>script</span>&gt;</span>\n    <span>&lt;<span>script</span> <span>type</span>=<span>\"text/javascript\"</span> <span>src</span>=<span>\"script2.js\"</span>&gt;</span><span></span><span>&lt;/<span>script</span>&gt;</span>\n    <span>&lt;<span>script</span> <span>type</span>=<span>\"text/javascript\"</span> <span>src</span>=<span>\"script3.js\"</span>&gt;</span><span></span><span>&lt;/<span>script</span>&gt;</span>\n<span>&lt;/<span>body</span>&gt;</span>\n<span>&lt;/<span>html</span>&gt;</span>\n</code></pre>这段代码展示了在 HTML 文档中放置&lt;script&gt;标签的推荐位置。尽管脚本下载会阻塞另一个脚本，但是页面的大部分内容都已经下载完成并显示给了用户，因此页面下载不会显得太慢。这是优化 JavaScript 的首要规则：将脚本放在底部。<br></div><div><br></div><h2>小心使用闭包</h2><div>虽然你可能还不知道“闭包”，但你可能在不经意间经常使用这项技术。闭包基本上被认为是JavaScript中的new，当我们定义一个即时函数的时候，我们就使用了闭包，比如：<br><pre><code>document.getElementById('foo').onclick = function(ev) { };\n</code></pre><p>闭包的问题在于：根据定义，在它们的作用域链中至少有三个对象：闭包变量、局部变量和全局变量。这些额外的对象将会导致其他的性能问题。但是Nicholas并不是要我们因噎废食，闭包对于提高代码可读性等方面还是非常有用的，只是不要滥用它们（尤其在循环中）。<br></p><p><br></p><p><b>提示：</b>如果您对JavaScript闭包掌握得还不是很透彻，请参考本站的<a href=\"https://www.w3cschool.cn/javascript/js-function-closures.html\" target=\"_blank\">JavaScript闭包</a>一节！</p><p><br></p><h2>在循环时将控制条件和控制变量合并起来</h2><p>提到性能，在循环中需要避免的工作一直是个热门话题，因为循环会被重复执行很多次。所以如果有性能优化的需求，先对循环开刀有可能会获得最明显的性能提升。</p><p>一种优化循环的方法是在定义循环的时候，将控制条件和控制变量合并起来，下面是一个没有将他们合并起来的例子：</p><pre><code>for ( var x = 0; x <span>&lt; <span>10</span>; <span>x</span>++ ) {\n};\n</span></code></pre>当我们要添加什么东西到这个循环之前，我们发现有几个操作在每次迭代都会出现。JavaScript引擎需要：<br><pre><code>#1：检查 x 是否存在\n#2：检查 x 是否小于 0 <span>&lt;<span>span</span> <span>style</span>=<span>\"color: #888888;\"</span>&gt;</span>（这里可能有笔误）<span>&lt;/<span>span</span>&gt;</span>\n#3：使 x 增加 1\n</code></pre>然而如果你只是迭代元素中的一些元素，那么你可以使用while循环进行轮转来替代上面这种操作：<br><pre><code>var x = 9;\ndo { } while( x-- );\n</code></pre><br><h2>使用 XMLHttpRequest(XHR)对象</h2><div>此技术首先创建一个 XHR 对象，然后下载 JavaScript 文件，接着用一个动态<code>&lt;script&gt;</code>元素将 JavaScript 代码注入页面。<br><br></div><div>通过 XHR 对象加载 JavaScript 脚本：<br><pre><code>var xhr = new XMLHttpRequest();\nxhr.open(\"get\", \"script1.js\", true);\nxhr.onreadystatechange = function(){\n    if (xhr.readyState == 4){\n        if (xhr.status &gt;= 200 &amp;&amp; xhr.status <span>&lt; <span>300</span> || <span>xhr.status</span> == <span>304){</span>\n            <span>var</span> <span>script</span> = <span>document.createElement</span> (\"<span>script</span>\");\n            <span>script.type</span> = <span>\"text/javascript\"</span>;\n            <span>script.text</span> = <span>xhr.responseText;</span>\n            <span>document.body.appendChild</span>(<span>script</span>);\n        }\n    }\n};\n<span>xhr.send</span>(<span>null</span>);\n</span></code></pre>此代码向服务器发送一个获取 script1.js 文件的 GET 请求。onreadystatechange 事件处理函数检查readyState 是不是 4，然后检查 HTTP 状态码是不是有效（2XX 表示有效的回应，304 表示一个缓存响应）。如果收到了一个有效的响应，那么就创建一个新的&lt;script&gt;元素，将它的文本属性设置为从服务器接收到的 responseText 字符串。这样做实际上会创建一个带有内联代码的&lt;script&gt;元素。一旦新&lt;script&gt;元素被添加到文档，代码将被执行，并准备使用。<br><br>这种方法的主要优点是，您可以下载不立即执行的 JavaScript 代码。由于代码返回在&lt;script&gt;标签之外（换句话说不受&lt;script&gt;标签约束），它下载后不会自动执行，这使得您可以推迟执行，直到一切都准备好了。另一个优点是，同样的代码在所有现代浏览器中都不会引发异常。<br><br>此方法最主要的限制是：JavaScript 文件必须与页面放置在同一个域内，不能从 CDN 下载（CDN 指”内容投递网络（Content Delivery Network）”，所以大型网页通常不采用 XHR 脚本注入技术。<br></div><p><br></p><p><b>提示：</b>在本站的《AJAX教程》的 <a href=\"https://www.w3cschool.cn/ajax/ajax-xmlhttprequest-create.html\" target=\"_blank\">XHR 创建对象</a>一节中你也可以学习如何创建 XHR 对象！</p><h2>注意NodeList</h2><div>最小化访问NodeList的次数可以极大的改进脚本的性能<br><pre><code> var images = document.getElementsByTagName('img');\n        for (var i = 0, len = images.length; i <span>&lt; <span>len</span>; <span>i</span>++) {\n\n        }\n</span></code></pre>编写JavaScript的时候一定要知道何时返回NodeList对象，这样可以最小化对它们的访问<br><br></div><div>1、进行了对getElementsByTagName()的调用</div><div>2、获取了元素的childNodes属性<br>3、获取了元素的attributes属性<br>4、访问了特殊的集合，如document.forms、document.images等等</div><div><br>要了解了当使用NodeList对象时，合理使用会极大的提升代码执行速度<br></div><div><br></div><h2>避免与null进行比较</h2><p>由于JavaScript是弱类型的，所以它不会做任何的自动类型检查，所以如果看到与null进行比较的代码，尝试使用以下技术替换：</p><p><br>1、如果值应为一个引用类型，使用instanceof操作符检查其构造函数</p><p>2、如果值应为一个基本类型，作用typeof检查其类型</p><p>3、如果是希望对象包含某个特定的方法名，则使用typeof操作符确保指定名字的方法存在于对象上<br></p><p><br></p><h2>尊重对象的所有权</h2><div>因为JavaScript可以在任何时候修改任意对象，这样就可以以不可预计的方式覆写默认的行为，所以如果你不负责维护某个对象，它的对象或者它的方法，那么你就不要对它进行修改，具体一点就是说：<br><br>1、不要为实例或原型添加属性<br>2、不要为实例或者原型添加方法<br>3、不要重定义已经存在的方法<br>4、不要重复定义其它团队成员已经实现的方法，永远不要修改不是由你所有的对象，你可以通过以下方式为对象创建新的功能:<br>1、创建包含所需功能的新对象，并用它与相关对象进行交互</div><div>2、创建自定义类型，继承需要进行修改的类型，然后可以为自定义类型添加额外功能<br></div><br></div><h2>循环引用</h2><div>如果循环引用中包含DOM对象或者ActiveX对象，那么就会发生内存泄露。内存泄露的后果是在浏览器关闭前，即使是刷新页面，这部分内存不会被浏览器释放。<br><br>简单的循环引用：<br></div><div><pre><code> var el = document.getElementById('MyElement');\n        var func = function () {\n            //…\n        }\n        el.func = func;\n        func.element = el;\n</code></pre>但是通常不会出现这种情况。通常循环引用发生在为dom元素添加闭包作为expendo的时候。<br></div><div><pre><code>  function init() {\n            var el = document.getElementById('MyElement');\n            el.onclick = function () {\n                //……\n            }\n        }\n        init();\n</code></pre><p>init在执行的时候，当前上下文我们叫做context。这个时候，context引用了el，el引用了function，function引用了context。这时候形成了一个循环引用。</p><p>下面2种方法可以解决循环引用：</p><br></div><div>1、置空dom对象</div><div><pre><code> function init() {\n            var el = document.getElementById('MyElement');\n            el.onclick = function () {\n                //……\n            }\n        }\n        init();\n        //可以替换为：\n        function init() {\n            var el = document.getElementById('MyElement');\n            el.onclick = function () {\n                //……\n            }\n            el = null;\n        }\n        init();\n</code></pre><p>将el置空，context中不包含对dom对象的引用，从而打断循环应用。</p><p><br></p><p>如果我们需要将dom对象返回，可以用如下方法：</p><pre><code> function init() {\n            var el = document.getElementById('MyElement');\n            el.onclick = function () {\n                //……\n            }\n            return el;\n        }\n        init();\n        //可以替换为：\n        function init() {\n            var el = document.getElementById('MyElement');\n            el.onclick = function () {\n                //……\n            }\n            try {\n                return el;\n            } finally {\n                el = null;\n            }\n        }\n        init();\n</code></pre><div><br></div>2、构造新的context</div><div><pre><code> function init() {\n            var el = document.getElementById('MyElement');\n            el.onclick = function () {\n                //……\n            }\n        }\n        init();\n        //可以替换为：\n        function elClickHandler() {\n            //……\n        }\n        function init() {\n            var el = document.getElementById('MyElement');\n            el.onclick = elClickHandler;\n        }\n        init();\n</code></pre><p>把function抽到新的context中，这样，function的context就不包含对el的引用，从而打断循环引用。</p><h3>通过javascript创建的dom对象，必须append到页面中</h3><p>IE下，脚本创建的dom对象，如果没有append到页面中，刷新页面，这部分内存是不会回收的！</p><pre><code>  function create() {\n            var gc = document.getElementById('GC');\n            for (var i = 0; i <span>&lt; <span>5000</span>; <span>i</span>++) {\n                <span>var</span> <span>el</span> = <span>document.createElement(</span>'<span>div</span>');\n                <span>el.innerHTML</span> = <span>\"test\"</span>;\n                //下面这句可以注释掉，看看浏览器在任务管理器中，点击按钮然后刷新后的内存变化\n                <span>gc.appendChild</span>(<span>el</span>);\n            }\n        }</span></code></pre></div><p><br></p><h2>字符串连接</h2><p>如果要连接多个字符串，应该少使用+=，如</p><p>s+=a;</p><p>s+=b;</p><p>s+=c;</p><p>应该写成s+=a + b + c；</p><p>而如果是收集字符串，比如多次对同一个字符串进行+=操作的话，最好使用一个缓存，使用JavaScript数组来收集，最后<strong>使用join方法连接起来</strong></p><pre><code class=\"html\">var buf = [];\n        for (var i = 0; i &lt; 100; i++) {\n            buf.push(i.toString());\n        }\n        var all = buf.join(\"\");\n</code></pre><br><p>JavaScript编程实战：<a href=\"https://www.w3cschool.cn/codecamp/concatenating-strings-with-plus-operator.html\" target=\"_blank\">JavaScript字符串连接方式</a></p><h2>各种类型转换</h2><div><pre><code class=\"html\">var myVar = \"3.14159\",\n        str = \"\" + myVar, //  to string  \n        i_int = ~ ~myVar,  //  to integer  \n        f_float = 1 * myVar,  //  to float  \n        b_bool = !!myVar,  /*  to boolean - any string with length \n                                and any number except 0 are true */\n        array = [myVar];  //  to array\n</code></pre><span>如果定义了toString()方法来进行类型转换的话，推荐</span><strong>显式调用toString()</strong><span>，因为内部的操作在尝试所有可能性之后，会尝试对象的toString()方法尝试能否转化为String，所以直接调用这个方法效率会更高</span><br><br></div><h2>多个类型声明</h2><div><span>在JavaScript中所有变量都可以使用单个var语句来声明，这样就是组合在一起的语句，以减少整个脚本的执行时间，就如上面代码一样，上面代码格式也挺规范，让人一看就明了。</span><br><br></div><h2>插入迭代器</h2><div><span>如var name=values[i]; i++;前面两条语句可以写成var name=values[i++]</span><br><br></div><h2>使用直接量</h2><div><pre><span>var</span> aTest = <span>new</span> <span>Array</span>(); <span>//替换为</span>\n        <span>var</span> aTest = [];\n        <span>var</span> aTest = <span>new</span> <span>Object</span>; <span>//替换为</span>\n        <span>var</span> aTest = {};\n        <span>var</span> reg = <span>new</span> <span>RegExp</span>(); <span>//替换为</span>\n        <span>var</span> reg = <span>/../</span>;\n        <span>//如果要创建具有一些特性的一般对象，也可以使用字面量，如下：</span>\n        <span>var</span> oFruit = <span>new</span> O;\n        oFruit.color = <span>\"red\"</span>;\n        oFruit.name = <span>\"apple\"</span>;\n        <span>//前面的代码可用对象字面量来改写成这样：</span>\n        <span>var</span> oFruit = { color: <span>\"red\"</span>, name: <span>\"apple\"</span> };</pre><br></div><h2>避免双重解释</h2><div>如果要提高代码性能，尽可能避免出现需要按照JavaScript解释的字符串，也就是<br><strong>1、尽量少使用eval函数</strong><br>使用eval相当于在运行时再次调用解释引擎对内容进行运行，需要消耗大量时间，而且使用Eval带来的安全性问题也是不容忽视的。<br><br></div><div><strong>2、不要使用Function构造器</strong><br>不要给setTimeout或者setInterval传递字符串参数<br></div><div><pre><code class=\"html\"> var num = 0;\n        setTimeout('num++', 10);\n        //可以替换为：\n        var num = 0;\n        function addNum() {\n            num++;\n        }\n        setTimeout(addNum, 10);\n</code></pre><br></div><h2>缩短否定检测</h2><div><pre><code class=\"html\"> if (oTest != '#ff0000') {\n            //do something\n        }\n        if (oTest != null) {\n            //do something\n        }\n        if (oTest != false) {\n            //do something\n        }\n        //虽然这些都正确，但用逻辑非操作符来操作也有同样的效果：\n        if (!oTest) {\n            //do something\n        }\n</code></pre><br></div><h2>释放javascript对象</h2><div><p>在rich应用中，随着实例化对象数量的增加，内存消耗会越来越大。所以应当及时释放对对象的引用，让GC能够回收这些内存控件。</p><p>对象：obj = null</p><p>对象属性：delete obj.myproperty</p><p>数组item：使用数组的splice方法释放数组中不用的item</p><br></div><h2>性能方面的注意事项</h2><div><p><strong>1、尽量使用原生方法</strong></p><p><strong>2、switch语句相对if较快</strong></p><p>通过将case语句按照最可能到最不可能的顺序进行组织</p><p><strong>3、位运算较快</strong></p><p>当进行数字运算时，位运算操作要比任何布尔运算或者算数运算快</p><p><strong><strong>4、<strong>巧用||和&amp;&amp;布尔运算符</strong></strong></strong></p><pre><code class=\"html\"> function eventHandler(e) {\n            if (!e) e = window.event;\n        }\n        //可以替换为：\n        function eventHandler(e) {\n            e = e || window.event;\n        }\n</code></pre><pre><code class=\"html\">  if (myobj) {\n            doSomething(myobj);\n        }\n        //可以替换为：\n        myobj &amp;&amp; doSomething(myobj);</code></pre><br></div><h2>避免错误应注意的地方</h2><div><p><strong>1、每条语句末尾须加分号</strong></p><p>在if语句中，即使条件表达式只有一条语句也要用{}把它括起来，以免后续如果添加了语句之后造成逻辑错误</p><p><br></p><p><strong>2、使用+号时需谨慎</strong></p><p>JavaScript 和其他编程语言不同的是，在 JavaScript 中，’+'除了表示数字值相加，字符串相连接以外，还可以作一元运算符用，把字符串转换为数字。因而如果使用不当，则可能与自增符’++’混淆而引起计算错误</p><pre><code class=\"html\"> var valueA = 20;\n        var valueB = \"10\";\n        alert(valueA + valueB);     //ouput: 2010 \n        alert(valueA + (+valueB));  //output: 30 \n        alert(valueA + +valueB);    //output:30 \n        alert(valueA ++ valueB);     //Compile error\n</code></pre><p><strong><br></strong></p><p><strong>3、使用return语句需要注意</strong></p><p>一条有返回值的return语句不要用()括号来括住返回值，如果返回表达式，则表达式应与return关键字在同一行，以避免压缩时，压缩工具自动加分号而造成返回与开发人员不一致的结果</p><pre><code class=\"html\">function F1() {\n            var valueA = 1;\n            var valueB = 2;\n            return valueA + valueB;\n        }\n        function F2() {\n            var valueA = 1;\n            var valueB = 2;\n            return\n            valueA + valueB;\n        }\n        alert(F1());  //output: 3 \n        alert(F2());  //ouput: undefined\n</code></pre><br><h2>==和===的区别</h2><div><span>避免在if和while语句的条件部分进行赋值，如if (a = b)，应该写成if (a == b)，但是在比较是否相等的情况下，最好使用全等运行符，也就是使用===和!==操作符会相对于==和!=会好点。==和!=操作符会进行类型强制转换</span><br><pre><code class=\"html\">var valueA = \"1\";\n        var valueB = 1;\n        if (valueA == valueB) {\n            alert(\"Equal\");\n        }\n        else {\n            alert(\"Not equal\");\n        }\n        //output: \"Equal\"\n        if (valueA === valueB) {\n            alert(\"Equal\");\n        }\n        else {\n            alert(\"Not equal\");\n        }\n        //output: \"Not equal\"\n</code></pre><h2><br>不要使用生偏语法</h2>不要使用生偏语法，写让人迷惑的代码，虽然计算机能够正确识别并运行，但是晦涩难懂的代码不方便以后维护</div><div><br><h2>函数返回统一类型</h2>虽然JavaScript是弱类型的，对于函数来说，前面返回整数型数据，后面返回布尔值在编译和运行都可以正常通过，但为了规范和以后维护时容易理解，应保证函数应返回统一的数据类型</div><div><br></div><div><h2>总是检查数据类型</h2>要检查你的方法输入的所有数据，一方面是为了安全性，另一方面也是为了可用性。用户随时随地都会输入错误的数据。这不是因为他们蠢，而是因为他们很忙，并且思考的方式跟你不同。用typeof方法来检测你的function接受的输入是否合法<br><br><h2>何时用单引号，何时用双引号</h2>虽然在JavaScript当中，双引号和单引号都可以表示字符串, 为了避免混乱，我们建议在HTML中使用双引号，在JavaScript中使用单引号，但为了兼容各个浏览器，也为了解析时不会出错，定义JSON对象时，最好使用双引号<br><br><h2>部署</h2>1、用JSLint运行JavaScript验证器来确保没有语法错误或者是代码没有潜在的问</div><div>2、部署之前推荐使用压缩工具将JS文件压缩<br>3、文件编码统一用UTF-8</div><div>4、JavaScript 程序应该尽量放在 .js 的文件中，需要调用的时候在 HTML 中以 &lt;script src=”filename.js”&gt; 的形式包含进来。JavaScript 代码若不是该 HTML 文件所专用的，则应尽量避免在 HTML 文件中直接编写 JavaScript 代码。因为这样会大大增加 HTML 文件的大小，无益于代码的压缩和缓存的使用。另外，&lt;script src=”filename.js”&gt; 标签应尽量放在文件的后面,最好是放在&lt;/body&gt;标签前。这样会降低因加载 JavaScript 代码而影响页面中其它组件的加载时间。<br><br></div><div>永远不要忽略代码优化工作，重构是一项从项目开始到结束需要持续的工作，只有不断的优化代码才能让代码的执行效率越来越好</div></div></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 3,
      "parent_sort_index": 8,
      "chapter_level_one_id": "3b40e721f4d97e317036b3fc4c37a177",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "拓展阅读",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "96a9ddea724906a9263290332e793a6f",
      "chapter_level_two_parent_id": "3b40e721f4d97e317036b3fc4c37a177",
      "chapter_level_two_name": "Javascript特效代码资源打包下载",
      "chapter_level_two_url": "/javascript/javascript-special.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><p>在网页制作中，总是需要用到各种<span>JavaScript</span>特效，<span>有页面特效，时间日期特效、Cookie脚本特效、按钮特效等，不胜枚举，</span>而目前会写原生代码的人才稀缺，因此本文搜集多例<span>针对的各个应用方向的</span>JavaScript网页经典特效代码，供初学者参考练习。</p>\n<p>\n    <br>\n</p>\n<p><span style=\"color:#e33737;\"><strong>先给大家推荐一本书《JavaScript网页特效经典300例》</strong></span>，这本书分为3篇26章，一共收集了300个典型实例，不仅涉及的基础语法、开发技巧、对象支持等基础知识，还涵盖了各类常见的网页开发特效，包括图层、表单控件、表格、层等各类网页元素的特效应用，以及的HTML5、CSS3技术。最后，《网页特效经典300例》还用实例演示了流行框架的应用，如Prototype、Dojo、YUI、jQuery等。本书的实例非常具有代表性，能直接应用于真实的开发实践中。可作为自学语言和大、中专院校师生提高编程实践能力的指导教材，也可作为在职开发人员的参考用书。</p>\n<p>\n    <br>\n</p>\n<p>下载地址：<a href=\"http://pan.baidu.com/s/1eS0umnK\" rel=\"external nofollow\" target=\"_blank\">点此下载电子书</a><span>（注：书中案例需右键查看源代码）</span>\n    <br>\n</p>\n<p>\n    <br>\n</p>\n<p></p>\n<div style=\"text-align: center;\">\n    <img src=\"https://atts.w3cschool.cn/attachments/day_161126/201611261141496163.png\" style=\"line-height: 1.7; font-size: 13px;\" alt=\"JavaScript网页特效经典300例\">\n</div>\n<br>\n<p></p>\n<p><span style=\"color:#e33737;\">再来一个JavaScript的100多个犀利效果打包下载</span>\n    <br>\n</p>\n<p>\n    <br>\n</p>\n<p></p>\n<div style=\"text-align: center;\">\n    <img src=\"https://atts.w3cschool.cn/attachments/day_161126/201611261405555524.png\" alt=\"JavaScript的100多个犀利效果\" style=\"line-height: 1.7; font-size: 13px;\">\n</div>\n<br>\n<p></p>\n<p>下载地址：<a href=\"https://pan.baidu.com/s/1AQQQ3n9CMDz3CRo4-nFL9w?qq-pf-to=pcqq.c2c\" rel=\"external nofollow\" target=\"_blank\">点此下载</a></p>\n<p>\n    <br>\n</p>\n<p><span style=\"color:#e33737;\"><strong>1500个JS网页特效打包下载 CHM版</strong></span>\n    <br>\n</p>\n<p>这是一个非常经典的CHM教程，共收集了1500个JS网页特效，由于制作成CHM版本，因此有些图片可能无法显示，请自动修改图片路径吧，对于学习js的朋友来说是非常有帮助的。\n    <br>\n</p>\n<h2 style=\"text-align: center;\"><img src=\"https://atts.w3cschool.cn/attachments/day_161126/201611261456147082.png\" alt=\"1500个JS网页特效\"><br></h2>\n<div>\n    <br>\n</div>\n<div>下载地址1：<a href=\"http://www15.piaodown.com:8089/20100307/201303/1500jstexiao.rar\" rel=\"external nofollow\" target=\"_blank\">点此下载</a>\n    <br>下载地址2：<a href=\"http://www11.piaodown.com:8086/20100307/201303/1500jstexiao.rar\" rel=\"external nofollow\" target=\"_blank\">点此下载</a><span style=\"color:#e33737;\"><strong></strong></span>\n</div>\n<div style=\"text-align: center;\">\n    <br>\n</div>\n<div style=\"text-align: left;\">\n    <br>\n</div>\n<div style=\"text-align: left;\"><span style=\"color:#e33737;\"><strong>最新炫目JavaScript动态网页特效实战精讲 (孙军) pdf扫描版</strong></span>\n</div>\n<div style=\"text-align: left;\">讲述javascript的所有知识以及详细的应用效果，展现这门技术给网站建设带来的丰富的体验。本书通俗易懂，按照循序渐进的方法详细介绍javascript的基本概念、html基本知识、javascript的基本语法及其内置对象和浏览器对象。全书通过动态网页特效的200多个经典案例应用，展现javascript在网页应用中的独特魅力。书中每章都有关于本章的经典提示，每个经典提示都是作者多年工作经验的总结。书中对每个知识点都配备相应的实例，每个案例中都有学习的难点提示、代码解释和最终的案例效果，使读者全面理解javascript和体验其应用效果。\n    <br>\n</div>\n<div style=\"text-align: left;\">\n    <br>\n</div>\n<div style=\"text-align: center;\">\n    <img src=\"https://atts.w3cschool.cn/attachments/day_161126/201611261620574287.png\" alt=\"最新炫目JavaScript动态网页特效实战精讲\">\n    <br>\n</div>\n<div style=\"text-align: center;\">\n    <br>\n</div>\n<div style=\"text-align: left;\">下载地址：<a href=\"https://pan.baidu.com/s/12bmp6zE3D_0ieJ4JhgKf1Q\" rel=\"external nofollow\" target=\"_blank\">点击下载</a></div>\n<div style=\"text-align: left;\">\n    <br>\n</div>\n<p>以上就是w3cschool精选的一些可下载的Javascript特效代码资源，希望对你的编程学习和工作带来帮助。</p>\n<p>当然，本站也为您准备了一些<a href=\"https://www.w3cschool.cn/xqw2e7/kp8g19x3.html\" target=\"_blank\">JavaScript特效代码</a>，欢迎查看！</p><p><br></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 2,
      "parent_sort_index": 8,
      "chapter_level_one_id": "3b40e721f4d97e317036b3fc4c37a177",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "拓展阅读",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "aa0bca551db889dcb4ef6cb97e3ce43f",
      "chapter_level_two_parent_id": "3b40e721f4d97e317036b3fc4c37a177",
      "chapter_level_two_name": "javascript:void(0);用法及常见问题解析",
      "chapter_level_two_url": "/javascript/javascript-void.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><p><span>使用过ajax的朋友经常会见到这样的代码：<span>here，</span></span>这里面的void是一个操作符，该操作符指定要计算一个表达式但是不返回值。javascript:void(0) 在<span>某些情况下会有浏览器不兼容的bug。下面我们先来看下javascript:void(0) 的基础介绍及用法，然后再来看使用它会出现什么问题，该怎么解决。</span></p><p><b>提示：</b>在学习一下内容之前，你可以先通过<a href=\"https://www.w3cschool.cn/javascript/js-void.html\" target=\"_blank\">javascript:void(0) 含义</a>一节的内容来了解或者复习什么是javascript:void(0) ！</p><p><span><br></span></p><p><span><strong>void 操作符用法格式如下： </strong><br>1. javascript:void (expression) <br>2. javascript:void expression <br><br>expression 是一个要计算的 Javascript 标准的表达式。表达式外侧的圆括号是选的，但是写上去是一个好习惯。 (实现版本 Navigator 3.0) <br><br>你可以使用 void 操作符指定超级链接。表达式会被计算但是不会当前文档处装入任何内容。 <br><br>下面的代码创建了一个超级链接，当用户以后不会发生任何事。当用户链接时，void(0) 计算为 0，但 Javascript 上没有任何效果。 <br></span></p><pre><code class=\"html hljs xml\"><span class=\"hljs-tag\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span></span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">A</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\"> </span></span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">HREF</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">=</span></span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"javascript:void(0)\"</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&gt;</span></span></span>单此处什么也不会发生<span class=\"hljs-tag\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span></span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">A</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&gt;</span></span></span> </code></pre><p>下面的代码创建了一个超级链接，用户单时会提交表单。 </p><br><pre><code class=\"html hljs xml\"><span class=\"hljs-tag\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span></span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">A</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\"> </span></span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">HREF</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">=</span></span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"javascript:void(document.form.submit())\"</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&gt;</span></span></span> \n单此处提交表单<span class=\"hljs-tag\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span></span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">A</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&gt;</span></span></span></code></pre><p>下面代码则执行了subgo()函数，</p><br><pre><code class=\"html hljs xml\"><span class=\"hljs-tag\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span></span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">a</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\"> </span></span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">href</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">=</span></span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"javascript:void(0)\"</span></span></span></span></span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">onclick</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">=</span></span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"subgo()\"</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&gt;</span></span></span>点我<span class=\"hljs-tag\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span></span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">a</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&gt;</span></span></span></code></pre><p>在这里，javascript:void(0),没启实质上的作用，它仅仅是一个死链接，执行的函数是subgo()。</p><br><pre><code class=\"html hljs xml\"><span class=\"hljs-tag\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span></span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">a</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\"> </span></span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">href</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">=</span></span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"#\"</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\"> </span></span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">onclick</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">=</span></span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"subgo()\"</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&gt;</span></span></span>点我<span class=\"hljs-tag\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span></span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">a</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&gt;</span></span></span>与<span class=\"hljs-tag\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span></span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">ahref=\"javascript:void(0)\"</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\"> </span></span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">onclick</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">=</span></span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"subgo()\"</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&gt;</span></span></span>点我<span class=\"hljs-tag\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span></span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">a</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&gt;</span></span></span>区别。</code></pre><pre><code class=\"html hljs xml\"><span class=\"hljs-tag\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span></span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">a</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\"> </span></span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">href</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">=</span></span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"javascript:void(0)\"</span></span></span></span></span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">onclick</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">=</span></span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"javascript:history.back();\"</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&gt;</span></span></span>返回 <span class=\"hljs-tag\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span></span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">a</span></span></span></span></span><span class=\"hljs-tag\"><span class=\"hljs-tag\">&gt;</span></span></span></code></pre><p>href=”#”,包含了一个位置信息.默认的锚是#top,也就是网页的上端，当连续快速点击此链接时会导致浏览器巨慢甚至崩溃。而javascript:void(0) 仅仅表示一个死链接，没有任何信息。所以调用脚本的时候最好用void(0)</p><p><span><br></span></p><div><strong>href=\"#\"与javascript：void（0）的区别</strong></div><div>href=\"#\"方法其实也是空连接的意思，但是点击之后会自动跳转到页面的最上面，因为用了这个方法就相当于点击了一个锚记，但是这个锚记又没写ID，所以就默认跳转到页面顶部。从上面的例子也可以看出，当要执行某些处理，但是不整体刷新页面的情况下，可以使用void(0),但是在需要对页面进行refresh的情况下，那就要仔细了。<br><br>其实我们可以这样用，这句话会进行一次submit操作。那什么情况下用void(0)比较多呢，无刷新，当然是Ajax了，看一下Ajax的web页面的话，一般都会看到有很多的void(0)，所以在使用void(0)之前,最好先想一想,这个页面是否需要整体刷新。<br><br> 说白了，href=\"#\"这种形式会整体刷新页面，而href=\"javascript:void(0)\" 则不会。所以如果是空连接的话，还是推荐javascript:void(0)。<br></div><div><br></div><div><br></div><div><strong>href = \"#\"当页面有滚动条时，点击后会返回到页面顶端的解决办法</strong></div><div>目前有如下几种解决办法： <br></div><div><br></div><div>1、<span>点击链接后不做任何事情 </span><br></div><div><span></span><pre><code class=\"html hljs xml\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">a</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">href</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"javascript:void(0);\"</span></span></span><span class=\"hljs-tag\"> &gt;</span></span>test<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">a</span></span></span><span class=\"hljs-tag\">&gt;</span></span> \n<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">a</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">href</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"javascript:;\"</span></span></span><span class=\"hljs-tag\"> &gt;</span></span>test<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">a</span></span></span><span class=\"hljs-tag\">&gt;</span></span> \n<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">a</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">href</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"####\"</span></span></span><span class=\"hljs-tag\"> &gt;</span></span>test<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">a</span></span></span><span class=\"hljs-tag\">&gt;</span></span> //使用2个到4个#，见的大多是\"####\"，也有使用\"#all\"等其他的 \n</code></pre><br></div><div>2、点击链接后，响应用户自定义的点击事件 </div><div><pre><code class=\"html hljs xml\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">a</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">href</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"javascript:void(0)\"</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">onclick</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"doSomething()\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>test<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">a</span></span></span><span class=\"hljs-tag\">&gt;</span></span> \n<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">a</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">href</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"#\"</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">onclick</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"doSomething();return false;\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>什么问题都解决了,包括浏览器不兼容问题<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">a</span></span></span><span class=\"hljs-tag\">&gt;</span></span> //或者直接使用href=\"\" \n<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">a</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">href</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"#\"</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">onclick</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"alert();event.returnValue=false;\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>test<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">a</span></span></span><span class=\"hljs-tag\">&gt;</span></span> \n</code></pre><br></div><div><strong>使用javascript:void(0)会引起什么问题？</strong></div><div>链接（href）直接使用javascript:void(0)在IE中可能会引起一些问题，比如：造成gif动画停止播放等，所以，最安全的办法还是使用“####”。为防止点击链接后跳转到页首，onclick事件return false即可。 如果仅仅是想鼠标移过，变成手形，则可以使用。</div><div><br></div><div>我们可以使用void操作符指定超级链接，如javascript:void(document.form.submit())。表达式会被计算但是不会在当前文档处装入任何内容，void(0)计算为0，但在JavaScript上没有任何效果，也就是说的效果同的效果是一样的。 </div><div><br></div><div><strong>既然容易引起问题，为何新浪微博，淘宝等大站的首页JS操作的href都是javascript:void(0);呢？</strong><br></div><div><br></div><div style=\"text-align: center;\"><img src=\"https://atts.w3cschool.cn/attachments/day_161125/201611251733349601.png\" alt=\"新浪微博\"></div><div style=\"text-align: center;\"><img src=\"https://atts.w3cschool.cn/attachments/day_161125/201611251733456716.png\" alt=\"淘宝网首页\"><br><br><div style=\"text-align: left;\">有技术朋友表示在<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void\" rel=\"external nofollow\" target=\"_blank\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void</a>看到了这个：<br></div><div style=\"text-align: left;\"><pre><code class=\"html hljs xml\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">a</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">href</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">”void(0);”</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">rel</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">”nofollow”</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\nClick here to do nothing\n<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">a</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n</code><p><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">a</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">href</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">”void(document.body.style.backgroundColor</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">’green’);”</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">rel</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">”nofollow”</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\nClick here for green background\n<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">a</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n</p></pre><span>有可能是 javascript:void(0); 既保证了返回值是undefined，又保证如果连接点击需要处理一些代码，随时将0替换掉就可以。</span></div><div style=\"text-align: left;\"><span><span><br></span></span></div><div style=\"text-align: left;\"><span><span>href上加js是为了防止连接跳转，以前用#但是在部分浏览器下回跳转到页面顶部。这样就不好了，于是有人想到了添加onclick=“return false”但是这样问题又来了，这样做会阻止绑定的时间，比如我们用jquery。于是就有了用href=”javascript:void(0);”的写法，这种做法开始确实是由一些写c的人，因为编写习惯而写的。后来有人讲void函数去掉了。就有了比较简洁的写法，其实在a在没有连接的时候完全可以去掉href属性或改用其他元素，只要加个指向时的鼠标样式就可以了。根据个人习惯而定。</span><br></span><br><strong>解决IE下使用javascript:void(0)方法会跳转的方法</strong></div><div style=\"text-align: left;\"> 一般情况下，在IE下的A标签使用onclick的方法，在href属性下都加上javascript:void(0)或者javascript:;<br></div><div style=\"text-align: left;\"><br></div><div style=\"text-align: left;\"><span>原代码如下：</span><br><pre><code class=\"html hljs xml\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">a</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">href</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"javascript:void(0)\"</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">title</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"关闭\"</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">onclick</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"delbook();\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>关闭<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">a</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n</code></pre><span>或者：</span><br><pre><code class=\"html hljs xml\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">a</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">href</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"javascript:;\"</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">title</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"关闭\"</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">onclick</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"delbook();\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>关闭<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">a</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n</code></pre><p>以上两种方法都可能会出现跳转。</p><p>但是你会发现：在执行完clidk事件后会执行javascript:void(0),或者javascript:;</p><br></div></div><div><span style=\"font-family:'Microsoft YaHei', 微软雅黑, Arial, SimSun, 宋体;font-size: 14px;  line-height: 22px;\"><strong>解决办法：<br></strong></span></div><pre><code class=\"html hljs xml\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">a</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">href</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"javascript:void(0)\"</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">title</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"关闭\"</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">onclick</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"delbook();return false;\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>关闭<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">a</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n</code></pre><span>或者</span><br><pre><code class=\"html hljs xml\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">a</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">href</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"javascript:void(0)\"</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">target</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"_self\"</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">title</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"关闭\"</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">onclick</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"delbook();\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>关闭<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">a</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n</code></pre><p>使用return false;可以阻止javascript:void(0)去执行。</p><br><p>使用target=\"_self\"可以阻止会跳转到其他页面，因其是空函数，则不会发生页面刷新。</p><br><p>当然，在使用target=\"_self\"的情况下，你可以直接这样写。</p><br><div><pre><code class=\"html hljs xml\"><span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">a</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">href</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"javascript:delbook()\"</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">target</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"_self\"</span></span></span><span class=\"hljs-tag\"> </span><span class=\"hljs-attr\"><span class=\"hljs-tag\"><span class=\"hljs-attr\">title</span></span></span><span class=\"hljs-tag\">=</span><span class=\"hljs-string\"><span class=\"hljs-tag\"><span class=\"hljs-string\">\"关闭\"</span></span></span><span class=\"hljs-tag\">&gt;</span></span>关闭<span class=\"hljs-tag\"><span class=\"hljs-tag\">&lt;/</span><span class=\"hljs-name\"><span class=\"hljs-tag\"><span class=\"hljs-name\">a</span></span></span><span class=\"hljs-tag\">&gt;</span></span>\n</code></pre><span>只要是页面中有刷新或者跳转动作就要用上面的解决方法。</span></div><div><span><br></span></div><div><br></div><div><p><strong>JS的几种跳转方式：</strong><br>1.</p><pre><code>window.open(”url“) </code></pre><br><p>2.用自定义函数 <br></p><pre><code><span><span><span>&lt;</span></span><span><span><span><span><span>script</span></span></span></span></span><span><span>&gt;</span></span></span><span><span><span> \n</span></span><span><span><span><span><span><span><span><span>function</span></span></span></span></span></span></span><span><span><span><span> </span></span></span></span><span><span><span><span><span><span><span>openWin</span></span></span></span></span></span></span><span><span><span><span>(</span></span></span></span><span><span><span><span><span><span><span>tag,obj</span></span></span></span></span></span></span><span><span><span><span>) \n</span></span></span></span></span><span><span>{ \nobj.target=</span></span><span><span><span><span><span>\"_blank\"</span></span></span></span></span><span><span>; \nobj.href = </span></span><span><span><span><span><span>\"Web/Substation/Substation.aspx?stationno=\"</span></span></span></span></span><span><span>+tag; \nobj.click(); \n} \n</span></span></span><span><span><span>&lt;/</span></span><span><span><span><span><span>script</span></span></span></span></span><span><span>&gt;</span></span></span> \n<span><span><span>&lt;</span></span><span><span><span><span><span>a</span></span></span></span></span><span><span> </span></span><span><span><span><span><span>href</span></span></span></span></span><span><span>=</span></span><span><span><span><span><span>\"javascript:void(0)\"</span></span></span></span></span><span><span><span><span><span>onclick</span></span></span></span></span><span><span>=</span></span><span><span><span><span><span>\"openWin(3,this)\"</span></span></span></span></span><span><span>&gt;</span></span></span>点我<span><span><span>&lt;/</span></span><span><span><span><span><span>a</span></span></span></span></span><span><span>&gt;</span></span></span></code></pre><br><span>3.</span><pre><code>window.location.href='';</code><div><br></div></pre></div></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 1,
      "parent_sort_index": 8,
      "chapter_level_one_id": "3b40e721f4d97e317036b3fc4c37a177",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "拓展阅读",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "ed4127e0020ef42e64b93353edd2d86e",
      "chapter_level_two_parent_id": "3b40e721f4d97e317036b3fc4c37a177",
      "chapter_level_two_name": "javascript数组常用方法技巧全解",
      "chapter_level_two_url": "/javascript/javascript-array.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><p><span>数组对于程序语言的重要性自不必多说，而在使用javascript的时候难免也会需要用到数组操作,<span>主要用于封装多个任意类型的数据，并对它们进行管理，<span>在js中，数组可以使用Array构造函数来创建，或使用[]快速创建，这也是首选的方法。</span></span><span>js中的数组和其他语言的数组也有着比较大的区别，下面</span></span><span>我们来一起重点讨论下js中的数组操作的一些常见方法和技巧。</span></p><p><span><br></span></p><p><span>数组是值的有序集合，由于弱类型的原因，JavaScript中数组十分灵活、强大，不像是Java等强类型高级语言数组只能存放同一类型或其子类型元素，JavaScript在同一个数组中可以存放多种类型的元素，而且是长度也是可以动态调整的，可以随着数据增加或减少自动对数组长度做更改。<br></span></p><p><br></p><p><span><strong>创建数组</strong><br>在JavaScript多种方式创建数组<br><br><strong>构造函数</strong><br>1.无参构造函数，创建一空数组<br></span></p><p><span></span></p><pre><code class=\"html hljs xml\">var a1=new Array();\n</code></pre><p><span><br></span></p><p>2.一个数字参数构造函数，指定数组长度（由于数组长度可以动态调整，作用并不大），创建指定长度的数组</p><br><p><span></span></p><pre><code class=\"html hljs xml\">var a2=new Array(5);\n</code></pre><br><p><span><span>3.带有初始化数据的构造函数，创建数组并初始化参数数据</span></span></p><p><span></span></p><pre><code class=\"html hljs xml\">var a3=new Array(4,'hello',new Date());\n</code></pre><p><span><br></span></p><strong>字面量</strong><p><span>1.使用方括号，创建空数组，等同于调用无参构造函数</span><br></p><pre><code class=\"html hljs xml\">var a4=[];\n</code></pre><p><br></p><p>2.使用中括号，并传入初始化数据，等同于调用调用带有初始化数据的构造函数</p><pre><code class=\"html hljs xml\">var a5=[10];\n</code></pre><br><p><strong>注意点</strong><br></p><p><span>1.在使用构造函数创建数组时如果传入一个数字参数，则会创建一个长度为参数的数组，如果传入多个，则创建一个数组，参数作为初始化数据加到数组中</span><br></p><pre><code class=\"html hljs xml\">var a1=new Array(5);\n            console.log(a1.length);//5\n            console.log(a1); //[] ,数组是空的\n\n            var a2=new Array(5,6);\n            console.log(a2.length);//2\n            console.log(a2); //[5,6]\n</code></pre><br><p>但是使用字面量方式，无论传入几个参数，都会把参数当作初始化内容<br></p><pre><code class=\"html\">var a1=[5];\n            console.log(a1.length);//1\n            console.log(a1); //[5]\n\n            var a2=[5,6];\n            console.log(a2.length);//2\n            console.log(a2); //[5,6]</code></pre><p><br></p><p>2.使用带初始化参数的方式创建数组的时候，最好最后不要带多余的”,”，在不同的浏览器下对此处理方式不一样</p><span></span><p><span></span></p><pre><code class=\"html\">var a1=[1,2,3,];\nconsole.log(a1.length);\nconsole.log(a1);\n</code></pre><p>这段脚本在现代浏览器上运行结果和我们设想一样，长度是3，但是在低版本IE下却是长度为4的数组，最后一条数据是undefined</p><br><p><span><strong><br></strong></span></p><p><span><strong>数组的索引与长度</strong></span></p><p><span>数组的值可以通过自然数索引访问进行读写操作，下标也可以是一个得出非负整数的变量或表达式<br></span></p><pre><code class=\"html\">var a1=[1,2,3,4];\nconsole.log(a1[0]); //1\nvar i=1;\nconsole.log(a1[i]); //2\nconsole.log(a1[++i]); //3\n</code></pre><p>数组也是对象，我们可以使用索引的奥秘在于，数组会把索引值转换为对应字符串（1=&gt;”1”）作为对象属性名</p><br><pre><code class=\"html\">console.log(1 in a1);//true，确实是一个属性\n</code></pre><p>索引特殊性在于数组会自动更新length属性，当然因为JavaScript语法规定数字不能作为变量名，所以我们不能显示使用array.1这样的格式。由此可见其实负数，甚至非数字”索引“都是允许的，只不过这些会变成数组的属性，而不是索引</p><br><pre><code class=\"html\">var a=new Array(1,2,3);\n            a[-10]=\"a[-10]\";\n            a[\"sss\"]=\"sss\";\n</code></pre><br><div style=\"text-align: center;\"><img src=\"https://atts.w3cschool.cn/attachments/day_161125/201611251414441121.png\" style=\"line-height: 1.7; font-size: 13px;\" alt=\"js数组代码\"></div><br><p><span>这样我们可以看出所有的索引都是属性名，但只有自然数（有最大值）才是索引，一般我们在使用数组的时候不会出现数组越界错误也正是因为此，数组的索引可以不是连续的，访问index不存在的元素的时候返回undefined<br></span></p><p><span><br></span></p><p><span></span></p><pre><code class=\"html\">var a=new Array(1,2,3);\n            a[100]=100;\n            console.log(a.length); //101\n            console.log(a[3]); //undefined\n            console.log(a[99]); //undefined\n            console.log(a[100]); 100\n</code></pre><br><p style=\"text-align: center;\"><span><img src=\"https://atts.w3cschool.cn/attachments/day_161125/201611251415134300.png\" alt=\"js数组代码片段\"><br><br></span></p><p style=\"text-align: left;\"><span>上面的例子中，虽然直接对a[100]赋值不会影响a[4]或a[99],但数组的长度却受到影响，数组length属性等于数组中最大的index+1，我们知道数组的length属性同样是个可写的属性，当强制把数组的length属性值设置为小于等于最大index值时，数组会自动删除indexd大于等于length的数据，在刚才代码中追加几句</span></p><p style=\"text-align: left;\"><span></span></p><pre><code class=\"html\">a.length=2\n            console.log(a);//[1,2]\n</code></pre><span>这时候会发现a[2]和a[100]被自动删除了，同理，如果把length设置为大于最大index+1的值的时候，数组也会自动扩张，但是不会为数组添加新元素，只是在尾部追加空空间</span><br><pre><code class=\"html\">a.length=5;\n            console.log(a); //[1,2] //后面没有3个undefined\n</code></pre><br><p style=\"text-align: left;\"><span><strong>元素添加/删除</strong><br>基本方法<br></span></p><p style=\"text-align: left;\"><span><br></span></p><p style=\"text-align: left;\"><span>上面例子已经用到向数组内添加元素方法，直接使用索引就可以（index没必要连续）<br></span></p><p style=\"text-align: left;\"><span></span></p><pre><code class=\"html\">var a=new Array(1,2,3);\n            a[3]=4;\n            console.log(a);//[1, 2, 3, 4]\n</code></pre><p>前面提到数组也是对象，索引只是特殊的属性，所以我们可以使用删除对象属性的方法,使用delete 删除数组元素</p><br><p style=\"text-align: left;\"><span></span></p><pre><code class=\"html\">delete a[2];\n            console.log(a[2]); //undefined\n</code></pre><p>这样和直接把a[2]赋值为undefined类似，不会改变数组长度，也不会改变其他数据的index和value对应关系</p><br><p style=\"text-align: left;\"><span><br></span></p><p style=\"text-align: center;\"><span><img src=\"https://atts.w3cschool.cn/attachments/day_161125/201611251417451988.png\" alt=\"元素添加/删除\"><br><br></span></p><p style=\"text-align: left;\"><span><strong>栈方法</strong><br></span></p><p style=\"text-align: left;\"><span>上面例子总有同学就发现了，尤其是其删除方法，并不是我们希望的表现形式，我们很多时候希望删除中间一个元素后，后面元素的index都自动减一，数组length同时减一，就好像在一个堆栈中拿去的一个，数组已经帮我们做好了这种操作方式，pop和push能够让我们使用堆栈那样先入后出使用数组<br></span></p><p style=\"text-align: left;\"><span></span></p><pre><code class=\"html\">var a=new Array(1,2,3);\n            a.push(4);\n            console.log(a);//[1, 2, 3, 4] \n            console.log(a.length);//4\n            console.log(a.pop(a));//4\n            console.log(a); //[1, 2, 3] \n            console.log(a.length);//3\n</code></pre><p style=\"text-align: left;\"><span><br></span></p><strong>队列方法</strong><p style=\"text-align: left;\"><span>既然栈方法都实现了，先入先出的队列怎么能少，shift方法可以删除数组index最小元素，并使后面元素index都减一，length也减一，这样使用shift/push就可以模拟队列了，当然与shift方法对应的有一个unshift方法，用于向数组头部添加一个元素<br></span></p><p style=\"text-align: left;\"><span></span></p><pre><code class=\"html\">var a=new Array(1,2,3);\n            a.unshift(4);\n            console.log(a);//[4, 1, 2, 3] \n            console.log(a.length);//4\n            console.log(a.shift(a));//4\n            console.log(a); //[1, 2, 3] \n            console.log(a.length);//3\n</code></pre><strong></strong><p style=\"text-align: left;\"><span><strong><br></strong></span></p><p>终极神器</p><p style=\"text-align: left;\"><span>JavaScript提供了一个splice方法用于一次性解决数组添加、删除（这两种方法一结合就可以达到替换效果），方法有三个参数<br>1.开始索引<br><br>2.删除元素的位移<br><br>3.插入的新元素，当然也可以写多个<br><br>splice方法返回一个由删除元素组成的新数组，没有删除则返回空数组<br></span></p><pre><code class=\"html\">var a=new Array(1,2,3,4,5);\n</code></pre><p style=\"text-align: left;\"><span><br></span></p><strong>删除</strong><p style=\"text-align: left;\"><span>指定前两个参数，可以使用splice删除数组元素，同样会带来索引调整及length调整<br></span></p><p style=\"text-align: left;\"><span></span></p><pre><code class=\"html\">var a=new Array(1,2,3,4,5);\n            console.log(a.splice(1,3));//[2, 3, 4] \n            console.log(a.length);//2\n            console.log(a);//[1,5]\n</code></pre><span>如果数组索引不是从0开始的，那么结果会很有意思，有一这样数组</span><br><pre><code class=\"html\">var a=new Array();\n        a[2]=2;\n        a[3]=3;\n        a[7]=4;\n        a[8]=5;\n</code></pre><div style=\"text-align: center;\"><br></div><div style=\"text-align: center;\"><img src=\"https://atts.w3cschool.cn/attachments/day_161125/201611251459231821.png\" alt=\"数组\" style=\"line-height: 1.7; font-size: 13px;\"></div><pre><code class=\"html\">console.log(a.splice(3,4)); //[3] \n        console.log(a.length); //5\n        console.log(a); //[2: 2, 3: 4, 4: 5]\n</code></pre><div style=\"text-align: center;\"><br></div><div style=\"text-align: center;\"><img src=\"https://atts.w3cschool.cn/attachments/day_161125/201611251459441435.png\" alt=\"插入与替换\" style=\"line-height: 1.7; font-size: 13px;\"></div><p style=\"text-align: left;\"><span><br></span></p><p>上面例子可以看到，splice的第一个参数是绝对索引值，而不是相对于数组索引，第二个参数并不是删除元素的个数，而是删除动作执行多少次，并不是按数组实际索引移动，而是连续移动。同时调整后面元素索引，前面索引不理会</p><br><br><strong>插入与替换</strong><p style=\"text-align: left;\"><span>只要方法第二个参数，也就是删除动作执行的次数设为0，第三个参数及以后填写要插入内容就splice就能执行插入操作，而如果第二个参数不为0则变成了先在该位置删除再插入，也就是替换效果<br></span></p><p style=\"text-align: left;\"><strong style=\"line-height: 1.7; font-size: 13px;\"></strong></p><pre><code class=\"html\">var a=new Array(1,2,3,4,5);\n       a.splice(1,0,9,99,999);\n       console.log(a.length); //8\n       console.log(a);//[1, 9, 99, 999, 2, 3, 4, 5] \n       a.splice(1,3,8,88,888);\n       console.log(a.length);//8\n       console.log(a);//[1, 8, 88, 888, 2, 3, 4, 5]\n</code></pre><br><p style=\"text-align: left;\"><strong style=\"line-height: 1.7; font-size: 13px;\">常用方法<br></strong></p><p style=\"text-align: left;\"><span style=\"line-height: 1.7; font-size: 13px;\"><strong>join(char)</strong><br>这个方法在C#等语言中也有，作用是把数组元素（对象调用其toString()方法）使用参数作为连接符连接成一字符串<br></span></p><p style=\"text-align: left;\"><span style=\"line-height: 1.7; font-size: 13px;\"></span></p><pre><code class=\"html\">var a=new Array(1,2,3,4,5);\n       console.log(a.join(',')); //1,2,3,4,5 \n       console.log(a.join(' ')); //1 2 3 4 5\n</code></pre><p style=\"text-align: left;\"><span style=\"line-height: 1.7; font-size: 13px;\"><br></span></p><strong>slice(start,end)</strong><br><p style=\"text-align: left;\"><span style=\"line-height: 1.7; font-size: 13px;\"><span>不要和splice方法混淆，slice</span><br></span></p><pre><code class=\"html\">var a=new Array(1,2,3,4,5);\n            console.log(a); //[1, 2, 3, 4, 5] \n            console.log(a.slice(1,2));//2\n            console.log(a.slice(1,-1));//[2, 3, 4] \n            console.log(a.slice(3,2));//[]\n            console.log(a); //[1, 2, 3, 4, 5]\n</code></pre><p style=\"text-align: left;\"><span style=\"line-height: 1.7; font-size: 13px;\"><br></span></p><p>方法用于返回数组中一个片段或子数组，如果只写一个参数返回参数到数组结束部分，如果参数出现负数，则从数组尾部计数（-3意思是数组倒第三个，一般人不会这么干，但是在不知道数组长度，想舍弃后n个的时候有些用，不过数组长度很好知道。。。。，好纠结的用法），如果start大于end返回空数组，值得注意的一点是slice不会改变原数组，而是返回一个新的数组。</p><br><br><strong>concat(array)</strong><br><p>看起来像是剪切，但这个真不是形声字，concat方法用于拼接数组，a.concat(b)返回一个a和b共同组成的新数组，同样不会修改任何一个原始数组，也不会递归连接数组内部数组</p><br><p style=\"text-align: left;\"><span style=\"line-height: 1.7; font-size: 13px;\"></span></p><pre><code class=\"html\">var a=new Array(1,2,3,4,5);\n            var b=new Array(6,7,8,9);\n            console.log(a.concat(b));//[1, 2, 3, 4, 5, 6, 7, 8, 9] \n            console.log(a); //[1, 2, 3, 4, 5] \n            console.log(b); //[6, 7, 8, 9]\n</code></pre><strong>reverse()</strong><p style=\"text-align: left;\"><span style=\"line-height: 1.7; font-size: 13px;\">方法用于将数组逆序，与之前不同的是它会修改原数组<br></span></p><p style=\"text-align: left;\"><span style=\"line-height: 1.7; font-size: 13px;\"></span></p><pre><code class=\"html\">var a=new Array(1,2,3,4,5);\n            a.reverse();\n            console.log(a); //[5, 4, 3, 2, 1]\n</code></pre><span>同样，当数组索引不是连续或以0开始，结果需要注意</span><br><pre><code class=\"html\">var a=new Array();\n        a[2]=2;\n        a[3]=3;\n        a[7]=4;\n        a[8]=5;\n</code></pre><br><div style=\"text-align: center;\"><img src=\"https://atts.w3cschool.cn/attachments/day_161125/201611251506308521.png\" alt=\"reverse()\" style=\"font-size: 13px; line-height: 1.7;\"></div><div style=\"text-align: center;\"><br></div><span style=\"line-height: 1.7; font-size: 13px;\"></span><pre><code class=\"html\">a.reverse();\n</code></pre><div style=\"text-align: center;\"><br></div><div style=\"text-align: center;\"><img src=\"https://atts.w3cschool.cn/attachments/day_161125/201611251507071022.png\" alt=\"sort\" style=\"font-size: 13px; line-height: 1.7;\"></div><div style=\"text-align: center;\"><br></div><div style=\"text-align: left;\"><strong>sort</strong><br>sort方法用于对数组进行排序，当没有参数的时候会按字母表升序排序，如果含有undefined会被排到最后面，对象元素则会调用其toString方法，如果想按照自己定义方式排序，可以传一个排序方法进去，很典型的策略模式，同样sort会改变原数组。<br></div><pre><code class=\"html\">var a=new Array(5,4,3,2,1);\n       a.sort();\n       console.log(a);//[1, 2, 3, 4, 5]\n</code></pre><p>不过······</p><p style=\"text-align: left;\"><span style=\"line-height: 1.7; font-size: 13px;\"></span></p><pre><code class=\"html\">var a=new Array(7,8,9,10,11);\n       a.sort();\n       console.log(a);//[10, 11, 7, 8, 9]\n</code></pre><span>因为按照字母表排序，7就比10大了，这时候我们需要传入自定义排序函数</span><br><pre><code class=\"html\">var a=new Array(7,8,9,10,11);\n           a.sort(function(v1,v2){\n            return v1-v2;\n           });\n       console.log(a);//[7, 8, 9, 10, 11]\n</code></pre><p>原理和C#中的sort类似，只不过可以直接传递方法进去，以下内容仅供参考：</p><br><br><p>sort内部使用快速排序，每次比较两个元素大小的时候如果没有参数，则直接判断字母表，如果有参数，则把正在比较的两个参数传入自定义方法并调用（正在比较的两个数会传给自定义方法的v1、v2），如果返回值大于0表示v1&gt;v2，如果等于0，表示v1=v2，如果小于0，表示v1&lt;v2，其实我们传入的方法就是告诉sort怎么比较两个元素谁大谁小，至于排序移动元素过程人家写好了。</p><p style=\"text-align: left;\"><span style=\"line-height: 1.7; font-size: 13px;\"><br></span></p><p style=\"text-align: left;\"><span style=\"line-height: 1.7; font-size: 13px;\"><strong>js数组循环遍历数组内所有元素的方法</strong></span><br></p><p style=\"text-align: left;\"><span>在js中数组遍历最简单的办法就是使用for然后再利用arr.length长度作为for最大限度值即可解决了，下面我们来看看一些有用的实例。</span></p><p style=\"text-align: left;\"><span><br></span></p><p style=\"text-align: left;\"><span><span>for(){}遍历数组</span><br></span></p><pre><code class=\"html\">&lt;script type=\"text/javascript\"&gt;\n &lt;!--\nvar arr = new Array(13.5,3,4,5,6);\nfor(var i=0;i&lt;arr.length;i++){\n arr[i] = arr[i]/2.0;\n}\nalert(arr);\n //--&gt;\n &lt;/script&gt;\n</code></pre><br><p style=\"text-align: left;\"><span>for in循环遍历数组<br></span></p><p style=\"text-align: left;\"><span></span></p><pre><code class=\"html\">&lt;html&gt;\n&lt;body&gt;\n&lt;script type=\"text/javascript\"&gt;\nvar x\nvar mycars = new Array()\nmycars[0] = \"Saab\"\nmycars[1] = \"Volvo\"\nmycars[2] = \"BMW\"\nfor (x in mycars)\n{\ndocument.write(mycars[x] + \"&lt;br /&gt;\")\n}\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><br><p style=\"text-align: left;\"><span><strong>js数组与字符串的相互转换方法</strong></span></p><p style=\"text-align: left;\"><span>1、数组转字符串<br>需要将数组元素用某个字符连接成字符串，示例代码如下：</span></p><pre><code class=\"html\">var a, b;\na = new Array(0,1,2,3,4);\nb = a.join(\"-\");\n</code></pre><br><p style=\"text-align: left;\"><span>2、字符串转数组<br></span></p><p style=\"text-align: left;\"><span>实现方法为将字符串按某个字符切割成若干个字符串，并以数组形式返回，示例代码如下：<br></span></p><p style=\"text-align: left;\"><span></span></p><pre lang=\"html\"><code class=\"html\">var s = \"abc,abcd,aaa\";\nss = s.split(\",\");// 在每个逗号(,)处进行分解。\n</code></pre><h2>JavaScript 数组练习</h2><p>如果你已经掌握了上面介绍的JavaScript数组的常用方法，那么你可以通过以下的练习来加深对JavaScript数组的使用！</p><p><a href=\"https://www.w3cschool.cn/codecamp/store-multiple-values-in-one-variable-using-javascript-arrays.html\" target=\"_blank\">Javascript 数组操作</a></p><p>通过JavaScript数组，我们可以将多个数据存储于同一个变量中。<br></p><p><a href=\"https://www.w3cschool.cn/codecamp/access-multi-dimensional-arrays-with-indexes.html\" target=\"_blank\">Javascript 多维数组操作</a></p><p>这个练习让你可以在数组中包含其他数组<br></p><p><a href=\"https://www.w3cschool.cn/codecamp/access-array-data-with-indexes.html\" target=\"_blank\">JavaScript 使用索引查找数组中的数据</a></p><p>你可以像操作字符串一样通过数组索引[index]来访问数组中的数据。<br></p><p><b>提示：</b>如果你需要更多关于JavaScript数组的练习，请移步本站的<a href=\"https://www.w3cschool.cn/codecamp/list?pename=basic_javascript_camp\" target=\"_blank\">JavaScript编程实战</a>！</p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 7,
      "parent_sort_index": 7,
      "chapter_level_one_id": "aca5a92aacdc6eb0e95d05af4249547f",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JS 实例",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "d4388dbb548532ad77c18690d3f6cda3",
      "chapter_level_two_parent_id": "aca5a92aacdc6eb0e95d05af4249547f",
      "chapter_level_two_name": "JavaScript 编程实战闯关",
      "chapter_level_two_url": "/javascript/javascript-codecamp.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><p></p><p>为了帮助广大学习者，做到学以致用，我们为大家准备了大量的JavaScript编程实战题，通过这些实战题，您可以一边学习一边操作，来达到巩固学习的作用。</p><p>请选择你喜欢的实战提，开始进行编程闯关。</p><div><div><div><h2>JavaScript课程列表</h2></div><div><ul><li><h4><a href=\"//www.w3cschool.cn/codecamp/comment-your-javascript-code.html\" title=\"h\" target=\"_self\">JavaScript 注释语句操作</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/declare-javascript-variables.html\" title=\"h\" target=\"_self\">声明JavaScript变量</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/storing-values-with-the-equal-operator.html\" title=\"h\" target=\"_self\">JavaScript 使用=为变量赋值</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/initializing-variables-with-the-equal-operator.html\" title=\"h\" target=\"_self\">JavaScript 使用=为变量赋初始值</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/understanding-uninitialized-variables.html\" title=\"h\" target=\"_self\">理解JavaScript未定义变量</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/understanding-case-sensitivity-in-variables.html\" title=\"h\" target=\"_self\">理解JavaScript变量的大小写敏感性</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/add-two-numbers-with-javascript.html\" title=\"h\" target=\"_self\">JavaScript加法运算</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/subtract-one-number-from-another-with-javascript.html\" title=\"h\" target=\"_self\">JavaScript减法运算</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/multiply-two-numbers-with-javascript.html\" title=\"h\" target=\"_self\">JavaScript乘法运算</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/divide-one-number-by-another-with-javascript.html\" title=\"h\" target=\"_self\">JavaScript除法运算</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/increment-a-number-with-javascript.html\" title=\"h\" target=\"_self\">JavaScript自增运算++</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/decrement-a-number-with-javascript.html\" title=\"h\" target=\"_self\">JavaScript自减运算--</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/create-decimal-numbers-with-javascript.html\" title=\"h\" target=\"_self\">JavaScript浮点数</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/multiply-two-decimals-with-javascript.html\" title=\"h\" target=\"_self\">JavaScript小数乘法运算</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/divide-one-decimal-by-another-with-javascript.html\" title=\"h\" target=\"_self\">JavaScript小数的除法运算</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/finding-a-remainder-in-javascript.html\" title=\"h\" target=\"_self\">JavaScript取余运算%</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/assignment-with-plus-equals.html\" title=\"h\" target=\"_self\">JavaScript +=赋值操作</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/assignment-with-minus-equals.html\" title=\"h\" target=\"_self\">JavaScript -=赋值操作</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/assignment-with-times-equals.html\" title=\"h\" target=\"_self\">JavaScript *=赋值操作</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/assignment-with-divided-by-equals.html\" title=\"h\" target=\"_self\">JavaScript /=赋值操作</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/convert-celsius-to-fahrenheit.html\" title=\"h\" target=\"_self\">JavaScript 基本预算综合练习</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/declare-string-variables.html\" title=\"h\" target=\"_self\">JavaScript 声明字符串变量</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/escaping-literal-quotes-in-strings.html\" title=\"h\" target=\"_self\">JavaScript 转义字符串中的引号</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/quoting-strings-with-single-quotes.html\" title=\"h\" target=\"_self\">JavaScript 使用单引号引用字符串</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/escape-sequences-in-strings.html\" title=\"h\" target=\"_self\">JavaScript 转义字符串中的特殊符号</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/concatenating-strings-with-plus-operator.html\" title=\"h\" target=\"_self\">JavaScript字符串连接方式</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/concatenating-strings-with-the-plus-equals-operator.html\" title=\"h\" target=\"_self\">JavaScript +=连接字符串操作</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/constructing-strings-with-variables.html\" title=\"h\" target=\"_self\">JavaScript 使用变量连接字符串</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/appending-variables-to-strings.html\" title=\"h\" target=\"_self\">JavaScript 追加变量到字符串上</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/find-the-length-of-a-string.html\" title=\"h\" target=\"_self\">JavaScript 获取字符串的长度</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/use-bracket-notation-to-find-the-first-character-in-a-string.html\" title=\"h\" target=\"_self\">JavaScript 使用中括号获取字符串中的第一个字符</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/understand-string-immutability.html\" title=\"h\" target=\"_self\">理解JavaScript字符串的不可变性</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/use-bracket-notation-to-find-the-nth-character-in-a-string.html\" title=\"h\" target=\"_self\">JavaScript 使用中括号索引查找字符串中的第N个字符</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/use-bracket-notation-to-find-the-last-character-in-a-string.html\" title=\"h\" target=\"_self\">JavaScript 使用中括号索引查找字符串中的最后一个字符</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/use-bracket-notation-to-find-the-nth-to-last-character-in-a-string.html\" title=\"h\" target=\"_self\">JavaScript 使用中括号索引查找字符串中的第N个到最后一个字符</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/word-blanks.html\" title=\"h\" target=\"_self\">Javascript 字符串操作综合训练</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/store-multiple-values-in-one-variable-using-javascript-arrays.html\" title=\"h\" target=\"_self\">Javascript 数组操作</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/nest-one-array-within-another-array.html\" title=\"h\" target=\"_self\">Javascript 多维数组操作</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/access-array-data-with-indexes.html\" title=\"h\" target=\"_self\">JavaScript 使用索引查找数组中的数据</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/modify-array-data-with-indexes.html\" title=\"h\" target=\"_self\">JavaScript 使用索引修改数组中的数据</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/access-multi-dimensional-arrays-with-indexes.html\" title=\"h\" target=\"_self\">JavaScript 使用索引操作多维数组</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/manipulate-arrays-with-push().html\" title=\"h\" target=\"_self\">JavaScript push()函数追加数组数据</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/manipulate-arrays-with-pop().html\" title=\"h\" target=\"_self\">JavaScript pop()函数弹出数组最后数据</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/manipulate-arrays-with-shift().html\" title=\"h\" target=\"_self\">JavaScript shift()函数移出数组第一个数据</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/manipulate-arrays-with-unshift().html\" title=\"h\" target=\"_self\">JavaScript unshift()函数移入数据到数组第一位</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/shopping-list.html\" title=\"h\" target=\"_self\">JavaScript 创建购物清单实战案例</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/write-reusable-javascript-with-functions.html\" title=\"h\" target=\"_self\">JavaScript 函数定义</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/passing-values-to-functions-with-arguments.html\" title=\"h\" target=\"_self\">JavaScript 带参数函数定义</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/global-scope-and-functions.html\" title=\"h\" target=\"_self\">JavaScript 函数全局变量定义</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/local-scope-and-functions.html\" title=\"h\" target=\"_self\">JavaScript 函数局部变量定义</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/global-vs.-local-scope-in-functions.html\" title=\"h\" target=\"_self\">JavaScript 函数全局变量与局部变量差异</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/return-a-value-from-a-function-with-return.html\" title=\"h\" target=\"_self\">JavaScript 函数使用return返回值</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/assignment-with-a-returned-value.html\" title=\"h\" target=\"_self\">JavaScript 函数使用返回值进行赋值</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/stand-in-line.html\" title=\"h\" target=\"_self\">JavaScript 队列</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/understanding-boolean-values.html\" title=\"h\" target=\"_self\">JavaScript 布尔boolean数据类型</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/use-conditional-logic-with-if-statements.html\" title=\"h\" target=\"_self\">JavaScript if语句</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/comparison-with-the-equality-operator.html\" title=\"h\" target=\"_self\">JavaScript 等于比较运算符==</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/comparison-with-the-strict-equality-operator.html\" title=\"h\" target=\"_self\">JavaScript 全等于比较运算符===</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/comparison-with-the-inequality-operator.html\" title=\"h\" target=\"_self\">JavaScript 不等于比较运算符!=</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/comparison-with-the-strict-inequality-operator.html\" title=\"h\" target=\"_self\">JavaScript 不全等于比较运算符!==</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/comparison-with-the-greater-than-operator.html\" title=\"h\" target=\"_self\">JavaScript 大于比较运算符&gt;</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/comparison-with-the-greater-than-or-equal-to-operator.html\" title=\"h\" target=\"_self\">JavaScript 大于等于比较运算符&gt;=</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/comparison-with-the-less-than-operator.html\" title=\"h\" target=\"_self\">JavaScript 小于比较运算符&lt;</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/comparison-with-the-less-than-or-equal-to-operator.html\" title=\"h\" target=\"_self\">JavaScript 小于等于比较运算符&lt;=</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/comparisons-with-the-logical-and-operator.html\" title=\"h\" target=\"_self\">JavaScript 使用逻辑与运算符&amp;&amp;比较数值</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/comparisons-with-the-logical-or-operator.html\" title=\"h\" target=\"_self\">JavaScript 使用逻辑或运算符||比较数值</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/introducing-else-statements.html\" title=\"h\" target=\"_self\">JavaScript else语句</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/introducing-else-if-statements.html\" title=\"h\" target=\"_self\">JavaScript else if语句</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/logical-order-in-if-else-statements.html\" title=\"h\" target=\"_self\">JavaScript if、else if语句中代码的执行顺序</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/chaining-if-else-statements.html\" title=\"h\" target=\"_self\">JavaScript 同时使用if、else if 语句</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/golf-code.html\" title=\"h\" target=\"_self\">Javascript 逻辑运算综合实战</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/selecting-from-many-options-with-switch-statements.html\" title=\"h\" target=\"_self\">JavaScript 使用switch语句进行多选项选择</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/adding-a-default-option-in-switch-statements.html\" title=\"h\" target=\"_self\">JavaScript 在switch语句中添加default语句</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/multiple-identical-options-in-switch-statements.html\" title=\"h\" target=\"_self\">JavaScript switch语句中的多个相同选项判断</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/replacing-if-else-chains-with-switch.html\" title=\"h\" target=\"_self\">JavaScript 使用switch语句替换串联的if、else if语句</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/returning-boolean-values-from-functions.html\" title=\"h\" target=\"_self\">JavaScript 直接在函数中返回boolean值</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/return-early-pattern-for-functions.html\" title=\"h\" target=\"_self\">JavaScript 在函数中使用return跳出函数</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/counting-cards.html\" title=\"h\" target=\"_self\">JavaScript 条件判断算法综合实战</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/build-javascript-objects.html\" title=\"h\" target=\"_self\">JavaScript 对象操作</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/accessing-objects-properties-with-the-dot-operator.html\" title=\"h\" target=\"_self\">JavaScript 使用点操作符.读取对象属性</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/accessing-objects-properties-with-bracket-notation.html\" title=\"h\" target=\"_self\">JavaScript 使用[]读取对象属性</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/accessing-objects-properties-with-variables.html\" title=\"h\" target=\"_self\">JavaScript 使用变量访问对象属性</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/updating-object-properties.html\" title=\"h\" target=\"_self\">JavaScript 更新对象属性</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/add-new-properties-to-a-javascript-object.html\" title=\"h\" target=\"_self\">JavaScript 给对象添加属性</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/delete-properties-from-a-javascript-object.html\" title=\"h\" target=\"_self\">JavaScript 删除对象属性</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/using-objects-for-lookups.html\" title=\"h\" target=\"_self\">JavaScript 使用对象进行查找值</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/testing-objects-for-properties.html\" title=\"h\" target=\"_self\">JavaScript 检查对象属性</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/introducing-javascript-object-notation-(json).html\" title=\"h\" target=\"_self\">JavaScript JSON操作</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/accessing-nested-objects-in-json.html\" title=\"h\" target=\"_self\">JavaScript 获取JSON属性值</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/accessing-nested-arrays-in-json.html\" title=\"h\" target=\"_self\">JavaScript 获取JSON数组值</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/record-collection.html\" title=\"h\" target=\"_self\">JavaScript JSON集合操作</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/iterate-with-javascript-for-loops.html\" title=\"h\" target=\"_self\">JavaScript 使用for语句循环迭代</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/iterate-odd-numbers-with-a-for-loop.html\" title=\"h\" target=\"_self\">JavaScript 使用for语句循环按奇数顺序迭代</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/count-backwards-with-a-for-loop.html\" title=\"h\" target=\"_self\">JavaScript 使用for循环逆向迭代</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/iterate-through-an-array-with-a-for-loop.html\" title=\"h\" target=\"_self\">JavaScript 使用for循环迭代输出数组</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/nesting-for-loops.html\" title=\"h\" target=\"_self\">JavaScript 循环语句综合实战</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/iterate-with-javascript-while-loops.html\" title=\"h\" target=\"_self\">JavaScript 使用while语句循环迭代</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/profile-lookup.html\" title=\"h\" target=\"_self\">JavaScript 使用循环语句查找通讯录</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/generate-random-fractions-with-javascript.html\" title=\"h\" target=\"_self\">JavaScript 使用random()生成随机小数</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/generate-random-whole-numbers-with-javascript.html\" title=\"h\" target=\"_self\">JavaScript 使用random()生成随机数</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/generate-random-whole-numbers-within-a-range.html\" title=\"h\" target=\"_self\">JavaScript 使用random()在一个范围内生成随机数</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/sift-through-text-with-regular-expressions.html\" title=\"h\" target=\"_self\">JavaScript 使用正则表达式操作字符串</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/find-numbers-with-regular-expressions.html\" title=\"h\" target=\"_self\">JavaScript 使用正则表达式选取数值</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/find-whitespace-with-regular-expressions.html\" title=\"h\" target=\"_self\">JavaScript 使用正则表达式选取空白字符</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/invert-regular-expression-matches-with-javascript.html\" title=\"h\" target=\"_self\">JavaScript 使用正则表达式转化匹配</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/create-a-javascript-slot-machine.html\" title=\"h\" target=\"_self\">JavaScript 综合运用开发小游戏项目</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/add-your-javascript-slot-machine-slots.html\" title=\"h\" target=\"_self\">JavaScript 进一步完善小游戏项目</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/bring-your-javascript-slot-machine-to-life.html\" title=\"h\" target=\"_self\">JavaScript 让小游戏项目运作起来</a></h4></li><li><h4><a href=\"//www.w3cschool.cn/codecamp/give-your-javascript-slot-machine-some-stylish-images.html\" title=\"h\" target=\"_self\">JavaScript 为小游戏项目添加图片</a></h4></li></ul><div></div></div></div></div><div><div><div></div></div></div></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 6,
      "parent_sort_index": 7,
      "chapter_level_one_id": "aca5a92aacdc6eb0e95d05af4249547f",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JS 实例",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "e8178fa09e4c5ad769d9d7362143c038",
      "chapter_level_two_parent_id": "aca5a92aacdc6eb0e95d05af4249547f",
      "chapter_level_two_name": "JavaScript 测验",
      "chapter_level_two_url": "/javascript/javascript-js_quiz.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><div><p><strong>您可以通过 W3Cschool 的测验程序来测试您的 JavaScript 技能。</strong></p></div><div><h2>关于本测验</h2><p>本测验包含 20 道题，每道题的最长答题时间是 20 分钟（这是由于每个 session 的默认有效时间是 20 钟）。</p><p>本测验是非官方的测试，它仅仅提供了一个了解您对 JavaScript 的掌握程度的工具。</p></div><div><h2>测验会被记分</h2><p>每道题的分值是 1 分。在您完成全部的 20 道题之后，系统会为您的测验打分，并提供您做错的题目的正确答案。其中，绿色为正确答案，而红色为错误答案。</p><p><a href=\"//www.w3cschool.cn/exam/test?id=97454\" target=\"_blank\">现在就开始测验</a>！祝您好运。</p></div><p><br></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 5,
      "parent_sort_index": 7,
      "chapter_level_one_id": "aca5a92aacdc6eb0e95d05af4249547f",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JS 实例",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "26271639e09b900d595af0beec651fec",
      "chapter_level_two_parent_id": "aca5a92aacdc6eb0e95d05af4249547f",
      "chapter_level_two_name": "JavaScript 总结",
      "chapter_level_two_url": "/javascript/js-summary.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>现在您已经学习了 JavaScript， <span class=\"color_h1\">接下来该学习什么呢？</span> </h2> <hr> <h2>JavaScript 总结</h2> <p>本教程中我们向您讲授了如何向 html 页面添加 JavaScript，使得网站的动态性和交互性更强。</p> <p>你已经学习了如何创建对事件的响应，验证表单，以及如何根据不同的情况运行不同的脚本。</p> <p>你也学到了如何创建和使用对象，以及如何使用 JavaScript 的内置对象。</p> <p>如需更多关于 JavaScript 的信息和知识，请参阅我们的 <a href=\"js-examples.html\">JavaScript 实例</a> 和 <a href=\"/jsref/\">JavaScript 参考手册</a>。</p><p><b>提示：</b>向网页中添加 JavaScript的三种方式为：1）使用&lt;script&gt;&lt;/script&gt;标签内部样式；2）使用外部js文件；3）直接在HTML标签中的行内样式。</p> <hr> <h2>现在已经你已经学习了 JavaScript，接下来该学习什么呢？</h2> <p>下一步应该学习 HTML DOM 和 DHTML。</p> <p>如果你希望学习关于服务器端脚本的知识，那么下一步应该学习 ASP,PHP, .Net。</p> <p><b>HTML DOM</b></p><p> HTML DOM 定义了访问和操作 HTML 文档的标准方法。 HTML DOM 独立于平台和语言，可被任何编程语言使用，比如 Java、JavaScript 和 VBscript。 假如希望了解更多关于 DOM 的知识，请访问我们的 </p><a href=\"/htmldom/\">HTML DOM 教程</a><p>。</p> <p><b>jQuery</b></p> <p>jQuery 是一个 JavaScript 库。</p> <p>jQuery 极大地简化了 JavaScript 编程。</p> <p>jQuery 很容易学习。</p> <p>假如希望了解更多关于 jQuery 的知识，请访问我们的 <a href=\"/jquery/\">jQuery 教程</a>。</p> <p><b>AJAX</b></p> <p>AJAX = 异步 JavaScript 和 XML。</p> <p>AJAX 不是一种新的编程语言，而是一种使用现有标准的新方法。</p> <p>通过与服务器进行数据交换，AJAX 可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</p> <p>有很多使用 AJAX 的应用程序案例：新浪微博、Google 地图、开心网等等。</p> <p>假如您希望学习更多关于 AJAX 的知识，请访问我们的 <a href=\"/ajax/\">AJAX 教程</a>。</p> <p><b>ASP / PHP / .NET</b></p> <p>和 HTML 文档中的脚本运行于客户端（浏览器）不同，ASP/PHP 文件中的脚本在服务器上运行。</p> <p>使用 ASP，你可以动态地编辑、改变或者添加网站内容，对由 HTML 表单提交而来的数据进行响应，访问数据或者数据库并向浏览器返回结果，或者定制对不同的用户来说更有帮助的网页。</p> <p>由于 ASP/PHP 文件返回的是纯粹的 HTML，因此可显示在任何浏览器中。</p> <p>如果希望学习更多关于 ASP 的知识，请访问我们的 <a href=\"/asp/\">ASP 教程</a>。</p> <p>如果希望学习更多关于 PHP 的知识，请访问我们的 <a href=\"/php/\">PHP 教程</a>。</p> <p>如果希望学习更多关于 .NET 的知识，请访问我们的<a href=\"/aspnet/\">.NET 实例/教程</a></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 4,
      "parent_sort_index": 7,
      "chapter_level_one_id": "aca5a92aacdc6eb0e95d05af4249547f",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JS 实例",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "009fa81c3ac1e154249efcc4fab8f92d",
      "chapter_level_two_parent_id": "aca5a92aacdc6eb0e95d05af4249547f",
      "chapter_level_two_name": "JavaScript HTML DOM 实例",
      "chapter_level_two_url": "/javascript/js-ex-dom.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">对象</span> 实例</h2> <hr> <p class=\"intro\">使用内置JavaScript的对象实例。</p> <h2 class=\"tutheader\">Document 对象</h2> <ul class=\"dd\"> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_text\" target=\"_blank\">使用 document.write() 输出文本</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_formattext\" target=\"_blank\">使用 document.write() 输出 HTML</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_doc_anchors\" target=\"_blank\">返回文档中锚的数目</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_doc_anchors2\" target=\"_blank\">返回文档中第一个锚的 innerHTML</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_doc_forms\" target=\"_blank\">返回文档中表单的数目</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_doc_forms2\" target=\"_blank\">返回文档中第一个表单的名字</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_doc_images\" target=\"_blank\">返回文档中的图像数</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_doc_images2\" target=\"_blank\">返回文档中第一个图像的ID</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_doc_links\" target=\"_blank\">返回文档中的链接数</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_doc_links2\" target=\"_blank\" se_prerender_url=\"complete\">返回文档中的第一个链接的ID</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_doc_cookie\" target=\"_blank\">返回文档中的所有cookies的名称/值对</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_doc_domain\" target=\"_blank\">返回加载的文档的服务器域名</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_doc_lastmodified\" target=\"_blank\">返回文档的最后一次修改时间</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_doc_referrer\" target=\"_blank\">返回加载的当前文档的URL</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_doc_title\" target=\"_blank\">返回文档的标题</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_doc_url\" target=\"_blank\">返回文档的完整的URL</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_doc_open\" target=\"_blank\">打开输出流，向流中输入文本</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_doc_writeln\" target=\"_blank\">write() 和 writeln()的不同</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_doc_getelementbyid\" target=\"_blank\">用指定的ID弹出一个元素的innerHTML</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_doc_getelementsbyname\" target=\"_blank\">用指定的Name弹出元素的数量</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_doc_getelementsbytagname\" target=\"_blank\">用指定的tagname弹出元素的数量</a></li> <br> <li>更多的Document 对象的例子，在我们的<a href=\"/jsref/jsref-tutorial.html\" target=\"_blank\">JavaScript  参考手册。</a></li> </ul> <h2 class=\"tutheader\">Anchor 对象</h2> <ul class=\"dd\"> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_anchor_charset\" target=\"_blank\">返回和设置链接的charset属性</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_anchor_href\" target=\"_blank\">返回和设置链接的href属性</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_anchor_hreflang\" target=\"_blank\">返回和设置链接的hreflang属性</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_anchor_name\" target=\"_blank\">返回一个锚的名字</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_anchor_rel\" target=\"_blank\">返回当前的文件和链接的文档之间的关系</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_anchor_target\" target=\"_blank\">改变链接的target属性</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_anchor_type\" target=\"_blank\">返回一个链接的type属性的值</a></li> <br> <li>更多的Anchor 对象的例子，在我们的<a href=\"/jsref/jsref-tutorial.html\" target=\"_blank\">JavaScript  参考手册。</a></li> </ul> <h2 class=\"tutheader\">Area 对象</h2> <ul class=\"dd\"> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_area_alt\" target=\"_blank\">返回图像映射某个区域的替代文字</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_area_coords\" target=\"_blank\">返回图像映射某个区域的坐标</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_area_hash\" target=\"_blank\">返回一个区域的href属性的锚部分</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_area_host\" target=\"_blank\">返回的主机名：图像映射的某个区域的端口</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_area_hostname\" target=\"_blank\">返回图像映射的某个区域的hostname</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_area_port\" target=\"_blank\">返回图像映射的某个区域的port</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_area_href\" target=\"_blank\">返回图像映射的某个区域的href</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_area_pathname\" target=\"_blank\">返回图像映射的某个区域的pathname</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_area_protocol\" target=\"_blank\">返回图像映射的某个区域的protocol</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_area_search\" target=\"_blank\">返回一个区域的href属性的querystring部分</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_area_shape\" target=\"_blank\">返回图像映射的某个区域的shape</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_area_target\" target=\"_blank\">返回图像映射的某个区域的target的值</a></li> <br> <li>更多的Area 对象的例子，在我们的<a href=\"/jsref/jsref-tutorial.html\" target=\"_blank\">JavaScript 参考手册。</a></li> </ul> <h2 class=\"tutheader\">Base 对象</h2> <ul class=\"dd\"> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_base_href\" target=\"_blank\">返回页面上所有相对URL的基URL</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_base_target\" target=\"_blank\">返回页面上所有相对链接的基链接</a></li> <br> <li>更多的Base 对象对象的例子，在我们的<a href=\"/jsref/jsref-tutorial.html\" target=\"_blank\">JavaScript 参考手册。</a></li> </ul> <h2 class=\"tutheader\">Button 对象</h2> <ul class=\"dd\"> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_button_disabled\" target=\"_blank\">当点击完button不可用</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_button_name\" target=\"_blank\">返回一个button的name</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_button_type\" target=\"_blank\">返回一个button的type</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_button_value\" target=\"_blank\">返回一个button的value</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_button_form\" target=\"_blank\">返回一个button所属表的ID</a></li> <br> <li>更多Button 对象实例在我们的<a href=\"/jsref/jsref-tutorial.html\" target=\"_blank\"><strong>JavaScript 参考手册。</strong></a></li> </ul> <h2 class=\"tutheader\">Form 对象</h2> <ul class=\"dd\"> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_form_elements\" target=\"_blank\">返回一个表单中所有元素的value</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_form_acceptcharset\" target=\"_blank\">返回一个表单acceptCharset属性的值</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_form_action\" target=\"_blank\">返回一个表单action属性的值</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_form_enctype\" target=\"_blank\">返回表单中的enctype属性的值</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_form_length\" target=\"_blank\">返回一个表单中元素的数量</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_form_method\" target=\"_blank\">返回发送表单数据的方法</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_form_name\" target=\"_blank\">返回一个表单的name</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_form_target\" target=\"_blank\">返回一个表单target属性的值</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_form_reset\" target=\"_blank\">重置表单</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_form_submit\" target=\"_blank\">提交表单</a></li> <br> <li>更多Button 对象实例在我们的<a href=\"/jsref/jsref-tutorial.html\" target=\"_blank\"><strong>JavaScript 参考手册。</strong></a></li> </ul> <h2 class=\"tutheader\">Frame/IFrame 对象</h2> <ul class=\"dd\"> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_iframe_align\" target=\"_blank\">对iframe排版</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_iframe_contentdocument\" target=\"_blank\">改变一个包含在iframe中的文档的背景颜色</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_iframe_frameborder\" target=\"_blank\">返回一个iframe中的frameborder属性的值</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_iframe_frameborder2\" target=\"_blank\">删除iframe的frameborder</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_iframe_height\" target=\"_blank\">改变iframe的高度和宽度</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_iframe_longdesc\" target=\"_blank\">返回一个iframe中的longdesc属性的值</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_iframe_marginheight\" target=\"_blank\">返回一个iframe中的marginheight属性的值</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_iframe_marginwidth\" target=\"_blank\">返回一个iframe中的marginwidth属性的值</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_iframe_name\" target=\"_blank\">返回一个iframe中的name属性的值</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_iframe_scrolling\" target=\"_blank\">返回和设置一个iframe中的scrolling属性的值</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_iframe_src\" target=\"_blank\">改变一个iframe的src</a></li> <br> <li>更多Frame/IFrame 对象实例在我们的<a href=\"/jsref/jsref-tutorial.html\" target=\"_blank\"><strong>JavaScript 参考手册。</strong></a></li> </ul> <h2 class=\"tutheader\">Image 对象</h2> <ul class=\"dd\"> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_img_align\" target=\"_blank\">对image排版</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_img_alt\" target=\"_blank\">返回image的替代文本</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_img_border\" target=\"_blank\">给image加上border</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_img_height\" target=\"_blank\">改变image的高度和宽度</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_img_hspace\" target=\"_blank\">设置image的hspace和vspace属性</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_img_longdesc\" target=\"_blank\">返回image的longdesc属性的值</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_img_lowsrc\" target=\"_blank\">创建一个链接指向一个低分辨率的image</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_img_name\" target=\"_blank\">返回image的name</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_img_src\" target=\"_blank\">改变image的src</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_img_usemap\" target=\"_blank\">返回一个客户端图像映射的usemap的值</a></li> <br> <li>更多Image 对象实例在我们的<a href=\"/jsref/jsref-tutorial.html\" target=\"_blank\"><strong>JavaScript 参考手册。</strong></a></li> </ul> <h2 class=\"tutheader\">Event 对象</h2> <ul class=\"dd\"> <li><a showtry=\"1\" href=\"/tryrun/showhtml/try_dom_event_keycode\" target=\"_blank\">被按下的键盘键的keycode？</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/try_dom_event_clientxy\" target=\"_blank\">鼠标的坐标？</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/try_dom_event_screenxy\" target=\"_blank\">鼠标相对于屏幕的坐标？</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/try_dom_event_shiftkey\" target=\"_blank\">shift键被按下了吗？</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/try_dom_event_type\" target=\"_blank\">哪个事件发生了？</a></li> </ul> <h2 class=\"tutheader\">Option and Select 对象</h2> <ul class=\"dd\"> <li><a showtry=\"1\" href=\"/tryrun/showhtml/try_dom_select_disabled\" target=\"_blank\">禁用和启用下拉列表</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/try_dom_select_form\" target=\"_blank\">获得有下拉列表的表单的ID</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/try_dom_select_length\" target=\"_blank\">获得下拉列表的选项数量</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/try_dom_select_size\" target=\"_blank\">将下拉列表变成多行列表</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/try_dom_select_multiple\" target=\"_blank\">在下拉列表中选择多个选项</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/try_dom_select_options\" target=\"_blank\">弹出下拉列表中被选中的选项</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/try_dom_option_index\" target=\"_blank\">弹出下拉列表中被选中的选项的索引</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/try_dom_option_settext\" target=\"_blank\">改变下拉列表中被选中的选项的文本</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/try_dom_select_remove\" target=\"_blank\">删除下拉列表中的选项</a></li> </ul> <h2 class=\"tutheader\">Table, TableHeader, TableRow, TableData 对象</h2> <ul class=\"dd\"> <li><a showtry=\"1\" href=\"/tryrun/showhtml/try_dom_table_border\" target=\"_blank\">改变表格边框的宽度</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/try_dom_table_paddspac\" target=\"_blank\">改变表格的cellpadding和cellspacing</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/try_dom_table_frame\" target=\"_blank\">指定表格的frame</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/try_dom_table_rules\" target=\"_blank\">为表格指定规则</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/try_dom_table_rows\" target=\"_blank\">一个行的innerHTML</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/try_dom_table_cells\" target=\"_blank\">一个单元格的innerHTML</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/try_dom_table_createcaption\" target=\"_blank\">为表格创建一个标题</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/try_dom_table_deleterow\" target=\"_blank\">删除表格中的行</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/try_dom_table_insertrow\" target=\"_blank\">添加表格中的行</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/try_dom_tablerow_insertcell\" target=\"_blank\">添加表格行中的单元格</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/try_dom_tablerow_align\" target=\"_blank\">单元格内容水平对齐</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/try_dom_tablerow_valign\" target=\"_blank\">单元格内容垂直对齐</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/try_dom_tablecell_align\" target=\"_blank\">对单个单元格的内容水平对齐</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/try_dom_tablecell_valign\" target=\"_blank\">对单个单元格的内容垂直对齐</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/try_dom_tablerow_cells\" target=\"_blank\">改变单元格的内容</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/try_dom_tablecell_colspan\" target=\"_blank\">改变行的内容</a></li> </ul></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 3,
      "parent_sort_index": 7,
      "chapter_level_one_id": "aca5a92aacdc6eb0e95d05af4249547f",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JS 实例",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "ba5f58917b3b49b30edad0a0c1320a18",
      "chapter_level_two_parent_id": "aca5a92aacdc6eb0e95d05af4249547f",
      "chapter_level_two_name": "JavaScript 浏览器对象实例",
      "chapter_level_two_url": "/javascript/js-ex-browser.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"> <h2>JavaScript <span class=\"color_h1\">Browser 对象</span> 实例</h2> <hr> <p class=\"intro\">使用JavaScript来访问和控制浏览器对象实例。</p> <h2 class=\"tutheader\">Window 对象</h2> <ul class=\"dd\"> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_alert\" target=\"_blank\">弹出一个警告框</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_alert2\" target=\"_blank\">弹出一个带折行的警告框</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_confirm\" target=\"_blank\">弹出一个确认框，并提醒访客点击的内容</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_prompt\" target=\"_blank\">弹出一个提示框</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_openwindow\" target=\"_blank\">点击一个按钮时，打开一个新窗口</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_openallwindow\" target=\"_blank\">打开一个新窗口，并控制其外观</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_multiwindows\" target=\"_blank\">打开多个新窗口</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_multiwindows\" target=\"_blank\">确保新的窗口没有获得焦点</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/try_win_focus\" target=\"_blank\">确保新的窗口获得焦点</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/try_win_close\" target=\"_blank\">关闭新窗口</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/try_win_closed\" target=\"_blank\">检查新的窗口是否已关闭</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/try_win_name\" target=\"_blank\">返回新窗口的名字</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/try_win_opener\" target=\"_blank\">传输一些文本到源（父）窗口</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/try_win_moveby\" target=\"_blank\">相对于当前位置移动新窗口</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/try_win_moveto\" target=\"_blank\">移动新窗口到指定位置</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_print\" target=\"_blank\">打印当前页面</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/try_dom_window_resizeby\" target=\"_blank\">用像素指定窗口大小</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/try_dom_window_resizeto\" target=\"_blank\">指定窗口大小</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/try_dom_window_scrollby\" target=\"_blank\">由指定的像素数滚动内容</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/try_dom_window_scrollto\" target=\"_blank\">滚动到指定内容处</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_timing2\" target=\"_blank\">一个简单的时钟</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_timing_stop\" target=\"_blank\">用setTimeout() 和 clearTimeout()设置和停止定时器</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_setinterval\" target=\"_blank\">用setInterval() 和 clearInterval()设置和停止定时器</a></li> <br> <li>更多的Window 对象的例子，在我们的<a href=\"/jsref/jsref-tutorial.html\" target=\"_blank\">JavaScript  参考手册。</a></li> </ul> <h2 class=\"tutheader\">Navigator 对象</h2> <ul class=\"dd\"> <li><a showtry=\"1\" href=\"/tryrun/showhtml/try_nav_all\" target=\"_blank\">访问者的浏览器的详细</a></li> <br> <li>更多的Navigator 对象的例子，在我们的<a href=\"/jsref/jsref-tutorial.html\" target=\"_blank\">JavaScript  参考手册。</a></li> </ul> <h2 class=\"tutheader\">Screen 对象</h2> <ul class=\"dd\"> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_screen_all\" target=\"_blank\">访问者的屏幕的详细</a></li> <br> <li>更多的Screen 对象的例子，在我们的<a href=\"/jsref/jsref-tutorial.html\" target=\"_blank\">JavaScript 参考手册。</a></li> </ul> <h2 class=\"tutheader\">History 对象</h2> <ul class=\"dd\"> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_his_length\" target=\"_blank\">返回一个url的历史清单</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_his_back\" target=\"_blank\">创建一个后退按钮</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_his_forward\" target=\"_blank\">创建一个前进按钮</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_his_go\" target=\"_blank\">从url的历史清单转到指定的url</a></li> <br> <li>更多的History 对象对象的例子，在我们的<a href=\"/jsref/jsref-tutorial.html\" target=\"_blank\">JavaScript 参考手册。</a></li> </ul> <h2 class=\"tutheader\">Location 对象</h2> <ul class=\"dd\"> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_loc_host\" target=\"_blank\">返回主机名和当前url的端口号</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_loc_href\" target=\"_blank\">返回当前页面的整个URL</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_loc_pathname\" target=\"_blank\">返回当前url的路径名</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_loc_protocol\" target=\"_blank\">返回当前URL的协议部分</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_loc_assign\" target=\"_blank\">加载个新文档</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_loc_reload\" target=\"_blank\">重新载入当前文档</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_loc_replace\" target=\"_blank\">替代当前文档</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_breakout\" target=\"_blank\">跳出框架</a></li> <br> <li>更多Location 对象实例在我们的<a href=\"/jsref/jsref-tutorial.html\" target=\"_blank\"><b>JavaScript 参考手册。</b></a></li> </ul> </div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 2,
      "parent_sort_index": 7,
      "chapter_level_one_id": "aca5a92aacdc6eb0e95d05af4249547f",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JS 实例",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "24561be4d1a832b3afa60956f88de3ee",
      "chapter_level_two_parent_id": "aca5a92aacdc6eb0e95d05af4249547f",
      "chapter_level_two_name": "JavaScript 对象实例",
      "chapter_level_two_url": "/javascript/js-ex-objects.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">对象</span> 实例</h2> <hr> <p class=\"intro\">使用内置的JavaScript对象实例。</p> <h2 class=\"tutheader\">String（字符串）对象</h2> <ul class=\"dd\"> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_length_string\" target=\"_blank\">返回字符串的长度</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_str_style\" target=\"_blank\">为字符串添加样式</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_indexof\" target=\"_blank\">返回字符串中指定文本首次出现的位置 - indexOf()方法</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_match\" target=\"_blank\">查找字符串中特定的字符，若找到，则返回该字符 - match() 方法</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_replace\" target=\"_blank\">替换字符串中的字符 - replace()</a></li> <br> <li>更多的字符串对象的例子，在我们的<a href=\"/jsref/jsref-obj-string.html\" target=\"_blank\">JavaScript String 对象参考手册。</a></li> </ul> <h2 class=\"tutheader\">Date（日期）对象</h2> <ul class=\"dd\"> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_date\" target=\"_blank\">使用 Date() 方法来返回今天的日期和时间</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_gettime\" target=\"_blank\">使用 getTime() 计算从1970年到今天有多少毫秒</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_setfullyear2\" target=\"_blank\">使用 setFullYear() 设置具体的日期</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_toutcstring\" target=\"_blank\">使用 toUTCString() 把当日的日期（根据 UTC）转换为字符串</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_date_weekday\" target=\"_blank\">使用 getDay() 来显示星期，而不仅仅是数字</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_timing_clock\" target=\"_blank\">显示一个钟表</a></li> <br> <li>更多的Date（日期）对象的例子，在我们的<a href=\"/jsref/jsref-obj-date.html\" target=\"_blank\">JavaScript Date 对象参考手册。</a></li> </ul> <h2 class=\"tutheader\">Array（数组）对象</h2> <ul class=\"dd\"> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_array\" target=\"_blank\">创建数组</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_concat\" target=\"_blank\">合并两个数组 - concat()</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_concat2\" target=\"_blank\">合并三个数组 - concat()</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_join\" target=\"_blank\">用数组的元素组成字符串 - join()</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_pop\" target=\"_blank\">删除数组的最后一个元素 - pop()</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_push\" target=\"_blank\">数组的末尾添加新的元素 - push()</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_reverse\" target=\"_blank\">反转一个数组中的元素的顺序 - reverse()</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_shift\" target=\"_blank\">删除数组的第一个元素 - shift()</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_slice_array\" target=\"_blank\">从一个数组中的选择元素 - slice()</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_sort\" target=\"_blank\">数组排序（按字母顺序升序）- sort()</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_sort2\" target=\"_blank\">数字排序（按数字顺序升序）- sort()</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_sort3\" target=\"_blank\">数字排序（按数字顺序降序）- sort()</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_splice\" target=\"_blank\">在数组的第2位置添加一个元素 - splice()</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_tostring_array\" target=\"_blank\">转换数组到字符串 -toString()</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_unshift\" target=\"_blank\">在数组的开头添加新元素 - unshift()</a></li> <br> <li>更多的Array（数组）对象的例子，在我们的<a href=\"/jsref/jsref-obj-array.html\" target=\"_blank\">JavaScript Array 对象的参考手册。</a></li> </ul> <h2 class=\"tutheader\">Boolean（布尔）对象</h2> <ul class=\"dd\"> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_boolean\" target=\"_blank\">检查逻辑值</a></li> <br> <li>更多的Boolean（布尔）对象对象的例子，在我们的<a href=\"/jsref/jsref-obj-boolean.html\" target=\"_blank\">JavaScript Boolean 对象的参考手册。</a></li> </ul> <h2 class=\"tutheader\">Math（算数）对象</h2> <ul class=\"dd\"> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_round\" target=\"_blank\">使用 round() 对数字进行舍入</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_random\" target=\"_blank\">使用 random() 来返回 0 到 1 之间的随机数</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_max\" target=\"_blank\">使用 max() 来返回两个给定的数中的较大的数</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_min\" target=\"_blank\">使用 min() 来返回两个给定的数中的较小的数</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_celsius\" target=\"_blank\">摄氏度与华氏转换</a></li> </ul> <h2 class=\"tutheader\">一般</h2> <ul class=\"dd\"> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_object_for_in\" target=\"_blank\">通过对象元素使用for...in语句</a></li> <br> <li>更多Math 对象实例在我们的<a href=\"/jsref/jsref-obj-math.html\" target=\"_blank\"><b>JavaScript Math 对象的参考手册。</b></a></li> </ul></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 1,
      "parent_sort_index": 7,
      "chapter_level_one_id": "aca5a92aacdc6eb0e95d05af4249547f",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JS 实例",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "81dd5979fe6d7f96a7a059a773425d8a",
      "chapter_level_two_parent_id": "aca5a92aacdc6eb0e95d05af4249547f",
      "chapter_level_two_name": "JavaScript 实例",
      "chapter_level_two_url": "/javascript/js-examples.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>基础 JavaScript 实例</h2> <ul class=\"dd\"> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_write\" target=\"_blank\">用JavaScript输出文本</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_dom\" target=\"_blank\">用JavaScript改变HTML元素</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_externalexample\" target=\"_blank\">一个外部JavaScript</a></li> <br> <li><a href=\"js-howto.html\"><strong>实例解析</strong></a></li> </ul> <h2>JavaScript 语句、注释和代码块</h2> <ul class=\"dd\"> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_statements\" target=\"_blank\">JavaScript 语句</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_blocks\" target=\"_blank\">JavaScript 代码块</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_comments1\" target=\"_blank\">JavaScript 单行注释</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_comments2\" target=\"_blank\">JavaScript 多行注释</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_comments3\" target=\"_blank\">使用单行注释来防止执行</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_comments4\" target=\"_blank\">使用多行注释来防止执行</a></li> <br> <li><a href=\"js-statements.html\"><strong>实例解析</strong></a></li> </ul> <h2>JavaScript 变量</h2> <ul class=\"dd\"> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_variable\" target=\"_blank\">声明一个变量，为它赋值，然后显示出来</a></li> <br> <li><a href=\"//www.w3cschool.cn/javascript/js-variables.html\"><strong>实例解析</strong></a></li> </ul> <h2>JavaScript 条件语句 If ... Else</h2> <ul class=\"dd\"> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_ifthen\" target=\"_blank\">If 语句</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_ifthenelse\" target=\"_blank\">If...else 语句</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_randomlink\" target=\"_blank\">随机链接</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_switch\" target=\"_blank\">Switch 语句</a></li> <br> <li><a href=\"js-if-else.html\"><strong>实例解析</strong></a></li> </ul> <h2>JavaScript 消息框</h2> <ul class=\"dd\"> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_alert\" target=\"_blank\">Alert(警告)框</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_alert2\" target=\"_blank\">带有换行的警告框</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_confirm\" target=\"_blank\">确认框</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_prompt\" target=\"_blank\">提示框</a></li> <br> <li><a href=\"js-popup.html\"><strong>实例解析</strong></a></li> </ul> <h2>JavaScript 函数</h2> <ul class=\"dd\"> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_function1\" target=\"_blank\">函数</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_function2\" target=\"_blank\">带有参数的函数</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_functionarg2\" target=\"_blank\">带有参数的函数 2</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_function_return2\" target=\"_blank\">返回值的函数</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_function_return\" target=\"_blank\">带有参数并返回值的函数</a></li> <br> <li><a href=\"//www.w3cschool.cn/javascript/js-function-closures.html\"><strong>实例解析</strong></a></li> </ul> <h2>JavaScript 循环</h2> <ul class=\"dd\"> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_fornext\" target=\"_blank\">For 循环</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_fornext_header\" target=\"_blank\">循环输出 HTML 标题</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_while\" target=\"_blank\">While 循环</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_dowhile\" target=\"_blank\">Do while 循环</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_break\" target=\"_blank\">break 语句</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_continue\" target=\"_blank\">continue 语句</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_object_for_in\" target=\"_blank\">使用 For...In 声明来遍历数组内的元素</a></li> <br> <li><a href=\"js-loop-for.html\"><strong>实例解析</strong></a></li> </ul> <h2>JavaScript 事件</h2> <ul class=\"dd\"> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_events\" target=\"_blank\">onclick事件</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_imagemap\" target=\"_blank\">onmouseover 事件</a></li> <br> <li><a href=\"js-htmldom-events.html\"><strong>实例解析</strong></a></li> </ul> <h2>JavaScript 错误处理</h2> <ul class=\"dd\"> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_try_catch\" target=\"_blank\">try...catch 语句</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_try_catch2\" target=\"_blank\">带有确认框的 try...catch 语句</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_onerror\" target=\"_blank\">onerror 事件</a></li> <br> <li><a href=\"js-errors.html\"><strong>实例解析</strong></a></li> </ul> <h2>高级 JavaScript 实例</h2> <ul class=\"dd\"> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_cookie_username\" target=\"_blank\">创建一个欢迎 cookie</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_timing1\" target=\"_blank\">简单的计时</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_timing2\" target=\"_blank\">另一个简单的计时</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_timing_infinite\" target=\"_blank\">在一个无穷循环中的计时事件</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_timing_stop\" target=\"_blank\">带有停止按钮的无穷循环中的计时事件</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_timing_clock\" target=\"_blank\">使用计时事件制作的钟表</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_create_object1\" target=\"_blank\">创建对象的实例</a></li> <li><a showtry=\"1\" href=\"/tryrun/showhtml/tryjs_create_object2\" target=\"_blank\">创建用于对象的模板</a></li> </ul></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 3,
      "parent_sort_index": 6,
      "chapter_level_one_id": "624ffbfbef045a837570fbf86ef8c69f",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JS 库",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "a48df6bb445c0ebfee04b7f3e0c99d14",
      "chapter_level_two_parent_id": "624ffbfbef045a837570fbf86ef8c69f",
      "chapter_level_two_name": "JavaScript 测试 Prototype",
      "chapter_level_two_url": "/javascript/js-lib-prototype.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">- 测试 Prototype</span> </h2> \n<hr>\n<p class=\"intro\">测试 JavaScript 框架库 - Prototype</p>\n<hr>\n <h2>引用 Prototype</h2> \n<p>如需测试 JavaScript 库，您需要在网页中引用它。</p>\n<p>为了引用某个库，请使用 <a href=\"https://www.w3cschool.cn/htmltags/tag-script.html\" target=\"_blank\">&lt;script&gt; 标签</a>，其 src 属性设置为库的 URL：</p>\n<div class=\"example\">\n     <h2 class=\"example\">引用 Prototype</h2> \n    <div class=\"example_code notranslate\">&lt;!DOCTYPE html&gt;\n        <br>&lt;html&gt;\n        <br>&lt;head&gt;\n        <br>&lt;script\n        <br>src=\"http://apps.bdimg.com/libs/prototype/1.7.1.0/prototype.js\" rel=\"external nofollow\"  rel=\"external nofollow\"  rel=\"external nofollow\" &gt;\n        <br>&lt;/script&gt;\n        <br>&lt;/head&gt;\n        <br>&lt;body&gt;\n        <br>&lt;/body&gt;\n        <br>&lt;/html&gt;</div>\n</div>\n<br>\n<hr>\n <h2> Prototype 描述</h2> \n<p>Prototype 提供的函数可使 HTML DOM 编程更容易。</p>\n<p>与 jQuery 类似，Prototype 也有自己的 $() 函数。</p>\n<p>$() 函数接受 HTML DOM 元素的 id 值（或 DOM 元素），并会向 DOM 对象添加新的功能。</p>\n<p>与 jQuery 不同，Prototype 没有用以取代 window.onload() 的 ready() 方法。相反，Prototype 会向浏览器及 HTML DOM 添加扩展。</p>\n<p>在 JavaScript 中，您可以分配一个函数以处理窗口加载事件：</p>\n<div class=\"example\">\n     <h2 class=\"example\">JavaScript 方式：</h2> \n    <div class=\"example_code notranslate\">function myFunction()\n        <br>{\n        <br>var obj=document.getElementById(\"h01\");\n        <br>obj.innerHTML=\"Hello Prototype\";\n        <br>}\n        <br>onload=myFunction;</div>\n</div>\n<p>等价的 Prototype 是不同的：</p>\n<div class=\"example\">\n     <h2 class=\"example\">Prototype 方式：</h2> \n    <div class=\"example_code notranslate\">function myFunction()\n        <br>{\n        <br>$(\"h01\").insert(\"Hello Prototype!\");\n        <br>}\n        <br>Event.observe(window,\"load\",myFunction);</div>\n</div>\n<p>Event.observe() 接受三个参数：</p>\n<ul>\n    <li>您希望处理的 HTML DOM 或 BOM（浏览器对象模型）对象</li>\n    <li>您希望处理的事件</li>\n    <li>您希望调用的函数</li>\n</ul>\n<hr>\n <h2>测试 Prototype</h2> \n<p>请试一下下面这个例子：</p>\n<div class=\"example\">\n     <h2 class=\"example\">Example</h2> \n    <div class=\"example_code notranslate\">&lt;!DOCTYPE html&gt;\n        <br>&lt;html&gt;\n        <br>&lt;script\n        <br>src=\"http://apps.bdimg.com/libs/prototype/1.7.1.0/prototype.js\" rel=\"external nofollow\"  rel=\"external nofollow\"  rel=\"external nofollow\" &gt;\n        <br>&lt;/script&gt;\n        <br>&lt;script&gt;\n        <br>function myFunction()\n        <br>{\n        <br>$(\"h01\").insert(\"Hello Prototype!\");\n        <br>}\n        <br>Event.observe(window,\"load\",myFunction);\n        <br>&lt;/script&gt;\n        <br>&lt;/head&gt;\n        <br>&lt;body&gt;\n        <br>&lt;h1 id=\"h01\"&gt;&lt;/h1&gt;\n        <br>&lt;/body&gt;\n        <br>&lt;/html&gt;</div>\n    <br> <a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_lib_prototype\">尝试一下 »</a> \n</div>\n<p>请再试一下这个例子：</p>\n<div class=\"example\">\n     <h2 class=\"example\">Example</h2> \n    <div class=\"example_code notranslate\">&lt;!DOCTYPE html&gt;\n        <br>&lt;html&gt;\n        <br>&lt;script\n        <br>src=\"http://apps.bdimg.com/libs/prototype/1.7.1.0/prototype.js\" rel=\"external nofollow\"  rel=\"external nofollow\"  rel=\"external nofollow\" &gt;\n        <br>&lt;/script&gt;\n        <br>&lt;script&gt;\n        <br>function myFunction()\n        <br>{\n        <br>$(\"h01\").writeAttribute(\"style\",\"color:red\").insert(\"Hello Prototype!\");\n        <br>}\n        <br>Event.observe(window,\"load\",myFunction);\n        <br>&lt;/script&gt;\n        <br>&lt;/head&gt;\n        <br>&lt;body&gt;\n        <br>&lt;h1 id=\"h01\"&gt;&lt;/h1&gt;\n        <br>&lt;/body&gt;\n        <br>&lt;/html&gt;</div>\n    <br> <a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_lib_prototype2\">测试一下 »</a> \n</div>\n<p>正如您在上面的例子中看到的，与 jQuery 相同，Prototype 允许链式语法。</p>\n<p>链接（Chaining）是一种在同一对象上执行多个任务的便捷方法。</p><hr>\n <h2>相关文章</h2>\n<p><a href=\"https://www.w3cschool.cn/javascript_guide/javascript_guide-45u22696.html\" target=\"_blank\">JavaScript prototype 对象</a></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 2,
      "parent_sort_index": 6,
      "chapter_level_one_id": "624ffbfbef045a837570fbf86ef8c69f",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JS 库",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "1b9c7e5442398d8fc64897291ca34dea",
      "chapter_level_two_parent_id": "624ffbfbef045a837570fbf86ef8c69f",
      "chapter_level_two_name": "JavaScript 测试 jQuery",
      "chapter_level_two_url": "/javascript/js-lib-jquery.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">- 测试 jQuery</span> </h2> <hr> <p class=\"intro\">测试 JavaScript 框架库 - jQuery</p> <hr> <h2>引用 jQuery</h2> <p>如需测试 JavaScript 库，您需要在网页中引用它。</p> <p>为了引用某个库，请使用 <a href=\"https://www.w3cschool.cn/htmltags/tag-script.html\" target=\"_blank\">&lt;script&gt; 标签</a>，其 src 属性设置为库的 URL：</p> <div class=\"example\"> <h2 class=\"example\">引用 jQuery</h2> <div class=\"example_code notranslate\"> &lt;!DOCTYPE html&gt;<br> &lt;html&gt;<br> &lt;head&gt;<br> &lt;script src=\"http://apps.bdimg.com/libs/jquery/2.1.1/jquery.min.js\" rel=\"external nofollow\"  rel=\"external nofollow\"  rel=\"external nofollow\" &gt;<br> &lt;/script&gt;<br> &lt;/head&gt;<br> &lt;body&gt;<br> &lt;/body&gt;<br> &lt;/html&gt;</div> </div> <br><hr> <h2> jQuery 描述</h2> <p>主要的 jQuery 函数是 $() 函数（jQuery 函数）。如果您向该函数传递 DOM 对象，它会返回 jQuery 对象，带有向其添加的 jQuery 功能。</p> <p>jQuery 允许您通过 <a href=\"https://www.w3cschool.cn/css3/css3-selector.html\" target=\"_blank\">CSS 选择器</a>来选取元素。</p> <p>在 JavaScript 中，您可以分配一个函数以处理窗口加载事件：</p> <div class=\"example\"> <h2 class=\"example\">JavaScript 方式：</h2> <div class=\"example_code notranslate\"> function myFunction()<br> {<br> var obj=document.getElementById(\"h01\");<br> obj.innerHTML=\"Hello jQuery\";<br> }<br> onload=myFunction;</div> </div> <p>等价的 jQuery 是不同的：</p> <div class=\"example\"> <h2 class=\"example\">jQuery 方式：</h2> <div class=\"example_code notranslate\"> function myFunction()<br> {<br> $(\"#h01\").html(\"Hello jQuery\");<br> }<br> $(document).ready(myFunction);</div> </div> <p>上面代码的最后一行，HTML DOM 文档对象被传递到 jQuery ：$(document)。</p> <p>当您向 jQuery 传递 DOM 对象时，jQuery 会返回以 HTML DOM 对象包装的 jQuery 对象。</p> <p>jQuery 函数会返回新的 jQuery 对象，其中的 ready() 是一个方法。</p> <p>由于在 JavaScript 中函数就是变量，因此可以把 myFunction 作为变量传递给 jQuery 的 ready 方法。</p> <table class=\"lamp \"><tbody><tr> <th width=\"34\"><img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" width=\"32\" height=\"32\" alt=\"lamp\"></th> <td>jQuery 返回 jQuery 对象，与已传递的 DOM 对象不同。<br>jQuery 对象拥有的属性和方法，与 DOM 对象的不同。<br>您不能在 jQuery 对象上使用 HTML DOM 的属性和方法。</td> </tr></tbody></table> <br><hr> <h2> 测试 jQuery</h2> <p> 请试一下下面这个例子：</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code notranslate\"> &lt;!DOCTYPE html&gt;<br> &lt;html&gt;<br> &lt;head&gt;<br> &lt;script src=\"http://apps.bdimg.com/libs/jquery/2.1.1/jquery.min.js\" rel=\"external nofollow\"  rel=\"external nofollow\"  rel=\"external nofollow\" &gt;<br> &lt;/script&gt;<br> &lt;script&gt;<br> function myFunction()<br> {<br> $(\"#h01\").html(\"Hello jQuery\")<br> }<br> $(document).ready(myFunction);<br> &lt;/script&gt;<br> &lt;/head&gt;<br> &lt;body&gt;<br> &lt;h1 id=\"h01\"&gt;&lt;/h1&gt;<br> &lt;/body&gt;<br> &lt;/html&gt; </div> <br><a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_lib_jquery\">尝试一下 »</a> </div> <p> 请再试一下这个例子：</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code notranslate\"> &lt;!DOCTYPE html&gt;<br> &lt;html&gt;<br>&lt;head&gt;<br> &lt;script src=\"http://apps.bdimg.com/libs/jquery/2.1.1/jquery.min.js\" rel=\"external nofollow\"  rel=\"external nofollow\"  rel=\"external nofollow\" &gt;<br> &lt;/script&gt;<br> &lt;script&gt;<br> function myFunction()<br> {<br> $(\"#h01\").attr(\"style\",\"color:red\").html(\"Hello jQuery\")<br> }<br> $(document).ready(myFunction);<br> &lt;/script&gt;<br> &lt;/head&gt;<br> &lt;body&gt;<br> &lt;h1 id=\"h01\"&gt;&lt;/h1&gt;<br> &lt;/body&gt;<br> &lt;/html&gt; </div> <br><a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_lib_jquery2\">尝试一下 »</a> </div> <p>正如您在上面的例子中看到的，jQuery 允许链接（链式语法）。</p> <p>链接（Chaining）是一种在同一对象上执行多个任务的便捷方法。</p> <p>需要学习更多内容吗？W3Cschool 为您提供了非常棒的 <a href=\"/jquery/\" title=\"jQuery 教程\">jQuery 教程</a>。</p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 1,
      "parent_sort_index": 6,
      "chapter_level_one_id": "624ffbfbef045a837570fbf86ef8c69f",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JS 库",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "c17dbee1f098da854b8135f2fb2beace",
      "chapter_level_two_parent_id": "624ffbfbef045a837570fbf86ef8c69f",
      "chapter_level_two_name": "JavaScript 库",
      "chapter_level_two_url": "/javascript/js-libraries.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">库</span> </h2> \n<hr>\n<p class=\"intro\">JavaScript 库 - jQuery、Prototype、MooTools。</p>\n<hr>\n <h2>JavaScript 框架（库）</h2> \n<p>JavaScript 高级程序设计（特别是对浏览器差异的复杂处理），通常很困难也很耗时。</p>\n<p>为了应对这些调整，许多的 <strong>JavaScript (helper)</strong> 库应运而生。</p>\n<p>这些 JavaScript 库常被称为 <strong>JavaScript 框架</strong>。</p>\n<p>在本教程中，我们将了解到一些广受欢迎的 JavaScript 框架：</p>\n<ul>\n    <li>jQuery</li>\n    <li>Prototype</li>\n    <li>MooTools</li>\n</ul>\n<p>所有这些框架都提供针对常见 JavaScript 任务的函数，包括动画、DOM 操作以及 Ajax 处理。</p>\n<p>在本教程中，您将学习到如何开始使用它们，来使得 JavaScript 编程更容易、更安全且更有乐趣。</p>\n<hr>\n <h2>jQuery</h2> \n<p>jQuery 是目前最受欢迎的 JavaScript 框架。</p>\n<p>它使用 CSS 选择器来访问和操作网页上的 HTML 元素（DOM 对象）。</p>\n<p>jQuery 同时提供 companion UI（用户界面）和插件。</p>\n<p>许多大公司在网站上使用 jQuery：</p>\n<ul>\n    <li>Google</li>\n    <li>Microsoft</li>\n    <li>IBM</li>\n    <li>Netflix</li>\n</ul>\n<p>如需更深入地学习 jQuery，请访问我们的 <a href=\"/jquery/jquery-tutorial.html\" target=\"_blank\">jQuery 教程</a>。</p>\n<hr>\n <h2>Prototype</h2> \n<p><strong>Prototype</strong> 是一种库，提供用于执行常见 web 任务的简单 API。</p>\n<p><strong>API</strong> 是应用程序编程接口（Application Programming Interface）的缩写。它是包含属性和方法的库，用于操作 HTML DOM。</p>\n<p>Prototype 通过提供类和继承，实现了对 JavaScript 的增强。</p><p><b>提示：</b>Prototype 框架最大的部分就是对DOM的扩展。通过Prototype框架里的$()函数能够返回一个网页DOM元素，框架给这个元素添加了很多方便的方法。</p>\n<hr>\n <h2>MooTools</h2> \n<p><strong>MooTools</strong> 也是一个框架，提供了可使常见的 JavaScript 编程更为简单的 API。</p>\n<p>MooTools 也含有一些轻量级的效果和动画函数。</p><p><b>提示：</b>虽然Mootools跟Prototype几乎拥有一样的语法，但是它提供了比Prototype多的功能，而且更强大，拥有实用而清晰的文档和示例帮助你轻松入门。<br></p>\n<hr>\n <h2>其他框架</h2> \n<p>下面是其他一些在上面未涉及的框架：</p>\n<p><strong>YUI</strong> - Yahoo! User Interface Framework，涵盖大量函数的大型库，从简单的 JavaScript 功能到完整的 internet widget。</p>\n<p><strong>Ext JS</strong> - 可定制的 widget，用于构建富因特网应用程序（rich Internet applications）。</p>\n<p><strong>Dojo</strong> - 用于 DOM 操作、事件、widget 等的工具包。</p>\n<p><strong>script.aculo.us</strong> - 开源的 JavaScript 框架，针对可视效果和界面行为。</p>\n<p><strong>UIZE</strong> - Widget、AJAX、DOM、模板等等。</p>\n<hr>\n <h2>CDN -内容分发网络</h2> \n<p>您总是希望网页可以尽可能地快。您希望页面的容量尽可能地小，同时您希望浏览器尽可能多地进行缓存。</p>\n<p>如果许多不同的网站使用相同的 JavaScript 框架，那么把框架库存放在一个通用的位置供每个网页分享就变得很有意义了。</p>\n<p>CDN (Content Delivery Network) 解决了这个问题。CDN 是包含可分享代码库的服务器网络。</p>\n<p>Google 为一系列 JavaScript 库提供了免费的 CDN，包括：</p>\n<ul>\n    <li>jQuery</li>\n    <li>Prototype</li>\n    <li>MooTools</li>\n    <li>Dojo</li>\n    <li>Yahoo! YUI</li>\n</ul>\n<p>但是由于 Google 在中国经常被GFW（防火长城，英文名称Great Firewall of China，简写为Great Firewall，缩写GFW）屏蔽，造成访问不稳定，所以建议使用百度静态资源公共库:<a href=\"//cdn.code.baidu.com/\" rel=\"external nofollow\" target=\"_blank\">http://cdn.code.baidu.com/</a>。</p>\n<p>如需在您的网页中使用 JavaScript 框架库，只需在 &lt;script&gt; 标签中引用该库即可：</p>\n<div class=\"example\">\n     <h2 class=\"example\">引用 jQuery</h2> \n    <div class=\"example_code notranslate\">&lt;script src=\"http://apps.bdimg.com/libs/jquery/2.1.1/jquery.min.js\" rel=\"external nofollow\" &gt;\n        <br>&lt;/script&gt;</div>\n</div>\n<br>\n<hr>\n <h2>使用框架</h2> \n<p>在您决定为网页使用 JavaScript 框架之前，首先对框架进行测试是明智的。</p>\n<p>JavaScript 框架很容易进行测试。您无需在计算机上安装它们，同时也没有安装程序。</p>\n<p>通常您只需从网页中引用一个库文件。</p>\n<p>在本教程的下一章，我们会为您完整地讲解 jQuery 的测试过程。</p><hr>\n<h2>相关教程</h2>\n<p><a href=\"https://www.w3cschool.cn/htmldom/htmldom-intro.html\" target=\"_blank\">HTML DOM教程</a></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 8,
      "parent_sort_index": 5,
      "chapter_level_one_id": "ffc8ca104c83a7959632aa2bb1f8ebe3",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JS window",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "c78c3f70ae8b198b21eb1a7ed805d1af",
      "chapter_level_two_parent_id": "ffc8ca104c83a7959632aa2bb1f8ebe3",
      "chapter_level_two_name": "JavaScript Cookies",
      "chapter_level_two_url": "/javascript/js-cookies.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">Cookies</span></h2> \n<hr>\n<p class=\"intro\">Cookies 用于存储 web 页面的用户信息。</p>\n<p>由于 JavaScript 是运行在客户端的脚本，所以可以使用JavaScript来设置运行在客户端的Cookies。\n    <br>\n</p>\n<hr>\n <h2>什么是 Cookies？</h2> \n<p>Cookies 是一些数据, 存储于你电脑上的文本文件中。</p>\n<p>当 web 服务器向浏览器发送 web 页面时，在连接关闭后，服务端不会记录用户的信息。</p>\n<p>Cookies 的作用就是用于解决 \"如何记录客户端的用户信息\":</p>\n<ul>\n    <li>当用户访问 web 页面时，他的名字可以记录在 cookie 中。</li>\n    <li>在用户下一次访问该页面时，可以在 cookie 中读取用户访问记录。</li>\n</ul>\n<p>Cookies 以名/值对形式存储，如下所示:<span style='background-color: rgb(239, 239, 239); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'>    </span></p><div class=\"code notranslate\"><div>username=John Doe</div></div>\n<p>当浏览器从服务器上请求 web 页面时， 属于该页面的 cookies 会被添加到该请求中。服务端通过这种方式来获取用户的信息。</p>\n<hr>\n <h2>使用 JavaScript 创建Cookie</h2> \n<p>JavaScript 可以使用 <strong>document.cookie</strong> 属性来创建 、读取、及删除 cookies。</p>\n<p>JavaScript 中，创建 cookie 如下所示：<span style='background-color: rgb(239, 239, 239); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'>    </span></p><div class=\"code notranslate\"><div>document.cookie=\"username=John Doe\";</div></div>\n<p>您还可以为 cookie 添加一个过期时间（以 UTC 或 GMT 时间）。默认情况下，cookie 在浏览器关闭时删除：<span style='background-color: rgb(239, 239, 239); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'>    </span></p><div class=\"code notranslate\"><div>document.cookie=\"username=John Doe; expires=Thu, 18 Dec 2013 12:00:00 GMT\";</div></div>\n<p>您可以使用 path 参数告诉浏览器 cookie 的路径。默认情况下，cookie 属于当前页面。<span style='background-color: rgb(239, 239, 239); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'>    </span></p><div class=\"code notranslate\"><div>document.cookie=\"username=John Doe; expires=Thu, 18 Dec 2013 12:00:00 GMT; path=/\";</div></div>\n<hr>\n <h2>使用 JavaScript 读取 Cookie</h2> \n<p>在 JavaScript 中, 可以使用以下代码来读取 cookies：<span style='background-color: rgb(239, 239, 239); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'>    </span></p><div class=\"code notranslate\"><div>var x = document.cookie;</div></div>\n<br>\n<table class=\"lamp\">\n    <tbody>\n        <tr>\n            <th style=\"width:34px\">\n                <img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" alt=\"Note\" style=\"height:32px;width:32px\">\n            </th>\n            <td>document.cookie 将以字符串的方式返回所有的 cookies，类型格式： cookie1=value; cookie2=value; cookie3=value;</td>\n        </tr>\n    </tbody>\n</table>\n<br>\n<hr>\n <h2>使用 JavaScript 修改 Cookie</h2> \n<p>在 JavaScript 中，修改 cookies 类似于创建 cookies，如下所示：<span style='background-color: rgb(239, 239, 239); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'>   </span></p><div class=\"code notranslate\"><div>document.cookie=\"username=John Smith; expires=Thu, 18 Dec 2013 12:00:00 GMT; path=/\";</div></div>\n<p>旧的 cookie 将被覆盖。</p>\n<hr>\n <h2>使用 JavaScript 删除 Cookie</h2> \n<p>删除 cookie 非常简单。您只需要设置 expires 参数为以前的时间即可，如下所示，设置为 Thu, 01 Jan 1970 00:00:00 GMT:<span style='background-color: rgb(239, 239, 239); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'>    </span></p><div class=\"code notranslate\"><div>document.cookie = \"username=; expires=Thu, 01 Jan 1970 00:00:00 GMT\";</div></div>\n<p>注意，当您删除时不必指定 cookie 的值。</p>\n<hr>\n <h2>Cookie 字符串</h2> \n<p>document.cookie 属性看起来像一个普通的文本字符串，其实它不是。</p>\n<p>即使您在 document.cookie 中写入一个完整的 cookie 字符串, 当您重新读取该 cookie 信息时，cookie 信息是以名/值对的形式展示的。</p>\n<p>如果您设置了新的 cookie，旧的 cookie 不会被覆盖。 新 cookie 将添加到 document.cookie 中，所以如果您重新读取document.cookie，您将获得如下所示的数据：</p>\n<p>cookie1=value; cookie2=value;</p>\n<p>\n    <button type=\"button\" onclick=\"displayCookies();\">显示所有 Cookie</button> \n    <button type=\"button\" onclick=\"document.cookie='firstname=John'\">创建 Cookie 1</button> \n    <button type=\"button\" onclick=\"document.cookie='lastname=Smith'\">创建 Cookie 2</button>\n    <button type=\"button\" onclick=\"document.cookie='firstname=John;expires=Thu, 01 Jan 1970 00:00:00 GMT'\">删除 Cookie 1</button> \n    <button type=\"button\" onclick=\"document.cookie='lastname=Smith;expires=Thu, 01 Jan 1970 00:00:00 GMT'\">删除 Cookie 2</button>\n</p>\n<p>如果您需要查找一个指定 cookie 值，您必须创建一个JavaScript 函数在 cookie 字符串中查找 cookie 值。</p>\n<hr>\n <h2>JavaScript Cookie 实例</h2> \n<p>在以下实例中，我们将创建 cookie 来存储访问者名称。</p>\n<p>首先，访问者访问 web 页面, 他将被要求填写自己的名字。该名字会存储在 cookie 中。</p>\n<p>访问者下一次访问页面时，他会看到一个欢迎的消息。</p>\n<p>在这个实例中我们会创建 3 个 JavaScript 函数:</p>\n<ol>\n    <li>设置 cookie 值的函数</li>\n    <li>获取 cookie 值的函数</li>\n    <li>检测 cookie 值的函数</li>\n</ol>\n<hr>\n <h2>设置 cookie 值的函数</h2> \n<p>首先，我们创建一个函数用于存储访问者的名字：<span style='background-color: rgb(239, 239, 239); color: rgb(64, 64, 64); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'>    </span></p><div class=\"code notranslate\" style=\"color: #404040\"><div>function setCookie(cname,cvalue,exdays)        <br>{        <br>var d = new Date();        <br>d.setTime(d.getTime()+(exdays*24*60*60*1000));        <br>var expires = \"expires=\"+d.toGMTString();        <br>document.cookie = cname + \"=\" + cvalue + \"; \" + expires;        <br>}</div></div>\n<p><strong>函数解析：</strong>\n</p>\n<p>以上的函数参数中，cookie 的名称为 cname，cookie 的值为 cvalue，并设置了 cookie 的过期时间 expires。</p>\n<p>该函数设置了 cookie 名、cookie 值、cookie过期时间。</p>\n<hr>\n <h2>获取 cookie 值的函数</h2> \n<p>然后，我们创建一个函数用户返回指定 cookie 的值：<span style='background-color: rgb(239, 239, 239); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'>    </span></p><div class=\"code notranslate\"><div>function getCookie(cname)        <br>{        <br>var name = cname + \"=\";        <br>var ca = document.cookie.split(';');        <br>for(var i=0; i&lt;ca.length; i++)        <br>  {        <br>  var c = ca[i].trim();        <br>  if (c.indexOf(name)==0) return c.substring(name.length,c.length);        <br>  }        <br>return \"\";        <br>}</div></div>\n<p><strong>函数解析：</strong>\n</p>\n<p>cookie 名的参数为 cname。</p>\n<p>创建一个文本变量用于检索指定 cookie :cname + \"=\"。</p>\n<p>使用分号来分割 document.cookie 字符串，并将分割后的字符串数组赋值给 ca (ca = document.cookie.split(';'))。</p>\n<p>循环 ca 数组 (i=0;i&lt;ca.length;i++)，然后读取数组中的每个值，并去除前后空格 (c=ca[i].trim())。</p>\n<p>如果找到 cookie(c.indexOf(name) == 0)，返回 cookie 的值 (c.substring(name.length,c.length)。</p>\n<p>如果没有找到 cookie, 返回 \"\"。</p>\n<hr>\n <h2>检测 cookie 值的函数</h2> \n<p>最后，我们可以创建一个检测 cookie 是否创建的函数。</p>\n<p>如果设置了 cookie，将显示一个问候信息。</p>\n<p>如果没有设置 cookie，将会显示一个弹窗用于询问访问者的名字，并调用 setCookie 函数将访问者的名字存储 365 天：<span style='background-color: rgb(239, 239, 239); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'>    </span></p><div class=\"code notranslate\"><div>function checkCookie()        <br>{        <br>var username=getCookie(\"username\");        <br>if (username!=\"\")        <br>  {        <br>  alert(\"Welcome again \" + username);        <br>  }        <br>else        <br>  {        <br>  username = prompt(\"Please enter your name:\",\"\");        <br>  if (username!=\"\" &amp;&amp; username!=null)        <br>    {        <br>    setCookie(\"username\",username,365);        <br>    }        <br>  }        <br>}</div></div>\n<br>\n<hr>\n <h2>完整实例</h2> \n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">function setCookie(cname,cvalue,exdays)\n        <br>{\n        <br>var d = new Date();\n        <br>d.setTime(d.getTime()+(exdays*24*60*60*1000));\n        <br>var expires = \"expires=\"+d.toGMTString();\n        <br>document.cookie = cname + \"=\" + cvalue + \"; \" + expires;\n        <br>}\n        <br>\n        <br>function getCookie(cname)\n        <br>{\n        <br>var name = cname + \"=\";\n        <br>var ca = document.cookie.split(';');\n        <br>for(var i=0; i&lt;ca.length; i++)\n        <br>  {\n        <br>  var c = ca[i].trim();\n        <br>  if (c.indexOf(name)==0) return c.substring(name.length,c.length);\n        <br>}\n        <br>return \"\";\n        <br>}\n        <br>\n        <br>function checkCookie()\n        <br>{\n        <br>var user=getCookie(\"username\");\n        <br>if (user!=\"\")\n        <br>  {\n        <br>  alert(\"Welcome again \" + user);\n        <br>  }\n        <br>else\n        <br>  {\n        <br>  user = prompt(\"Please enter your name:\",\"\");\n        <br>  if (user!=\"\" &amp;&amp; user!=null)\n        <br>    {\n        <br>    setCookie(\"username\",user,365);\n        <br>    }\n        <br>  }\n        <br>}</div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_cookie_username\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<p>以下实例在页面载入时执行 checkCookie() 函数。</p><hr>\n <h2>相关文章</h2>\n<p>JavaScript笔记：<a href=\"https://www.w3cschool.cn/kesyi/kesyi-8v1w24r8.html\" target=\"_blank\">JavaScript操作Cookies</a></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 7,
      "parent_sort_index": 5,
      "chapter_level_one_id": "ffc8ca104c83a7959632aa2bb1f8ebe3",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JS window",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "d606b0eb0f750aedc8fcc38b9c858845",
      "chapter_level_two_parent_id": "ffc8ca104c83a7959632aa2bb1f8ebe3",
      "chapter_level_two_name": "JavaScript 计时事件",
      "chapter_level_two_url": "/javascript/js-timing.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">计时事件</span>  </h2>\n<hr>\n<div class=\"example\">\n    <table class=\"\">\n        <tbody>\n            <tr>\n                <td>\n                    <div style=\"width:120px;height:100px;position:relative;left:58px;top:50px;\">\n                        <div id=\"dig1\" class=\"dig\" style=\"top: -49.823px; left: 5.6814px;\">1</div>\n                        <div id=\"dig2\" class=\"dig\" style=\"top: -35.2232px; left: 20.5112px;\">2</div>\n                        <div id=\"dig3\" class=\"dig\" style=\"top: -15.1496px; left: 25.9997px;\">3</div>\n                        <div id=\"dig4\" class=\"dig\" style=\"top: 4.96459px; left: 20.6614px;\">4</div>\n                        <div id=\"dig5\" class=\"dig\" style=\"top: 19.6749px; left: 5.94126px;\">5</div>\n                        <div id=\"dig6\" class=\"dig\" style=\"top: 24.9996px; left: -14.1765px;\">6</div>\n                        <div id=\"dig7\" class=\"dig\" style=\"top: 19.4976px; left: -34.2464px;\">7</div>\n                        <div id=\"dig8\" class=\"dig\" style=\"top: 4.65796px; left: -48.8363px;\">8</div>\n                        <div id=\"dig9\" class=\"dig\" style=\"top: -15.5025px; left: -53.9968px;\">9</div>\n                        <div id=\"dig10\" class=\"dig\" style=\"top: -35.527px; left: -48.3314px;\">10</div>\n                        <div id=\"dig11\" class=\"dig\" style=\"top: -49.9953px; left: -33.3734px;\">11</div>\n                        <div id=\"dig12\" class=\"dig\" style=\"top: -54.9914px; left: -13.1715px;\">12</div>\n                        <div id=\"hour1\" class=\"hour\" style=\"top: 0px; left: 0px;\"></div>\n                        <div id=\"hour2\" class=\"hour\" style=\"top: -4.30377px; left: -6.74371px;\"></div>\n                        <div id=\"hour3\" class=\"hour\" style=\"top: -8.60754px; left: -13.4874px;\"></div>\n                        <div id=\"hour4\" class=\"hour\" style=\"top: -12.9113px; left: -20.2311px;\"></div>\n                        <div id=\"min1\" class=\"min\" style=\"top: 0px; left: 0px;\"></div>\n                        <div id=\"min2\" class=\"min\" style=\"top: -6.92502px; left: 4.00552px;\"></div>\n                        <div id=\"min3\" class=\"min\" style=\"top: -13.85px; left: 8.01103px;\"></div>\n                        <div id=\"min4\" class=\"min\" style=\"top: -20.775px; left: 12.0165px;\"></div>\n                        <div id=\"min5\" class=\"min\" style=\"top: -27.7001px; left: 16.0221px;\"></div>\n                        <div id=\"sec1\" class=\"sec\" style=\"top: 0px; left: 0px;\"></div>\n                        <div id=\"sec2\" class=\"sec\" style=\"top: -2.46608px; left: 7.61042px;\"></div>\n                        <div id=\"sec3\" class=\"sec\" style=\"top: -4.93215px; left: 15.2208px;\"></div>\n                        <div id=\"sec4\" class=\"sec\" style=\"top: -7.39823px; left: 22.8313px;\"></div>\n                        <div id=\"sec5\" class=\"sec\" style=\"top: -9.86431px; left: 30.4417px;\"></div>\n                        <div id=\"sec6\" class=\"sec\" style=\"top: -12.3304px; left: 38.0521px;\"></div>\n                    </div>\n                </td>\n                <td>\n                    <p class=\"tutintro\">JavaScript 一个设定的时间间隔之后来执行代码</p>\n                    <p class=\"tutintro\">我们称之为计时事件</p>\n                </td>\n            </tr>\n        </tbody>\n    </table>\n</div>\n<hr>\n <h2>JavaScript 计时事件</h2> \n<p>通过使用 JavaScript，我们有能力做到在一个设定的时间间隔之后来执行代码，而不是在函数被调用后立即执行。我们称之为计时事件。</p>\n<p>在 JavaScritp 中使用计时事件是很容易的，两个关键方法是:</p>\n<ul>\n    <li><a href=\"https://www.w3cschool.cn/jsref/met-win-setinterval.html\" target=\"_blank\">setInterval() </a>- 间隔指定的毫秒数不停地执行指定的代码。\n    </li>\n    <li><a href=\"https://www.w3cschool.cn/jsref/met-win-settimeout.html\" target=\"_blank\">setTimeout() </a>- 暂停指定的毫秒数后执行指定的代码</li>\n</ul>\n<p><strong>Note:</strong> setInterval() 和 setTimeout() 是 HTML DOM Window对象的两个方法。</p>\n<hr>\n <h2>setInterval() 方法</h2> \n<p>setInterval() 间隔指定的毫秒数不停地执行指定的代码</p>\n <h3>语法</h3><div class=\"code notranslate\"><div>window.setInterval(\"<em>javascript function</em>\",<em>milliseconds</em>);</div></div>\n<p><strong>window.setInterval()</strong> 方法可以不使用window前缀，直接使用函数<strong>setInterval()</strong>。</p>\n<p>setInterval() 第一个参数是函数（function）。</p>\n<p>第二个参数间隔的毫秒数</p>\n<p><strong>注意:</strong> 1000 毫秒是一秒。</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <p>每三秒弹出 \"hello\" ：</p>\n    <div class=\"example_code notranslate\">setInterval(function(){alert(\"Hello\")},3000);</div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_setinterval1\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<p>实例展示了如何使用 setInterval() 方法，但是每三秒弹出一次对用户体验并不好。</p>\n<p>以下实例将显示当前时间。 setInterval() 方法设置每秒钟执行一次代码，就是和手表一样。</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <p>显示当前时间</p>\n    <div class=\"example_code notranslate\">var myVar=setInterval(function(){myTimer()},1000);\n        <br>\n        <br>function myTimer()\n        <br>{\n        <br>var d=new Date();\n        <br>var t=d.toLocaleTimeString();\n        <br>document.getElementById(\"demo\").innerHTML=t;\n        <br>}</div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_setinterval2\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>如何停止执行?</h2> \n<p>clearInterval() 方法用于停止 setInterval() 方法执行的函数代码。</p>\n <h3>语法</h3><div class=\"code notranslate\"><div>window.clearInterval(<em>intervalVariable</em>)</div></div>\n<p><strong>window.clearInterval()</strong> 方法可以不使用window前缀，直接使用函数<strong>clearInterval()</strong>。</p>\n<p>要使用 clearInterval() 方法, 在创建计时方法时你必须使用全局变量：<span style='background-color: rgb(239, 239, 239); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'>    </span></p><div class=\"code notranslate\"><div>myVar=setInterval(\"<em>javascript function</em>\",<em>milliseconds</em>);</div></div>\n<p>然后你可以使用clearInterval() 方法来停止执行。</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <p>以下例子,我们添加了 \"Stop time\" 按钮：</p>\n    <div class=\"example_code notranslate\">&lt;p id=\"demo\"&gt;&lt;/p&gt;\n        <br>&lt;button onclick=\"myStopFunction()\"&gt;Stop time&lt;/button&gt;\n        <br>\n        <br>&lt;script&gt;\n        <br>var myVar=setInterval(function(){myTimer()},1000);\n        <br>function myTimer()\n        <br>{\n        <br>var d=new Date();\n        <br>var t=d.toLocaleTimeString();\n        <br>document.getElementById(\"demo\").innerHTML=t;\n        <br>}\n        <br>function myStopFunction()\n        <br>{\n        <br>clearInterval(myVar);\n        <br>}\n        <br>&lt;/script&gt;</div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_setinterval3\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>setTimeout() 方法</h2> \n <h3>语法</h3><div class=\"code notranslate\"><div>window.setTimeout(\"<em>javascript 函数</em>\",<em>毫秒数</em>);</div></div>\n<p>setTimeout() 方法会返回某个值。在上面的语句中，值被储存在名为 t 的变量中。假如你希望取消这个 setTimeout()，你可以使用这个变量名来指定它。</p>\n<p>setTimeout() 的第一个参数是含有 JavaScript 语句的字符串。这个语句可能诸如 \"alert('5 seconds!')\"，或者对函数的调用，诸如\"alertMsg()\"。</p>\n<p>第二个参数指示从当前起多少毫秒后执行第一个参数。</p>\n<p class=\"tip\"><span>提示：</span>1000 毫秒等于一秒。</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <p>等待3秒，然后弹出 \"Hello\":</p>\n    <div class=\"example_code notranslate\">setTimeout(function(){alert(\"Hello\")},3000);</div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_timing1\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>如何停止执行?</h2> \n<p>clearTimeout() 方法用于停止执行setTimeout()方法的函数代码。</p>\n <h3>语法</h3><div class=\"code notranslate\"><div>window.clearTimeout(<em>timeoutVariable</em>)</div></div>\n<p><strong>window.clearTimeout()</strong> 方法可以不使用window 前缀。</p>\n<p>要使用clearTimeout() 方法, 你必须在创建超时方法中（setTimeout）使用全局变量:<span style='background-color: rgb(239, 239, 239); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'>    </span></p><div class=\"code \"><div>myVar=setTimeout(\"<em>javascript function</em>\",<em>milliseconds</em>);</div></div>\n<p>如果函数还未被执行，你可以使用 clearTimeout() 方法来停止执行函数代码。</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <p>以下是同一个实例, 但是添加了 \"Stop the alert\" 按钮:</p>\n    <div class=\"example_code notranslate\">var myVar;\n        <br>\n        <br>function myFunction()\n        <br>{\n        <br>myVar=setTimeout(function(){alert(\"Hello\")},3000);\n        <br>}\n        <br>\n        <br>function myStopFunction()\n        <br>{\n        <br>clearTimeout(myVar);\n        <br>}</div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_settimeout2\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n<div class=\"tryit_ex\">\n    <img src=\"https://7n.w3cschool.cn/statics/images/course/tryitimg.gif\" alt=\"Examples\" height=\"46px\" width=\"40\">\n    <h2>更多实例</h2> \n</div>\n<p><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_timing2\">另一个简单的计时</a></p></div>\r\n<script>\r\n\r\nvar H='....';\r\nvar H=H.split('');\r\nvar M='.....';\r\nvar M=M.split('');\r\nvar S='......';\r\nvar S=S.split('');\r\nvar Ypos=0;\r\nvar Xpos=0;\r\nvar Ybase=8;\r\nvar Xbase=8;\r\nvar dots=12;\r\n\r\nfunction clock(){\r\nvar time=new Date ();\r\nvar secs=time.getSeconds();\r\nvar sec=-1.57 + Math.PI * secs/30;\r\nvar mins=time.getMinutes();\r\nvar min=-1.57 + Math.PI * mins/30;\r\nvar hr=time.getHours();\r\nvar hrs=-1.57 + Math.PI * hr/6 + Math.PI*parseInt(time.getMinutes())/360;\r\nfor (i=0; i < dots; ++i){\r\ndocument.getElementById(\"dig\" + (i+1)).style.top=0-15+40*Math.sin(-0.49+dots+i/1.9).toString() + \"px\";\r\ndocument.getElementById(\"dig\" + (i+1)).style.left=0-14+40*Math.cos(-0.49+dots+i/1.9).toString() + \"px\";\r\n}\r\nfor (i=0; i < S.length; i++){\r\ndocument.getElementById(\"sec\" + (i+1)).style.top =Ypos+i*Ybase*Math.sin(sec).toString() + \"px\";\r\ndocument.getElementById(\"sec\" + (i+1)).style.left=Xpos+i*Xbase*Math.cos(sec).toString() + \"px\";\r\n}\r\nfor (i=0; i < M.length; i++){\r\ndocument.getElementById(\"min\" + (i+1)).style.top =Ypos+i*Ybase*Math.sin(min).toString() + \"px\";\r\ndocument.getElementById(\"min\" + (i+1)).style.left=Xpos+i*Xbase*Math.cos(min).toString() + \"px\";\r\n}\r\nfor (i=0; i < H.length; i++){\r\ndocument.getElementById(\"hour\" + (i+1)).style.top =Ypos+i*Ybase*Math.sin(hrs).toString() + \"px\";\r\ndocument.getElementById(\"hour\" + (i+1)).style.left=Xpos+i*Xbase*Math.cos(hrs).toString() + \"px\";\r\n} \r\nsetTimeout('clock()',50);\r\n}\r\nwindow.onload=clock;\r\n\r\n</script>\r\n\r\n<style type=\"text/css\">\r\ndiv.dig, div.hour, div.min, div.sec\r\n{\r\nposition:absolute;\r\n}\r\ndiv.hour, div.min, div.sec\r\n{\r\nwidth:2px;\r\nheight:2px;\r\nfont-size:2px;\r\n}\r\ndiv.dig\r\n{\r\nwidth:30px;\r\nheight:30px;\r\nfont-family:arial,verdana,sans-serif;\r\nfont-size:10px;\r\ncolor:#000000;\r\ntext-align:center;\r\npadding-top:10px\r\n}\r\ndiv.min\r\n{\r\nbackground:#0000FF;\r\n}\r\ndiv.hour\r\n{\r\nbackground:#000000;\r\n}\r\ndiv.sec\r\n{\r\nbackground:#FF0000;\r\n}\r\n</style><div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 6,
      "parent_sort_index": 5,
      "chapter_level_one_id": "ffc8ca104c83a7959632aa2bb1f8ebe3",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JS window",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "73fa247cd76ccc40496febdbe42131fd",
      "chapter_level_two_parent_id": "ffc8ca104c83a7959632aa2bb1f8ebe3",
      "chapter_level_two_name": "JavaScript 弹窗",
      "chapter_level_two_url": "/javascript/js-popup.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">弹窗</span> </h2> \n<hr>\n<p class=\"intro\">可以在 JavaScript 中创建三种消息框：警告框、确认框、提示框。</p>\n<hr>\n <h2>警告框</h2> \n<p>警告框经常用于确保用户可以得到某些信息。</p>\n<p>当警告框出现后，用户需要点击确定按钮才能继续进行操作。</p>\n <h3><strong>语法</strong></h3><div class=\"code notranslate\"><div>window.alert(\"<em>sometext</em>\");</div></div>\n<p><strong>window.alert()</strong> 方法可以不带上window对象，直接使用<strong>alert()</strong>方法。</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">&lt;!DOCTYPE html&gt;\n        <br>&lt;html&gt;\n        <br>&lt;head&gt;\n        <br>&lt;script&gt;\n        <br>function myFunction()\n        <br>{\n        <br>alert(\"你好，我是一个警告框！\");\n        <br>}\n        <br>&lt;/script&gt;\n        <br>&lt;/head&gt;\n        <br>&lt;body&gt;\n        <br>\n        <br>&lt;input type=\"button\" onclick=\"myFunction()\" value=\"显示警告框\"&gt;\n        <br>\n        <br>&lt;/body&gt;\n        <br>&lt;/html&gt;</div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_alert\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>确认框</h2> \n<p>确认框通常用于验证是否接受用户操作。</p>\n<p>当确认卡弹出时，用户可以点击 \"确认\" 或者 \"取消\" 来确定用户操作。</p>\n<p>当你点击 \"确认\", 确认框返回 true， 如果点击 \"取消\", 确认框返回 false。</p>\n <h3><strong>语法</strong></h3><div class=\"code \"><div>window.confirm(\"<em>sometext</em>\");</div></div>\n<p><strong>window.confirm()</strong> 方法可以不带上window对象，直接使用<strong>confirm()</strong>方法。</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">var r=confirm(\"按下按钮\");\n        <br>if (r==true)\n        <br>  {\n        <br>    x=\"你按下了\\\"确定\\\"按钮!\";\n        <br>  }\n        <br>else\n        <br>  {\n        <br>    x=\"你按下了\\\"取消\\\"按钮!\";\n        <br>  }</div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_confirm\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>提示框</h2> \n<p>提示框经常用于提示用户在进入页面前输入某个值。</p>\n<p>当提示框出现后，用户需要输入某个值，然后点击确认或取消按钮才能继续操纵。</p>\n<p>如果用户点击确认，那么返回值为输入的值。如果用户点击取消，那么返回值为 null。</p>\n <h3><strong>语法</strong></h3><div class=\"code notranslate\"><div>window.prompt(\"<em>sometext</em>\",\"<em>defaultvalue</em>\");</div></div>\n<p><strong>window.prompt()</strong> 方法可以不带上window对象，直接使用<strong>prompt()</strong>方法。</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">var person=prompt(\"请输入你的名字\",\"Harry Potter\");\n        <br>if (person!=null &amp;&amp; person!=\"\")\n        <br>  {\n        <br>  x=\"你好 \" + person + \"！今天感觉如何？\";\n        <br>  }</div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_prompt\" class=\"tryitbtn\">尝试一下 »</a> \n</div><p><b>\n提示：</b>在本站中你可以获得有关 <a href=\"https://www.w3cschool.cn/jsref/met-win-prompt.html\" target=\"_blank\">Window prompt() 方法</a>的更多知识！</p>\n<hr>\n <h2>换行</h2> \n<p>弹窗使用 反斜杠 + \"n\"(\\n) 来设置换行。</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">alert(\"Hello\\nHow are you?\");\n        <br>\n    </div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_alert2\" class=\"tryitbtn\">尝试一下 »</a> \n</div><hr><h2>相关文章</h2><p><a href=\"https://www.w3cschool.cn/wkjavascript/na571o8t.html\" target=\"_blank\">JavaScript 对话框</a></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 5,
      "parent_sort_index": 5,
      "chapter_level_one_id": "ffc8ca104c83a7959632aa2bb1f8ebe3",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JS window",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "10b78c9a68e8f699d92d6ba84ca93c57",
      "chapter_level_two_parent_id": "ffc8ca104c83a7959632aa2bb1f8ebe3",
      "chapter_level_two_name": "JavaScript Window Navigator",
      "chapter_level_two_url": "/javascript/js-window-navigator.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">Window Navigator</span> </h2> \n<hr>\n<p class=\"intro\">window.navigator 对象包含有关访问者浏览器的信息。</p>\n<hr>\n <h2>Window Navigator</h2> \n<p><strong>window.navigator</strong> 对象在编写时可不使用 window 这个前缀。</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">&lt;div id=\"example\"&gt;&lt;/div&gt;\n        <br>\n        <br>&lt;script&gt;\n        <br>\n        <br>txt = \"&lt;p&gt;Browser CodeName: \" + navigator.appCodeName + \"&lt;/p&gt;\";\n        <br>txt+= \"&lt;p&gt;Browser Name: \" + navigator.appName + \"&lt;/p&gt;\";\n        <br>txt+= \"&lt;p&gt;Browser Version: \" + navigator.appVersion + \"&lt;/p&gt;\";\n        <br>txt+= \"&lt;p&gt;Cookies Enabled: \" + navigator.cookieEnabled + \"&lt;/p&gt;\";\n        <br>txt+= \"&lt;p&gt;Platform: \" + navigator.platform + \"&lt;/p&gt;\";\n        <br>txt+= \"&lt;p&gt;User-agent header: \" + navigator.userAgent + \"&lt;/p&gt;\";\n        <br>txt+= \"&lt;p&gt;User-agent language: \" + navigator.systemLanguage + \"&lt;/p&gt;\";\n        <br>\n        <br>document.getElementById(\"example\").innerHTML=txt;\n        <br>\n        <br>&lt;/script&gt;</div>\n    <br><a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_nav_all\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>警告!!!</h2> \n<p>来自 navigator 对象的信息具有误导性，不应该被用于检测浏览器版本，这是因为：</p>\n<ul>\n    <li>navigator 数据可被浏览器使用者更改</li>\n    <li>一些浏览器对测试站点会识别错误</li>\n    <li>浏览器无法报告晚于浏览器发布的新操作系统</li>\n</ul>\n<hr>\n <h2>浏览器检测</h2> \n<p>由于 navigator 可误导浏览器检测，使用对象检测可用来嗅探不同的浏览器。</p>\n<p>由于不同的浏览器支持不同的对象，您可以使用对象来检测浏览器。例如，由于只有 Opera 支持属性 \"window.opera\"，您可以据此识别出 Opera。</p>\n<p>例子：if (window.opera) {...some action...}</p><hr>\n<h2>相关阅读</h2>\n<p>请查看我们的 <a href=\"https://www.w3cschool.cn/jsref/obj-navigator.html\" target=\"_blank\">JavaScript Navigator 对象的参考手册</a>，其中提供了Navigator对象的所有的属性和方法。</p>\n<p>这个手册包含的关于每个属性和方法的用法的详细描述和实例。</p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 4,
      "parent_sort_index": 5,
      "chapter_level_one_id": "ffc8ca104c83a7959632aa2bb1f8ebe3",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JS window",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "df48e12048aa9fcc45d6016d63e50f92",
      "chapter_level_two_parent_id": "ffc8ca104c83a7959632aa2bb1f8ebe3",
      "chapter_level_two_name": "JavaScript Window History",
      "chapter_level_two_url": "/javascript/js-window-history.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">Window History</span> </h2> \n<hr>\n<p class=\"intro\">window.history 对象包含浏览器的历史。</p>\n<hr>\n <h2>Window History</h2> \n<p><strong>window.history</strong>对象在编写时可不使用 window 这个前缀。</p>\n<p>为了保护用户隐私，对 JavaScript 访问该对象的方法做出了限制。</p>\n<p>一些方法：</p>\n<ul>\n    <li><a href=\"https://www.w3cschool.cn/jsref/met-his-back.html\" target=\"_blank\">history.back()</a> - 与在浏览器点击后退按钮相同</li>\n    <li><a href=\"https://www.w3cschool.cn/jsref/met-his-forward.html\" target=\"_blank\">history.forward()</a> - 与在浏览器中点击向前按钮向前相同</li>\n</ul>\n<hr>\n <h2>Window History Back</h2> \n<p>history.back() 方法加载历史列表中的前一个 URL。</p>\n<p>这与在浏览器中点击后退按钮是相同的：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <p>在页面上创建后退按钮：</p>\n    <div class=\"example_code notranslate\">&lt;html&gt;\n        <br>&lt;head&gt;\n        <br>&lt;script&gt;\n        <br>function goBack()\n        <br>  {\n        <br>  window.history.back()\n        <br>  }\n        <br>&lt;/script&gt;\n        <br>&lt;/head&gt;\n        <br>&lt;body&gt;\n        <br>\n        <br>&lt;input type=\"button\" value=\"Back\" onclick=\"goBack()\"&gt;\n        <br>\n        <br>&lt;/body&gt;\n        <br>&lt;/html&gt;</div>\n    <p>以上代码输出为：</p>\n    <div class=\"example_code notranslate\">\n        <input type=\"button\" value=\"返回上一页\" onclick=\"goBack()\">\n    </div>\n</div>\n<br>\n<hr>\n <h2>Window History Forward</h2> \n<p>history forward() 方法加载历史列表中的下一个 URL。</p>\n<p>这与在浏览器中点击前进按钮是相同的：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <p>在页面上创建一个向前的按钮：</p>\n    <div class=\"example_code notranslate\">&lt;html&gt;\n        <br>&lt;head&gt;\n        <br>&lt;script&gt;\n        <br>function goForward()\n        <br>  {\n        <br>  window.history.forward()\n        <br>  }\n        <br>&lt;/script&gt;\n        <br>&lt;/head&gt;\n        <br>&lt;body&gt;\n        <br>\n        <br>&lt;input type=\"button\" value=\"Forward\" onclick=\"goForward()\"&gt;\n        <br>\n        <br>&lt;/body&gt;\n        <br>&lt;/html&gt;</div>\n    <p>以上代码输出为：</p>\n    <div class=\"example_code notranslate\">\n        <input type=\"button\" value=\"返回下一页\" onclick=\"goForward()\">\n    </div>\n</div>\n<br><hr>\n<h2>相关文章</h2>\n<p>JavaScript标准参考教程：<a href=\"https://www.w3cschool.cn/javascript_guide/javascript_guide-uz9v269y.html\" target=\"_blank\">JavaScript History 对象</a></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 3,
      "parent_sort_index": 5,
      "chapter_level_one_id": "ffc8ca104c83a7959632aa2bb1f8ebe3",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JS window",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "61a95d456939ddf159723485dcc06f32",
      "chapter_level_two_parent_id": "ffc8ca104c83a7959632aa2bb1f8ebe3",
      "chapter_level_two_name": "JavaScript Window Location",
      "chapter_level_two_url": "/javascript/js-window-location.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">Window Location</span> </h2>\n<hr>\n<p class=\"intro\">window.location 对象用于获得当前页面的地址 (URL)，并把浏览器重定向到新的页面。</p><p class=\"intro\">这种方法既可以用于具有onclick事件的标签，也可以用于满足某些条件进行跳转，特点是方便且灵活。<br></p>\n<hr>\n<h2>Window Location</h2>\n<p><strong>window.location</strong> 对象在编写时可不使用 window 这个前缀。 一些例子：</p>\n<p>一些实例:</p>\n<ul class=\" list-paddingleft-2\">\n    <li>\n        <p><a href=\"https://www.w3cschool.cn/jsref/prop-loc-hostname.html\" target=\"_blank\">location.hostname</a> 返回 web 主机的域名</p>\n    </li>\n    <li>\n        <p><a href=\"https://www.w3cschool.cn/jsref/prop-loc-pathname.html\" target=\"_blank\">location.pathname</a> 返回当前页面的路径和文件名</p>\n    </li>\n    <li>\n        <p><a href=\"https://www.w3cschool.cn/jsref/prop-loc-port.html\" target=\"_blank\">location.port</a> 返回 web 主机的端口 （80 或 443）</p>\n    </li>\n    <li>\n        <p><a href=\"https://www.w3cschool.cn/jsref/prop-loc-protocol.html\" target=\"_blank\">location.protocol</a> 返回所使用的 web 协议（http:// 或 https://）</p>\n    </li>\n</ul>\n<hr>\n<h2>Window Location Href</h2>\n<p>location.href 属性返回当前页面的 URL。</p>\n<div class=\"example\">\n    <h2 class=\"example\">实例</h2>\n    <p>返回（当前页面的）整个 URL：</p>\n    <div class=\"example_code notranslate\">&lt;script&gt;\n        <br>\n        <br>document.write(location.href);\n        <br>\n        <br>&lt;/script&gt;</div>\n    <p>以上代码输出为：</p>\n    <div class=\"example_code notranslate\">//www.w3cschool.cn/javascript/js-window-location.html</div>\n    <br>\n</div>\n<div id=\"view-box\" class=\"view-box content-intro\"><br></div>\n<hr>\n<h2>Window Location Pathname</h2>\n<p>location.pathname 属性返回 URL 的路径名。</p>\n<div class=\"example\">\n    <h2 class=\"example\">实例</h2>\n    <p>返回当前 URL 的路径名：</p>\n    <div class=\"example_code notranslate\">&lt;script&gt;\n        <br>\n        <br>document.write(location.pathname);\n        <br>\n        <br>&lt;/script&gt;</div>\n    <p>以上代码输出为：</p>\n    <div class=\"example_code notranslate\">/javascript/js-window-location.html</div>\n    <br>\n</div>\n<br>\n<hr>\n<h2>Window Location Assign</h2>\n<p>location.assign() 方法加载新的文档。</p>\n<div class=\"example\">\n    <h2 class=\"example\">实例</h2>\n    <p>加载一个新的文档：</p>\n    <div class=\"example_code notranslate\">&lt;html&gt;\n        <br>&lt;head&gt;\n        <br>&lt;script&gt;\n        <br>function newDoc()\n        <br>  {\n        <br>  window.location.assign(\"http://www.w3cschool.cn\")\n        <br>  }\n        <br>&lt;/script&gt;\n        <br>&lt;/head&gt;\n        <br>&lt;body&gt;\n        <br>\n        <br>&lt;input type=\"button\" value=\"Load new document\" onclick=\"newDoc()\"&gt;\n        <br>\n        <br>&lt;/body&gt;\n        <br>&lt;/html&gt;</div>\n    <br><a target=\"_blank\" class=\"tryitbtn\" href=\"//www.w3cschool.cn/tryrun/showhtml/tryjs_loc_assign\">尝试一下 »</a>\n</div><hr><h2>相关阅读</h2><p>JavaScript百科大全：<a href=\"https://www.w3cschool.cn/xqw2e7/2ecm19ww.html\" target=\"_blank\">JavaScript重定向跳转</a></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 2,
      "parent_sort_index": 5,
      "chapter_level_one_id": "ffc8ca104c83a7959632aa2bb1f8ebe3",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JS window",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "0bbf5529f39b3cf5d6d413bdc6b0405d",
      "chapter_level_two_parent_id": "ffc8ca104c83a7959632aa2bb1f8ebe3",
      "chapter_level_two_name": "JavaScript Window Screen",
      "chapter_level_two_url": "/javascript/js-window-screen.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">Window Screen</span></h2>\n<hr>\n<p class=\"intro\">window.screen 对象包含有关用户屏幕的信息。</p>\n<p class=\"intro\">这些信息可以用来了解客户端硬件的基本配置。\n    <br>\n</p>\n<hr>\n<h2>Window Screen</h2>\n<p><strong>window.screen</strong>对象在编写时可以不使用 window 这个前缀。</p>\n<p>一些属性：</p>\n<ul class=\" list-paddingleft-2\">\n    <li>\n        <p>screen.availWidth - 可用的屏幕宽度</p>\n    </li>\n    <li>\n        <p>screen.availHeight - 可用的屏幕高度</p>\n    </li>\n</ul>\n<hr>\n<h2>Window Screen 可用宽度</h2>\n<p>screen.availWidth 属性返回访问者屏幕的宽度，以像素计，减去界面特性，比如窗口任务栏。</p>\n<div class=\"example\">\n    <h2 class=\"example\">实例</h2>\n    <p>返回您的屏幕的可用宽度：</p>\n    <div class=\"example_code notranslate\">&lt;script&gt;\n        <br>\n        <br>document.write(\"可用宽度: \" + screen.availWidth);\n        <br>\n        <br>&lt;/script&gt;</div>\n    <p>以上代码输出为：</p>\n    <div class=\"example_code notranslate\">可用宽度: 1920</div>\n    <br><a textvalue=\"尝试一下 »\" target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_screen_availwidth\">尝试一下 »</a>\n</div>\n<p>\n    <br>\n</p>\n<hr>\n<h2>Window Screen 可用高度</h2>\n<p>screen.availHeight 属性返回访问者屏幕的高度，以像素计，减去界面特性，比如窗口任务栏。</p>\n<div class=\"example\">\n    \t<h2 class=\"example\">实例</h2>\n    <p>返回您的屏幕的可用高度：</p>\n    <div class=\"example_code notranslate\">&lt;script&gt;\n        <br>\n        <br>document.write(\"可用高度: \" + screen.availHeight);\n        <br>\n        <br>&lt;/script&gt;</div>\n    <p>以上代码将输出：</p>\n    <div class=\"example_code notranslate\">可用高度: 1040</div>\n    <br><a textvalue=\"尝试一下 »\" target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_screen_availheight\">尝试一下 »</a>\n</div>\n<p>\n    <br>\n</p><hr>\n<h2>相关文章</h2>\n<p>请查看我们的 <a href=\"https://www.w3cschool.cn/jsref/obj-screen.html\" target=\"_blank\">JavaScript Screen 对象的参考手册</a>，其中提供了可以与 Screen 对象一同使用的所有的属性。 </p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 1,
      "parent_sort_index": 5,
      "chapter_level_one_id": "ffc8ca104c83a7959632aa2bb1f8ebe3",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JS window",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "e44d263e4e8b0f8cc581fd8e1e815849",
      "chapter_level_two_parent_id": "ffc8ca104c83a7959632aa2bb1f8ebe3",
      "chapter_level_two_name": "JavaScript Window",
      "chapter_level_two_url": "/javascript/js-window.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">Window - 浏览器对象模型</span> </h2> <hr> <p class=\"intro\">浏览器对象模型 (BOM) 使 JavaScript 有能力与浏览器\"对话\"。</p><p class=\"intro\">Window 对象是BOM中所有对象的核心，除了是BOM中所有对象的父对象外，还包含一些窗口控制函数。<br></p> <hr> <h2>浏览器对象模型 (BOM)</h2> <p>浏览器对象模型（<strong>B</strong>rowser <strong>O</strong>bject <strong>M</strong>odel (BOM)）尚无正式标准。</p> <p>由于现代浏览器已经（几乎）实现了 JavaScript 交互性方面的相同方法和属性，因此常被认为是 BOM 的方法和属性。</p> <hr> <h2>Window 对象</h2> <p>所有浏览器都支持 window 对象。它表示浏览器窗口。</p> <p>所有 JavaScript 全局对象、函数以及变量均自动成为 window 对象的成员。</p> <p>全局变量是 window 对象的属性。</p> <p>全局函数是 window 对象的方法。</p> <p>甚至 HTML DOM 的 document 也是 window 对象的属性之一：<span style='background-color: rgb(239, 239, 239); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'> </span></p><div class=\"code notranslate\"><div> window.document.getElementById(\"header\"); </div></div> <p>与此相同：<span style='background-color: rgb(239, 239, 239); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'> </span></p><div class=\"code notranslate\"><div> document.getElementById(\"header\");  </div></div> <h2>Window 子对象</h2><p>Window的子对象主要有如下几个：</p><ol><li>JavaScript document 对象</li><li>JavaScript frames 对象</li><li>JavaScript history 对象</li><li>JavaScript location 对象</li><li>JavaScript navigator 对象</li><li>JavaScript screen 对象</li></ol><hr> <h2>Window 尺寸</h2> <p>有三种方法能够确定浏览器窗口的尺寸（浏览器的窗口，不包括工具栏和滚动条）。</p> <p>对于Internet Explorer、Chrome、Firefox、Opera 以及 Safari：</p> <ul> <li>window.innerHeight - 浏览器窗口的内部高度</li> <li>window.innerWidth - 浏览器窗口的内部宽度</li> </ul> <p>对于 Internet Explorer 8、7、6、5：</p> <ul> <li>document.documentElement.clientHeight</li> <li>document.documentElement.clientWidth</li> </ul> <p>或者</p> <ul> <li>document.body.clientHeight</li> <li>document.body.clientWidth</li> </ul> <p>实用的 JavaScript 方案（涵盖所有浏览器）： </p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code\"> var w=window.innerWidth<br>|| document.documentElement.clientWidth<br>|| document.body.clientWidth;<br><br>var h=window.innerHeight<br>|| document.documentElement.clientHeight<br>|| document.body.clientHeight; </div> <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_win_inner\" class=\"tryitbtn\">尝试一下 »</a> </div> <p> 该例显示浏览器窗口的高度和宽度：（不包括工具栏/滚动条）</p> <hr> <h2>其他 Window 方法</h2> <p>一些其他方法：</p> <ul><li><a href=\"https://www.w3cschool.cn/jsref/met-win-open.html\" target=\"_blank\">window.open()</a> - 打开新窗口</li><li><a href=\"https://www.w3cschool.cn/jsref/met-win-close.html\" target=\"_blank\">window.close()</a> - 关闭当前窗口</li><li><a href=\"https://www.w3cschool.cn/jsref/met-win-moveto.html\" target=\"_blank\">window.moveTo() </a>- 移动当前窗口</li><li><a href=\"https://www.w3cschool.cn/jsref/met-win-resizeto.html\" target=\"_blank\">window.resizeTo()</a> - 调整当前窗口的尺寸</li></ul></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 10,
      "parent_sort_index": 4,
      "chapter_level_one_id": "97e336ecd021a460bcf11e488ad9cebd",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JS 高级教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "cbf0f3a941974abd3f266aebf57909fb",
      "chapter_level_two_parent_id": "97e336ecd021a460bcf11e488ad9cebd",
      "chapter_level_two_name": "JavaScripy execCommand函数",
      "chapter_level_two_url": "/javascript/javascript-execcommand.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><div><h2>execCommand函数命令</h2><p>execCommand方法是执行一个对当前文档，当前选择或者给出范围的命令。处理Html数据时常用<br>如下格式：document.execCommand(sCommand[,交互方式, 动态参数]) ，其中：sCommand为指令参数（如下例中的”2D-Position”），交互方式参数如果是true的话将显示对话框，如果为false的话，则不显示对话框（下例中的”false”即表示不显示对话框），动态参数一般为一可用值或属性值（如下例中的”true”）。</p><p><span></span></p><pre title=\"\" name=\"code\">document.execCommand(\"2D-Position\",\"false\",\"true\");\n下面列出的是指令参数及意义\n\n2D-Position 允许通过拖曳移动绝对定位的对象。\nAbsolutePosition 设定元素的 position 属性为“absolute”(绝对)。\nBackColor 设置或获取当前选中区的背景颜色。\nBlockDirLTR 目前尚未支持。\nBlockDirRTL 目前尚未支持。\nBold 切换当前选中区的粗体显示与否。\nBrowseMode 目前尚未支持。\nCopy 将当前选中区复制到剪贴板。\nCreateBookmark 创建一个书签锚或获取当前选中区或插入点的书签锚的名称。\nCreateLink 在当前选中区上插入超级链接，或显示一个对话框允许用户指定要为当前选中区插入的超级链接的 URL。\nCut 将当前选中区复制到剪贴板并删除之。\nDelete 删除当前选中区。\nDirLTR 目前尚未支持。\nDirRTL 目前尚未支持。\nEditMode 目前尚未支持。\nFontName 设置或获取当前选中区的字体。\nFontSize 设置或获取当前选中区的字体大小。\nForeColor 设置或获取当前选中区的前景(文本)颜色。\nFormatBlock 设置当前块格式化标签。\nIndent 增加选中文本的缩进。\nInlineDirLTR 目前尚未支持。\nInlineDirRTL 目前尚未支持。\nInsertButton 用按钮控件覆盖当前选中区。\nInsertFieldset 用方框覆盖当前选中区。\nInsertHorizontalRule 用水平线覆盖当前选中区。\nInsertIFrame 用内嵌框架覆盖当前选中区。\nInsertImage 用图像覆盖当前选中区。\nInsertInputButton 用按钮控件覆盖当前选中区。\nInsertInputCheckbox 用复选框控件覆盖当前选中区。\nInsertInputFileUpload 用文件上载控件覆盖当前选中区。\nInsertInputHidden 插入隐藏控件覆盖当前选中区。\nInsertInputImage 用图像控件覆盖当前选中区。\nInsertInputPassword 用密码控件覆盖当前选中区。\nInsertInputRadio 用单选钮控件覆盖当前选中区。\nInsertInputReset 用重置控件覆盖当前选中区。\nInsertInputSubmit 用提交控件覆盖当前选中区。\nInsertInputText 用文本控件覆盖当前选中区。\nInsertMarquee 用空字幕覆盖当前选中区。\nInsertOrderedList 切换当前选中区是编号列表还是常规格式化块。\nInsertParagraph 用换行覆盖当前选中区。\nInsertSelectDropdown 用下拉框控件覆盖当前选中区。\nInsertSelectListbox 用列表框控件覆盖当前选中区。\nInsertTextArea 用多行文本输入控件覆盖当前选中区。\nInsertUnorderedList 切换当前选中区是项目符号列表还是常规格式化块。\nItalic 切换当前选中区斜体显示与否。\nJustifyCenter 将当前选中区在所在格式化块置中。\nJustifyFull 目前尚未支持。\nJustifyLeft 将当前选中区所在格式化块左对齐。\nJustifyNone 目前尚未支持。\nJustifyRight 将当前选中区所在格式化块右对齐。\nLiveResize 迫使 MSHTML 编辑器在缩放或移动过程中持续更新元素外观，而不是只在移动或缩放完成后更新。\nMultipleSelection 允许当用户按住 Shift 或 Ctrl 键时一次选中多于一个站点可选元素。\nOpen 目前尚未支持。\nOutdent 减少选中区所在格式化块的缩进。\nOverWrite 切换文本状态的插入和覆盖。\nPaste 用剪贴板内容覆盖当前选中区。\nPlayImage 目前尚未支持。\nPrint 打开打印对话框以便用户可以打印当前页。\nRedo 目前尚未支持。\nRefresh 刷新当前文档。\nRemoveFormat 从当前选中区中删除格式化标签。\nRemoveParaFormat 目前尚未支持。\nSaveAs 将当前 Web 页面保存为文件。\nSelectAll 选中整个文档。\nSizeToControl 目前尚未支持。\nSizeToControlHeight 目前尚未支持。\nSizeToControlWidth 目前尚未支持。\nStop 目前尚未支持。\nStopImage 目前尚未支持。\nStrikeThrough 目前尚未支持。\nSubscript 目前尚未支持。\nSuperscript 目前尚未支持。\nUnBookmark 从当前选中区中删除全部书签。\nUnderline 切换当前选中区的下划线显示与否。\nUndo 目前尚未支持。\nUnlink 从当前选中区中删除全部超级链接。\nUnselect 清除当前选中区的选中状态。\n</pre><p>document.ExecCommand() – html实例</p><pre title=\"document.ExecCommand() - html实例\" name=\"code\">&lt;HTML&gt;\n\n     &lt;HEAD&gt;\n\n         &lt;TITLE&gt;JavaScript--execCommand指令集&lt;/TITLE&gt;\n\n         &lt;SCRIPT LANGUAGE=\"javascript\"&gt;\n\n&lt;!--\n\n/*\n\n*该function执行copy指令\n\n*/\n\nfunction fn_doufucopy(){\nedit.select();\ndocument.execCommand('Copy');\n}\n\n/*\n*该function执行paste指令\n*/\n\nfunction fn_doufupaste() { \n    tt.focus();\n    document.execCommand('paste');\n} \n\n/*\n*该function用来创建一个超链接\n*/\n\nfunction fn_creatlink()\n{\n  document.execCommand('CreateLink',true,'true');//弹出一个对话框输入URL\n  //document.execCommand('CreateLink',false,'http://www.51js.com');\n}\n\n/*\n*该function用来将选中的区块设为指定的背景色\n*/\n\nfunction fn_change_backcolor()\n{\n  document.execCommand('BackColor',true,'#FFbbDD');//true或false都可以\n}\n\n/*\n*该function用来将选中的区块设为指定的前景色,改变选中区块的字体大小,改变字体,字体变粗变斜\n*/\n\nfunction fn_change_forecolor()\n{\n//指定前景色\ndocument.execCommand('ForeColor',false,'#BBDDCC');//true或false都可以\n//指定背景色\ndocument.execCommand('FontSize',false,7);   //true或false都可以\n//字体必须是系统支持的字体\ndocument.execCommand('FontName',false,'标楷体');   //true或false都可以\n//字体变粗\ndocument.execCommand('Bold');\n//变斜体\ndocument.execCommand('Italic');\n}\n\n/*\n*该function用来将选中的区块加上不同的线条\n*/\nfunction fn_change_selection()\n{\n//将选中的文字加下划线\ndocument.execCommand('Underline');\n//在选中的文字上划粗线\ndocument.execCommand('StrikeThrough');\n//将选中的部分文字变细\ndocument.execCommand('SuperScript');\n//将选中区块的下划线取消掉\ndocument.execCommand('Underline'); \n}\n\n/*\n  *该function用来将选中的区块排成不同的格式\n  */\n\nfunction fn_format()\n{\n//有序列排列\ndocument.execCommand('InsertOrderedList');\n\n//实心无序列排列\ndocument.execCommand('InsertUnorderedList');\n\n//空心无序列排列\ndocument.execCommand('Indent');\n}\n\n/*\n*该function用来将选中的区块剪下或是删除掉\n*/\n\nfunction fn_CutOrDel()\n{\n\n//删除选中的区块\n//document.execCommand('Delete');\n\n//剪下选中的区块\ndocument.execCommand('Cut');\n}\n\n/*\n*该function用来将选中的区块重设为一个相应的物件\n*/\n\nfunction fn_InsObj()\n{\n/*\n  ******************************************\n  * 以下指令都是为选中的区块重设一个object;\n  * 如没有特殊说明,第二个参数true或false是一样的;\n  * 参数三表示为该object的id;\n  * 可以用在javascript中通过其指定的id来控制它\n  ******************************************\n*/\n\n/*重设为一个button(InsertButton和InsertInputButtong一样,\n只不前者是button,后者是input)*/\n\n/*document.execCommand('InsertButton',false,\"aa\"); //true或false无效\ndocument.all.aa.value=\"风舞九天\";*/\n\n//重设为一个fieldset\n/*document.execCommand('InsertFieldSet',true,\"aa\");\ndocument.all.aa.innerText=\"刀剑如梦\";*/\n\n//插入一个水平线\n//document.execCommand('InsertHorizontalRule',true,\"aa\");\n\n//插入一个iframe\n//document.execCommand('InsertIFrame',true,\"aa\");\n\n//插入一个InsertImage,设为true时需要图片,false时不需图片\n\n//document.execCommand('InsertImage',false,\"aa\");\n\n//插入一个checkbox\n\n//document.execCommand('InsertInputCheckbox',true,\"aa\");\n\n//插入一个file类型的object\n\n//document.execCommand('InsertInputFileUpload',false,\"aa\");\n\n//插入一个hidden\n\n/*document.execCommand('InsertInputHidden',false,\"aa\");\n\nalert(document.all.aa.id);*/\n\n//插入一个InputImage\n\n/*document.execCommand('InsertInputImage',false,\"aa\");\n\ndocument.all.aa.src=\"F-a10.gif\";*/\n\n//插入一个Password\n\n//document.execCommand('InsertInputPassword',true,\"aa\");\n\n//插入一个Radio\n\n//document.execCommand('InsertInputRadio',false,\"aa\");\n\n//插入一个Reset\n\n//document.execCommand('InsertInputReset',true,\"aa\");\n\n//插入一个Submit\n\n//document.execCommand('InsertInputSubmit',false,\"aa\");\n\n//插入一个input text\n\n//document.execCommand('InsertInputText',false,\"aa\");\n\n//插入一个textarea\n\n//document.execCommand('InsertTextArea',true,\"aa\");\n\n//插入一个 select list box\n\n//document.execCommand('InsertSelectListbox',false,\"aa\");\n\n//插入一个single select\n\ndocument.execCommand('InsertSelectDropdown',true,\"aa\");\n\n//插入一个line break(硬回车??)\n\n//document.execCommand('InsertParagraph');\n\n//插入一个marquee\n\n/*document.execCommand('InsertMarquee',true,\"aa\");\n\ndocument.all.aa.innerText=\"bbbbb\";*/\n\n//用于取消选中的阴影部分\n\n//document.execCommand('Unselect');\n\n//选中页面上的所有元素\n\n//document.execCommand('SelectAll');\n\n}\n\n/*\n\n*该function用来将页面保存为一个文件\n\n*/\n\nfunction fn_save()\n\n{\n\n//第二个参数为欲保存的文件名\n\ndocument.execCommand('SaveAs','mycodes.txt');\n\n//打印整个页面\n\n//document.execCommand('print');\n\n}\n\n--&gt; \n\n         &lt;/SCRIPT&gt;\n\n     &lt;/HEAD&gt;\n\n     &lt;body&gt;\n\n         &lt;input id=\"edit\" value=\"范例\" NAME=\"edit\"&gt;&lt;br&gt;\n\n         &lt;button onclick=\"fn_doufucopy()\" ID=\"Button1\"&gt;Copy&lt;/button&gt; &lt;button onclick=\"fn_doufupaste()\" ID=\"Button2\"&gt;\n\n              paste&lt;/button&gt;&lt;br&gt;\n\n         &lt;textarea id=\"tt\" rows=\"10\" cols=\"50\" NAME=\"tt\"&gt;&lt;/textarea&gt;\n\n         &lt;hr&gt;\n\n         &lt;br&gt;\n\n         浮沉聚散变化又再,但是总可卷土重来.&lt;br&gt;\n\n         天若有情天亦老,人间正道是沧桑.&lt;br&gt;\n\n         都怪我,太执着,却也等不到花开叶落.&lt;br&gt;\n\n         &lt;br&gt;\n\n         Please select above letters, then click following buttons:&lt;br&gt;\n\n         &lt;hr&gt;\n\n         &lt;input type=\"button\" value=\"创建CreateLink\" onclick=\"fn_creatlink()\" ID=\"Button3\" NAME=\"Button3\"&gt;&lt;br&gt;\n\n         &lt;input type=\"button\" value=\"改变文字背景色\" onclick=\"fn_change_backcolor()\" ID=\"Button4\" NAME=\"Button4\"&gt;&lt;br&gt;\n\n         &lt;input type=\"button\" value=\"改变文字前景色\" onclick=\"fn_change_forecolor()\" ID=\"Button5\" NAME=\"Button5\"&gt;&lt;br&gt;\n\n         &lt;input type=\"button\" value=\"给文字加线条\" onclick=\"fn_change_selection()\" ID=\"Button6\" NAME=\"Button6\"&gt;&lt;br&gt;\n\n         &lt;input type=\"button\" value=\"改变文字的排列\" onclick=\"fn_format()\" ID=\"Button7\" NAME=\"Button7\"&gt;&lt;br&gt;\n\n         &lt;input type=\"button\" value=\"删除或剪下选中的部分\" onclick=\"fn_CutOrDel()\" ID=\"Button8\" NAME=\"Button8\"&gt;&lt;br&gt;\n\n         &lt;input type=\"button\" value=\"插入Object\" onclick=\"fn_InsObj()\" ID=\"Button9\" NAME=\"Button9\"&gt;&lt;br&gt;\n\n         &lt;input type=\"button\" value=\"保存或打印文件\" onclick=\"fn_save()\" ID=\"Button10\" NAME=\"Button10\"&gt;&lt;br&gt;\n\n         &lt;input type=\"button\" value=\"测试Refresh属性\" onclick=\"document.execCommand('Refresh')\" ID=\"Button11\"\n\n              NAME=\"Button11\"&gt;\n\n     &lt;/body&gt;\n\n&lt;/HTML&gt;</pre></div><div></div></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 9,
      "parent_sort_index": 4,
      "chapter_level_one_id": "97e336ecd021a460bcf11e488ad9cebd",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JS 高级教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "da622a8339e8f776dc3adbdc5294c985",
      "chapter_level_two_parent_id": "97e336ecd021a460bcf11e488ad9cebd",
      "chapter_level_two_name": "JavaScript Window对象",
      "chapter_level_two_url": "/javascript/yji712hr.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript Window 对象</h2>\n\n<hr>\n<p>Window 对象表示浏览器中打开的窗口。</p>\n<hr>\n\n<h2>Window 对象描述</h2>\n\n<p>Window 对象表示一个浏览器窗口或一个框架。在客户端 JavaScript 中，Window 对象是全局对象，所有的表达式都在当前的环境中计算。</p><hr>\n<h2>完整 Window 对象参考手册</h2>\n<p>请查看我们的 <a href=\"https://www.w3cschool.cn/jsref/obj-window.html\" target=\"_blank\">JavaScript Window 对象的参考手册</a>，其中提供了可以与 Window 对象一同使用的所有的属性和方法。</p>\n<p>这个手册包含的关于每个属性和方法的用法的详细描述和实例。</p>\n<hr>\n<h2>Window 子对象</h2>\n<p>Window的子对象主要有如下几个：</p>\n<ol>\n    <li>JavaScript document 对象</li>\n    <li>JavaScript frames 对象</li>\n    <li>JavaScript history 对象</li>\n    <li>JavaScript location 对象</li>\n    <li>JavaScript navigator 对象</li>\n    <li>JavaScript screen 对象</li>\n</ol>\n<hr>\n\n<h2>JavaScript Window对象学习脑图</h2>\n\n<div>\n    <img src=\"https://atts.w3cschool.cn/attachments/image/20160809/1470710607319368.gif\" alt=\"\" class=\"\"> </div></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 8,
      "parent_sort_index": 4,
      "chapter_level_one_id": "97e336ecd021a460bcf11e488ad9cebd",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JS 高级教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "5c6d1e6b90b93dac50e46f6ca4c85a68",
      "chapter_level_two_parent_id": "97e336ecd021a460bcf11e488ad9cebd",
      "chapter_level_two_name": "JavaScript RegExp 对象",
      "chapter_level_two_url": "/javascript/js-obj-regexp.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">RegExp</span> 对象</h2> \n<hr>\n<p class=\"intro\">RegExp：是正则表达式（regular expression）的简写。</p>\n<p class=\"intro\">RegExp 对象用于规定在文本中检索的内容。\n    <br>\n</p>\n<hr>\n <h2>完整 RegExp 对象参考手册</h2> \n<p>请查看我们的 <a href=\"/jsref/jsref-obj-regexp.html\">JavaScript RegExp 对象的参考手册</a>，其中提供了可以与字符串对象一同使用的所有的属性和方法。</p>\n<p>这个手册包含的关于每个属性和方法的用法的详细描述和实例。</p>\n<hr>\n <h2>什么是 RegExp？</h2> \n<p>正则表达式描述了字符的模式对象。</p>\n<p>当您检索某个文本时，可以使用一种模式来描述要检索的内容。RegExp 就是这种模式。</p>\n<p>简单的模式可以是一个单独的字符。</p>\n<p>更复杂的模式包括了更多的字符，并可用于解析、格式检查、替换等等。</p>\n<p>您可以规定字符串中的检索位置，以及要检索的字符类型，等等。</p>\n <h2>语法</h2><div class=\"code notranslate\"><div>var patt=new RegExp(pattern,modifiers);        <br>or more simply:        <br>var patt=/pattern/modifiers;</div></div>\n<ul>\n    <li>模式描述了一个表达式模型。</li>\n    <li>修饰符描述了检索是否是全局，区分大小写等。</li>\n</ul>\n<hr>\n <h2>RegExp 修饰符</h2> \n<p>修饰符用于执行不区分大小写和全文的搜索。</p>\n<p><strong>i</strong> - 修饰符是用来执行不区分大小写的匹配。</p>\n<p><strong>g</strong> - 修饰符是用于执行全文的搜索（而不是在找到第一个就停止查找,而是找到所有的匹配）。</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例 1</h2> \n    <p>在字符串中不区分大小写找\"W3CSchool\"</p>\n    <div class=\"example_code notranslate\">var str=\"Visit W3CSchool\";\n        <br>var patt1=/w3cschool/i;</div>\n    <p>以下<span class=\"marked\">标记</span>的文本是获得的匹配的表达式：</p>\n    <div class=\"example_code \"><span class=\"marked\">W3CSchool</span> \n    </div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_regexp_i\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<br>\n<div class=\"example\">\n     <h2 class=\"example\">实例 2</h2> \n    <p>全文查找 \"is\"</p>\n    <div class=\"example_code notranslate\">var str=\"Is this all there is?\";\n        <br>var patt1=/is/g;</div>\n    <p>以下<span class=\"marked\">标记</span>的文本是获得的匹配的表达式：</p>\n    <div class=\"example_code notranslate\">Is th<span class=\"marked\">is</span> all there <span class=\"marked\">is</span>?</div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_regexp_g\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<br>\n<div class=\"example\">\n     <h2 class=\"example\">实例 3</h2> \n    <p>全文查找和不区分大小写搜索 \"is\"</p>\n    <div class=\"example_code notranslate\">var str=\"Is this all there is?\";\n        <br>var patt1=/is/gi;</div>\n    <p>以下 <span class=\"marked\">标记</span>的文本是获得的匹配的表达式：</p>\n    <div class=\"example_code notranslate\"> <span class=\"marked\">Is</span> th<span class=\"marked\">is</span> all there <span class=\"marked\">is</span>?</div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_regexp_g_2\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>test()</h2> \n<p>The test()方法搜索字符串指定的值，根据结果并返回真或假。</p>\n<p>下面的示例是从字符串中搜索字符 \"e\" ：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code \">var patt1=new RegExp(\"e\");\n        <br>document.write(patt1.test(\"The best things in life are free\"));</div>\n    <p>由于该字符串中存在字母 \"e\"，以上代码的输出将是：</p>\n    <div class=\"example_code notranslate\">true</div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_regexp_test\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>exec()</h2> \n<p>exec() 方法检索字符串中的指定值。返回值是被找到的值。如果没有发现匹配，则返回 null。</p>\n<p>下面的示例是从字符串中搜索字符 \"e\" ：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例 1</h2> \n    <div class=\"example_code notranslate\">var patt1=new RegExp(\"e\");\n        <br>document.write(patt1.exec(\"The best things in life are free\"));</div>\n    <p>由于该字符串中存在字母 \"e\"，以上代码的输出将是：</p>\n    <div class=\"example_code\">e</div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_regexp_exec\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n <h2>RegExp 实战练习</h2>\n<p><a href=\"https://www.w3cschool.cn/codecamp/sift-through-text-with-regular-expressions.html\" target=\"_blank\">JavaScript使用正则表达式操作字符串</a>\n    <br>\n</p>\n<p>Regular expressions 正则表达式被用来根据某种匹配模式来寻找strings中的某些单词。\n    <br>\n</p>\n<p><a href=\"https://www.w3cschool.cn/codecamp/find-numbers-with-regular-expressions.html\" target=\"_blank\">JavaScript 使用正则表达式选取数值</a>\n    <br>\n</p>\n<p>我们可以在正则表达式中使用特殊选择器来选取特殊类型的值。\n    <br>\n</p>\n<p><a href=\"https://www.w3cschool.cn/codecamp/invert-regular-expression-matches-with-javascript.html\" target=\"_blank\">JavaScript 使用正则表达式反转匹配</a>\n    <br>\n</p>\n<p>你可以用正则表达式选择器的大写版本来反转任何匹配（相反意思）。</p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 7,
      "parent_sort_index": 4,
      "chapter_level_one_id": "97e336ecd021a460bcf11e488ad9cebd",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JS 高级教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "f7039a449bb524beca0f31caba8efc5b",
      "chapter_level_two_parent_id": "97e336ecd021a460bcf11e488ad9cebd",
      "chapter_level_two_name": "JavaScript Math（算数）对象",
      "chapter_level_two_url": "/javascript/js-obj-math.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><div id=\"view-box\" class=\"view-box content-intro\"><h2>JavaScript <span class=\"color_h1\">Math（算数）</span> 对象</h2><hr><p class=\"intro\">Math（算数）对象的作用是：执行常见的算数任务。</p><hr><div class=\"tryit_ex\"><img src=\"//www.w3cschool.cn/statics/images/course/tryitimg.gif\" alt=\"Examples\" height=\"46px\" width=\"40\"><h2>在线实例</h2></div><p><a target=\"_blank\" href=\"//www.w3cschool.cn/tryrun/showhtml/tryjsref_round\">round()</a><br> 如何使用 round()。</p><p><a target=\"_blank\" href=\"//www.w3cschool.cn/tryrun/showhtml/tryjsref_random\">random()</a><br> 如何使用 random() 来返回 0 到 1 之间的随机数。</p><p><a target=\"_blank\" href=\"//www.w3cschool.cn/tryrun/showhtml/tryjsref_max\">max()</a><br> 如何使用 max() 来返回两个给定的数中的较大的数。（在 ECMASCript v3 之前，该方法只有两个参数。）</p><p><a target=\"_blank\" href=\"//www.w3cschool.cn/tryrun/showhtml/tryjsref_min\">min()</a><br> 如何使用 min() 来返回两个给定的数中的较小的数。（在 ECMASCript v3 之前，该方法只有两个参数。）</p><hr><h2>完整的 Math 对象参考手册</h2><p>我们提供 <a href=\"//www.w3cschool.cn/jsref/jsref-obj-math.html\">JavaScript Math 对象的参考手册</a>，其中包括所有可用于算术对象的属性和方法。</p><p>该手册包含了对每个属性和方法的详细描述以及相关实例。</p><hr><h2>Math 对象</h2><p>Math（算数）对象的作用是：执行普通的算数任务。</p><p>Math 对象提供多种算数值类型和函数。无需在使用这个对象之前对它进行定义。</p><p><strong>使用Math的属性/方法的语法：</strong></p><div class=\"code notranslate\"><div>var x=Math.PI;<br> var y=Math.sqrt(16);</div></div><p><strong>注意：</strong> Math对象无需在使用这个对象之前对它进行定义。</p><p><b>提示： </b>Math 对象不能使用 new 关键字创建对象实例。直接用 “对象名.成员”的格式来访问其属性或者方法。</p><hr><h2>算数值</h2><p>JavaScript 提供 8 种可被 Math 对象访问的算数值：</p><p>你可以参考如下Javascript常量使用方法：</p><div class=\"code\"><div>Math.E<br> Math.PI<br> Math.SQRT2<br> Math.SQRT1_2<br> Math.LN2<br> Math.LN10<br> Math.LOG2E<br> Math.LOG10E</div></div><br><hr><h2>算数方法</h2><p>除了可被 Math 对象访问的算数值以外，还有几个函数（方法）可以使用。</p><p>下面的例子使用了 Math 对象的 round 方法对一个数进行四舍五入。</p><div class=\"code notranslate\"><div>document.write(Math.round(4.7));</div></div><p>上面的代码输出为：</p><div class=\"code notranslate\"><div>5</div></div><p>下面的例子使用了 Math 对象的 random() 方法来返回一个介于 0 和 1 之间的随机数：</p><div class=\"code notranslate\"><div>document.write(Math.random());</div></div><p>上面的代码输出为：</p><div class=\"code notranslate\"><div>0.6581708136621066</div></div></div><p>你也可以在JavaScript编程实战中练习<a href=\"https://www.w3cschool.cn/codecamp/generate-random-fractions-with-javascript.html\" target=\"_blank\">使用random()生成随机小数</a>。</p><p>下面的例子使用了 Math 对象的 floor() 方法和 random() 来返回一个介于 0 和 11 之间的随机数：</p><div class=\"code notranslate\"><div>document.write(Math.floor(Math.random()*11));</div></div><p>上面的代码输出为：</p><div class=\"code notranslate\">8</div></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 6,
      "parent_sort_index": 4,
      "chapter_level_one_id": "97e336ecd021a460bcf11e488ad9cebd",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JS 高级教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "7ca76db290bf3c02f94ea51c008a3639",
      "chapter_level_two_parent_id": "97e336ecd021a460bcf11e488ad9cebd",
      "chapter_level_two_name": "JavaScript Boolean（布尔）对象",
      "chapter_level_two_url": "/javascript/js-obj-boolean.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">Boolean（布尔）</span> 对象</h2> <hr> <p class=\"intro\">Boolean（布尔）对象用于将非布尔值转换为布尔值（true 或者 false）。</p><p class=\"intro\">Boolean（布尔）对象是三种包装对象：Number、String和Boolean中最简单的一种，它没有大量的实例属性和方法。</p> <hr> <div class=\"tryit_ex\"> <img src=\"https://7n.w3cschool.cn/statics/images/course/tryitimg.gif\" width=\"40\" height=\"46px\" alt=\"Examples\"><h2>在线实例</h2> </div> <p><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_boolean\">检查布尔值</a><br> 检查布尔对象是 true 还是 false。</p> <hr> <h2>完整的 Boolean（布尔） 对象参考手册</h2> <p>我们提供 <a href=\"/jsref/jsref-obj-boolean.html\">JavaScript Boolean 对象参考手册</a>，其中包括所有可用于布尔对象的属性和方法。</p> <p>该手册包含了对每个属性和方法的详细描述以及相关实例。</p> <hr> <h2>创建 Boolean 对象</h2> <p>Boolean 对象代表两个值:\"true\" 或者 \"false\"</p> <p>下面的代码定义了一个名为 myBoolean 的布尔对象：</p> <div class=\"code notranslate\"><div> var myBoolean=new Boolean();</div></div> <p>如果布尔对象无初始值或者其值为:</p> <ul> <li>0</li> <li>-0</li> <li>null</li> <li>\"\"</li> <li>false</li> <li>undefined</li> <li>NaN </li> </ul> <p>那么对象的值为 false。否则，其值为 true（即使当自变量为字符串 \"false\" 时）！</p><h2>相关练习</h2><p>你可以在本站的JavaScript编程实战中练习使用<a href=\"https://www.w3cschool.cn/codecamp/understanding-boolean-values.html#?solution=function%20welcomeToBooleans()%20%7B%0A%0A%2F%2F%20Only%20change%20code%20below%20this%20line.%0A%0Areturn%20true%3B%20%2F%2F%20Change%20this%20line%0A%0A%2F%2F%20Only%20change%20code%20above%20this%20line.%0A%7D%0A\" target=\"_blank\">JavaScript布尔boolean数据类型</a>！</p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 5,
      "parent_sort_index": 4,
      "chapter_level_one_id": "97e336ecd021a460bcf11e488ad9cebd",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JS 高级教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "9fabab77cda13ed6e8ba91188b022bb4",
      "chapter_level_two_parent_id": "97e336ecd021a460bcf11e488ad9cebd",
      "chapter_level_two_name": "JavaScript Array（数组）对象",
      "chapter_level_two_url": "/javascript/js-obj-array.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">Array（数组）</span> 对象</h2> \n<hr>\n<p class=\"intro\">数组对象的作用是：使用单独的变量名来存储一系列的值。</p>\n\n<h3>参数</h3>\n\n<p>参数 size 是期望的数组元素个数。返回的数组，length 字段将被设为 size 的值。</p>\n<p>参数 <code>element ...; elementn</code> 是参数列表。当使用这些参数来调用构造函数 Array() 时，新创建的数组的元素就会被初始化为这些值。它的 length 字段也会被设置为参数的个数。</p>\n\n<h3>返回值</h3>\n\n<p>返回新创建并被初始化了的数组。</p>\n<p>如果调用构造函数 Array() 时没有使用参数，那么返回的数组为空，length 字段为 0。</p>\n<p>当调用构造函数时只传递给它一个数字参数，该构造函数将返回具有指定个数、元素为 undefined 的数组。</p>\n<p>当其他参数调用 Array() 时，该构造函数将用参数指定的值<strong>初始化数组</strong>。</p>\n<p>当把构造函数作为函数调用，不使用 <code>new 运算符</code>时，它的行为与使用 <code>new 运算符</code>调用它时的行为完全一样。</p>\n<hr>\n\n<h2>Array 对象属性</h2>\n\n<table class=\"\">\n    <tbody>\n        <tr>\n            <th>属性</th>\n            <th>描述</th>\n        </tr>\n        <tr>\n            <td>constructor</td>\n            <td>返回对创建此对象的数组函数的引用。</td>\n        </tr>\n        <tr>\n            <td>length</td>\n            <td>设置或返回数组中元素的数目。</td>\n        </tr>\n        <tr>\n            <td>prototype</td>\n            <td>使您有能力向对象添加属性和方法。</td>\n        </tr>\n    </tbody>\n</table>\n<hr>\n<div class=\"tryit_ex\">\n    <img src=\"https://7n.w3cschool.cn/statics/images/course/tryitimg.gif\" width=\"40\" height=\"46px\" alt=\"Examples\">\n     <h2>在线实例</h2> \n</div>\n<p>创建数组, 为其赋值：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">var mycars = new Array();\n        <br>mycars[0] = \"Saab\";\n        <br>mycars[1] = \"Volvo\";\n        <br>mycars[2] = \"BMW\";</div>\n    <br><a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_array\">尝试一下 »</a> \n</div>\n<p>页面底部你可以找到更多的实例。</p>\n<p><b>提示：</b>在JavaScript数组中，第一个数组元素的索引值为 0，第二个索引值为 1，依次类推。</p>\n<hr>\n <h2>什么是数组?</h2> \n<p>数组对象是使用单独的变量名来存储一系列的值。</p>\n<p>如果你有一组数据（例如：车名字），存在单独变量如下所示：</p>\n<div class=\"code notranslate\">\n    <div>var car1=\"Saab\";\n        <br>var car2=\"Volvo\";\n        <br>var car3=\"BMW\";</div>\n</div>\n<p>然而，如果你想从中找出某一辆车？并且不是3辆，而是300辆呢？这将不是一件容易的事！</p>\n<p>最好的方法就是用数组。</p>\n<p>数组可以用一个变量名存储所有的值，并且可以用变量名访问任何一个值。</p>\n<p>数组中的每个元素都有自己的的ID，以便它可以很容易地被访问到。</p>\n<hr>\n <h2>创建一个数组</h2> \n<p>创建一个数组，有三种方法。</p>\n<p>下面的代码定义了一个名为 myCars的数组对象：</p>\n<p>1: 常规方式:</p>\n<div class=\"code notranslate\">\n    <div>var myCars=new Array();\n        <br>myCars[0]=\"Saab\";      \n        <br>myCars[1]=\"Volvo\";\n        <br>myCars[2]=\"BMW\";</div>\n</div>\n<p>2: 简洁方式:</p>\n<div class=\"code notranslate\">\n    <div>var myCars=new Array(\"Saab\",\"Volvo\",\"BMW\");</div>\n</div>\n<p>3: 字面:</p>\n<div class=\"code notranslate\">\n    <div>var myCars=[\"Saab\",\"Volvo\",\"BMW\"];</div>\n</div>\n<p><b>提示：</b>你可以通过本站的JavaScript编程实战来练习如何<a href=\"https://www.w3cschool.cn/codecamp/store-multiple-values-in-one-variable-using-javascript-arrays.html\" target=\"_blank\" style=\"background-color: rgb(255, 255, 255);\">创建JavaScript数组</a>！</p>\n<br>\n<hr>\n <h2>访问数组</h2> \n<p>通过指定数组名以及索引号码，你可以访问某个特定的元素。</p>\n<p>以下实例可以访问myCars数组的第一个值：<span style='background-color: rgb(239, 239, 239); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'> </span>\n\n</p>\n<div class=\"code notranslate\">\n    <div>var name=myCars[0];</div>\n</div>\n<p>以下实例修改了数组 myCars 的第一个元素:</p>\n<div class=\"code notranslate\">\n    <div>myCars[0]=\"Opel\";</div>\n</div>\n<br>\n<table class=\"lamp   \">\n    <tbody>\n        <tr>\n            <th width=\"34\">\n                <img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" width=\"32\" height=\"32\" alt=\"lamp\">\n            </th>\n            <td>[0] 是数组的第一个元素。[1] 是数组的第二个元素。</td>\n        </tr>\n    </tbody>\n</table>\n<br>\n<hr>\n <h2>在一个数组中你可以有不同的对象</h2> \n<p>所有的JavaScript变量都是对象。数组元素是对象。函数是对象。</p>\n<p>因此，你可以在数组中有不同的变量类型。</p>\n<p>你可以在一个数组中包含对象元素、函数、数组：<span style='background-color: rgb(239, 239, 239); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'> </span>\n\n</p>\n<div class=\"code\">\n    <div>myArray[0]=Date.now;\n        <br>myArray[1]=myFunction;\n        <br>myArray[2]=myCars;</div>\n</div>\n<br>\n<hr>\n <h2>数组方法和属性</h2> \n<p>使用数组对象预定义属性和方法：</p>\n<div class=\"code notranslate\">\n    <div>var x=myCars.length             // the number of elements in myCars\n        <br>var y=myCars.indexOf(\"Volvo\")   // the index position of \"Volvo\"</div>\n</div>\n<br>\n<hr>\n <h2>完整的数组对象参考手册</h2> \n<p>你可以参考本站关于数组的所有属性和方法的完整参考手册。</p>\n<p>参考手册包含了所有属性和方法的描述（和更多的例子）。</p>\n<p><a href=\"//www.w3cschool.cn/jsref/jsref-obj-array.html\" target=\"_blank\">完整数组对象参考手册</a>\n\n</p>\n<hr>\n <h2>创建新方法</h2> \n<p>原型是JavaScript全局构造函数。它可以构建新Javascript对象的属性和方法。</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例：创建一个新的方法。</h2> \n    <div class=\"example_code notranslate\">Array.prototype.ucase=function()\n        <br>{\n        <br>  for (i=0;i&lt;this.length;i++)\n        <br>  {this[i]=this[i].toUpperCase();}\n        <br>}</div>\n    <br><a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_prototype_array\">尝试一下 »</a> \n</div>\n<p>上面的例子创建了新的数组方法用于将数组小写字符转为大写字符。</p>\n<hr>\n<div class=\"tryit_ex\">\n    <img src=\"https://7n.w3cschool.cn/statics/images/course/tryitimg.gif\" width=\"40\" height=\"46px\" alt=\"Examples\">\n     <h2>更多实例</h2> \n</div>\n<p><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_concat\">合并两个数组 - concat()</a>\n\n</p>\n<p><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_concat2\">合并三个数组 - concat()</a>\n\n</p>\n<p><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_join\">用数组的元素组成字符串 - join()</a>\n\n</p>\n<p><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_pop\">删除数组的最后一个元素 - pop()</a>\n\n</p>\n<p><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_push\">数组的末尾添加新的元素 - push()</a>\n\n</p>\n<p><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_reverse\">将一个数组中的元素的顺序反转排序 - reverse()</a>\n\n</p>\n<p><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_shift\">删除数组的第一个元素 - shift()</a>\n\n</p>\n<p><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_slice_array\">从一个数组中选择元素 - slice()</a>\n\n</p>\n<p><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_sort\">数组排序（按字母顺序升序）- sort()</a>\n\n</p>\n<p><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_sort2\">数字排序（按数字顺序升序）- sort()</a>\n\n</p>\n<p><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_sort3\">数字排序（按数字顺序降序）- sort()</a>\n\n</p>\n<p><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_splice\">在数组的第2位置添加一个元素 - splice()</a>\n\n</p>\n<p><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_tostring_array\">转换数组到字符串 -toString()</a>\n\n</p>\n<p><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_unshift\">在数组的开头添加新元素 - unshift()</a>\n\n</p>\n<p>\n    <br>\n</p>\n<p>JavaScript 数组知识图</p>\n<p>\n    <img src=\"https://atts.w3cschool.cn/attachments/image/20160809/1470709596457344.gif\" alt=\"\">\n    <br>\n</p>\n<p>\n    <br>\n</p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 4,
      "parent_sort_index": 4,
      "chapter_level_one_id": "97e336ecd021a460bcf11e488ad9cebd",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JS 高级教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "90a9e1efdb9befccc92f663ed5364aec",
      "chapter_level_two_parent_id": "97e336ecd021a460bcf11e488ad9cebd",
      "chapter_level_two_name": "JavaScript Date（日期）对象",
      "chapter_level_two_url": "/javascript/js-obj-date.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">Date（日期）</span> 对象</h2> \n<hr>\n<p class=\"intro\">日期对象用于处理日期和时间。</p>\n<hr>\n<div class=\"tryit_ex\">\n    <img src=\"https://7n.w3cschool.cn/statics/images/course/tryitimg.gif\" width=\"40\" height=\"46px\" alt=\"Examples\">\n    <h2>在线实例</h2> \n</div>\n<p> <a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_date\">返回当日的日期和时间</a>\n    <br>如何使用 Date() 方法获得当日的日期。</p>\n<p><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_getfullyear\">getFullYear()</a>\n    <br>使用 getFullYear() 获取年份。</p>\n<p><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_gettime\">getTime()</a>\n    <br>getTime() 返回从 1970 年 1 月 1 日至今的毫秒数。</p>\n<p><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_setfullyear2\">setFullYear()</a>\n    <br>如何使用 setFullYear() 设置具体的日期。</p>\n<p><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_toutcstring\">toUTCString()</a>\n    <br>如何使用 toUTCString() 将当日的日期（根据 UTC）转换为字符串。</p>\n<p><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_date_weekday\">getDay()</a>\n    <br>如何使用 getDay() 和数组来显示星期，而不仅仅是数字。</p>\n<p><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_timing_clock\">Display a clock</a>\n    <br>如何在网页上显示一个钟表。</p>\n<hr>\n <h2>完整的 Date 对象参考手册</h2> \n<p>我们提供 JavaScript Date 对象参考手册，其中包括所有可用于日期对象的属性和方法。<a href=\"//www.w3cschool.cn/jsref/jsref-obj-date.html\" target=\"_blank\">JavaScript Date 对象参考手册</a>。</p>\n<p>该手册包含了对每个属性和方法的详细描述以及相关实例。</p>\n<hr>\n <h2>创建日期</h2> \n<p>Date 对象用于处理日期和时间。 </p>\n<p>可以通过 new 关键词来定义 Date 对象。以下代码定义了名为 myDate 的 Date 对象：</p>\n<p>有四种方式初始化日期:<span style='background-color: rgb(239, 239, 239); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'>    </span></p><div class=\"code notranslate\"><div>new Date() // 当前日期和时间        <br>new Date(milliseconds) //返回从 1970 年 1 月 1 日至今的毫秒数        <br>new Date(dateString)        <br>new Date(year, month, day, hours, minutes, seconds, milliseconds)</div></div>\n<p>上面的参数大多数都是可选的，在不指定的情况下，默认参数是0。</p><p>从 1970 年 1 月 1 日通用一天计算为86,400,000毫秒\n</p><p>实例化一个日期的一些例子：<span style='background-color: rgb(239, 239, 239); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'>    </span></p><div class=\"code notranslate\"><div>var today = new Date()        <br>var d1 = new Date(\"October 13, 1975 11:13:00\")        <br>var d2 = new Date(79,5,24)        <br>var d3 = new Date(79,5,24,11,33,0)</div></div>\n<br>\n<hr>\n <h2>设置日期</h2> \n<p>通过使用针对日期对象的方法，我们可以很容易地对日期进行操作。</p>\n<p>在下面的例子中，我们为日期对象设置了一个特定的日期 (2010 年 1 月 14 日)：<span style='background-color: rgb(239, 239, 239); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'>    </span></p><div class=\"code notranslate\"><div>var myDate=new Date();        <br>myDate.setFullYear(2010,0,14);</div></div>\n<p>在下面的例子中，我们将日期对象设置为 5 天后的日期：<span style='background-color: rgb(239, 239, 239); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'>    </span></p><div class=\"code notranslate\"><div>var myDate=new Date();        <br>myDate.setDate(myDate.getDate()+5);</div></div>\n<p><strong>注意:</strong> 如果增加天数会改变月份或者年份，那么日期对象会自动完成这种转换。</p>\n<hr>\n <h2>两个日期比较</h2> \n<p>日期对象也可用于比较两个日期。</p>\n<p>下面的代码将当前日期与 2100 年 1 月 14 日做了比较：<span style='background-color: rgb(239, 239, 239); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'>    </span></p><div class=\"code\"><div>var x=new Date();        <br>x.setFullYear(2100,0,14);        <br>var today = new Date();                <br>if (x&gt;today)        <br>  {        <br>  alert(\"Today is before 14th January 2100\");        <br>  }        <br>else        <br>  {        <br>  alert(\"Today is after 14th January 2100\");        <br>  }</div></div><br><hr><h2>相关阅读</h2><p>轻松学习 JavaScript：<a href=\"https://www.w3cschool.cn/wkjavascript/rhi11o8o.html\" target=\"_blank\">JavaScript 日期对象</a></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 3,
      "parent_sort_index": 4,
      "chapter_level_one_id": "97e336ecd021a460bcf11e488ad9cebd",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JS 高级教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "c3457f9da1639cae94fc04eca2880c4d",
      "chapter_level_two_parent_id": "97e336ecd021a460bcf11e488ad9cebd",
      "chapter_level_two_name": "JavaScript 字符串（String）对象",
      "chapter_level_two_url": "/javascript/js-obj-string.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">字符串（String）</span> 对象</h2> \n<hr>\n<p class=\"intro\">String 对象用于处理已有的字符块。</p>\n<hr>\n <h2>JavaScript 字符串</h2> \n<p>一个字符串用于存储一系列字符就像 \"John Doe\".</p>\n<p>一个字符串可以使用单引号或双引号：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code \">var carname=\"Volvo XC60\";\n        <br>var carname='Volvo XC60';</div>\n</div>\n<p>你使用位置（索引）可以访问字符串中任何的字符：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">var character=carname[7];</div>\n</div>\n<p>字符串的索引从零开始, 所以字符串第一字符为 [0],第二个字符为 [1], 等等。</p>\n<p>你可以在字符串中使用引号，如下实例：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">var answer=\"It's alright\";\n        <br>var answer=\"He is called 'Johnny'\";\n        <br>var answer='He is called \"Johnny\"';</div>\n</div>\n<p>或者你可以在字符串中使用转义字符（\\）使用引号：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">var answer='It\\'s alright';\n        <br>var answer=\"He is called \\\"Johnny\\\"\";</div>\n    <br><a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_datatypes_string\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>字符串（String）</h2> \n<p>字符串（String）使用长度属性<strong>length</strong>来计算字符串的长度：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">var txt=\"Hello World!\";\n        <br>document.write(txt.length);\n        <br>\n        <br>var txt=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n        <br>document.write(txt.length);</div>\n    <br><a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_string_length\">尝试一下 »</a> \n</div>\n<p><a href=\"https://www.w3cschool.cn/codecamp/find-the-length-of-a-string.html\" target=\"_blank\">JavaScript 获取字符串的长度</a>：通过在字符串变量或字符串后面写上 .length 来获得变量中string （字符串）值的长度。</p>\n<hr>\n <h2>在字符串中查找字符串</h2> \n<p>字符串使用 indexOf() 来定位字符串中某一个指定的字符首次出现的位置：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">var str=\"Hello world, welcome to the universe.\";\n        <br>var n=str.indexOf(\"welcome\");</div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_string_indexof\" target=\"_blank\">尝试一下 »</a> \n</div>\n<p>如果没找到对应的字符函数返回-1</p>\n<p>lastIndexOf() 方法在字符串末尾开始查找字符串出现的位置。</p>\n<br>\n<hr>\n <h2>内容匹配</h2> \n<p><strong>match()</strong>函数用来查找字符串中特定的字符，并且如果找到的话，则返回这个字符。</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">var str=\"Hello world!\";\n        <br>document.write(str.match(\"world\") + \"&lt;br&gt;\");\n        <br>document.write(str.match(\"World\") + \"&lt;br&gt;\");\n        <br>document.write(str.match(\"world!\"));</div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_string_match\" target=\"_blank\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>替换内容</h2> \n<p><strong>replace()</strong> 方法在字符串中用某些字符替换另一些字符。</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">str=\"Please visit Microsoft!\"\n        <br>var n=str.replace(\"Microsoft\",\"w3cschool\");\n        <br>\n    </div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_string_replace\" target=\"_blank\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>字符串大小写转换</h2> \n<p>字符串大小写转换使用函数 <strong>toUpperCase() </strong> /<strong> toLowerCase()</strong>:</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">var txt=\"Hello World!\";       // String\n        <br>var txt1=txt.toUpperCase();   // txt1 is txt converted to upper\n        <br>var txt2=txt.toLowerCase();   // txt2 is txt converted to lower</div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_string_toupper\" target=\"_blank\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>字符串转为数组</h2> \n<p>字符串使用string&gt;split()函数转为数组:</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">txt=\"a,b,c,d,e\"   // String\n        <br>txt.split(\",\");   // Split on commas\n        <br>txt.split(\" \");   // Split on spaces\n        <br>txt.split(\"|\");   // Split on pipe </div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_string_split\" target=\"_blank\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>特殊字符</h2> \n<p>Javascript 中可以使用反斜线（\\）插入特殊符号，如：撇号,引号等其他特殊符号。</p>\n<p>查看如下 JavaScript 代码:<span style='background-color: rgb(239, 239, 239); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'>    </span><span style='background-color: rgb(239, 239, 239); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'>    </span>\n\n</p>\n<div class=\"code notranslate\">\n    <div>var txt=\"We are the so-called \"Vikings\" from the north.\";\n        <br>document.write(txt);</div>\n</div>\n<p>在JavaScript中，字符串的开始和停止使用单引号或双引号。这意味着，上面的字符串将被切成： We are the so-called</p>\n<p>解决以上的问题可以使用反斜线来转义引号：<span style='background-color: rgb(239, 239, 239); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'>    </span><span style='background-color: rgb(239, 239, 239); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'>    </span>\n\n</p>\n<div class=\"code\">\n    <div>var txt=\"We are the so-called \\\"Vikings\\\" from the north.\";\n        <br>document.write(txt);</div>\n</div>\n<p>JavaScript将输出正确的文本字符串：We are the so-called \"Vikings\" from the north.</p>\n<p>下表列出其他特殊字符，可以使用反斜线转义特殊字符：</p>\n<table class=\"reference   \">\n    <tbody>\n        <tr>\n            <th align=\"left\">代码</th>\n            <th align=\"left\">输出</th>\n        </tr>\n        <tr>\n            <td>\\'</td>\n            <td>单引号</td>\n        </tr>\n        <tr>\n            <td>\\\"</td>\n            <td>双引号</td>\n        </tr>\n        <tr>\n            <td>\\\\</td>\n            <td>斜杆</td>\n        </tr>\n        <tr>\n            <td>\\n</td>\n            <td>换行</td>\n        </tr>\n        <tr>\n            <td>\\r</td>\n            <td>回车</td>\n        </tr>\n        <tr>\n            <td>\\t</td>\n            <td>tab</td>\n        </tr>\n        <tr>\n            <td>\\b</td>\n            <td>空格</td>\n        </tr>\n        <tr>\n            <td>\\f</td>\n            <td>换页</td>\n        </tr>\n    </tbody>\n</table>\n<br>\n<hr>\n <h2>字符串属性和方法</h2> \n<p>属性:</p>\n<ul>\n    <li>length</li>\n    <li>prototype</li>\n    <li>constructor</li>\n</ul>\n<p>方法:</p>\n<ul>\n    <li>charAt()</li>\n    <li>charCodeAt()</li>\n    <li>concat()</li>\n    <li>fromCharCode()</li>\n    <li>indexOf()</li>\n    <li>lastIndexOf()</li>\n    <li>match()</li>\n    <li>replace()</li>\n    <li>search()</li>\n    <li>slice()</li>\n    <li>split()</li>\n    <li>substr()</li>\n    <li>substring()</li>\n    <li>toLowerCase()</li>\n    <li>toUpperCase()</li>\n    <li>valueOf()</li>\n</ul>\n<hr>\n\n<h2>相关文章</h2>\n\n<p>JavaScript 和 HTML DOM 参考手册：<a href=\"https://www.w3cschool.cn/jsref/jsref-obj-string.html\" target=\"_blank\">JavaScript String 对象</a>\n\n</p>\n<p>\n    <br>\n</p>\n<div>\n    <hr>\n     <h2>JavaScript 字符串函数学习脑图</h2>\n\n</div>\n<div>\n    <img src=\"https://atts.w3cschool.cn/attachments/image/20160809/1470710444592947.gif\" alt=\"\">\n</div></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 2,
      "parent_sort_index": 4,
      "chapter_level_one_id": "97e336ecd021a460bcf11e488ad9cebd",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JS 高级教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "0eba78e550015f1f3e6b402b22b04952",
      "chapter_level_two_parent_id": "97e336ecd021a460bcf11e488ad9cebd",
      "chapter_level_two_name": "JavaScript Number 对象",
      "chapter_level_two_url": "/javascript/js-obj-number.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">Number</span> 对象</h2> \n<hr>\n<p>JavaScript 的 Number 对象是经过封装的能让你处理数字值的对象。</p>\n<p>JavaScript 的 Number 对象由 Number() 构造器创建。</p>\n<p class=\"intro\">JavaScript 只有一种数字类型。</p>\n<p class=\"intro\">可以使用也可以不使用小数点来书写数字。</p>\n<hr>\n <h2>JavaScript 数字</h2> \n<p>JavaScript 数字可以使用也可以不使用小数点来书写：\n    <br>\n</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">var pi=3.14;    // 使用小数点\n        <br>var x=34;       // 不使用小数点</div>\n</div>\n<p>极大或极小的数字可通过科学（指数）计数法来写：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">var y=123e5;    // 12300000\n        <br>var z=123e-5;   // 0.00123</div>\n</div>\n<br>\n<hr>\n <h2>所有 JavaScript 数字均为 64 位</h2> \n<p>JavaScript 不是类型语言。与许多其他编程语言不同，JavaScript 不定义不同类型的数字，比如整数、短、长、浮点等等。</p>\n<p>在JavaScript中，数字不分为整数类型和浮点型类型，所有的数字都是由 浮点型类型。JavaScript采用IEEE754标准定义的64位浮点格式表示数字，它能表示最大值为±1.7976931348623157 x 10308，最小值为±5 x 10 -324</p>\n<table class=\"reference\">\n    <tbody>\n        <tr>\n            <th>值 (aka Fraction/Mantissa)</th>\n            <th>指数</th>\n            <th>Sign</th>\n        </tr>\n        <tr>\n            <td>52 bits (0 - 51) </td>\n            <td>11 bits (50 - 62)</td>\n            <td>1 bit (63)</td>\n        </tr>\n    </tbody>\n</table>\n<br>\n<hr>\n <h2>精度</h2> \n<p>整数（不使用小数点或指数计数法）最多为 15 位。</p>\n<p>小数的最大位数是 17，但是浮点运算并不总是 100% 准确：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">var x = 0.2+0.1; // result will be 0.30000000000000004</div>\n    <br><a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_inaccurate\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>八进制和十六进制</h2> \n<p>如果前缀为 0，则 JavaScript 会把数值常量解释为八进制数，如果前缀为 0 和 \"x\"，则解释为十六进制数。</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">var y = 0377;\n        <br>var z = 0xFF;</div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_octal_hex\" target=\"_blank\">尝试一下 »</a> \n</div>\n<br>\n<table class=\"lamp\">\n    <tbody>\n        <tr>\n            <th width=\"34\">\n                <img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" width=\"32\" height=\"32\" alt=\"lamp\">\n            </th>\n            <td>绝不要在数字前面写零，除非您需要进行八进制转换。 </td>\n        </tr>\n    </tbody>\n</table>\n<p>默认情况下，JavaScript 数字为十进制显示。</p>\n<p>但是你可以使用 toString() 方法 输出16进制、8进制、2进制。</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">var myNumber=128;\n        <br>myNumber.toString(16);   // returns 80\n        <br>myNumber.toString(8);    // returns 200\n        <br>myNumber.toString(2);    // returns 10000000\n        <br>\n    </div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_tostring\" target=\"_blank\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>无穷大（Infinity）</h2> \n<p>当数字运算结果超过了JavaScript所能表示的数字上限（溢出），结果为一个特殊的无穷大（infinity）值，在JavaScript中以Infinity表示。同样地，当负数的值超过了JavaScript所能表示的负数范围，结果为负无穷大，在JavaScript中以-Infinity表示。无穷大值的行为特性和我们所期望的是一致的：基于它们的加、减、乘和除运算结果还是无穷大（当然还保留它们的正负号）。</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">myNumber=2;\n        <br>while (myNumber!=Infinity)\n        <br>{\n        <br>myNumber=myNumber*myNumber; // Calculate until Infinity\n        <br>}</div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_infinity\" target=\"_blank\">尝试一下 »</a> \n</div>\n<p>除以0也产生了无限:</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">var x = 2/0;\n        <br>var y = -2/0;</div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_infinity_zero\" target=\"_blank\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>NaN - 非数字值</h2> \n<p>NaN 属性是代表非数字值的特殊值。该属性用于指示某个值不是数字。可以把 Number 对象设置为该值，来指示其不是数字值。</p>\n<p>你可以使用 isNaN() 全局函数来判断一个值是否是 NaN 值。</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">var x = 1000 / \"Apple\";\n        <br>isNaN(x); // returns true\n        <br>var y = 100 / \"1000\";\n        <br>isNaN(y); // returns false</div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_isnan_false\" target=\"_blank\">尝试一下 »</a> \n</div>\n<p>除以0是无穷大，无穷大是一个数字:</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">var x = 1000 / 0;\n        <br>isNaN(x); // returns false</div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_isnan_true\" target=\"_blank\">尝试一下 »</a> \n</div><p><b>\n提示：</b>在 JavaScript 中，如果参数无法被转换为数字，则返回 NaN。</p><br>\n<hr>\n <h2>数字可以是数字或者对象</h2> \n<p>数字可以私有数据进行初始化，就像 x = 123;</p>\n<p>JavaScript 数字对象初始化数据， var y = new Number(123);</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">var x = 123;\n        <br>var y = new Number(123);\n        <br>typeof(x) // returns Number\n        <br>typeof(y) // returns Object</div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_object_number_type\" target=\"_blank\">尝试一下 »</a> \n</div>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">var x = 123;             \n        <br>var y = new Number(123);\n        <br>(x === y) // is false because x is a number and y is an object.</div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_object_number\" target=\"_blank\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>数字属性</h2> \n<ul>\n    <li>MAX_VALUE</li>\n    <li>MIN_VALUE</li>\n    <li>NEGATIVE_INFINITY</li>\n    <li>POSITIVE_INFINITY</li>\n    <li>NaN</li>\n    <li>prototype</li>\n    <li>constructor</li>\n</ul>\n<hr>\n <h2>数字方法</h2> \n<ul>\n    <li>toExponential()</li>\n    <li>toFixed()</li>\n    <li>toPrecision()</li>\n    <li>toString()</li>\n    <li>valueOf()</li>\n</ul><hr>\n <h2>相关文章</h2>\n<p>JavaScript 和 HTML DOM 参考手册：<a href=\"https://www.w3cschool.cn/jsref/jsref-obj-number.html\" target=\"_blank\">JavaScript Number 对象</a></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 1,
      "parent_sort_index": 4,
      "chapter_level_one_id": "97e336ecd021a460bcf11e488ad9cebd",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JS 高级教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "14080abc2030d31f01118205ac3a0c91",
      "chapter_level_two_parent_id": "97e336ecd021a460bcf11e488ad9cebd",
      "chapter_level_two_name": "JavaScript 对象",
      "chapter_level_two_url": "/javascript/js-objects.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">对象</span> </h2> <hr> <p class=\"intro\">JavaScript 中的所有事物都是对象：字符串、数值、数组、函数... </p> <p class=\"intro\">此外，JavaScript 允许自定义对象。</p> <hr> <h2>所有事物都是对象</h2> <p>JavaScript 提供多个内建对象，比如 String、Date、Array 等等。 对象只是带有属性和方法的特殊数据类型。</p> <ul> <li>布尔型可以是一个对象。</li> <li>数字型可以是一个对象。</li> <li>字符串也可以是一个对象</li> <li>日期是一个对象</li> <li>数学和正则表达式也是对象</li> <li>数组是一个对象</li> <li>甚至函数也可以是对象</li> </ul> <hr> <h2>JavaScript 对象</h2><p>对象只是一种特殊的数据。对象拥有<strong>属性</strong>和<strong>方法</strong>。</p> <hr> <h2>访问对象的属性</h2> <p>属性是与对象相关的值。</p> <p>访问对象属性的语法是：</p> <div class=\"code \"><div> <em>objectName.propertyName</em> </div></div> <p>这个例子使用了 String 对象的 length 属性来获得字符串的长度：</p><div class=\"code notranslate\"><div> var message=\"Hello World!\";<br> var x=message.length;</div></div> <p>在以上代码执行后，x 的值将是：</p> <div class=\"code notranslate\"><div> 12</div></div><br><hr> <h2>访问对象的方法</h2> <p>方法是能够在对象上执行的动作。</p> <p>您可以通过以下语法来调用方法：</p> <div class=\"code notranslate\"><div> <em>objectName.methodName()</em> </div></div> <p>这个例子使用了 String 对象的 toUpperCase() 方法来将文本转换为大写：</p><div class=\"code notranslate\"><div> var message=\"Hello world!\";<br> var x=message.toUpperCase();</div></div> <p>在以上代码执行后，x 的值将是：</p> <div class=\"code notranslate\"><div> HELLO WORLD!</div></div> <br><hr> <h2>创建 JavaScript 对象</h2> <p>通过 JavaScript，您能够定义并创建自己的对象。</p> <p>创建新对象有两种不同的方法：</p> <ul> <li>定义并创建对象的实例</li> <li>使用函数来定义对象，然后创建新的对象实例</li> </ul> <hr> <h2>创建直接的实例</h2> <p>这个例子创建了对象的一个新实例，并向其添加了四个属性：</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code notranslate\"> person=new Object();<br> person.firstname=\"John\";<br> person.lastname=\"Doe\";<br> person.age=50;<br> person.eyecolor=\"blue\"; </div> <br><a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_create_object\">尝试一下 »</a> </div> <p>替代语法（使用对象 literals）：</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code notranslate\"> person={firstname:\"John\",lastname:\"Doe\",age:50,eyecolor:\"blue\"}; </div> <br><a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_create_object1\">尝试一下 »</a> </div> <b>提示：</b><p>你可以在本站的JavaScript编程实战中练习使用</p><a href=\"https://www.w3cschool.cn/codecamp/build-javascript-objects.html\" target=\"_blank\">JavaScript对象操作<span style=\"color: rgb(0, 0, 0);\">！</span><br></a><br><hr> <h2>使用对象构造器</h2> <p>本例使用函数来构造对象：</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code notranslate\"> function person(firstname,lastname,age,eyecolor)<br> {<br>    this.firstname=firstname;<br>    this.lastname=lastname;<br>    this.age=age;<br>    this.eyecolor=eyecolor;<br> }</div> <br><a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_create_object2\">尝试一下 »</a> </div> <p>在JavaScript中，this通常指向的是我们正在执行的函数本身，或者是指向该函数所属的对象（运行时）</p> <hr> <h2>创建 JavaScript 对象实例</h2> <p>一旦您有了对象构造器，就可以创建新的对象实例，就像这样：</p> <div class=\"code notranslate\"><div> var myFather=new person(\"John\",\"Doe\",50,\"blue\");<br> var myMother=new person(\"Sally\",\"Rally\",48,\"green\");</div></div> <br><hr> <h2>把属性添加到 JavaScript 对象</h2> <p>您可以通过为对象赋值，向已有对象添加新属性：</p> <p>假设 personObj 已存在 - 您可以为其添加这些新属性：firstname、lastname、age 以及 eyecolor：</p> <div class=\"code notranslate\"><div> person.firstname=\"John\";<br> person.lastname=\"Doe\";<br> person.age=30;<br> person.eyecolor=\"blue\";<br><br> x=person.firstname;</div></div> <p>在以上代码执行后，x 的值将是：</p> <div class=\"code notranslate\"><div> John</div></div> <br><hr> <h2>把方法添加到 JavaScript 对象</h2> <p>方法只不过是附加在对象上的函数。</p> <p>在构造器函数内部定义对象的方法：</p> <div class=\"code notranslate\"><div> function person(firstname,lastname,age,eyecolor)<br> {<br>     this.firstname=firstname;<br>     this.lastname=lastname;<br>     this.age=age;<br>     this.eyecolor=eyecolor;<br><br>     this.changeName=changeName;<br>     function changeName(name)<br>     {<br>           this.lastname=name;<br>     }<br> }</div></div> <p>changeName() 函数 name 的值赋给 person 的 lastname 属性。 </p> <div class=\"example\"> <h2 class=\"example\">现在您可以试一下：</h2> <div class=\"example_code notranslate\"> myMother.changeName(\"Doe\");</div> <br><a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_create_object3\">尝试一下 »</a> </div> <hr> <h2>JavaScript 类</h2> <p>JavaScript 是面向对象的语言，但 JavaScript 不使用类。</p> <p>在 JavaScript 中，不会创建类，也不会通过类来创建对象（就像在其他面向对象的语言中那样）。</p> <p>JavaScript 基于 prototype，而不是基于类的。</p> <hr> <h2>JavaScript for...in 循环</h2> <p>JavaScript for...in 语句循环遍历对象的属性。</p> <h3>语法</h3> <div class=\"code notranslate\"><div> for (variable in object)<br> {<br>   code to be executed<br> }</div></div> <p><strong>注意： </strong>for...in 循环中的代码块将针对每个属性执行一次。</p> <h3>实例</h3> <p>循环遍历对象的属性：</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code notranslate\"> var person={fname:\"John\",lname:\"Doe\",age:25}; <br> <br> for (x in person)<br>  {<br>   txt=txt + person[x];<br>   }</div> <br> <a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_object_for_in\" class=\"tryitbtn\">尝试一下 »</a></div><div>下面给出一个完整简易的dictionary实现。注意其外部使用了function，内部使用了Object对象的动态添加属性的一些特性。</div><p>请仔细研究并考察其用法：<a target=\"_blank\" href=\"//www.w3cschool.cn/tryrun/showhtml/tryjs_output_objects\">尝试一下 »</a><br></p><h2>相关文章</h2><p>轻松学习 JavaScript：<a href=\"https://www.w3cschool.cn/wkjavascript/sbkz1o93.html\" target=\"_blank\">JavaScript 对象概述</a></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 6,
      "parent_sort_index": 3,
      "chapter_level_one_id": "69eabcab5295ef968ae2f287577361d6",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JS HTML DOM",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "7fba9b5edb6ef5398d1646874377bedb",
      "chapter_level_two_parent_id": "69eabcab5295ef968ae2f287577361d6",
      "chapter_level_two_name": "HTML DOM 元素",
      "chapter_level_two_url": "/javascript/js-htmldom-elements.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2><span class=\"color_h1\">JavaScript HTML DOM 元素(节点)</span> </h2> <hr> <p class=\"intro\">创建新的 HTML 元素</p><p>在文档对象模型 (DOM) 中，每个节点都是一个对象。DOM 节点有三个重要的属性，分别是：</p><p></p><ol><li>nodeName : 节点的名称<br></li><li>nodeValue ：节点的值<br></li><li>nodeType ：节点的类型<br></li></ol><p></p> <hr> <h2>创建新的 HTML 元素</h2><p>如需向 HTML DOM 添加新元素，您必须首先创建该元素（元素节点），然后向一个已存在的元素追加该元素。 </p> <div class=\"example\"> <h2 class=\"example\"> 实例</h2> <div class=\"example_code notranslate\"> &lt;div id=\"div1\"&gt;<br> &lt;p id=\"p1\"&gt;This is a paragraph.&lt;/p&gt;<br> &lt;p id=\"p2\"&gt;This is another paragraph.&lt;/p&gt;<br> &lt;/div&gt;<br><br>&lt;script&gt;<br> var para=document.createElement(\"p\");<br> var node=document.createTextNode(\"This is new.\");<br> para.appendChild(node);<br><br> var element=document.getElementById(\"div1\");<br> element.appendChild(para);<br> &lt;/script&gt;</div> <br><a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_elementcreate\">尝试一下 »</a> </div> <br><hr> <h2>例子解析： </h2> <p>这段代码创建新的&lt;p&gt; 元素：</p><div class=\"code notranslate\"><div> var para=document.createElement(\"p\");</div></div> <p>如需向 &lt;p&gt; 元素添加文本，您必须首先创建文本节点。这段代码创建了一个文本节点：<span style='background-color: rgb(239, 239, 239); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'> </span></p><div class=\"code notranslate\"><div> var node=document.createTextNode(\"This is a new paragraph.\");</div></div> <p>然后您必须向 &lt;p&gt; 元素追加这个文本节点：</p><div class=\"code notranslate\"><div> para.appendChild(node);</div></div> <p>最后您必须向一个已有的元素追加这个新元素。 </p> <p>这段代码找到一个已有的元素：</p><div class=\"code notranslate\"><div> var element=document.getElementById(\"div1\");</div></div> <p>以下代码在已存在的元素后添加新元素：</p><div class=\"code notranslate\"><div> element.appendChild(para);</div></div> <br><hr> <h2>删除已有的 HTML 元素</h2> <p>以下代码将已有的元素删除：</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code notranslate\"> &lt;div id=\"div1\"&gt;<br> &lt;p id=\"p1\"&gt;This is a paragraph.&lt;/p&gt;<br> &lt;p id=\"p2\"&gt;This is another paragraph.&lt;/p&gt;<br> &lt;/div&gt;<p>&lt;script&gt;<br> var parent=document.getElementById(\"div1\");<br> var child=document.getElementById(\"p1\");<br> parent.removeChild(child);<br> &lt;/script&gt;</p> </div> <br><a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_elementremove\">尝试一下 »</a> </div> <br><hr> <h2>实例解析 </h2> <p>这个 HTML 文档含有拥有两个子节点（两个 &lt;p&gt; 元素）的 &lt;div&gt; 元素：</p><div class=\"code notranslate\"><div> &lt;div id=\"div1\"&gt;<br> &lt;p id=\"p1\"&gt;This is a paragraph.&lt;/p&gt;<br> &lt;p id=\"p2\"&gt;This is another paragraph.&lt;/p&gt;<br> &lt;/div&gt;</div></div> <p>找到 id=\"div1\" 的元素：</p><div class=\"code notranslate\"><div> var parent=document.getElementById(\"div1\");</div></div> <p>找到 id=\"p1\" 的 &lt;p&gt; 元素：</p><div class=\"code notranslate\"><div> var child=document.getElementById(\"p1\");</div></div> <p>从父元素中删除子元素：</p><div class=\"code notranslate\"><div> parent.removeChild(child);</div></div> <br><table class=\"lamp  \"><tbody><tr> <th width=\"34\"><img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" width=\"32\" height=\"32\" alt=\"lamp\"></th> <td>如果能够在不引用父元素的情况下删除某个元素，就太好了。<br>不过很遗憾。DOM 需要清楚您需要删除的元素，以及它的父元素。</td> </tr></tbody></table> <p>这是常用的解决方案：找到您希望删除的子元素，然后使用其 parentNode 属性来找到父元素：<span style='background-color: rgb(239, 239, 239); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'> </span></p><div class=\"code notranslate\"><div class=\"auto-style1\"> var child=document.getElementById(\"p1\");<br>child.parentNode.removeChild(child);</div></div> <br><hr> <h2>HTML DOM 教程</h2> <p>在我们的 JavaScript 教程的 HTML DOM 部分，您已经学到了：</p> <ul> <li>如何改变 HTML 元素的内容 (innerHTML)</li> <li>如何改变 HTML 元素的样式 (CSS)</li> <li>如何对 HTML DOM 事件作出反应</li> <li>如何添加或删除 HTML 元素</li> </ul> <p>如果您希望学到更多有关使用 JavaScript 访问 HTML DOM 的知识，请访问我们完整的 <a href=\"/htmldom/htmldom-tutorial.html\" title=\"HTML DOM 教程\">HTML DOM 教程</a>。</p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 5,
      "parent_sort_index": 3,
      "chapter_level_one_id": "69eabcab5295ef968ae2f287577361d6",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JS HTML DOM",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "0c54431463b43f6ab8d6ad762bc0e24f",
      "chapter_level_two_parent_id": "69eabcab5295ef968ae2f287577361d6",
      "chapter_level_two_name": "HTML DOM EventListener",
      "chapter_level_two_url": "/javascript/js-htmldom-eventlistener.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2><span class=\"color_h1\">JavaScript HTML DOM EventListener</span> </h2> \n<hr>\n <h2> addEventListener() 方法</h2> \n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <p>当用户点击按钮时触发监听事件：</p>\n    <div class=\"example_code\">document.getElementById(\"myBtn\").addEventListener(\"click\", displayDate);</div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_addeventlistener_displaydate\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<p>addEventListener() 方法用于向指定元素添加事件句柄。</p>\n<p>addEventListener() 方法添加的事件句柄不会覆盖已存在的事件句柄。</p>\n<p>你可以向一个元素添加多个事件句柄。</p>\n<p>你可以向同个元素添加多个同类型的事件句柄，如：两个 \"click\" 事件。</p>\n<p>你可以向任何 DOM 对象添加事件监听，不仅仅是 HTML 元素。如： window 对象。</p>\n<p>addEventListener() 方法可以更简单的控制事件（冒泡与捕获）。</p>\n<p>当你使用 addEventListener() 方法时, JavaScript 从 HTML 标记中分离开来，可读性更强， 在没有控制HTML标记时也可以添加事件监听。</p>\n<p>你可以使用 removeEventListener() 方法来移除事件的监听。\n    <br>\n</p>\n<hr>\n <h2>语法</h2> \n<div class=\"code\"> <em>element</em>.addEventListener(<em>event, function, useCapture</em>);</div>\n<p>第一个参数是事件的类型 (如 \"click\" 或 \"mousedown\").</p>\n<p>第二个参数是事件触发后调用的函数。</p>\n<p>第三个参数是个布尔值用于描述事件是冒泡还是捕获。该参数是可选的。</p>\n<table class=\"lamp   \">\n    <tbody>\n        <tr>\n            <th style=\"width:34px\">\n                <img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" alt=\"Note\" style=\"height:32px;width:32px\">\n            </th>\n            <td>注意:不要使用 \"on\" 前缀。 例如，使用 \"click\" ,而不是使用 \"onclick\"。</td>\n        </tr>\n    </tbody>\n</table>\n<br>\n<hr>\n <h2>向原元素添加事件句柄</h2> \n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <p>当用户点击元素时弹出 \"Hello World!\" :</p>\n    <div class=\"example_code\"> <em>element</em>.addEventListener(\"click\", function(){ alert(\"Hello World!\"); });</div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_addeventlistener_add\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<p>你可以使用函数名，来引用外部函数:</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <p>当用户点击元素时弹出 \"Hello World!\" :</p>\n    <div class=\"example_code\"> <em>element</em>.addEventListener(\"click\", myFunction);\n        <br>\n        <br>function myFunction() {\n        <br>    alert (\"Hello World!\");\n        <br>}</div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_addeventlistener_add2\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>向同一个元素中添加多个事件句柄</h2> \n<p>addEventListener() 方法允许向同个元素添加多个事件，且不会覆盖已存在的事件：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code\"> <em>element</em>.addEventListener(\"click\", myFunction);\n        <br><em>element</em>.addEventListener(\"click\", mySecondFunction);\n        <br>\n    </div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_addeventlistener_add_many\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<p>你可以向同个元素添加不同类型的事件：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code\"> <em>element</em>.addEventListener(\"mouseover\", myFunction);\n        <br><em>element</em>.addEventListener(\"click\", mySecondFunction);\n        <br><em>element</em>.addEventListener(\"mouseout\", myThirdFunction);</div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_addeventlistener_add_many2\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<p><b> 提示：</b>你可以在本站的<a href=\"https://www.w3cschool.cn/jsref/met-document-addeventlistener.html\" target=\"_blank\"> HTML DOM addEventListener() 方法</a>部分获得更多有关addEventListener()方法的信息！</p>\n<br>\n<hr>\n <h2>向 Window 对象添加事件句柄</h2> \n<p>addEventListener() 方法允许你在 HTML DOM 对象添加事件监听， HTML DOM 对象如： HTML 元素, HTML 文档, window 对象。或者其他支出的事件对象如: xmlHttpRequest 对象。</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <p>当用户重置窗口大小时添加事件监听：</p>\n    <div class=\"example_code\">window.addEventListener(\"resize\", function(){\n        <br>    document.getElementById(\"demo\").innerHTML = <em>sometext</em>;\n        <br>});</div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_addeventlistener_dom\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>传递参数</h2> \n<p>当传递参数值时，使用\"匿名函数\"调用带参数的函数：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code\"> <em>element</em>.addEventListener(\"click\", function(){ myFunction(p1, p2); });</div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_addeventlistener_parameters\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>事件冒泡或事件捕获？</h2> \n<p>事件传递有两种方式：冒泡与捕获。</p>\n<p>事件传递定义了元素事件触发的顺序。 如果你将 &lt;p&gt; 元素插入到 &lt;div&gt; 元素中，用户点击 &lt;p&gt; 元素, 哪个元素的 \"click\" 事件先被触发呢？</p>\n<p>在冒泡中，内部元素的事件会先被触发，然后再触发外部元素，即： &lt;p&gt; 元素的点击事件先触发，然后会触发 &lt;div&gt; 元素的点击事件。</p>\n<p>在捕获中，外部元素的事件会先被触发，然后才会触发内部元素的事件，即： &lt;div&gt; 元素的点击事件先触发 ，然后再触发 &lt;p&gt; 元素的点击事件。</p>\n<p>addEventListener() 方法可以指定 \"useCapture\" 参数来设置传递类型：</p>\n<div class=\"code\">addEventListener(<em>event</em>, <em>function</em>, <span class=\"marked\"><em>useCapture</em></span>);</div>\n<p>默认值为 false, 即冒泡传递，当值为 true 时, 事件使用捕获传递。</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code\">document.getElementById(\"myDiv\").addEventListener(\"click\", myFunction, true);</div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_addeventlistener_usecapture\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<p><b>提示：</b>DOM事件流同时支持两种事件模型：捕获型事件和冒泡型事件，捕获型事件首先发生。捕获型事件和冒泡型事件会触及DOM中的所有对象，从document对象开始，也在document对象结束。</p>\n<hr>\n <h2> removeEventListener() 方法</h2> \n<p>removeEventListener() 方法移除由 addEventListener() 方法添加的事件句柄:</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code\"> <em>element</em>.removeEventListener(\"mousemove\", myFunction);</div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_addeventlistener_remove\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>浏览器支持</h2> \n<p>表格中的数字表示支持该方法的第一个浏览器的版本号。</p>\n<table class=\"browserref   \">\n    <tbody>\n        <tr>\n            <th style=\"width:20%;font-size:16px;text-align:left\">方法</th>\n            <th style=\"width:16%\" class=\"bsChrome\" title=\"Chrome\"> </th>\n            <th style=\"width:16%\" class=\"bsIE\" title=\"Internet Explorer\"> </th>\n            <th style=\"width:16%\" class=\"bsFirefox\" title=\"Firefox\"> </th>\n            <th style=\"width:16%\" class=\"bsSafari\" title=\"Safari\"> </th>\n            <th style=\"width:16%\" class=\"bsOpera\" title=\"Opera\"> </th>\n        </tr>\n        <tr>\n            <td style=\"text-align:left\">addEventListener()</td>\n            <td>1.0</td>\n            <td>9.0</td>\n            <td>1.0</td>\n            <td>1.0</td>\n            <td>7.0</td>\n        </tr>\n        <tr>\n            <td style=\"text-align:left\">removeEventListener()</td>\n            <td>1.0</td>\n            <td>9.0</td>\n            <td>1.0</td>\n            <td>1.0</td>\n            <td>7.0</td>\n        </tr>\n    </tbody>\n</table>\n<p><strong>注意：</strong> IE 8 及更早 IE 版本，Opera 7.0及其更早版本不支持 addEventListener() 和 removeEventListener() 方法。但是，对于这类浏览器版本可以使用 detachEvent() 方法来移除事件句柄:</p>\n<div class=\"code\"><em>element.attachEvent(event, function);</em><div><em>element.detachEvent(event, function);</em> <br></div></div>\n<br>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <p>跨浏览器解决方法:</p>\n    <div class=\"example_code\">var x = document.getElementById(\"myBtn\");\n        <br>if (x.addEventListener) {                    // 所有主流浏览器，除了 IE 8 及更早版本\n        <br>    x.addEventListener(\"click\", myFunction);\n        <br>} else if (x.attachEvent) {                  // IE 8 及更早版本\n        <br>    x.attachEvent(\"onclick\", myFunction);\n        <br>}</div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_addeventlistener_crossbrowser\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>HTML DOM 事件对象参考手册</h2> \n<p>所有 HTML DOM 事件，可以查看我们完整的<a href=\"/jsref/dom-obj-event.html\"> HTML DOM Event 对象参考手册</a>。</p><p><br></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 4,
      "parent_sort_index": 3,
      "chapter_level_one_id": "69eabcab5295ef968ae2f287577361d6",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JS HTML DOM",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "b2a6cd8ecba6de280309f02d7f4ed336",
      "chapter_level_two_parent_id": "69eabcab5295ef968ae2f287577361d6",
      "chapter_level_two_name": "HTML DOM 事件",
      "chapter_level_two_url": "/javascript/js-htmldom-events.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2><span class=\"color_h1\">JavaScript HTML DOM 事件</span> </h2> \n<hr>\n<p class=\"intro\">HTML DOM 使 JavaScript 有能力对 HTML 事件做出反应。</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code\">\n        <div style=\"width:100%;height:140px;\">\n            <div style=\"background-color:#D94A38;width:170px;height:80px;margin:20px;padding-top:20px;color:#ffffff;font-weight:bold;font-size:18px;float:left;text-align:center;\" onmouseover=\"this.innerHTML='Thank You'\" onmouseout=\"this.innerHTML='Mouse Over Me'\">Mouse Over Me</div>\n            <div style=\"background-color:#D94A38;width:170px;height:80px;margin:20px;padding-top:20px;color:#ffffff;font-weight:bold;font-size:18px;float:left;text-align:center;\" onclick=\"clickMeEvent(this)\">Click Me</div>\n        </div>\n    </div>\n</div>\n<br>\n<hr>\n <h2>对事件做出反应</h2> \n<p>我们可以在事件发生时执行 JavaScript，比如当用户在 HTML 元素上点击时。</p>\n<p>如需在用户点击某个元素时执行代码，请向一个 HTML 事件属性添加 JavaScript 代码：<span style='background-color: rgb(239, 239, 239); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'>    </span><span style='background-color: rgb(239, 239, 239); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'>    </span>\n\n</p>\n<div class=\"code\">\n    <div>onclick=<em>JavaScript</em> \n    </div>\n</div>\n<p>HTML 事件的例子：</p>\n<ul>\n    <li>当用户点击鼠标时</li>\n    <li>当网页已加载时</li>\n    <li>当图像已加载时</li>\n    <li>当鼠标移动到元素上时</li>\n    <li>当输入字段被改变时</li>\n    <li>当提交 HTML 表单时</li>\n    <li>当用户触发按键时</li>\n</ul>\n<p>在本例中，当用户在 &lt;h1&gt; 元素上点击时，会改变其内容：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code\">&lt;!DOCTYPE html&gt;\n        <br>&lt;html&gt;\n        <br>&lt;body&gt;\n        <br>&lt;h1 onclick=\"this.innerHTML='Ooops!'\"&gt;点击文本!&lt;/h1&gt;\n        <br>&lt;/body&gt;\n        <br>&lt;/html&gt;</div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/trydhtml_event_onclick2\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<p>本例从事件处理器调用一个函数：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code\">&lt;!DOCTYPE html&gt;\n        <br>&lt;html&gt;\n        <br>&lt;head&gt;\n        <br>&lt;script&gt;\n        <br>function changetext(id)\n        <br>{\n        <br>id.innerHTML=\"Ooops!\";\n        <br>}\n        <br>&lt;/script&gt;\n        <br>&lt;/head&gt;\n        <br>&lt;body&gt;\n        <br>&lt;h1 onclick=\"changetext(this)\"&gt;Click on this text!&lt;/h1&gt;\n        <br>&lt;/body&gt;\n        <br>&lt;/html&gt;</div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/trydhtml_event_onclick3\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>HTML 事件属性</h2> \n<p>如需向 HTML 元素分配 事件，您可以使用事件属性。</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <p class=\"example\">向 button 元素分配 onclick 事件：</p>\n    <div class=\"example_code\">&lt;button <span class=\"marked\">onclick</span>=\"<span class=\"marked\">displayDate()</span>\"&gt;点我&lt;/button&gt;</div>\n    <br><a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_events1\">尝试一下 »</a> \n</div>\n<p>在上面的例子中，名为 displayDate 的函数将在按钮被点击时执行。</p>\n<hr>\n <h2>使用 HTML DOM 来分配事件</h2> \n<p>HTML DOM 允许您使用 JavaScript 来向 HTML 元素分配事件：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <p class=\"example\">向 button 元素分配 onclick 事件：</p>\n    <div class=\"example_code\">document.getElementById(\"myBtn\").<span class=\"marked\">onclick</span>=function(){<span class=\"marked\">displayDate()</span>};\n<br></div>\n    <br> <a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_events2\">尝试一下 »</a> \n</div>\n<p>在上面的例子中，名为 displayDate 的函数被分配给 id=myBtn\" 的 HTML 元素。</p>\n<p>按钮点击时Javascript函数将会被执行。</p>\n<hr>\n <h2>onload 和 onunload 事件</h2> \n<p>onload 和 onunload 事件会在用户进入或离开页面时被触发。</p>\n<p>onload 事件可用于检测访问者的浏览器类型和浏览器版本，并基于这些信息来加载网页的正确版本。</p>\n<p>onload 和 onunload 事件可用于处理 cookie。</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code\">&lt;body <span class=\"marked\">onload</span>=\"checkCookies()\"&gt;</div>\n    <br><a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_events_onload\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>onchange 事件</h2> \n<p>onchange 事件常结合对输入字段的验证来使用。</p>\n<p>下面是一个如何使用 onchange 的例子。当用户改变输入字段的内容时，会调用 upperCase() 函数。</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code\">&lt;input type=\"text\" id=\"fname\" <span class=\"marked\">onchange</span>=\"upperCase()\"&gt;</div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_onchange\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>onmouseover 和 onmouseout 事件</h2> \n<p>onmouseover 和 onmouseout 事件可用于在用户的鼠标移至 HTML 元素上方或移出元素时触发函数。</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <p>一个简单的 onmouseover-onmouseout 实例：</p>\n    <div class=\"example_code\">\n        <div style=\"width:100%;height:140px;\">\n            <div style=\"background-color:#D94A38;width:170px;height:80px;margin:20px;padding-top:20px;color:#ffffff;font-weight:bold;font-size:18px;float:left;text-align:center;\">Mouse Over Me</div>\n        </div>\n    </div>\n    <br><a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_events_mouseover\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>onmousedown、onmouseup 以及 onclick 事件</h2> \n<p>onmousedown, onmouseup 以及 onclick 构成了鼠标点击事件的所有部分。首先当点击鼠标按钮时，会触发 onmousedown 事件，当释放鼠标按钮时，会触发 onmouseup 事件，最后，当完成鼠标点击时，会触发 onclick 事件。</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <p>一个简单的 onmousedown-onmouseup 实例：</p>\n    <div class=\"example_code\">\n        <div style=\"width:100%;height:140px;\">\n            <div style=\"background-color: rgb(217, 74, 56); width: 170px; height: 80px; margin: 20px; padding-top: 20px; color: rgb(255, 255, 255); font-weight: bold; font-size: 18px; float: left; text-align: center;\">Thank You</div>\n        </div>\n    </div>\n    <br><a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryhtmldom_events_mousedown\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>更多实例</h2> \n<p><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/trydhtml_event_onmousedown\">onmousedown 和onmouseup</a> \n    <br>当用户按下鼠标按钮时，更换一幅图像。</p>\n<p><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/trydhtml_event_onload\">onload</a> \n    <br>当页面完成加载时，显示一个提示框。</p>\n<p><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjsref_onfocus\">onfocus</a> \n    <br>当输入字段获得焦点时，改变其背景色。</p>\n<p><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/trydhtml_event_onmouse\">鼠标事件</a> \n    <br>当指针移动到元素上方时，改变其颜色；当指针移出文本后，会再次改变其颜色。</p>\n<hr>\n\n<h2>相关知识</h2>\n\n<p>JavaScript 和 HTML 参考手册：<a href=\"https://www.w3cschool.cn/jsref/dom-obj-event.html\" target=\"_blank\">HTML DOM事件对象</a>\n\n</p></div>\r\n<script type=\"application/javascript\">\r\n\t<!--\r\n\tfunction clickMeEvent(obj)\r\n\t{\r\n\tif (obj.innerHTML==\"Goodbye\")\r\n\t\t{\r\n\t\tobj.style.display=\"none\";\r\n\t\t}\r\n\telse if (obj.innerHTML==\"Thank You\")\r\n\t\t{\r\n\t\tobj.innerHTML=\"Goodbye\";\t\t\r\n\t\t}\r\n\telse if (obj.innerHTML==\"Click Me<br>Click Me Again<br>And Again\")\r\n\t\t{\r\n\t\tobj.innerHTML=\"Thank You\";\t\t\r\n\t\t}\r\n\telse if (obj.innerHTML==\"Click Me<br>Click Me Again\")\r\n\t\t{\r\n\t\tobj.innerHTML=obj.innerHTML+\"<br>And Again\";\t\t\r\n\t\t}\r\n\telse\r\n\t\t{\r\n\t\tobj.innerHTML=obj.innerHTML+\"<br>Click Me Again\";\r\n\t\t}\r\n\t}\r\n\t//-->\r\n\t</script><div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 3,
      "parent_sort_index": 3,
      "chapter_level_one_id": "69eabcab5295ef968ae2f287577361d6",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JS HTML DOM",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "54b9f6356138fbe71526962edf1e3743",
      "chapter_level_two_parent_id": "69eabcab5295ef968ae2f287577361d6",
      "chapter_level_two_name": "HTML DOM 改变 CSS",
      "chapter_level_two_url": "/javascript/js-htmldom-css.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2><span class=\"color_h1\">JavaScript HTML DOM - 改变CSS</span> </h2> \n<hr>\n<p class=\"intro\">HTML DOM 允许 JavaScript 改变 HTML 元素的样式。</p>\n<hr>\n <h2>改变 HTML 样式</h2> \n<p>如需改变 HTML 元素的样式，请使用这个语法：<span style='background-color: rgb(239, 239, 239); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'>    </span></p><div class=\"code notranslate\"><div>document.getElementById(<em>id</em>).style.<em>property</em>=<em>new style</em>    </div></div>\n<p>下面的例子会改变 &lt;p&gt; 元素的样式：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">&lt;html&gt;\n        <br>&lt;body&gt;\n        <br>\n        <br>&lt;p id=\"p2\"&gt;Hello World!&lt;/p&gt;\n        <br>\n        <br>&lt;script&gt;\n        <br>document.getElementById(\"p2\").style.color=\"blue\";\n        <br>&lt;/script&gt;\n        <br>\n        <br>&lt;p&gt;The paragraph above was changed by a script.&lt;/p&gt;\n        <br>\n        <br>&lt;/body&gt;\n        <br>&lt;/html&gt;</div>\n    <br><a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_change_style\">尝试一下 »</a> \n</div>\n<p>本例改变了 id=\"id1\" 的 HTML 元素的样式，当用户点击按钮时：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">&lt;!DOCTYPE html&gt;\n        <br>&lt;html&gt;\n        <br>&lt;body&gt;\n        <br>\n        <br>&lt;h1 id=\"id1\"&gt;My Heading 1&lt;/h1&gt;\n        <br>&lt;button type=\"button\"\n        <br>onclick=\"document.getElementById('id1').style.color='red'\"&gt;\n        <br>Click Me!&lt;/button&gt;\n        <br>\n        <br>&lt;/body&gt;\n        <br>&lt;/html&gt;</div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/trydhtml_dom_color2\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>更多实例</h2> \n<p><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/trydhtml_visibility\">Visibility</a>\n    <br>如何使元素不可见。您希望元素显示或消失吗？</p><hr>\n<h2>参考文章</h2>\n<p>JavaScript 和 HTML 参考手册：<a href=\"https://www.w3cschool.cn/jsref/dom-obj-style.html\" target=\"_blank\">Style 对象</a>\n</p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 2,
      "parent_sort_index": 3,
      "chapter_level_one_id": "69eabcab5295ef968ae2f287577361d6",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JS HTML DOM",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "d5ab80abbd3b6e9fd4d38fa377a7022d",
      "chapter_level_two_parent_id": "69eabcab5295ef968ae2f287577361d6",
      "chapter_level_two_name": "HTML DOM 改变 HTML 内容",
      "chapter_level_two_url": "/javascript/js-htmldom-html.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><div class=\"article-body\"><div class=\"article-intro\" id=\"content\"><h2><span class=\"color_h1\">JavaScript HTML DOM - 改变 HTML</span></h2><hr><p class=\"intro\">HTML DOM 允许 JavaScript 改变 HTML 元素的内容。</p><hr><h2>改变 HTML 输出流</h2><p>JavaScript 能够创建动态的 HTML 内容：</p><p><strong>今天的日期是： <br>Thu Feb 25 2016 19:25:10 GMT+0800</strong></p><p>在 JavaScript 中，<a href=\"https://www.w3cschool.cn/jsref/met-doc-write.html\" target=\"_blank\">document.write()</a> 可用于直接向 HTML 输出流写内容。</p><div class=\"example\"><h2 class=\"example\">实例</h2><div class=\"example_code notranslate\">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;body&gt;<br><br>&lt;script&gt;<br>document.write(Date());<br>&lt;/script&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;</div><br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/trydhtml_date\" class=\"tryitbtn\">尝试一下 »</a></div><br><table class=\"lamp   \"><tbody><tr class=\"firstRow\"><th width=\"34\"><img src=\"https://atts.w3cschool.cn/attachments/image/20160225/1456400088158632.jpg\" alt=\"lamp\" height=\"32\" width=\"32\"></th><td>绝对不要在文档加载完成之后使用 document.write()。这会覆盖该文档。</td></tr></tbody></table><br><hr><h2>改变 HTML 内容</h2><p>修改 HTML 内容的最简单的方法是使用 <a href=\"https://www.w3cschool.cn/jsref/prop-html-innerhtml.html\" target=\"_blank\">innerHTML 属性</a>。</p><p>如需改变 HTML 元素的内容，请使用这个语法：</p><div class=\"code notranslate\"><div>document.getElementById(<em>id</em>).innerHTML=<em>new HTML</em></div></div><p>本例改变了 &lt;p&gt;元素的内容：</p><div class=\"example\"><h2 class=\"example\">实例</h2><div class=\"example_code notranslate\">&lt;html&gt;<br>&lt;body&gt;<br><br>&lt;p id=\"p1\"&gt;Hello World!&lt;/p&gt;<br><br>&lt;script&gt;<br>document.getElementById(\"p1\").innerHTML=\"New text!\";<br>&lt;/script&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;</div><br><a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_change_innerhtml\">尝试一下 »</a></div><p>本例改变了 &lt;h1&gt; 元素的内容：</p><div class=\"example\"><h2 class=\"example\">实例</h2><div class=\"example_code notranslate\">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;body&gt;<br><br>&lt;h1 id=\"header\"&gt;Old Header&lt;/h1&gt;<br><br>&lt;script&gt;<br>\tvar element=document.getElementById(\"header\");<br>element.innerHTML=\"New Header\";<br>&lt;/script&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;</div><br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/trydhtml_dom_innertext\" class=\"tryitbtn\">尝试一下 »</a></div><p>实例讲解：</p><ul class=\" list-paddingleft-2\"><li><p>上面的 HTML 文档含有 id=\"header\" 的 &lt;h1&gt; 元素</p></li><br><li><p>我们使用 HTML DOM 来获得 id=\"header\" 的元素</p></li><br><li><p>JavaScript 更改此元素的内容 (innerHTML)</p></li><br></ul><hr><h2>改变 HTML 属性</h2><p>如需改变 HTML 元素的属性，请使用这个语法：</p><div class=\"code notranslate\"><div>document.getElementById(<em>id</em>).<em>attribute=new value</em></div></div><p>本例改变了 &lt;img&gt; 元素的 src 属性：</p><div class=\"example\"><h2 class=\"example\">实例</h2><div class=\"example_code notranslate\">&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;body&gt;<br><br>&lt;img id=\"image\" src=\"smiley.gif\"&gt;<br><br>&lt;script&gt;<br>document.getElementById(\"image\").src=\"landscape.jpg\";<br>&lt;/script&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;</div><br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/trydhtml_dom_image\" class=\"tryitbtn\">尝试一下 »</a></div><p>实例讲解：</p><ul class=\" list-paddingleft-2\"><li><p>上面的 HTML 文档含有 id=\"image\" 的 &lt;img&gt; 元素</p></li><li><p>我们使用 HTML DOM 来获得 id=\"image\" 的元素</p></li><li><p>JavaScript 更改此元素的属性（把 \"smiley.gif\" 改为 \"landscape.jpg\"）</p></li></ul></div></div></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 1,
      "parent_sort_index": 3,
      "chapter_level_one_id": "69eabcab5295ef968ae2f287577361d6",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JS HTML DOM",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "fb02ddeda7486d7abce3c818ea1374f9",
      "chapter_level_two_parent_id": "69eabcab5295ef968ae2f287577361d6",
      "chapter_level_two_name": "HTML DOM",
      "chapter_level_two_url": "/javascript/js-htmldom.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2><span class=\"color_h1\">JavaScript HTML DOM</span> </h2> <hr> <p class=\"intro\">通过 HTML DOM，可访问 JavaScript HTML 文档的所有元素。</p> <hr> <h2>HTML DOM (文档对象模型)</h2> <p>当网页被加载时，浏览器会创建页面的文档对象模型（Document Object Model）。</p><p>HTML DOM 定义了用于 HTML 的一系列标准的对象，以及访问和处理 HTML 文档的标准方法。通过 DOM，你可以访问所有的 HTML 元素，连同它们所包含的文本和属性。</p><p>HTML DOM 独立于平台和编程语言。它可被任何编程语言诸如 Java、JavaScript 和 VBScript 使用。</p> <p><strong>HTML DOM</strong> 模型被构造为<strong>对象</strong>的树：</p> <div class=\"example\"> <h2 class=\"example_head\"> HTML DOM 树</h2> <div class=\"example_code notranslate\" style=\"text-align:center\"> <img border=\"0\" src=\"https://7n.w3cschool.cn/statics/images/course/pic_htmltree.gif\" alt=\"DOM HTML tree\" width=\"486\" height=\"266\"> </div> </div> <p>通过可编程的对象模型，JavaScript 获得了足够的能力来创建动态的 HTML。 </p> <ul> <li>JavaScript 能够改变页面中的所有 HTML 元素</li> <li>JavaScript 能够改变页面中的所有 HTML 属性</li> <li>JavaScript 能够改变页面中的所有 CSS 样式</li> <li>JavaScript 能够对页面中的所有事件做出反应</li> </ul> <hr> <h2>查找 HTML 元素</h2> <p>通常，通过 JavaScript，您需要操作 HTML 元素。</p> <p>为了做到这件事情，您必须首先找到该元素。有三种方法来做这件事：</p> <ul> <li>通过 id 找到 HTML 元素</li> <li>通过标签名找到 HTML 元素</li> <li>通过类名找到 HTML 元素</li> </ul> <hr> <h2>通过 id 查找 HTML 元素</h2> <p>在 DOM 中查找 HTML 元素的最简单的方法，是通过使用元素的 id。</p> <p>本例查找 id=\"intro\" 元素：</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code\"> var x=document.getElementById(\"intro\"); </div> <br><a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_dom_getelementbyid\">尝试一下 »</a> </div> <p>如果找到该元素，则该方法将以对象（在 x 中）的形式返回该元素。</p> <p>如果未找到该元素，则 x 将包含 null。</p> <hr> <h2>通过标签名查找 HTML 元素</h2> <p>本例查找 id=\"main\" 的元素，然后查找 id=\"main\" 元素中的所有 &lt;p&gt; 元素：</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code\"> var x=document.getElementById(\"main\");<br>var y=x.getElementsByTagName(\"p\"); </div> <br><a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_dom_getelementsbytagname\">尝试一下 »</a> </div> <br> <hr> <h2>通过类名找到 HTML 元素</h2> <p>本例通过 <strong><a href=\"/jsref/met-document-getelementsbyclassname.html\" target=\"_blank\">getElementsByClassName</a></strong> 函数来查找 class=\"intro\" 的元素：</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code\"> var x=document.getElementsByClassName(\"intro\"); </div> <br><a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/try_dom_getelementsbyclassname\">尝试一下 »</a> </div> <br> <hr> <h2>HTML DOM 教程</h2> <p>在本教程接下来的篇幅中，您将学到：</p> <ul> <li>如何改变 HTML 元素的内容 (innerHTML)</li> <li>如何改变 HTML 元素的样式 (CSS)</li> <li>如何对 HTML DOM 事件作出反应</li> <li>如何添加或删除 HTML 元素</li> </ul><h2>相关教程</h2><p><a href=\"https://www.w3cschool.cn/jsref/jsref-jsref-tutorialnmor1pl5.html\" target=\"_blank\">JavaScript 和 HTML DOM 参考手册</a></p><h2><b>javascript DOM知识脑图</b></h2><div><img src=\"https://atts.w3cschool.cn/attachments/image/20160809/1470709730442234.gif\" alt=\"\"><br></div></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 4,
      "parent_sort_index": 2,
      "chapter_level_one_id": "7a7a1ce0899dac66436e31947ef51973",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JS 函数",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "3b712f0f3f5c79802acc22443c0df668",
      "chapter_level_two_parent_id": "7a7a1ce0899dac66436e31947ef51973",
      "chapter_level_two_name": "JavaScript 闭包",
      "chapter_level_two_url": "/javascript/js-function-closures.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">闭包</span> </h2> <hr> <p class=\"intro\">JavaScript 变量可以是局部变量或全局变量。</p> <p class=\"intro\">私有变量可以用到闭包。</p> <hr> <h2>全局变量</h2> <p>函数可以访问函数内部定义的变量，如：</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code\"> function myFunction() {<br>     var a = 4;<br>     return a * a;<br> } </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_function_scope2\" target=\"_blank\">尝试一下 »</a> </div> <p>函数也可以访问函数外部定义的变量，如：</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code\"> var a = 4;<br>function myFunction() {<br>     return a * a;<br> } </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_function_scope1\" target=\"_blank\">尝试一下 »</a> </div> <p>后面一个实例中， <strong>a</strong> 是一个 <strong>全局</strong> 变量。 </p> <p>在web页面中全局变量属于 window 对象。</p> <p>全局变量可应用于页面上的所有脚本。</p> <p>在第一个实例中， <strong>a</strong> 是一个 <strong>局部</strong> 变量。</p> <p>局部变量只能用于定义它函数内部。对于其他的函数或脚本代码是不可用的。</p> <p>全局和局部变量即便名称相同，它们也是两个不同的变量。修改其中一个，不会影响另一个的值。 </p> <table class=\"lamp \"><tbody><tr> <th style=\"width:34px\"><img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" alt=\"Note\" style=\"height:32px;width:32px\"></th> <td>变量声明是如果不使用 <strong>var</strong> 关键字，那么它就是一个全局变量，即便它在函数内定义。</td> </tr></tbody></table> <p><b>提示：</b>请在JavaScript编程实战中练习如何<a href=\"https://www.w3cschool.cn/codecamp/global-scope-and-functions.html\" target=\"_blank\" style=\"background-color: rgb(255, 255, 255);\">定义JavaScript函数的全局变量</a>！</p><br><hr> <h2>变量生命周期</h2> <p>全局变量的作用域是全局性的，即在整个JavaScript程序中，全局变量处处都在。</p> <p>而在函数内部声明的变量，只在函数内部起作用。这些变量是局部变量，作用域是局部性的；函数的参数也是局部性的，只在函数内部起作用。</p> <hr> <h2>计数器困境</h2> <p>设想下如果你想统计一些数值，且该计数器在所有函数中都是可用的。</p> <p>你可以使用全局变量，函数设置计数器递增：</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code\"> var counter = 0;<br><br> function add() {<br>     counter += 1;<br> }<br><br> add();<br> add();<br> add();<br><br> // 计数器现在为 3 </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_function_counter\" target=\"_blank\">尝试一下 »</a> </div> <p>计数器数值在执行 add() 函数时发生变化。</p> <p>但问题来了，页面上的任何脚本都能改变计数器，即便没有调用 add() 函数。</p> <p>如果我在函数内声明计数器，如果没有调用函数将无法修改计数器的值：</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code\"> function add() {<br>     var counter = 0;<br>     counter += 1;<br> }<br><br> add();<br> add();<br> add();<br><br> // 本意是想输出 3, 但事与愿违，输出的都是 1 ! </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_function_counter2\" target=\"_blank\">尝试一下 »</a> </div> <p>以上代码将无法正确输出，每次我调用 add() 函数，计数器都会设置为 1。</p> <p><strong> JavaScript 内嵌函数可以解决该问题。</strong></p> <hr> <h2>JavaScript 内嵌函数</h2> <p>所有函数都能访问全局变量。   </p> <p>实际上，在 JavaScript 中，所有函数都能访问它们上一层的作用域。</p> <p>JavaScript 支持嵌套函数。嵌套函数可以访问上一层的函数变量。 </p> <p>该实例中，内嵌函数 <strong>plus()</strong> 可以访问父函数的 <strong>counter</strong> 变量：</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code\"> function add() {<br>     var counter = 0;<br>     function plus() {counter += 1;}<br>    plus();    <br>    return counter; <br>}</div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_function_counter1\" target=\"_blank\">尝试一下 »</a> </div> <p>如果我们能在外部访问 <strong>plus()</strong> 函数，这样就能解决计数器的困境。 </p> <p>我们同样需要确保 <strong>counter = 0</strong> 只执行一次。</p> <p><strong>我们需要闭包。</strong></p> <hr> <h2>JavaScript 闭包</h2> <p>还记得函数自我调用吗？该函数会做什么？</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code\"> var add = (function () {<br>    var counter = 0;<br>    return function () {return counter += 1;}<br>})();<br><br>add();<br> add();<br> add();<br><br> // 计数器为 3 </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_function_counter3\" target=\"_blank\">尝试一下 »</a> </div> <h2>实例解析</h2> <p>变量 <strong>add</strong> 指定了函数自我调用的返回字值。 </p> <p>自我调用函数只执行一次。设置计数器为 0。并返回函数表达式。</p> <p>add变量可以作为一个函数使用。非常棒的部分是它可以访问函数上一层作用域的计数器。 </p> <p>这个叫作 JavaScript <strong>闭包。</strong>它使得函数拥有私有变量变成可能。</p> <p>计数器受匿名函数的作用域保护，只能通过 add 方法修改。</p> <table class=\"lamp \"><tbody><tr> <th style=\"width:34px\"><img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" alt=\"Note\" style=\"height:32px;width:32px\"></th> <td>闭包是可访问上一层函数作用域里变量的函数，即便上一层函数已经关闭。</td> </tr></tbody></table><h2>相关文章参考</h2><p>JavaScript学习笔记：<a href=\"https://www.w3cschool.cn/jsnote/jsnote-closure.html\" target=\"_blank\">学习Javascript闭包</a></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 3,
      "parent_sort_index": 2,
      "chapter_level_one_id": "7a7a1ce0899dac66436e31947ef51973",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JS 函数",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "29738b619360b33db9668944a735b721",
      "chapter_level_two_parent_id": "7a7a1ce0899dac66436e31947ef51973",
      "chapter_level_two_name": "JavaScript 函数调用",
      "chapter_level_two_url": "/javascript/js-function-invocation.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">函数调用</span> </h2> <hr> <p class=\"intro\">JavaScript 函数有 4 种调用方式。</p> <p class=\"intro\">每种方式的不同在于 <strong>this</strong> 的初始化。 </p> <hr> <h2> <em><strong>this</strong></em> 关键字</h2> <p>一般而言，在Javascript中，this指向函数执行时的当前对象。</p>  <table class=\"lamp\"><tbody><tr> <th style=\"width:34px\"><img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" alt=\"Note\" style=\"height:32px;width:32px\"></th> <td>注意 <strong>this</strong> 是保留关键字，你不能修改 <strong>this</strong> 的值。</td> </tr></tbody></table><p><b>提示：</b>本站的《深入理解 JavaScript》中的 this 关键字一节你可以学到更多与<a href=\"https://www.w3cschool.cn/deep_learn_javascript/deep_learn_javascript-n8262853.html\" target=\"_blank\" style=\"background-color: rgb(255, 255, 255);\">JavaScript this 关键字</a>相关的内容！</p><br> <hr> <h2>调用 JavaScript 函数</h2> <p>在之前的章节中我们已经学会了如何创建函数。 </p> <p>函数中的代码在函数被调用后执行。</p> <hr> <h2>作为一个函数调用</h2> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code\"> function myFunction(a, b) {<br>     return a * b;<br> }<br> myFunction(10, 2);           // myFunction(10, 2) 返回 20 </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_invoke_function\" target=\"_blank\">尝试一下 »</a> </div> <p>以上函数不属于任何对象。但是在 JavaScript 中它始终是默认的全局对象。</p> <p>在 HTML 中默认的全局对象是 HTML 页面本身，所以函数是属于 HTML 页面。</p> <p>在浏览器中的页面对象是浏览器窗口(window 对象)。以上函数会自动变为 window 对象的函数。</p> <p>myFunction() 和 window.myFunction() 是一样的：</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code\"> function myFunction(a, b) {<br>     return a * b;<br> }<br>window.myFunction(10, 2);    // window.myFunction(10, 2) 返回 20 </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_invoke_function_2\" target=\"_blank\">尝试一下 »</a> </div>  <table class=\"lamp \"><tbody><tr> <th style=\"width:34px\"><img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" alt=\"Note\" style=\"height:32px;width:32px\"></th> <td>这是调用 JavaScript 函数常用的方法， 但不是良好的编程习惯 <br>全局变量，方法或函数容易造成命名冲突的bug。</td> </tr></tbody></table> <hr> <h2>全局对象</h2> <p>当函数没有被自身的对象调用时， <strong>this</strong> 的值就会变成全局对象。</p> <p>在 web 浏览器中全局对象是浏览器窗口（window 对象）。</p> <p>该实例返回 <strong>this</strong> 的值是 window 对象:</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code\"> function myFunction() {<br>     return this;<br> }<br> myFunction();                // 返回 window 对象 </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_invoke_function_3\" target=\"_blank\">尝试一下 »</a> </div>  <table class=\"lamp \"><tbody><tr> <th style=\"width:34px\"><img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" alt=\"Note\" style=\"height:32px;width:32px\"></th> <td>函数作为全局对象调用，会使 <strong>this</strong> 的值成为全局对象。<br>使用 window 对象作为一个变量容易造成程序崩溃。</td> </tr></tbody></table> <hr> <h2>函数作为方法调用</h2> <p>在 JavaScript 中你可以将函数定义为对象的方法。</p> <p>以下实例创建了一个对象 (<strong>myObject</strong>), 对象有两个属性 (<strong>firstName</strong> 和 <strong>lastName</strong>), 及一个方法 (<strong>fullName</strong>):</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code\"> var myObject = {<br>     firstName:\"John\",<br>     lastName: \"Doe\",<br>     fullName: function () {<br>         return this.firstName + \" \" + this.lastName;<br>     }<br> }<br> myObject.fullName();         // 返回 \"John Doe\" </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_invoke_method\" target=\"_blank\">尝试一下 »</a> </div> <p><strong>fullName</strong> 方法是一个函数。函数属于对象。 <strong>myObject</strong> 是函数的所有者。</p> <p> <strong>this</strong>对象，拥有 JavaScript 代码。实例中 <strong>this</strong> 的值为 <strong>myObject</strong> 对象。 </p> <p>测试一下！修改 <strong>fullName</strong> 方法并返回 <strong>this</strong> 值：</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code\"> var myObject = {<br>    firstName:\"John\",<br>     lastName: \"Doe\",<br>     fullName: function () {<br>         return this;<br>     }<br>}<br> myObject.fullName();          // 返回 [object Object] (所有者对象) </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_invoke_method_2\" target=\"_blank\">尝试一下 »</a> </div>  <table class=\"lamp \"><tbody><tr> <th style=\"width:34px\"><img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" alt=\"Note\" style=\"height:32px;width:32px\"></th> <td>函数作为对象方法调用，会使得 <strong>this</strong> 的值成为对象本身。</td> </tr></tbody></table> <hr> <h2>使用构造函数调用函数</h2> <p>如果函数调用前使用了 <strong>new</strong> 关键字, 则是调用了构造函数。</p> <p>这看起来就像创建了新的函数，但实际上 JavaScript 函数是重新创建的对象：</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code\"> // 构造函数:<br>function myFunction(arg1, arg2) {<br>     this.firstName = arg1;<br>     this.lastName  = arg2;<br> }<br><br> // This creates a new object<br> var x = new myFunction(\"John\",\"Doe\");<br> x.firstName;                             // 返回 \"John\" </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_invoke_constructor\" target=\"_blank\">尝试一下 »</a> </div> <p> 构造函数的调用会创建一个新的对象。新对象会继承构造函数的属性和方法。 </p>  <table class=\"lamp \"><tbody><tr> <th style=\"width:34px\"><img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" alt=\"Note\" style=\"height:32px;width:32px\"></th> <td>构造函数中 <strong>this</strong> 关键字没有任何的值。<br> <strong>this</strong> 的值在函数调用时实例化对象(new object)时创建。</td> </tr></tbody></table> <hr> <h2>作为函数方法调用函数</h2> <p>在 JavaScript 中, 函数是对象。JavaScript 函数有它的属性和方法。</p> <p><strong>call()</strong> 和 <strong>apply()</strong> 是预定义的函数方法。 两个方法可用于调用函数，两个方法的第一个参数必须是对象本身。 </p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code\"> function myFunction(a, b) {<br>     return a * b;<br> }<br>myFunction.call(myObject, 10, 2);      // 返回 20 </div> </div> <br><div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code\"> function myFunction(a, b) {<br>     return a * b;<br> }<br>myArray = [10,2];<br> myFunction.apply(myObject, myArray);   // 返回 20 </div> </div> <p> 两个方法都使用了对象本身作为第一个参数。 两者的区别在于第二个参数： apply传入的是一个参数数组，也就是将多个参数组合成为一个数组传入，而call则作为call的参数传入（从第二个参数开始）。 </p> <p> 在 JavaScript 严格模式(strict mode)下, 在调用函数时第一个参数会成为 <strong>this</strong> 的值， 即使该参数不是一个对象。</p> <p>在 JavaScript 非严格模式(non-strict mode)下, 如果第一个参数的值是 null 或 undefined, 它将使用全局对象替代。 </p>  <table class=\"lamp \"><tbody><tr> <th style=\"width:34px\"><img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" alt=\"Note\" style=\"height:32px;width:32px\"></th> <td>通过 call() 或 apply() 方法你可以设置 <strong>this</strong> 的值, 且作为已存在对象的新方法调用。</td></tr></tbody></table></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 2,
      "parent_sort_index": 2,
      "chapter_level_one_id": "7a7a1ce0899dac66436e31947ef51973",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JS 函数",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "b773ef7737c3980137a37e62cc81395b",
      "chapter_level_two_parent_id": "7a7a1ce0899dac66436e31947ef51973",
      "chapter_level_two_name": "JavaScript 函数参数",
      "chapter_level_two_url": "/javascript/js-function-parameters.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">函数参数</span> </h2> <hr> <p class=\"intro\">JavaScript 函数对参数的值(arguments)没有进行任何的检查。</p><p>JavaScript 函数参数与大多数其他语言的函数参数的区别在于：它不会关注有多少个参数被传递，不关注传递的参数的数据类型。</p> <hr> <h2>函数显式参数与隐藏参数(arguments)</h2> <p>在先前的教程中，我们已经学习了函数的显式参数:</p> <div class=\"example\"> <div class=\"example_code\"> <em>functionName</em>(<em>parameter1, parameter2, parameter3</em>) {<br>     <em>code to be executed</em><br> } </div> </div> <p>函数显式参数在函数定义时列出。</p> <p>函数隐藏参数(arguments)在函数调用时传递给函数真正的值。</p> <hr> <h2>参数规则</h2> <p>JavaScript 函数定义时参数没有指定数据类型。</p> <p>JavaScript 函数对隐藏参数(arguments)没有进行检测。</p> <p>JavaScript 函数对隐藏参数(arguments)的个数没有进行检测。</p> <hr> <h2>默认参数</h2> <p>如果函数在调用时缺少参数，参数会默认设置为： <strong>undefined</strong> </p> <p>有时这是可以接受的，但是建议最好为参数设置一个默认值： </p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code notranslate\"> function myFunction(x, y) {<br>     if (y === undefined) {<br>           y = 0;<br>     } <br> } </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_function_undefined\" target=\"_blank\">尝试一下 »</a> </div> <p>或者，更简单的方式：</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code notranslate\"> function myFunction(x, y) {<br>     y = y || 0;<br> } </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_function_undefined2\" target=\"_blank\">尝试一下 »</a> </div>  <table class=\"lamp clicked\"><tbody><tr> <th style=\"width:34px\"><img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" alt=\"Note\" style=\"height:32px;width:32px\"></th> <td>如果y已经定义 ， y || 0返回 y, 因为 y 是 true, 否则返回 0, 因为 undefined 为 false。</td> </tr></tbody></table> <p>如果函数调用时设置了过多的参数，参数将无法被引用，因为无法找到对应的参数名。 只能使用 arguments 对象来调用。</p> <hr> <h2> Arguments 对象</h2> <p>JavaScript 函数有个内置的对象 arguments 对象.</p> <p> argument 对象包含了函数调用的参数数组。</p> <p>通过这种方式你可以很方便的找到最后一个参数的值：</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code notranslate\"><p>x = findMax(1, 123, 500, 115, 44, 88);</p><p><br></p><p>function findMax() {</p><p>    var i, max = arguments[0];</p><p><br></p><p>    if(arguments.length &lt; 2)return max;</p><p><br></p><p>\t    for (i = 0; i &lt; arguments.length; i++) {</p><p>\t        if (arguments[i] &gt; max) {</p><p>\t            max = arguments[i];</p><p>\t        }</p><p>\t    }</p><p>    return max;</p><p>}</p></div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_function_arguments\" target=\"_blank\">尝试一下 »</a> </div> <p>或者创建一个函数用来统计所有数值的和：</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code notranslate\"> x = sumAll(1, 123, 500, 115, 44, 88);<br><br> function sumAll() {<br>     var i, sum = 0;<br>     for (i = 0; i &lt; arguments.length; i++) {<br>         sum += arguments[i];<br>     }<br>     return sum;<br> } </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_function_arguments_sum\" target=\"_blank\">尝试一下 »</a> </div> <br><hr> <h2>通过值传递参数</h2> <p>在函数中调用的参数是函数的参数。</p> <p>如果函数修改参数的值，将不会修改参数的初始值（在函数外定义）。</p><p>总结：JavaScript函数传值只是将参数的值传入函数，函数会另外配置内存保存参数值，所以并不会改变原参数的值。</p><p><b>实例</b></p><pre style=\"max-width: 100%;\"><code class=\"javascript\">var x = 1;\n// 通过值传递参数\nfunction myFunction(x) {\n    x++; //修改参数x的值，将不会修改在函数外定义的变量 x\n    console.log(x);\n}\nmyFunction(x); // 2\nconsole.log(x); // 1</code></pre> <hr> <h2>通过对象传递参数</h2> <p>在JavaScript中，可以引用对象的值。</p> <p>因此我们在函数内部修改对象的属性就会修改其初始的值。</p> <p>修改对象属性可作用于函数外部（全局变量）。</p><p><b>实例</b></p><pre style=\"max-width: 100%;\"><code class=\"javascript\">var obj = {x:1};\n// 通过对象传递参数\nfunction myFunction(obj) {\n    obj.x++; //修改参数对象obj.x的值，函数外定义的obj也将会被修改\n    console.log(obj.x);\n}\nmyFunction(obj); // 2\nconsole.log(obj.x); // 2</code></pre><p><b>提示：</b>你可以在本站的<a href=\"https://www.w3cschool.cn/codecamp/list?pename=basic_javascript_camp\" target=\"_blank\">JavaScript编程实战</a>中练习使用JavaScript函数参数！</p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 1,
      "parent_sort_index": 2,
      "chapter_level_one_id": "7a7a1ce0899dac66436e31947ef51973",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JS 函数",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "6f8db6a15df770495c4eb40dca10687e",
      "chapter_level_two_parent_id": "7a7a1ce0899dac66436e31947ef51973",
      "chapter_level_two_name": "JavaScript 函数定义",
      "chapter_level_two_url": "/javascript/js-function-definition.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">函数定义</span> </h2> \n<hr>\n<p class=\"intro\">JavaScript 使用关键字 <strong>function</strong> 定义函数。</p>\n<p class=\"intro\">函数可以通过声明定义，也可以是一个表达式。</p>\n<hr>\n <h2>函数声明</h2> \n<p>在之前的教程中，你已经了解了函数声明的语法 :<span style='background-color: rgb(239, 239, 239); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'>    </span></p><div class=\"code\"><div>function <em>functionName</em>(<em>parameters</em>) {        <br>  <em>执行的代码</em>        <br>}</div></div>\n<p>函数声明后不会立即执行，会在我们需要的时候调用到。</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code\">function myFunction(a, b) {\n        <br>    return a * b;\n        <br>}\n        <br>\n    </div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_function_return\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<br>\n<table class=\"lamp \">\n    <tbody>\n        <tr>\n            <th style=\"width:34px\">\n                <img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" alt=\"Note\" style=\"height:32px;width:32px\">\n            </th>\n            <td>分号是用来分隔可执行JavaScript语句。\n                <br>由于函数声明不是一个可执行语句，所以不以分号结束。</td>\n        </tr>\n    </tbody>\n</table>\n<hr>\n <h2>函数表达式</h2> \n<p>JavaScript 函数可以通过一个表达式定义。</p>\n<p>函数表达式可以存储在变量中：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code\">var x = function (a, b) {return a * b};</div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_function_expression\" target=\"_blank\">尝试一下 »</a> \n</div>\n<p>在函数表达式存储在变量后，变量也可作为一个函数使用：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code\">var x = function (a, b) {return a * b};\n        <br>var z = x(4, 3);</div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_function_expression_variable\" target=\"_blank\">尝试一下 »</a> \n</div>\n<p>以上函数实际上是一个 <strong>匿名函数</strong> (函数没有名称)。</p>\n<p>函数存储在变量中，不需要函数名称，通常通过变量名来调用。</p>\n<table class=\"lamp \">\n    <tbody>\n        <tr>\n            <th style=\"width:34px\">\n                <img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" alt=\"Note\" style=\"height:32px;width:32px\">\n            </th>\n            <td>上述函数以分号结尾，因为它是一个执行语句。</td>\n        </tr>\n    </tbody>\n</table>\n<br>\n<hr>\n <h2>Function() 构造函数</h2> \n<p>在以上实例中，我们了解到函数通过关键字 <strong>function</strong> 定义。</p>\n<p>函数同样可以通过内置的 JavaScript 函数构造器（Function()）定义。</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code\">var myFunction = new Function(\"a\", \"b\", \"return a * b\");\n        <br>\n        <br>var x = myFunction(4, 3);</div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_function_constructor\" target=\"_blank\">尝试一下 »</a> \n</div>\n<p>实际上，你不必使用构造函数。上面实例可以写成：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code\">var myFunction = function (a, b) {return a * b}\n        <br>\n        <br>var x = myFunction(4, 3);</div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_function_constructor2\" target=\"_blank\">尝试一下 »</a>\n</div>\n<table class=\"lamp \">\n    <tbody>\n        <tr>\n            <th style=\"width:34px\">\n                <img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" alt=\"Note\" style=\"height:32px;width:32px\">\n            </th>\n            <td>在 JavaScript 中，很多时候，你需要避免使用 <strong>new</strong> 关键字。</td>\n        </tr>\n    </tbody>\n</table>\n<br>\n<hr>\n <h2>函数提升（Hoisting）</h2> \n<p>在之前的教程中我们已经了解了 \"hoisting(提升)\"。</p>\n<p>提升（Hoisting）是 JavaScript 默认将当前作用域提升到前面去的的行为。</p>\n<p>提升（Hoisting）应用在变量的声明与函数的声明。</p>\n<p>因此，函数可以在声明之前调用：<span style='background-color: rgb(239, 239, 239); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'>    </span></p><div class=\"code\"><div>myFunction(5);               <br>function myFunction(y) {        <br>    return y * y;        <br>}</div></div>\n<p>使用表达式定义函数时无法提升。</p>\n<hr>\n <h2>自调用函数</h2> \n<p>函数表达式可以 \"自调用\"。</p>\n<p>自调用表达式会自动调用。</p>\n<p>如果表达式后面紧跟 () ，则会自动调用。</p>\n<p>Y不能自调用声明的函数。</p>\n<p>通过添加括号，来说明它是一个函数表达式：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code\">(function () {\n        <br>    var x = \"Hello!!\";      // 我将调用自己\n        <br>})();</div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_function_expression_self\" target=\"_blank\">尝试一下 »</a> \n</div>\n<p>以上函数实际上是一个 <strong>匿名自我调用的函数</strong> (没有函数名)。</p>\n<hr>\n <h2>函数可作为一个值使用</h2> \n<p>JavaScript 函数作为一个值使用：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code\">function myFunction(a, b) {\n        <br>    return a * b;\n        <br>}\n        <br>\n        <br>var x = myFunction(4, 3);</div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_function_value\" target=\"_blank\">尝试一下 »</a> \n</div>\n<p>JavaScript 函数可作为表达式使用：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code\">function myFunction(a, b) {\n        <br>    return a * b;\n        <br>}\n        <br>\n        <br>var x = myFunction(4, 3) * 2;</div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_function_value2\" target=\"_blank\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>函数是对象</h2> \n<p>在 JavaScript 中使用 <strong>typeof</strong> 操作符判断函数类型将返回 \"function\" 。</p>\n<p>但，JavaScript 函数描述为一个对象更加准确。</p>\n<p>JavaScript 函数有 <strong>属性</strong> 和 <strong> 方法</strong>。</p>\n<p>arguments.length 属性返回函数调用过程接收到的参数个数：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code\">function myFunction(a, b) {\n        <br>    return arguments.length;\n        <br>}</div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_function_length\" target=\"_blank\">尝试一下 »</a> \n</div>\n<p>toString() 方法将函数作为一个字符串返回:</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code\">function myFunction(a, b) {\n        <br>    return a * b;\n        <br>}\n        <br>\n        <br>var txt = myFunction.toString();</div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_function_tostring\" target=\"_blank\">尝试一下 »</a>\n</div>\n<table class=\"lamp \">\n    <tbody>\n        <tr>\n            <th style=\"width:34px\">\n                <img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" alt=\"Note\" style=\"height:32px;width:32px\">\n            </th>\n            <td>函数定义作为对象的属性，称之为对象方法。\n                <br>函数如果用于创建新的对象，称之为对象的构造函数。</td>\n        </tr>\n    </tbody>\n</table><hr>\n<h2>JavaScript 函数练习</h2>\n<p><a href=\"https://www.w3cschool.cn/codecamp/write-reusable-javascript-with-functions.html\" target=\"_blank\">JavaScript 函数定义</a>\n</p>\n<p>在 JavaScript 中把代码的重复部分抽取出来，放到一个函数（functions）中。\n    <br>\n</p>\n<p><a href=\"https://www.w3cschool.cn/codecamp/passing-values-to-functions-with-arguments.html\" target=\"_blank\">JavaScript 定义带参数函数</a>\n</p>\n<p>JavaScript函数的参数parameters充当占位符(也叫形参)的作用，参数可以为一个或多个。调用一个函数时所传入的参数为实参，实参决定着形参真正的值。 </p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 31,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JavaScript 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "3d767d6f82e92735362444af1bd0ac59",
      "chapter_level_two_parent_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_two_name": "JavaScript 代码规范",
      "chapter_level_two_url": "/javascript/javascript-conventions.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript 代码规范</h2>\n\n<hr>\n<p>所有的 JavaScript 项目适用同一种规范。</p>\n<hr>\n\n<h2>JavaScript 代码规范</h2>\n\n<p>代码规范通常包括以下几个方面:</p>\n<ul>\n    <li>变量和函数的命名规则</li>\n    <li>空格，缩进，注释的使用规则。</li>\n    <li>其他常用规范……</li>\n</ul>\n<p>规范的代码可以更易于阅读与维护。</p>\n<p>代码规范一般在开发前规定，可以跟你的团队成员来协商设置。</p>\n<hr>\n\n<h2>变量名</h2>\n\n<p>变量名推荐使用驼峰法来命名(<strong>camelCase</strong>):</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">firstName = \"John\";\nlastName = \"Doe\";\n\nprice = 19.90;\ntax = 0.20;\n\nfullPrice = price + (price * tax);</code></pre>\n<p><b>在JavaScript中定义变量名时，还应该注意以下事项：</b>\n\n</p>\n<ul>\n    <li>变量名应该区分大小写，允许包含字母、数字、美元符号($)和下划线，但第一个字符不允许是数字，不允许包含空格和其他标点符号；</li>\n    <li>变量命名长度应该尽可能的短，并抓住要点，尽量在变量名中体现出值的类型；</li>\n    <li>变量名的命名应该是有意义的；</li>\n    <li>变量名不能为JavaScript中的关键词、保留字全名；</li>\n    <li>变量名命名方法常见的有匈牙利命名法、驼峰命名法和帕斯卡命名法。</li>\n</ul>\n<hr>\n\n<h2>空格与运算符</h2>\n\n<p>通常运算符 ( = + - * / ) 前后需要添加空格:</p>\n<div>\n     <h3>实例:</h3><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">var x = y + z;\nvar values = [\"Volvo\", \"Saab\", \"Fiat\"];</code></pre>\n</div>\n<hr>\n\n<h2>代码缩进</h2>\n\n<p>通常使用 4 个空格符号来缩进代码块：</p>\n<div>\n     <h3>函数:</h3><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">function toCelsius(fahrenheit) {\n    return (5 / 9) * (fahrenheit - 32);\n}</code></pre>\n</div>\n<p>注意:不推荐使用 TAB 键来缩进，因为不同编辑器 TAB 键的解析不一样。</p>\n<br>\n\n<h2>语句规则</h2>\n\n<p>简单语句的通用规则:</p>\n<ul>\n    <li>一条语句通常以分号作为结束符。</li>\n</ul>\n<div>\n     <h3>实例:</h3><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">var values = [\"Volvo\", \"Saab\", \"Fiat\"];\n\nvar person = {\n    firstName: \"John\",\n    lastName: \"Doe\",\n    age: 50,\n    eyeColor: \"blue\"\n};</code></pre><div>\n\n        <br>\n    </div>\n</div>\n<p>复杂语句的通用规则:</p>\n<ul>\n    <li>将左花括号放在第一行的结尾。</li>\n    <li>左花括号前添加一空格。</li>\n    <li>将右花括号独立放在一行。</li>\n    <li>不要以分号结束一个复杂的声明。</li>\n</ul>\n<div>\n     <h3>函数:</h3><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">function toCelsius(fahrenheit) {\n    return (5 / 9) * (fahrenheit - 32);\n}</code></pre>\n</div>\n<div>\n     <h3>循环:</h3><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">for (i = 0; i &lt; 5; i++) {\n    x += i;\n}</code></pre>\n</div>\n<div>\n     <h3>条件语句:</h3><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">if (time &lt; 20) {\n    greeting = \"Good day\";\n} else {\n    greeting = \"Good evening\";\n}</code></pre>\n</div>\n<hr>\n\n<h2>对象规则</h2>\n\n<p>对象定义的规则:</p>\n<ul>\n    <li>将左花括号与类名放在同一行。</li>\n    <li>冒号与属性值间有个空格。</li>\n    <li>字符串使用双引号，数字不需要。</li>\n    <li>最后一个属性-值对后面不要添加逗号。</li>\n    <li>将右花括号独立放在一行，并以分号作为结束符号。</li>\n</ul>\n<div>\n     <h3>实例:</h3><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">var person = {\n    firstName: \"John\",\n    lastName: \"Doe\",\n    age: 50,\n    eyeColor: \"blue\"\n};</code></pre>\n</div>\n<p>短的对象代码可以直接写成一行:</p>\n<div>\n     <h3>实例:</h3><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">var person = {firstName:\"John\", lastName:\"Doe\", age:50, eyeColor:\"blue\"};</code></pre>\n</div>\n<hr>\n\n<h2>每行代码字符小于 80</h2>\n\n<p>为了便于阅读每行字符建议小于数 80 个。</p>\n<p>如果一个 JavaScript 语句超过了 80 个字符，建议在 运算符或者逗号后换行。</p>\n<div>\n     <h3>实例:</h3>\n\n    <div class=\"example\">\n         <h3>实例:</h3>\n\n        <div class=\"example_code\">document.getElementById(<span class=\"highVAL\">\"demo\"</span>).innerHTML =\n            <br>    <span class=\"highVAL\">\"Hello W3Cschool.\"</span>;</div>\n        <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_line_break\" target=\"_blank\">尝试一下 »</a>\n\n    </div>\n</div>\n<p><b>注意：</b><span style=\"font-family: inherit;\">在函数声明、函数表达式、函数调用、对象创建、数组创建、for 语句等场景中，不允许在<b> , </b>或 <b>; </b>前换行。</span>\n\n</p>\n<hr>\n\n<h2>命名规则</h2>\n\n<p>一般很多代码语言的命名规则都是类似的，例如:</p>\n<ul>\n    <li>变量和函数为驼峰法（ <strong>camelCase</strong>）</li>\n    <li>全局变量为大写 (<strong>UPPERCASE </strong>)</li>\n    <li>常量 (如 PI) 为大写 (<strong>UPPERCASE </strong>)</li>\n</ul>\n<p>变量命名你是否使用这几种规则： <strong>hyp-hens</strong>, <strong>camelCase</strong>, 或<strong>under_scores</strong> ?</p>\n<p><strong>HTML 和 CSS 的横杠(-)字符:</strong>\n\n</p>\n<p>HTML5 属性可以以 data- (如：data-quantity, data-price) 作为前缀。</p>\n<p>CSS 使用 - 来连接属性名 (font-size)。</p>\n<p>\n    <br>\n</p>\n<p>注意:- 通常在 JavaScript 中被认为是减法，所以不允许使用。</p>\n<p>\n    <br>\n</p>\n<p><strong>下划线:</strong>\n\n</p>\n<p>很多程序员比较喜欢使用下划线(如：date_of_birth), 特别是在 SQL 数据库中。</p>\n<p>PHP 语言通常都使用下划线。</p>\n<p><strong>帕斯卡拼写法(PascalCase):</strong>\n\n</p>\n<p>帕斯卡拼写法(PascalCase) 在 C 语言中语言较多。</p>\n<p>驼峰法：</p>\n<p>JavaScript 中通常推荐使用驼峰法，jQuery 及其他 JavaScript 库都使用驼峰法。</p>\n<p>\n    <br>\n</p>\n<p>注意:变量名不要以 $ 作为开始标记，会与很多 JavaScript 库冲突。</p>\n<br>\n<hr>\n\n<h2>HTML 载入外部 JavaScript 文件</h2>\n\n<p>使用简洁的格式载入 JavaScript 文件 ( type 属性不是必须的):</p>\n<div>\n    <div><span>&lt;</span><span>script</span>  <span>src=</span><span>\"myscript.js\"</span><span>&gt;</span>\n\n    </div>\n</div>\n<hr>\n\n<h2>使用 JavaScript 访问 HTML 元素</h2>\n\n<p>一个糟糕的 HTML 格式可能会导致 JavaScript 执行错误。</p>\n<p>以下两个 JavaScript 语句会输出不同结果:</p>\n<div class=\"example\">\n     <h3>实例</h3>\n\n    <div class=\"example_code\"><span class=\"highELE\">var</span> obj =getElementById(<span class=\"highVAL\">\"Demo\"</span>)\n        <br><span class=\"highELE\">var</span> obj = getElementById(<span class=\"highVAL\">\"demo\"</span>)</div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryhtml_syntax_javascript\" target=\"_blank\">尝试一下 »</a>\n\n</div>\n<p>HTML 与 JavaScript 尽量使用相同的命名规则。</p>\n<p><a href=\"/html5/html5-syntax.html\" target=\"_blank\">访问 HTML(5) 代码规范</a>。</p>\n<hr>\n\n<h2>文件扩展名</h2>\n\n<p>HTML 文件后缀可以是 <strong>.html</strong> (或r <strong>.htm</strong>)。</p>\n<p>CSS 文件后缀是 <strong>.css</strong> 。</p>\n<p>JavaScript 文件后缀是 <strong>.js</strong> 。</p>\n<hr>\n\n<h2>使用小写文件名</h2>\n\n<p>大多 Web 服务器 (Apache, Unix) 对大小写敏感： london.jpg 不能通过 London.jpg 访问。</p>\n<p>其他 Web 服务器 (Microsoft, IIS) 对大小写不敏感： london.jpg 可以通过 London.jpg 或 london.jpg 访问。</p>\n<p>你必须保持统一的风格，我们建议统一使用小写的文件名。</p>\n<p>学完本教程之后，W3Cschool推荐您进行实战练习来巩固自己的知识：<b><a href=\"https://www.w3cschool.cn/codecamp/list?pename=basic_javascript_camp\" target=\"_blank\">javascript实战</a></b>\n\n</p>\n<hr>\n\n<h2>JavaScript 格式化整理工具</h2>\n\n<p><a href=\"https://www.w3cschool.cn/tools/index?name=Jsdecoder\">在线JavaScript 格式化整理工具</a>\n</p>\n<p> \n    <img src=\"//atts.w3cschool.cn/attachments/image/20180801/1533117294499774.png\" alt=\"\" class=\"\">\n</p>\n<a href=\"https://www.w3cschool.cn/tools/index?name=Jsdecoder\">\n    <p></p>\n    <hr>\n    \n<h2>相关阅读</h2>\n\n</a>\n<p><a href=\"https://www.w3cschool.cn/tools/index?name=Jsdecoder\">前端编码规范：</a><a href=\"https://www.w3cschool.cn/bdl2e3/arcv12j4.html\" target=\"_blank\">JavaScript 规范</a>\n\n</p>\n<p>\n    <br>\n</p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 30,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JavaScript 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "d240b5e051e4b135e9492f853c4c26b7",
      "chapter_level_two_parent_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_two_name": "javascript:void(0) 含义",
      "chapter_level_two_url": "/javascript/js-void.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2><span class=\"color_h1\">javascript:void(0)</span> 含义 </h2> \n<p class=\"intro\">我们经常会使用到 javascript:void(0) 这样的代码，那么在 JavaScript 中 javascript:void(0) 代表的是什么意思呢？</p>\n<p class=\"intro\">javascript:void(0) 中最关键的是 void 关键字， void 是 JavaScript 中非常重要的关键字，该操作符指定要计算一个表达式但是不返回值。</p> \n<p>下面的代码创建了一个超级链接，当用户点击以后不会发生任何事。</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code\">&lt;a href=\"javascript:void(0)\"&gt;单击此处什么也不会发生&lt;/a&gt;</div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_void\" target=\"_blank\">尝试一下 »</a> \n</div>\n<p>当用户链接时，void(0) 计算为 0，但 Javascript 上没有任何效果。</p>\n<p>以下实例中，在用户点击链接后显示警告信息：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code\">&lt;head&gt;\n        <br>&lt;script type=\"text/javascript\"&gt;\n        <br>&lt;!--\n        <br>//--&gt;\n        <br>&lt;/script&gt;\n        <br>&lt;/head&gt;\n        <br>&lt;body&gt;\n        <br>&lt;a href=\"javascript:void(alert('Warning!!!'))\"&gt;点我!&lt;/a&gt;\n        <br>&lt;/body&gt;</div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_void1\" target=\"_blank\">尝试一下 »</a> \n</div>\n<p>以下实例中参数 a 将返回 undefined :</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code\">&lt;head&gt;\n        <br>&lt;script type=\"text/javascript\"&gt;\n        <br>&lt;!--\n        <br>function getValue(){\n        <br>  var a,b,c;\n        <br>  a = void ( b = 5, c = 7 );\n        <br>  document.write('a = ' + a + ' b = ' + b +' c = ' + c );\n        <br>}\n        <br>//--&gt;\n        <br>&lt;/script&gt;\n        <br>&lt;/head&gt;</div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_void2\" target=\"_blank\">尝试一下 »</a> \n</div>\n<hr>\n <h2>href=\"#\"与href=\"javascript:void(0)\"的区别</h2> \n<p><strong>#</strong> 包含了一个位置信息，默认的锚是<strong>#top</strong> 也就是网页的上端。</p>\n<p>而javascript:void(0), 仅仅表示一个死链接。</p>\n<p>在页面很长的时候会使用 <strong>#</strong> 来定位页面的具体位置，格式为：<strong># + id</strong>。</p>\n<p>如果你要定义一个死链接请使用 javascript:void(0) 。</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code\">&lt;a href=\"javascript:void(0);\"&gt;点我没有反应的!&lt;/a&gt;\n        <br>&lt;a href=\"#pos\"&gt;点我定位到指定位置!&lt;/a&gt;\n        <br>&lt;br&gt;&lt;br&gt;&lt;br&gt; &lt;p id=\"pos\"&gt;尾部定位点&lt;/p&gt;</div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_void3\" target=\"_blank\">尝试一下 »</a> \n</div><p><b>注意：</b>void()仅仅是代表不返回任何值，但是括号内的表达式还是要运行</p>\n<hr>\n<h2>相关文章</h2>\n<p>javascript百科大全：<a href=\"https://www.w3cschool.cn/xqw2e7/by4m12xr.html\" target=\"_blank\">javascript:;与javascript:void(0)使用介绍</a></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 29,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JavaScript 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "32cf0197665ba7ea7471c59e5c1c119b",
      "chapter_level_two_parent_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_two_name": "JavaScript JSON",
      "chapter_level_two_url": "/javascript/js-json.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">JSON</span> </h2> \n<hr>\n<p class=\"intro\">JSON 是用于存储和传输数据的格式。</p>\n<p class=\"intro\">JSON 通常用于服务端向网页传递数据 。</p>\n<hr>\n <h2>什么是 JSON?</h2> \n<ul>\n    <li>JSON 英文全称 <strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation</li>\n    <li>JSON 是一种轻量级的数据交换格式。</li>\n    <li>JSON是独立的语言 <strong>*</strong> \n    </li>\n    <li>JSON 易于理解。</li>\n</ul>\n<p></p>\n<table class=\"lamp \">\n    <tbody>\n        <tr>\n            <th style=\"width:34px\">\n                <img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" alt=\"Note\" style=\"height:32px;width:32px\">\n            </th>\n            <td>* JSON 使用 JavaScript 语法，但是 JSON 格式仅仅是一个文本。\n                <br>文本可以被任何编程语言读取及作为数据格式传递。</td>\n        </tr>\n    </tbody>\n</table>\n <h2>JSON 实例</h2> \n<p>以下 JSON 语法定义了 employees 对象: 3 条员工记录（对象）的数组:</p>\n<div class=\"example\">\n     <h2 class=\"example\">JSON Example</h2> \n    <div class=\"example_code\">{\"employees\":[\n        <br>    {\"firstName\":\"John\", \"lastName\":\"Doe\"},\n        <br>    {\"firstName\":\"Anna\", \"lastName\":\"Smith\"},\n        <br>    {\"firstName\":\"Peter\", \"lastName\":\"Jones\"}\n        <br>]}\n        <br>\n    </div>\n</div>\n<br>\n<hr>\n <h2> JSON 格式化后为 JavaScript 对象</h2> \n<p>JSON 格式在语法上与创建 JavaScript 对象代码是相同的。</p>\n<p>由于它们很相似，所以 JavaScript 程序可以很容易的将 JSON 数据转换为 JavaScript 对象。</p>\n<hr>\n <h2>JSON 语法规则</h2> \n<ul>\n    <li>数据为 键/值 对。</li>\n    <li>数据由逗号分隔。</li>\n    <li>大括号保存对象</li>\n    <li>方括号保存数组</li>\n</ul>\n<hr>\n <h2>JSON 数据 - 一个名称对应一个值</h2> \n<p>JSON 数据格式为 键/值 对，就像 JavaScript 对象属性。</p>\n<p>键/值对包括字段名称（在双引号中），后面一个冒号，然后是值：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">\"firstName\":\"John\"</code></pre>\n<hr>\n <h2>JSON 对象</h2> \n<p>JSON 对象保存在大括号内。</p>\n<p>就像在 JavaScript 中, 对象可以保存多个 键/值 对：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">{\"firstName\":\"John\", \"lastName\":\"Doe\"}</code></pre>\n<hr>\n <h2>JSON 数组</h2> \n<p>JSON 数组保存在中括号内。</p>\n<p>就像在 JavaScript 中, 数组可以包含对象：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">\"employees\":[        \n    {\"firstName\":\"John\", \"lastName\":\"Doe\"},        \n    {\"firstName\":\"Anna\", \"lastName\":\"Smith\"},     \n    {\"firstName\":\"Peter\", \"lastName\":\"Jones\"}        \n]</code></pre>\n<p>在以上实例中，对象 \"employees\" 是一个数组。包含了三个对象。</p>\n<p>每个为个对象为员工的记录（姓和名）。</p>\n<hr>\n <h2>JSON 字符串转换为 JavaScript 对象</h2> \n<p>通常我们从服务器中读取 JSON 数据，并在网页中显示数据。</p>\n<p>简单起见，我们网页中直接设置 JSON 字符串 (你还可以阅读我们的 <a href=\"/json/json-tutorial.html\">JSON 教程</a>):</p>\n<p>首先，创建 JavaScript 字符串，字符串为 JSON 格式的数据：</p>\n<div class=\"example\">\n    <div class=\"example_code\">var text = '{ \"employees\" : [' +\n        <br>'{ \"firstName\":\"John\" , \"lastName\":\"Doe\" },' +\n        <br>'{ \"firstName\":\"Anna\" , \"lastName\":\"Smith\" },' +\n        <br>'{ \"firstName\":\"Peter\" , \"lastName\":\"Jones\" } ]}';</div>\n</div>\n<p>然后，使用 JavaScript 内置函数 JSON.parse() 将字符串转换为 JavaScript 对象:</p>\n<div class=\"example\">\n    <div class=\"example_code\">var obj = JSON.parse(text);</div>\n</div>\n<p>最后，在你的页面中使用新的 JavaScript 对象：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code\">&lt;p id=\"demo\"&gt;&lt;/p&gt;\n        <br>\n        <br>&lt;script&gt;\n        <br>document.getElementById(\"demo\").innerHTML =\n        <br>obj.employees[1].firstName + \" \" + obj.employees[1].lastName;\n        <br>&lt;/script&gt;</div>\n    <br><a target=\"_blank\" class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_json_parse\">尝试一下 »</a> \n</div>\n<p>更多 JSON 信息，你可以阅读我们的 <a href=\"/json/json-tutorial.html\">JSON 教程</a>。</p><p><br></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 28,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JavaScript 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "8ef248b68da0fe94a0c4a3c84a4b4ced",
      "chapter_level_two_parent_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_two_name": "JavaScript 保留关键字",
      "chapter_level_two_url": "/javascript/js-reserved.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">保留关键字</span></h2> <hr> <p class=\"intro\">保留关键字在意思上表达成为将来的关键字而保留的单词。<br></p><p class=\"intro\">在 JavaScript 中，一些标识符是保留关键字，不能用作变量名或函数名。</p> <hr> <h2>JavaScript 标准</h2> <p>所有的现代浏览器完全支持 <a href=\"https://www.w3cschool.cn/ecmascript/\" target=\"_blank\">ECMAScript</a> 3（ES3，JavaScript 的第三版，从 1999 年开始）。</p> <p>ECMAScript 4（ES4）未通过。</p> <p>ECMAScript 5（ES5，2009 年发布），是 JavaScript 最新的官方版本。</p> <p>随着时间的推移，我们开始看到，所有的现代浏览器已经完全支持 ES5。</p> <hr> <h2>JavaScript 保留关键字</h2> <p>Javascript 的保留关键字不可以用作变量、标签或者函数名。有些保留关键字是作为 Javascript 以后扩展使用。</p> <table class=\"reference\"> <tbody><tr> <td>abstract</td> <td>arguments</td> <td>boolean</td> <td>break</td> <td>byte</td> </tr> <tr> <td>case</td> <td>catch</td> <td>char</td> <td>class*</td> <td>const</td> </tr> <tr> <td>continue</td> <td>debugger</td> <td>default</td> <td>delete</td> <td>do</td> </tr> <tr> <td>double</td> <td>else</td> <td>enum*</td> <td>eval</td> <td>export*</td> </tr> <tr> <td>extends*</td> <td>false</td> <td>final</td> <td>finally</td> <td>float</td> </tr> <tr> <td>for</td> <td>function</td> <td>goto</td> <td>if</td> <td>implements</td> </tr> <tr> <td>import*</td> <td>in</td> <td>instanceof</td> <td>int</td> <td>interface</td> </tr> <tr> <td>let</td> <td>long</td> <td>native</td> <td>new</td> <td>null</td> </tr> <tr> <td>package</td> <td>private</td> <td>protected</td> <td>public</td> <td>return</td> </tr> <tr> <td>short</td> <td>static</td> <td>super*</td> <td>switch</td> <td>synchronized</td> </tr> <tr> <td>this</td> <td>throw</td> <td>throws</td> <td>transient</td> <td>true</td> </tr> <tr> <td>try</td> <td>typeof</td> <td>var</td> <td>void</td> <td>volatile</td> </tr> <tr> <td>while</td> <td>with</td> <td>yield</td> <td></td> <td></td> </tr> </tbody></table> <p>* 标记的关键字是 ECMAScript5 中新添加的。</p> <hr> <h2>JavaScript 对象、属性和方法</h2> <p>您也应该避免使用 JavaScript 内置的对象、属性和方法的名称作为 Javascript 的变量或函数名：</p> <table class=\"reference\"> <tbody><tr> <td>Array</td> <td>Date</td> <td>eval</td> <td>function</td> <td>hasOwnProperty</td> </tr> <tr> <td>Infinity</td> <td>isFinite</td> <td>isNaN</td> <td>isPrototypeOf</td> <td>length</td> </tr> <tr> <td>Math</td> <td>NaN</td> <td>name</td> <td>Number</td> <td>Object</td> </tr> <tr> <td>prototype</td> <td>String</td> <td>toString</td> <td>undefined</td> <td>valueOf</td> </tr> </tbody></table> <br> <hr> <h2>Java 保留关键字</h2> <p>JavaScript 经常与 Java 一起使用。您应该避免使用一些 Java 对象和属性作为 JavaScript 标识符：</p> <table class=\"reference\"> <tbody><tr> <td>getClass</td> <td>java</td> <td>JavaArray</td> <td>javaClass</td> <td>JavaObject</td> <td>JavaPackage</td> </tr> </tbody></table> <br> <hr> <h2>Windows 保留关键字</h2> <p>JavaScript 可以在 HTML 外部使用。它可在许多其他应用程序中作为编程语言使用。</p> <p>在 HTML 中，您必须（为了可移植性，您也应该这么做）避免使用 HTML 和 Windows 对象和属性的名称作为 Javascript 的变量及函数名：</p> <table class=\"reference\"> <tbody><tr> <td>alert</td> <td>all</td> <td>anchor</td> <td>anchors</td> <td>area</td> </tr> <tr> <td>assign</td> <td>blur</td> <td>button</td> <td>checkbox</td> <td>clearInterval</td> </tr> <tr> <td>clearTimeout</td> <td>clientInformation</td> <td>close</td> <td>closed</td> <td>confirm</td> </tr> <tr> <td>constructor</td> <td>crypto</td> <td>decodeURI</td> <td>decodeURIComponent</td> <td>defaultStatus</td> </tr> <tr> <td>document</td> <td>element</td> <td>elements</td> <td>embed</td> <td>embeds</td> </tr> <tr> <td>encodeURI</td> <td>encodeURIComponent</td> <td>escape</td> <td>event</td> <td>fileUpload</td> </tr> <tr> <td>focus</td> <td>form</td> <td>forms</td> <td>frame</td> <td>innerHeight</td> </tr> <tr> <td>innerWidth</td> <td>layer</td> <td>layers</td> <td>link</td> <td>location</td> </tr> <tr> <td>mimeTypes</td> <td>navigate</td> <td>navigator</td> <td>frames</td> <td>frameRate</td> </tr> <tr> <td>hidden</td> <td>history</td> <td>image</td> <td>images</td> <td>offscreenBuffering</td> </tr> <tr> <td>open</td> <td>opener</td> <td>option</td> <td>outerHeight</td> <td>outerWidth</td> </tr> <tr> <td>packages</td> <td>pageXOffset</td> <td>pageYOffset</td> <td>parent</td> <td>parseFloat</td> </tr> <tr> <td>parseInt</td> <td>password</td> <td>pkcs11</td> <td>plugin</td> <td>prompt</td> </tr> <tr> <td>propertyIsEnum</td> <td>radio</td> <td>reset</td> <td>screenX</td> <td>screenY</td> </tr> <tr> <td>scroll</td> <td>secure</td> <td>select</td> <td>self</td> <td>setInterval</td> </tr> <tr> <td>setTimeout</td> <td>status</td> <td>submit</td> <td>taint</td> <td>text</td> </tr> <tr> <td>textarea</td> <td>top</td> <td>unescape</td> <td>untaint</td> <td>window</td> </tr> </tbody></table> <br> <hr> <h2>HTML 事件句柄</h2> <p>除此之外，您还应该避免使用 HTML 事件句柄的名称作为 Javascript 的变量及函数名。</p> <p>实例：</p> <table class=\"reference\"> <tbody><tr> <td>onblur</td> <td>onclick</td> <td>onerror</td> <td>onfocus</td> </tr> <tr> <td>onkeydown</td> <td>onkeypress</td> <td>onkeyup</td> <td>onmouseover</td> </tr> <tr> <td>onload</td> <td>onmouseup</td> <td>onmousedown</td> <td>onsubmit</td> </tr><tr> </tr></tbody></table><p><b> 注意：</b>在JavaScript中关键字不能用作变量名或者函数名，否则可能会得到错误消息，例如“\"Identifier Expected\"（应该有标识符、期望标识符）”。</p><p><br></p> <hr> <h2>非标准 JavaScript</h2> <p>除了保留关键字，在 JavaScript 实现中也有一些非标准的关键字。</p> <p>一个实例是 <strong>const</strong> 关键字，用于定义变量。 一些 JavaScript 引擎把 const 当作 var 的同义词。另一些引擎则把 const 当作只读变量的定义。</p> <p>Const 是 JavaScript 的扩展。JavaScript 引擎支持它用在 Firefox 和 Chrome 中。但是它并不是 JavaScript 标准 ES3 或 ES5 的组成部分。<strong>建议：不要使用它</strong>。</p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 27,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JavaScript 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "9b536e6b1d947ee8b42f3cc3e46d60cb",
      "chapter_level_two_parent_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_two_name": "JavaScript 表单验证",
      "chapter_level_two_url": "/javascript/js-form-validation.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">表单验证</span> </h2> \n<hr>\n <h2>JavaScript 表单验证</h2> \n<p>JavaScript 可用来在数据被送往服务器前对 HTML 表单中的这些输入数据进行验证。</p>\n<p>表单数据经常需要使用 JavaScript 来验证其正确性：</p>\n<ul>\n    <br>\n    <li>验证表单数据是否为空？</li>\n    <br>\n    <li>验证输入是否是一个正确的email地址？</li>\n    <br>\n    <li>验证日期是否输入正确？</li>\n    <br>\n    <li>验证表单输入内容是否为数字型？</li>\n    <br>\n</ul>\n<hr>\n <h2>必填（或必选）项目</h2> \n<p>下面的函数用来检查用户是否已填写表单中的必填（或必选）项目。假如必填或必选项为空，那么警告框会弹出，并且函数的返回值为 false，否则函数的返回值则为 true（意味着数据没有问题）：</p><pre lang=\"javascript\"><code class=\"javascript\">function validateForm()        \n{        \nvar x=document.forms[\"myForm\"][\"fname\"].value;        \nif (x==null || x==\"\")        \n  {        \n  alert(\"First name must be filled out\");        \n  return false;        \n  }        \n}</code></pre>\n\n<p>以上函数在 form 表单提交时被调用:</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">&lt;form name=\"myForm\" action=\"demo_form.asp\" onsubmit=\"return validateForm()\" method=\"post\"&gt;\n        <br>First name: &lt;input type=\"text\" name=\"fname\"&gt;\n        <br>&lt;input type=\"submit\" value=\"Submit\"&gt;\n        <br>&lt;/form&gt;</div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_form_validation\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>E-mail 验证</h2> \n<p>下面的函数检查输入的数据是否符合电子邮件地址的基本语法。</p>\n<p>意思就是说，输入的数据必须包含 @ 符号和点号(.)。同时，@ 不可以是邮件地址的首字符，并且 @ 之后需有至少一个点号：</p><pre lang=\"javascript\"><code class=\"javascript\">function validateForm()        \n{        \nvar x=document.forms[\"myForm\"][\"email\"].value;        \nvar atpos=x.indexOf(\"@\");        \nvar dotpos=x.lastIndexOf(\".\");        \nif (atpos&lt;1 || dotpos&lt;atpos+2 || dotpos+2&gt;=x.length)        \n  {        \n  alert(\"Not a valid e-mail address\");        \n  return false;        \n  }       \n}</code></pre>\n\n<p>下面是连同 HTML 表单的完整代码：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">&lt;form name=\"myForm\" action=\"demo_form.asp\" onsubmit=\"return validateForm();\" method=\"post\"&gt;\n        <br>Email: &lt;input type=\"text\" name=\"email\"&gt;\n        <br>&lt;input type=\"submit\" value=\"Submit\"&gt;\n        <br>&lt;/form&gt;</div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_form_validate_email\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n\n<hr>\n<h3>数字验证</h3><p>下面的函数检查输入的数据是否是1~10之间的数字。假如输入的不为数字或不是，那么警告框会弹出，并且函数的返回值为 false，否则函数的返回值则为 true（意味着数据没有问题）：</p>\n\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\"><p>&lt;form name=\"myForm\" action=\"demo_form.asp\" onsubmit=\"return validateForm();\" method=\"post\"&gt; \n</p><p>\t&lt;strong&gt;请输入1到10之间的数字：&lt;/strong&gt;\n</p><p>\t&lt;input id=\"number\"&gt;\n</p><p>\t&lt;button type=\"button\" onclick=\"myFunction()\"&gt;提交&lt;/button&gt;\n</p><p>&lt;/form&gt;</p></div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_form_validate_number\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<br>\n\n\n<h2>相关文章</h2>\n\n<p>JavaScript标准参考教程：<a href=\"https://www.w3cschool.cn/javascript_guide/javascript_guide-kvy926ac.html\" target=\"_blank\">JavaScript 表单</a>\n\n</p><p><br></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 26,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JavaScript 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "562d9400bea9827599117f1bc39e2e84",
      "chapter_level_two_parent_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_two_name": "JavaScript 调试",
      "chapter_level_two_url": "/javascript/js-debugging.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">调试</span> </h2> <hr> <p class=\"intro\">在编写 JavaScript 时，如果没有调试工具将是一件很痛苦的事情。</p> <hr> <h2>JavaScript 调试</h2> <p>没有调试工具是很难去编写 JavaScript 程序的。</p> <p>你的代码可能包含语法错误，逻辑错误，如果没有调试工具，这些错误比较难于发现。</p> <p>通常，如果 JavaScript 出现错误，是不会有提示信息，这样你就无法找到代码错误的位置。</p>  <table class=\"lamp\"><tbody><tr> <th style=\"width:34px\"> <img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" alt=\"Note\" style=\"height:32px;width:32px\"> </th> <td> 通常，你在编写一个新的 JavaScript 代码过程中都会发生错误。 </td> </tr></tbody></table> <hr> <h2>JavaScript 调试工具</h2> <p>在程序代码中寻找错误叫做代码调试。</p> <p>调试很难，但幸运的是，很多浏览器都内置了调试工具。</p> <p>内置的调试工具可以开始或关闭，严重的错误信息会发送给用户。</p> <p>有了调试工具，我们就可以设置断点 (代码停止执行的位置), 且可以在代码执行时检测变量。</p> <p>浏览器启用调试工具一般是按下 F12 键，并在调试菜单中选择 \"Console\" 。<br></p> <hr> <h2>console.log() 方法</h2> <p>如果浏览器支持调试，你可以使用 console.log() 方法在调试窗口上打印 JavaScript 值：</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code\"> &lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;body&gt;<br><br>&lt;h1&gt;My First Web Page&lt;/h1&gt;<br><br> &lt;script&gt;<br>a = 5;<br>b = 6;<br>c = a + b;<br>console.log(c);<br>&lt;/script&gt;<br><br>&lt;/body&gt;<br>&lt;/html&gt;</div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_console\" target=\"_blank\">尝试一下 »</a> </div> <br><hr> <h2>设置断点</h2> <p>在调试窗口中，你可以设置 JavaScript 代码的断点。</p> <p>在每个断点上，都会停止执行 JavaScript 代码，以便于我们检查 JavaScript 变量的值。</p> <p>在检查完毕后，可以重新执行代码（如播放按钮）。</p> <hr> <h2>debugger 关键字</h2> <p><strong>debugger</strong> 关键字用于停止执行 JavaScript，并调用调试函数。</p> <p>这个关键字与在调试工具中设置断点的效果是一样的。</p> <p>如果没有调试可用，debugger 语句将无法工作。</p> <p>开启 debugger ，代码在第三行前停止执行。</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code notranslate jsHigh\"> var x = 15 * 5;<br>debugger;<br>document.getElementbyId(\"demo\").innerHTML = x; </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_debugger\" target=\"_blank\">尝试一下 »</a> </div> <br><hr> <h2>主要浏览器的调试工具</h2> <p>通常，浏览器启用调试工具一般是按下 F12 键，并在调试菜单中选择 \"Console\" 。</p> <p>各浏览器的步骤如下:</p> <h2>Chrome 浏览器</h2> <ul> <li>打开浏览器。</li> <li>在菜单中选择工具。</li> <li>在工具中选择开发者工具。</li> <li>最后，选择 Console。</li> </ul> <h2>Firefox 浏览器</h2> <ul> <li>打开浏览器。</li> <li>访问页面: <br>http://www.getfirebug.com。</li> <li>按照说明 :<br>安装 Firebug。</li> </ul> <h2>Internet Explorer 浏览器。</h2> <ul> <li>打开浏览器。</li> <li>在菜单中选择工具。</li> <li>在工具中选择开发者工具。</li> <li>最后，选择 Console。</li> </ul> <h2>Opera</h2> <ul> <li>打开浏览器。</li> <li>Opera 的内置调试工具为 Dragonfly，详细说明可访问页面:<br>http://www.opera.com/dragonfly/。</li> </ul> <h2>Safari</h2> <ul> <li>打开浏览器。</li> <li>访问页面:<br>http://extentions.apple.com。</li> <li>按说明操作：<br>install Firebug Lite。</li> </ul><h2>扩展阅读</h2><p>Firebug教程：<a href=\"https://www.w3cschool.cn/firebug/firebug-javascript-debug.html\" target=\"_blank\">使用Firebug调试JavaScript</a></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 25,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JavaScript 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "5ef23999764cb3b13dcf923f69a30e11",
      "chapter_level_two_parent_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_two_name": "JavaScript 错误处理  Throw、Try 和 Catch",
      "chapter_level_two_url": "/javascript/js-errors.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">错误 - throw、try 和 catch</span> </h2> <hr> <p class=\"intro\"><strong>try</strong> 语句测试代码块的错误。</p> <p class=\"intro\"><strong>catch</strong> 语句处理错误。</p> <p class=\"intro\"><strong>throw</strong> 语句创建自定义错误。</p> <hr> <h2> JavaScript 错误</h2> <p>当 JavaScript 引擎执行 JavaScript 代码时，会发生各种错误：</p> <p>可能是语法错误，通常是程序员造成的编码错误或错别字。</p> <p>可能是拼写错误或语言中缺少的功能（可能由于浏览器差异）。</p> <p>可能是由于来自服务器或用户的错误输出而导致的错误。</p> <p>当然，也可能是由于许多其他不可预知的因素。</p> <hr> <h2>JavaScript 抛出（throw）错误</h2> <p>当错误发生时，当事情出问题时，JavaScript 引擎通常会停止，并生成一个错误消息。</p> <p>描述这种情况的技术术语是：JavaScript 将<strong>抛出</strong>一个错误。</p> <hr> <h2>JavaScript try 和 catch</h2> <p><strong>try</strong> 语句允许我们定义在执行时进行错误测试的代码块。</p> <p><strong>catch</strong> 语句允许我们定义当 try 代码块发生错误时，所执行的代码块。</p> <p>JavaScript 语句 <strong>try</strong> 和 <strong>catch</strong> 是成对出现的。</p> <h3><strong>语法</strong></h3> <div class=\"code notranslate\"><div> try<br>   {<br>   //在这里运行代码<br>   }<br> catch(err)<br>   {<br>   //在这里处理错误<br>   }</div></div> <h2>实例</h2> <p>在下面的例子中，我们故意在 try 块的代码中写了一个错字。</p> <p>catch 块会捕捉到 try 块中的错误，并执行代码来处理它。</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code notranslate\"> &lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br> &lt;head&gt;<br> &lt;script&gt;<br> var txt=\"\";<br> function message()<br> {<br> try<br>   {<br>   adddlert(\"Welcome guest!\");<br>   }<br> catch(err)<br>   {<br>   txt=\"本页有一个错误。\\n\\n\";<br>   txt+=\"错误描述：\" + err.message + \"\\n\\n\";<br>   txt+=\"点击确定继续。\\n\\n\";<br>   alert(txt);<br>   }<br> }<br> &lt;/script&gt;<br> &lt;/head&gt;<br><br> &lt;body&gt;<br> &lt;input type=\"button\" value=\"查看消息\" onclick=\"message()\"&gt;<br> &lt;/body&gt;<br><br> &lt;/html&gt;</div> <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_try_catch\" class=\"tryitbtn\">尝试一下 »</a> </div> <br><hr> <h2>Throw 语句</h2> <p>throw 语句允许我们创建自定义错误。</p> <p>正确的技术术语是：创建或<strong>抛出异常</strong>（exception）。</p> <p>如果把 throw 与 try 和 catch 一起使用，那么您能够控制程序流，并生成自定义的错误消息。</p> <h3><strong>语法</strong></h3> <div class=\"code notranslate\"><div> throw <em>exception</em> </div></div> <p>异常可以是 JavaScript 字符串、数字、逻辑值或对象。</p> <h2>实例</h2> <p>本例检测输入变量的值。如果值是错误的，会抛出一个异常（错误）。catch 会捕捉到这个错误，并显示一段自定义的错误消息：</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code\"> &lt;script&gt;<br>function myFunction()<br>{<br>try<br>  { <br>  var x=document.getElementById(\"demo\").value;<br>  if(x==\"\")    throw \"empty\";<br>  if(isNaN(x)) throw \"not a number\";<br>  if(x&gt;10)     throw \"too high\";<br>  if(x&lt;5)      throw \"too low\";<br>  }<br>catch(err)<br>  {<br>  var y=document.getElementById(\"mess\");<br>  y.innerHTML=\"Error: \" + err + \".\";<br>  }<br>}<br>&lt;/script&gt;<br><br>&lt;h1&gt;My First JavaScript&lt;/h1&gt;<br>&lt;p&gt;Please input a number between 5 and 10:&lt;/p&gt;<br>&lt;input id=\"demo\" type=\"text\"&gt;<br>&lt;button type=\"button\" onclick=\"myFunction()\"&gt;Test Input&lt;/button&gt;<br>&lt;p id=\"mess\"&gt;&lt;/p&gt;</div> <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_throw_error\" class=\"tryitbtn\">尝试一下 »</a> </div> <p>请注意，如果 getElementById 函数出错，上面的例子也会抛出一个错误。</p><h2>相关文章</h2><p>JavaScript标准参考手册：<a href=\"https://www.w3cschool.cn/javascript_guide/javascript_guide-xb63268n.html\" target=\"_blank\">JavaScript 错误处理机制</a></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 24,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JavaScript 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "e0d6eceebc2f9fff9d4720498c118468",
      "chapter_level_two_parent_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_two_name": "JavaScript 正则表达式",
      "chapter_level_two_url": "/javascript/js-regexp.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">正则表达式</span></h2> \n<hr>\n<p class=\"intro\">正则表达式（英语：Regular Expression，在代码中常简写为regex、regexp或RE）使用单个字符串来描述、匹配一系列符合某个句法规则的字符串搜索模式。</p>\n<p class=\"intro\">搜索模式可用于文本搜索和文本替换。</p>\n<hr>\n <h2>什么是正则表达式？</h2> \n<p>正则表达式是由一个字符序列形成的搜索模式。</p>\n<p>当你在文本中搜索数据时，你可以用搜索模式来描述你要查询的内容。</p>\n<p>正则表达式可以是一个简单的字符，或一个更复杂的模式。</p>\n<p>正则表达式可用于所有文本搜索和文本替换的操作。</p>\n <h2>语法</h2><div class=\"code\"><div>/<em>pattern</em>/<em>modifiers</em>;</div></div>\n<br>\n<div class=\"example\">\n     <h2 class=\"example\">实例：</h2> \n    <div class=\"example_code\">var patt = /w3cschool/i</div>\n</div>\n<p>实例解析：</p>\n<p><strong>/w3cschool/i</strong>  是一个正则表达式。</p>\n<p><strong>w3cschool</strong>  是一个模式 (用于检索)。</p>\n<p><strong>i</strong>  是一个修饰符 (搜索不区分大小写)。</p>\n<hr>\n <h2>使用字符串方法</h2> \n<p>在 JavaScript 中，正则表达式通常用于两个字符串方法 : search() 和 replace()。</p>\n<p><strong>search() 方法</strong> 用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回<span>子字符串</span>的起始位置。</p>\n<p><strong>replace() 方法</strong> 用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的<span>子字符串</span>。</p>\n<hr>\n <h2> search() 方法使用正则表达式</h2> \n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <p>使用正则表达式搜索 \"w3cschool\" 字符串，且不区分大小写：</p>\n    <div class=\"example_code\"> <span class=\"highELE\">var</span> str = <span class=\"highVAL\">\"Visit w3cschool\"</span>;\n        <br> <span class=\"highELE\">var</span> n = str.search(/w3cschool/i);</div>\n    <p>输出结果为：</p>\n    <div class=\"example_code\">6</div>\n    <br> <a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_string_search_regexp\" target=\"_blank\">尝试一下 »</a>\n\n</div>\n<br>\n<hr>\n <h2>search() 方法使用字符串</h2> \n<p>search 方法可使用字符串作为参数。字符串参数会转换为正则表达式：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <p>检索字符串中 \"w3cschool\" 的子字符串：</p>\n    <div class=\"example_code\"> <span class=\"highELE\">var</span> str = <span class=\"highVAL\">\"Visit w3cschool!\"</span>;\n        <br> <span class=\"highELE\">var</span> n = str.search(<span class=\"highVAL\">\"w3cschool\"</span>);</div>\n    <br> <a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_string_search\" target=\"_blank\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>replace() 方法使用正则表达式</h2> \n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <p>使用正则表达式且不区分大小写将字符串中的 Microsoft 替换为 w3cschool :</p>\n    <div class=\"example_code\"> <span class=\"highELE\">var</span> str = <span class=\"highVAL\">\"Visit Microsoft!\"</span>;\n        <br> <span class=\"highELE\">var</span> res = str.replace(/microsoft/i, <span class=\"highVAL\">\"w3cschool\"</span>);</div>\n    <p>结果输出为:</p>\n    <div class=\"example_code\">Visit w3cschool!</div>\n    <br> <a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_string_replace_regexp\" target=\"_blank\">尝试一下 »</a> \n</div>\n<br>\n <h2>replace() 方法使用字符串</h2> \n<p>replace() 方法将接收字符串作为参数：</p>\n<div class=\"example\">\n    <div class=\"example_code\"> <span class=\"highELE\">var</span> str = <span class=\"highVAL\">\"Visit Microsoft!\"</span>;\n        <br> <span class=\"highELE\">var</span> res = str.replace(<span class=\"highVAL\">\"Microsoft\"</span>, <span class=\"highVAL\">\"w3cschool\"</span>);</div>\n    <br> <a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_string_replace\" target=\"_blank\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>你注意到了吗？</h2> \n<table class=\"lamp       \">\n    <tbody>\n        <tr>\n            <th style=\"width: 34px\">\n                <img style=\"width: 32px;height: 32px\" alt=\"Note\" src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\">\n            </th>\n            <td>正则表达式参数可用在以上方法中 (替代字符串参数)。\n                <br>正则表达式使得搜索功能更加强大(如实例中不区分大小写)。</td>\n        </tr>\n    </tbody>\n</table>\n<hr>\n <h2>正则表达式修饰符</h2> \n<p><strong>修饰符</strong> 可以在全局搜索中不区分大小写:</p>\n<table class=\"reference       \">\n    <tbody>\n        <tr>\n            <th style=\"width: 22%\">修饰符</th>\n            <th>描述</th>\n        </tr>\n        <tr>\n            <td>i</td>\n            <td>执行对大小写不敏感的匹配。</td>\n        </tr>\n        <tr>\n            <td>g</td>\n            <td>执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。</td>\n        </tr>\n        <tr>\n            <td>m</td>\n            <td>执行多行匹配。</td>\n        </tr>\n    </tbody>\n</table>\n<hr>\n <h2>正则表达式模式</h2> \n<p>方括号用于查找某个范围内的字符：</p>\n<table class=\"reference       \">\n    <tbody>\n        <tr>\n            <th style=\"width: 22%\">表达式</th>\n            <th>描述</th>\n        </tr>\n        <tr>\n            <td>[abc]</td>\n            <td>查找方括号之间的任何字符。</td>\n        </tr>\n        <tr>\n            <td>[0-9]</td>\n            <td>查找任何从 0 至 9 的数字。</td>\n        </tr>\n        <tr>\n            <td>(x|y)</td>\n            <td>查找任何以 | 分隔的选项。</td>\n        </tr>\n    </tbody>\n</table>\n<p>元字符是拥有特殊含义的字符：</p>\n<table class=\"reference       \">\n    <tbody>\n        <tr>\n            <th style=\"width: 22%\">元字符</th>\n            <th>描述</th>\n        </tr>\n        <tr>\n            <td>\\d</td>\n            <td>查找数字。</td>\n        </tr>\n        <tr>\n            <td>\\s</td>\n            <td>查找空白字符。</td>\n        </tr>\n        <tr>\n            <td><span>\\b</span>\n\n            </td>\n            <td>匹配单词边界。</td>\n        </tr>\n        <tr>\n            <td>\\uxxxx</td>\n            <td>查找以十六进制数 xxxx 规定的 Unicode 字符。</td>\n        </tr>\n    </tbody>\n</table>\n<p>量词:</p>\n<table class=\"reference       \">\n    <tbody>\n        <tr>\n            <th style=\"width: 22%\">量词</th>\n            <th>描述</th>\n        </tr>\n        <tr>\n            <td>n+</td>\n            <td>匹配任何包含至少一个 <em>n</em> 的字符串。</td>\n        </tr>\n        <tr>\n            <td>n*</td>\n            <td>匹配任何包含零个或多个 <em>n</em> 的字符串。</td>\n        </tr>\n        <tr>\n            <td>n?</td>\n            <td>匹配任何包含零个或一个 <em>n</em> 的字符串。</td>\n        </tr>\n    </tbody>\n</table>\n<br>\n<hr>\n <h2>使用 RegExp 对象</h2> \n<p>在 JavaScript 中，RegExp 对象是一个预定义了属性和方法的正则表达式对象。</p>\n<hr>\n <h2>使用 test()</h2> \n<p>test() 方法是一个正则表达式方法。</p>\n<p>test() 方法用于检测一个字符串是否匹配某个模式，如果字符串中含有匹配的文本，则返回 true，否则返回 false。</p>\n<p>以下实例用于搜索字符串中的字符 \"e\"：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code\"> <span class=\"highELE\">var</span> patt = /e/;\n        <br>patt.test(<span class=\"highVAL\">\"The best things in life are free!\"</span>);</div>\n    <p>字符串中含有 \"e\"，所以该实例输出为：</p>\n    <div class=\"example_code\">true</div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_regexp_test\" target=\"_blank\">尝试一下 »</a> \n    <p>你可以不用设置正则表达式的变量，以上两行代码可以合并为一行：</p>\n    <div class=\"example_code\">/e/.test(<span class=\"highVAL\">\"The best things in life are free!\"</span>)</div>\n</div>\n<br>\n<hr>\n <h2>使用 exec()</h2> \n<p>exec() 方法是一个正则表达式方法。</p>\n<p>exec() 方法用于检索字符串中的正则表达式的匹配。</p>\n<p>该函数返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。</p>\n<p>以下实例用于搜索字符串中的字母 \"e\":</p>\n<div class=\"example\">\n     <h2 class=\"example\">Example 1</h2> \n    <div class=\"example_code\">/e/.exec(<span class=\"highVAL\">\"The best things in life are free!\"</span>);</div>\n    <p>字符串中含有 \"e\"，所以该实例输出为:</p>\n    <div class=\"example_code\">e</div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_regexp_exec\" target=\"_blank\">尝试一下 »</a> \n</div>\n<p>\n    <br>\n</p>\n<hr>\n\n<h2> 使用 compile()</h2>\n\n<p>compile() 方法用于改变 RegExp。</p>\n<p>compile() 既可以改变检索模式，也可以添加或删除第二个参数。</p>\n<div class=\"example\">\n    <div class=\"example_code\">var patt1=new RegExp(\"e\"); document.write(patt1.test(\"The best things in life are free\")); patt1.compile(\"d\"); document.write(patt1.test(\"The best things in life are free\"));</div>\n</div>\n<p>由于字符串中存在 \"e\"，而没有 \"d\"，以上代码的输出是：\n    <br>\n</p>\n<div class=\"example\">\n    <div class=\"example_code\">truefalse</div>\n</div>\n<hr>\n <h2>完整的 RegExp 参考手册</h2> \n<p>完整的 RegExp 对象参考手册，请参考我们的 <a href=\"/jsref/jsref-obj-regexp.html\"> JavaScript RegExp 参考手册</a>。</p>\n<p>该参考手册包含了所有 RegExp 对象的方法和属性。</p>\n<p>如果你想知道有哪些<a href=\"https://www.w3cschool.cn/lwp2e2/uf1e12iq.html\" target=\"_blank\">js常用的正则表达式</a>，请参考 js 实战手册。</p>\n\n<hr>\n <h2>JavaScript正则表达式在线测试工具</h2> \n<p><a href=\"https://www.w3cschool.cn/tools/index?name=javascriptregex\">JavaScript正则表达式在线测试工具</a></p><p><img src=\"//atts.w3cschool.cn/attachments/image/20180801/1533116648247532.png\" alt=\"\"><br></p>\n<hr>\n<h2>JavaScript 正则表达式学习导图</h2>\n\n<div>\n    <img src=\"https://atts.w3cschool.cn/attachments/image/20160809/1470710362109508.gif\" alt=\"\">\n</div><p><br></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 23,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JavaScript 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "6c9ffbababc88174ccdfcb75a158757b",
      "chapter_level_two_parent_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_two_name": "JavaScript 类型转换",
      "chapter_level_two_url": "/javascript/js-type-conversion.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">类型转换</span></h2> \n<hr>\n<p>Number() 转换为数字， String() 转换为字符串， Boolean() 转化为布尔值。</p>\n<hr>\n <h2>JavaScript 数据类型</h2> \n<p>在 JavaScript 中有 5 <span>种</span>不同的数据类型：</p>\n<ul>\n    <li>string</li>\n    <li>number</li>\n    <li>boolean</li>\n    <li>object</li>\n    <li>function</li>\n</ul>\n<p>3 种对象类型：</p>\n<ul>\n    <li>Object</li>\n    <li>Date</li>\n    <li>Array</li>\n</ul>\n<p>2 个不包含任何值的数据类型：</p>\n<ul>\n    <li>null</li>\n    <li>undefined</li>\n</ul>\n<hr>\n <h2>typeof 操作符</h2> \n<p>你可以使用 <strong>typeof</strong> 操作符来查看 JavaScript 变量的数据类型。</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code\"> <span class=\"highELE\">typeof</span>  <span class=\"highVAL\">\"John\"</span>                 <span class=\"highCOM\">// 返回 string <br></span>  <span class=\"highELE\">typeof</span> \n        <span class=\"highVAL\">3.14</span>                   <span class=\"highCOM\">// 返回 number<br></span>  <span class=\"highELE\">typeof</span> NaN                   \n            <span class=\"highCOM\">// 返回 number\n                <br>\n                </span><span class=\"highELE\">typeof</span>  <span class=\"highVAL\">false</span>                  <span class=\"highCOM\">// 返回 boolean<br></span><span class=\"highELE\">typeof</span> [\n                <span class=\"highVAL\">1</span>,<span class=\"highVAL\">2</span>,<span class=\"highVAL\">3</span>,<span class=\"highVAL\">4</span>]              <span class=\"highCOM\">// 返回 object<br></span>  <span class=\"highELE\">typeof</span> {name:\n                    <span class=\"highVAL\">'John'</span>, age:34}  <span class=\"highCOM\">// 返回 object<br></span><span class=\"highELE\">typeof</span>  <span class=\"highELE\">new</span> Date()             <span class=\"highCOM\">// 返回 object<br></span>\n\n                        <span class=\"highELE\">typeof</span> <span class=\"highELE\">function</span> () {}         <span class=\"highCOM\">// 返回 function<br></span>  <span class=\"highELE\">typeof</span> myCar                 \n                            <span class=\"highCOM\">// 返回 undefined (if myCar is not declared)\n                                <br>\n                                </span> <span class=\"highELE\">typeof</span>  <span class=\"highVAL\">null</span>                   <span class=\"highCOM\">// 返回 object </span>\n\n    </div>\n    <br> <a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_typeof_all\" target=\"_blank\">尝试一下 »</a> \n</div>\n<p>请注意：</p>\n<ul>\n    <li>NaN 的数据类型是 number</li>\n    <li>数组(Array)的数据类型是 object</li>\n    <li>日期(Date)的数据类型为 object</li>\n    <li>null 的数据类型是 object</li>\n    <li>未定义变量的数据类型为 undefined</li>\n</ul>\n<p>如果对象是 JavaScript Array 或 JavaScript Date ，我们就无法通过 <strong>typeof</strong> 来判断他们的类型，因为都是 返回 Object。</p>\n<hr>\n <h2>constructor 属性</h2> \n<p> <strong>constructor</strong> 属性返回所有 JavaScript 变量的构造函数。</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code\"> <span class=\"highVAL\">\"John\"</span>.constructor                 <span class=\"highCOM\">// 返回函数 String()  { [native code] }<br></span> (<span class=\"highVAL\">3.14</span>).constructor                \n        <span class=\"highCOM\">// 返回函数 Number()  { [native code] }\n            <br>\n            </span>false.constructor                  <span class=\"highCOM\">// 返回函数 Boolean() { [native code] }<br></span> [<span class=\"highVAL\">1</span>,<span class=\"highVAL\">2</span>,\n            <span class=\"highVAL\">3</span>,<span class=\"highVAL\">4</span>].constructor              <span class=\"highCOM\">// 返回函数 Array()   { [native code] }<br></span> {name:<span class=\"highVAL\">'John'</span>,\n                age:34}.constructor  <span class=\"highCOM\">// 返回函数 Object()  { [native code] }<br></span>  <span class=\"highELE\">new</span> Date().constructor             <span class=\"highCOM\">// 返回函数 Date()    { [native code] }<br></span> \n                <span class=\"highELE\">function</span>() {}.constructor         <span class=\"highCOM\">// 返回函数 Function(){ [native code] } </span>\n\n    </div>\n    <br> <a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_constructor_all\" target=\"_blank\">尝试一下 »</a> \n</div>\n<p>你可以使用 constructor 属性来查看对象是否为数组 (包含字符串 \"Array\"):</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code\"> <span class=\"highELE\">function</span> isArray(myArray) {\n        <br>    <span class=\"highELE\">return</span> myArray.constructor.toString().indexOf(<span class=\"highVAL\">\"Array\"</span>) &gt; <span class=\"highVAL\">-1</span>;\n        <br>}</div>\n    <br> <a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_array_isarray\" target=\"_blank\">尝试一下 »</a> \n</div>\n<p>你可以使用 constructor 属性来查看是对象是否为日期 (包含字符串 \"Date\"):</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code\"> <span class=\"highELE\">function</span> isDate(myDate) {\n        <br>    <span class=\"highELE\">return</span> myDate.constructor.toString().indexOf(<span class=\"highVAL\">\"Date\"</span>) &gt; <span class=\"highVAL\">-1</span>;\n        <br>}</div>\n    <br> <a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_date_isdate\" target=\"_blank\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>JavaScript 类型转换</h2> \n<p>JavaScript 变量可以转换为新变量或其他数据类型：</p>\n<ul>\n    <li>通过使用 JavaScript 函数</li>\n    <li>通过 JavaScript 自身自动转换</li>\n</ul>\n<hr>\n <h2>将数字转换为字符串</h2> \n<p>全局方法 <strong>String()</strong> 可以将数字转换为字符串。</p>\n<p>该方法可用于任何类型的数字，字母，变量，表达式：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code\">String(x)         <span class=\"highCOM\">// 将变量 x 转换为字符串并返回<br></span> String(<span class=\"highVAL\">123</span>)       <span class=\"highCOM\">// 将数字 123 转换为字符串并返回<br></span> String(\n        <span class=\"highVAL\">100</span>+ <span class=\"highVAL\">23</span>)  <span class=\"highCOM\">// 将数字表达式转换为字符串并返回</span>\n\n    </div>\n    <br> <a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_number_string\" target=\"_blank\">尝试一下 »</a> \n</div>\n<p>Number 方法 <strong>toString()</strong> 也是有同样的效果。</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code\">x.toString()\n        <br>(<span class=\"highVAL\">123</span>).toString()\n        <br>(<span class=\"highVAL\">100</span> + <span class=\"highVAL\">23</span>).toString()</div>\n    <br> <a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_number_tostring\" target=\"_blank\">尝试一下 »</a> \n</div>\n<p>在 <a href=\"/jsref/jsref-obj-number.html\">Number 方法</a> 章节中，你可以找到更多数字转换为字符串的方法：</p>\n<table class=\"reference  \">\n    <tbody>\n        <tr>\n            <th style=\"width:25%\">方法</th>\n            <th>描述</th>\n        </tr>\n        <tr>\n            <td>toExponential()</td>\n            <td>把对象的值转换为指数计数法。</td>\n        </tr>\n        <tr>\n            <td>toFixed()</td>\n            <td>把数字转换为字符串，结果的小数点后有指定位数的数字。</td>\n        </tr>\n        <tr>\n            <td>toPrecision()</td>\n            <td>把数字格式化为指定的长度。</td>\n        </tr>\n    </tbody>\n</table>\n<br>\n<hr>\n <h2>将布尔值转换为字符串</h2> \n<p>全局方法 <strong>String()</strong> 可以将布尔值转换为字符串。</p>\n<div class=\"example\">\n    <div class=\"example_code\">String(<span class=\"highVAL\">false</span>)        <span class=\"highCOM\">// 返回 \"false\"<br></span> String(<span class=\"highVAL\">true</span>)         <span class=\"highCOM\">// 返回 \"true\" </span>\n\n    </div>\n</div>\n<p>Boolean 方法 <strong>toString()</strong> 也有相同的效果。</p>\n<div class=\"example\">\n    <div class=\"example_code\">false.toString()     <span class=\"highCOM\">// 返回 \"false\"<br></span> true.toString()      <span class=\"highCOM\">// 返回 \"true\" </span>\n\n    </div>\n</div>\n<br>\n<hr>\n <h2>将日期转换为字符串</h2> \n<p>全局方法 <strong>String()</strong> 可以将日期转换为字符串。</p>\n<div class=\"example\">\n    <div class=\"example_code\">String(Date())      <span class=\"highCOM\">// 返回 Thu Jul 17 2014 15:38:19 GMT+0200 (W. Europe Daylight Time)</span>\n\n    </div>\n</div>\n<p>Date 方法 <strong>toString()</strong> 也有相同的效果。</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code\">Date().toString()   <span class=\"highCOM\">// 返回 Thu Jul 17 2014 15:38:19 GMT+0200 (W. Europe Daylight Time)</span>\n\n    </div>\n</div>\n<p>在 <a href=\"/jsref/jsref-obj-date.html\">Date 方法</a> 章节中，你可以查看更多关于日期转换为字符串的函数：</p>\n<table class=\"reference  \">\n    <tbody>\n        <tr>\n            <th>方法</th>\n            <th>描述</th>\n        </tr>\n        <tr>\n            <td>getDate()</td>\n            <td>从 Date 对象返回一个月中的某一天 (1 ~ 31)。</td>\n        </tr>\n        <tr>\n            <td>getDay()</td>\n            <td>从 Date 对象返回一周中的某一天 (0 ~ 6)。</td>\n        </tr>\n        <tr>\n            <td>getFullYear()</td>\n            <td>从 Date 对象以四位数字返回年份。</td>\n        </tr>\n        <tr>\n            <td>getHours()</td>\n            <td>返回 Date 对象的小时 (0 ~ 23)。</td>\n        </tr>\n        <tr>\n            <td>getMilliseconds()</td>\n            <td>返回 Date 对象的毫秒(0 ~ 999)。</td>\n        </tr>\n        <tr>\n            <td>getMinutes()</td>\n            <td>返回 Date 对象的分钟 (0 ~ 59)。</td>\n        </tr>\n        <tr>\n            <td>getMonth()</td>\n            <td>从 Date 对象返回月份 (0 ~ 11)。</td>\n        </tr>\n        <tr>\n            <td>getSeconds()</td>\n            <td>返回 Date 对象的秒数 (0 ~ 59)。</td>\n        </tr>\n        <tr>\n            <td>getTime()</td>\n            <td>返回 1970 年 1 月 1 日至今的毫秒数。</td>\n        </tr>\n    </tbody>\n</table>\n<br>\n<hr>\n <h2>将字符串转换为数字</h2> \n<p>全局方法 <strong>Number()</strong> 可以将字符串转换为数字。</p>\n<p>字符串包含数字(如 \"3.14\") 转换为数字 (如 3.14).</p>\n<p>空字符串转换为 0。</p>\n<p>其他的字符串会转换为 NaN (不是个数字)。</p>\n<div class=\"example\">\n    <div class=\"example_code\">Number(<span class=\"highVAL\">\"3.14\"</span>)    <span class=\"highCOM\">// 返回 3.14<br></span> Number(<span class=\"highVAL\">\" \"</span>)       <span class=\"highCOM\">// 返回 0 <br></span> Number(<span class=\"highVAL\">\"\"</span>)       \n        <span class=\"highCOM\">// 返回 0\n            <br>\n            </span>Number(<span class=\"highVAL\">\"99 88\"</span>)   <span class=\"highCOM\">// 返回 NaN </span>\n\n    </div>\n</div>\n<p>在 <a href=\"/jsref/jsref-obj-number.html\">Number 方法</a> 章节中，你可以查看到更多关于字符串转为数字的方法：</p>\n<table class=\"reference  \">\n    <tbody>\n        <tr>\n            <th style=\"width:25%\">方法</th>\n            <th>描述</th>\n        </tr>\n        <tr>\n            <td>parseFloat()</td>\n            <td>解析一个字符串，并返回一个浮点数。</td>\n        </tr>\n        <tr>\n            <td>parseInt()</td>\n            <td>解析一个字符串，并返回一个整数。</td>\n        </tr>\n    </tbody>\n</table>\n<br>\n<hr>\n <h2>一元运算符 + </h2> \n<p> <strong>Operator + </strong> 可用于将变量转换为数字：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code\"> <span class=\"highELE\">var</span> y = <span class=\"highVAL\">\"5\"</span>;      <span class=\"highCOM\">// y 是一个字符串<br></span>  <span class=\"highELE\">var</span> x = + y;      <span class=\"highCOM\">// x 是一个数字 </span>\n\n    </div>\n    <br> <a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_typeof3\" target=\"_blank\">尝试一下 »</a> \n</div>\n<p>如果变量不能转换，它仍然会是一个数字，但值为 NaN (不是一个数字):</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code\"> <span class=\"highELE\">var</span> y = <span class=\"highVAL\">\"John\"</span>;   <span class=\"highCOM\">// y 是一个字符串<br></span>  <span class=\"highELE\">var</span> x = + y;      <span class=\"highCOM\">// x 是一个数字 (NaN)</span>\n\n    </div>\n    <br> <a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_typeof4\" target=\"_blank\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>将布尔值转换为数字</h2> \n<p>全局方法 <strong>Number()</strong> 可将布尔值转换为数字。</p>\n<div class=\"example\">\n    <div class=\"example_code\">Number(<span class=\"highVAL\">false</span>)     <span class=\"highCOM\">// 返回 0<br></span> Number(<span class=\"highVAL\">true</span>)      <span class=\"highCOM\">// 返回 1 </span>\n\n    </div>\n</div>\n<br>\n<hr>\n <h2>将日期转换为数字</h2> \n<p>全局方法 <strong>Number()</strong> 可将日期转换为数字。</p>\n<div class=\"example\">\n    <div class=\"example_code\">d = <span class=\"highELE\">new</span> Date();\n        <br>Number(d)          <span class=\"highCOM\">// 返回 1404568027739 </span>\n\n    </div>\n</div>\n<p>日期方法 <strong>getTime()</strong> 也有相同的效果。</p>\n<div class=\"example\">\n    <div class=\"example_code\">d = <span class=\"highELE\">new</span> Date();\n        <br>d.getTime()        <span class=\"highCOM\">// 返回 1404568027739 </span>\n\n    </div>\n</div>\n<br>\n<hr>\n <h2>自动转换类型 Type Conversion</h2> \n<p>当 JavaScript 尝试操作一个 \"错误\" 的数据类型时，会自动转换为 \"正确\" 的数据类型。</p>\n<p>以下输出结果不是你所期望的：</p>\n<div class=\"example\">\n    <div class=\"example_code\"> <span class=\"highVAL\">5</span> + <span class=\"highVAL\">null</span>    <span class=\"highCOM\">// 返回 5         because null is converted to 0<br></span><span class=\"highVAL\">\"5\"</span> + <span class=\"highVAL\">null</span> \n        <span class=\"highCOM\">// 返回\"5null\"   because null is converted to \"null\"\n            <br>\n            </span> <span class=\"highVAL\">\"5\"</span> + <span class=\"highVAL\">1</span>     <span class=\"highCOM\">// 返回 \"51\"      because 1 is converted to \"1\"  <br></span>  <span class=\"highVAL\">\"5\"</span> - <span class=\"highVAL\">1</span>    \n            <span class=\"highCOM\">// 返回 4         because \"5\" is converted to 5</span>\n    </div>\n</div>\n<div>\n    <br>\n</div>\n<hr>\n <h2>自动转换为字符串</h2> \n<p>当你尝试输出一个对象或一个变量时 JavaScript 会自动调用变量的 toString() 方法：</p>\n<div class=\"example\">\n    <div class=\"example_code\">document.getElementById(<span class=\"highVAL\">\"demo\"</span>).innerHTML = myVar;\n        <br>\n        <br> <span class=\"highCOM\">// if myVar = {name:\"Fjohn\"}  // toString 转换为 \"[object Object]\"<br></span>  <span class=\"highCOM\">// if myVar = [1,2,3,4]       // toString 转换为 \"1,2,3,4\"<br></span>  <span class=\"highCOM\">// if myVar = new Date()      // toString 转换为 \"Fri Jul 18 2014 09:08:55 GMT+0200\"<br></span> \n    </div>\n</div>\n<p>数字和布尔值也经常相互转换：</p>\n<div class=\"example\">\n    <div class=\"example_code\"> <span class=\"highCOM\">// if myVar = 123             // toString 转换为 \"123\"<br></span>  <span class=\"highCOM\">// if myVar = true            // toString 转换为 \"true\"<br></span> \n        <span class=\"highCOM\">// if myVar = false           // toString 转换为 \"false\"</span>\n    </div>\n</div>\n<hr>\n\n<h2>null</h2>\n\n<p>在 JavaScript 中 null 表示 \"什么都没有\"，是一个只有一个值的特殊类型，表示一个空对象引用。</p>\n<p>当设置为“null”时，可以用来清空对象：</p>\n<div class=\"example\">\n    <div class=\"example_code\">var person = null; // 值为 null(空), 但类型为对象</div>\n</div>\n<p><b>提示：</b>你可以使用 typeof 检测 null 返回是object。</p>\n<hr>\n\n<h2>undefined</h2>\n\n<p>在 JavaScript 中 undefined 是一个没有设置值的变量。</p>\n<p>如果一个变量没有设置值的话，就会返回 undefined：</p>\n<div class=\"example\">\n    <div class=\"example_code\">var person; // 值为 undefined(空), 类型是undefined</div>\n</div><hr><h2>相关文章</h2><p>JavaScript标准参考教程：<a href=\"https://www.w3cschool.cn/javascript_guide/javascript_guide-2dg6268m.html\" target=\"_blank\">JavaScript 数据类型转换</a></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 22,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JavaScript 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "ab1523dc5781ae808a4c5174246a67eb",
      "chapter_level_two_parent_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_two_name": "JavaScript Break 和 Continue 语句",
      "chapter_level_two_url": "/javascript/js-break.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">Break 和 Continue 语句</span> </h2> <hr> <p class=\"intro\">break 语句用于跳出循环。</p> <p class=\"intro\">continue 用于跳过循环中的一个迭代。</p> <hr> <h2>Break 语句</h2> <p>我们已经在本教程之前的章节中见到过 break 语句。它用于跳出 switch() 语句。</p> <p>break 语句可用于跳出循环。</p> <p>continue 语句跳出循环后，会继续执行该循环之后的代码（如果有的话）：</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code\"> for (i=0;i&lt;10;i++)<br>   {<br>   if (i==3)<br>     {<br>     break;<br>     }<br>   x=x + \"The number is \" + i + \"&lt;br&gt;\";<br>   }</div> <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_break\" class=\"tryitbtn\">尝试一下 »</a> </div> <p>由于这个 if 语句只有一行代码，所以可以省略花括号：</p> <div class=\"example\"> <div class=\"example_code notranslate\"> for (i=0;i&lt;10;i++)<br>   {<br>   if (i==3) break;<br>   x=x + \"The number is \" + i + \"&lt;br&gt;\";<br>   } </div> </div> <br><hr> <h2>Continue 语句</h2> <p><strong>continue 语句</strong>中断循环中的迭代，如果出现了指定的条件，然后继续循环中的下一个迭代。 该例子跳过了值 3：</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code notranslate\"> for (i=0;i&lt;=10;i++)<br>  {<br>  if (i==3) continue;<br>   x=x + \"The number is \" + i + \"&lt;br&gt;\";<br>   } </div> <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_continue\" class=\"tryitbtn\">尝试一下 »</a> </div><p><b> 注意：</b>由于 break 语句的作用是跳出代码块，所以 break 可以使用于循环和 switch 等；而 continue 语句的作用是进入下一个迭代，所以 continue 只能用于循环的代码块。</p><hr> <h2>JavaScript 标签</h2> <p>正如您在 switch 语句那一章中看到的，可以对 JavaScript 语句进行标记。</p> <p>如需标记 JavaScript 语句，请在语句之前加上冒号：</p> <div class=\"example\"> <div class=\"example_code notranslate\"> label:<br>statements</div> </div> <p>break 和 continue 语句仅仅是能够跳出代码块的语句。</p> <p>语法:</p> <div class=\"example\"> <div class=\"example_code notranslate\"> break <em>labelname</em>; <br><br>continue <em>labelname</em>;</div> </div> <p>continue 语句（带有或不带标签引用）只能用在循环中。</p> <p>break 语句（不带标签引用），只能用在循环或 switch 中。</p> <p>通过标签引用，break 语句可用于跳出任何 JavaScript 代码块：</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code notranslate\"> cars=[\"BMW\",\"Volvo\",\"Saab\",\"Ford\"];<br>list: <br>{<br>document.write(cars[0] + \"&lt;br&gt;\"); <br>document.write(cars[1] + \"&lt;br&gt;\"); <br>document.write(cars[2] + \"&lt;br&gt;\"); <br>break list;<br>document.write(cars[3] + \"&lt;br&gt;\"); <br>document.write(cars[4] + \"&lt;br&gt;\"); <br>document.write(cars[5] + \"&lt;br&gt;\"); <br>}</div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_break_list\" target=\"_blank\">尝试一下 »</a> </div> <h2>相关文章</h2><p>轻松学习 JavaScript：<a href=\"https://www.w3cschool.cn/wkjavascript/3e7a1o98.html\" target=\"_blank\">JavaScript 循环控制</a></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 21,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JavaScript 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "50dd576a86ee8d728b1b2c9a183253fa",
      "chapter_level_two_parent_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_two_name": "JavaScript while 循环",
      "chapter_level_two_url": "/javascript/js-loop-while.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">while 循环</span> </h2> <hr> <p class=\"intro\">JavaScript while 循环的目的是为了反复执行语句或代码块。<br></p><p class=\"intro\">只要指定条件为 true，循环就可以一直执行代码块。</p>      <hr> <h2>while 循环</h2> <p>while 循环会在指定条件为真时循环执行代码块。</p> <h3>语法</h3> <div class=\"code notranslate\"><div> while (<em>条件</em>)<br>   {<br><i>  需要执行的代码</i><br>   }</div></div> <h3>实例</h3> <p>本例中的循环将继续运行，只要变量 i 小于 5：</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code notranslate\"> while (i&lt;5)<br>   {<br>   x=x + \"The number is \" + i + \"&lt;br&gt;\";<br>   i++;<br>   }<br> </div> <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_while\" class=\"tryitbtn\">尝试一下 »</a> </div><p><b> 提示：</b>在本站JavaScript编程实战部分，您可以通过练习来实现<a href=\"https://www.w3cschool.cn/codecamp/iterate-with-javascript-while-loops.html\" target=\"_blank\">使用while语句循环迭代</a>。</p><table class=\"lamp\"><tbody><tr> <th width=\"34\"><img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" width=\"32\" height=\"32\" alt=\"lamp\"></th> <td> 如果您忘记增加条件中所用变量的值，该循环永远不会结束。这可能导致浏览器崩溃。</td> </tr></tbody></table> <br><hr> <h2>do/while 循环</h2> <p>do/while 循环是 while 循环的变体。该循环会在检查条件是否为真之前执行一次代码块，然后如果条件为真的话，就会重复这个循环。</p> <h3>语法</h3> <div class=\"code notranslate\"><div> do<br>   {<br><i>  需要执行的代码<br>   </i>}<br> while (<em>条件</em>);</div></div> <h3>实例</h3> <p>下面的例子使用 do/while 循环。该循环至少会执行一次，即使条件为 false 它也会执行一次，因为代码块会在条件被测试前执行：</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code notranslate\"> do<br>   {<br>   x=x + \"The number is \" + i + \"&lt;br&gt;\";<br>   i++;<br>   }<br> while (i&lt;5);</div> <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_dowhile\" class=\"tryitbtn\">尝试一下 »</a> </div> <p>别忘记增加条件中所用变量的值，否则循环永远不会结束！</p> <hr> <h2>比较 for 和 while</h2> <p>如果您已经阅读了前面那一章关于 for 循环的内容，您会发现 while 循环与 for 循环很像。</p> <p>本例中的循环使用 <strong>for 循环</strong>来显示 cars 数组中的所有值：</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code notranslate\"> cars=[\"BMW\",\"Volvo\",\"Saab\",\"Ford\"];<br> var i=0;<br> for (;cars[i];)<br> {<br> document.write(cars[i] + \"&lt;br&gt;\");<br> i++;<br> } </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_loop_for_cars\" target=\"_blank\">尝试一下 »</a> </div> <p>本例中的循环使用 <strong>while 循环</strong>来显示 cars 数组中的所有值：</p> <div class=\"example\"> <h2 class=\"example\">实例</h2> <div class=\"example_code\"> cars=[\"BMW\",\"Volvo\",\"Saab\",\"Ford\"];<br> var i=0;<br> while (cars[i])<br> {<br> document.write(cars[i] + \"&lt;br&gt;\");<br> i++;<br> } </div> <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_loop_while_cars\" target=\"_blank\">尝试一下 »</a></div></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 20,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JavaScript 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "2c8e4ca3ee1e3e29ec489c7e47a5c3d1",
      "chapter_level_two_parent_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_two_name": "JavaScript for 循环",
      "chapter_level_two_url": "/javascript/js-loop-for.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">for 循环</span> </h2> \n<hr>\n<p class=\"intro\">循环可以将代码块执行指定的次数。</p>\n<hr>\n <h2>JavaScript 循环</h2> \n<p>如果您希望一遍又一遍地运行相同的代码，并且每次的值都不同，那么使用循环是很方便的。</p>\n<p>我们可以这样输出数组的值：</p>\n<div class=\"example\">\n     <h2 class=\"example\">一般写法：</h2> \n    <div class=\"example_code notranslate\">document.write(cars[0] + \"&lt;br&gt;\");\n        <br>document.write(cars[1] + \"&lt;br&gt;\");\n        <br>document.write(cars[2] + \"&lt;br&gt;\");\n        <br>document.write(cars[3] + \"&lt;br&gt;\");\n        <br>document.write(cars[4] + \"&lt;br&gt;\");\n        <br>document.write(cars[5] + \"&lt;br&gt;\");</div>\n    <br>\n    <h2 class=\"example\">使用for循环</h2> \n    <div class=\"example_code notranslate\">for (var i=0;i&lt;cars.length;i++)\n        <br>{\n        <br>document.write(cars[i] + \"&lt;br&gt;\");\n        <br>}</div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_loop_for\" target=\"_blank\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>不同类型的循环</h2> \n<p>JavaScript 支持不同类型的循环：</p>\n<ul>\n    <li><strong>for</strong> - 循环代码块一定的次数</li>\n    <li><strong>for/in</strong> - 循环遍历对象的属性</li>\n    <li><strong>while</strong> - 当指定的条件为 true 时循环指定的代码块</li>\n    <li><strong>do/while</strong> - 同样当指定的条件为 true 时循环指定的代码块</li>\n</ul>\n<hr>\n <h2>For 循环</h2> \n<p>for 循环是您在希望创建循环时常会用到的工具。</p>\n<p>下面是 for 循环的语法：<span style='background-color: rgb(239, 239, 239); font-family: Consolas, \"Courier New\", Courier, monospace; white-space: pre-wrap;'>   </span></p><div class=\"code notranslate\">for (<i>语句 1</i>;<i> 语句 2</i>;<i> 语句 3</i>)        <br>  {        <br><i>  被执行的代码块</i>        <br>  }<br></div>\n<p><strong>语句 1</strong> （代码块）开始前执行 starts.</p>\n<p><strong>语句 2</strong> 定义运行循环（代码块）的条件</p>\n<p><strong>语句 3</strong> 在循环（代码块）已被执行之后执行</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">for (var i=0; i&lt;5; i++)\n        <br>  {\n        <br>  x=x + \"The number is \" + i + \"&lt;br&gt;\";\n        <br>  }\n        <br>\n    </div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_loop_for_ex\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<p>从上面的例子中，您可以看到：</p>\n<p>Statement 1 在循环开始之前设置变量 (var i=0)。</p>\n<p>Statement 2 定义循环运行的条件（i 必须小于 5）。</p>\n<p>Statement 3 在每次代码块已被执行后增加一个值 (i++)。</p>\n<hr>\n <h2>语句 1</h2> \n<p>通常我们会使用语句 1 初始化循环中所用的变量 (var i=0)。</p>\n<p>语句 1 是可选的，也就是说不使用语句 1 也可以。</p>\n<p>您可以在语句 1 中初始化任意（或者多个）值：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例:</h2> \n    <div class=\"example_code notranslate\">for (var i=0,len=cars.length; i&lt;len; i++)\n        <br>{\n        <br>document.write(cars[i] + \"&lt;br&gt;\");\n        <br>}</div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_loop_for_om1\" target=\"_blank\">尝试一下 »</a> \n</div>\n<p>同时您还可以省略语句 1（比如在循环开始前已经设置了值时）：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例:</h2> \n    <div class=\"example_code notranslate\">var i=2,len=cars.length;\n        <br>for (; i&lt;len; i++)\n        <br>{\n        <br>document.write(cars[i] + \"&lt;br&gt;\");\n        <br>}</div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_loop_for_om2\" target=\"_blank\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>语句 2</h2> \n<p>通常语句 2 用于评估初始变量的条件。</p>\n<p>语句 2 同样是可选的。</p>\n<p>如果语句 2 返回 true，则循环再次开始，如果返回 false，则循环将结束。</p>\n<table class=\"lamp\">\n    <tbody>\n        <tr>\n            <th width=\"34\">\n                <img src=\"https://7n.w3cschool.cn/statics/images/course/lamp.jpg\" width=\"32\" height=\"32\" alt=\"lamp\">\n            </th>\n            <td>如果您省略了语句 2，那么必须在循环内提供 break。否则循环就无法停下来。这样有可能令浏览器崩溃。请在本教程稍后的章节阅读有关 break 的内容。</td></tr></tbody></table><br>\n<hr>\n <h2>语句 3</h2> \n<p>通常语句 3 会增加初始变量的值。</p>\n<p>语句 3 也是可选的。</p>\n<p>语句 3 有多种用法。增量可以是负数 (i--)，或者更大 (i=i+15)。</p>\n<p>语句 3 也可以省略（比如当循环内部有相应的代码时）：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例:</h2> \n    <div class=\"example_code notranslate\">var i=0,len=cars.length;\n        <br>for (; i&lt;len; )\n        <br>{\n        <br>document.write(cars[i] + \"&lt;br&gt;\");\n        <br>i++;\n        <br>}</div>\n    <br><a class=\"tryitbtn\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_loop_for_om3\" target=\"_blank\">尝试一下 »</a> \n</div>\n<br>\n<hr>\n <h2>For/In 循环</h2> \n<p>JavaScript for/in 语句循环遍历对象的属性：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\">var person={fname:\"John\",lname:\"Doe\",age:25};\n        <br>\n        <br>for (x in person)\n        <br>  {\n        <br>  txt=txt + person[x];\n        <br>  }</div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_object_for_in\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<p><b>提示：</b>在JavaScript中，for in循环不仅可以遍历对象的属性，还可以遍历数组。\n    <br>\n</p>\n<p>您将在有关 JavaScript 对象的章节学到更多有关 for / in 循环的知识。</p>\n<hr>\n <h2>While 循环</h2> \n<p>我们将在下一章为您讲解 while 循环和 do/while 循环。</p><hr>\n <h2>相关实例</h2>\n<p><a href=\"https://www.w3cschool.cn/codecamp/iterate-with-javascript-for-loops.html\" target=\"_blank\">使用for语句循环迭代</a>\n</p>\n<p>通过一个for循环语句你可以多次执行代码。\n    <br>\n</p>\n<p><a href=\"https://www.w3cschool.cn/codecamp/count-backwards-with-a-for-loop.html\" target=\"_blank\">使用for循环逆向迭代</a>\n</p>\n<p>通过for循环可以逆向迭代，只要我们定义好合适的条件。</p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 19,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JavaScript 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "22c2eafe042b6f42c39d63a88e31d56b",
      "chapter_level_two_parent_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_two_name": "JavaScript switch 语句",
      "chapter_level_two_url": "/javascript/js-switch.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">switch</span> 语句</h2> \n<hr>\n<p class=\"intro\">switch 语句用于基于不同的条件来执行不同的动作。</p>\n<hr>\n <h2>JavaScript switch 语句</h2> \n<p>请使用 switch 语句来选择要执行的多个代码块之一。你可以在JavaScript编程实战中了解怎么<a href=\"https://www.w3cschool.cn/codecamp/selecting-from-many-options-with-switch-statements.html\" target=\"_blank\">使用switch语句进行多选项选择</a>。</p>\n <h3>语法</h3> \n<div class=\"code notranslate\">\n    <div>switch(n)\n        <br>{\n        <br>case 1:\n        <br><i>  执行代码块 1</i>\n\n        <br>break;\n        <br>case 2:\n        <br><i>  执行代码块 2</i>\n\n        <br>break;\n        <br>default:\n        <br><i> n 与 case 1 和 case 2 不同时执行的代码</i>\n\n        <br>}</div>\n</div>\n<p> <b>代码解释：</b>\n\n</p>\n<ul>\n    <li>计算一次 switch 表达式</li>\n    <li>把表达式的值与每个case的值进行对比</li>\n    <li>如果存在匹配，则执行关联代码\n        <br>\n    </li>\n</ul>\n<p>工作原理：首先设置表达式 <i>n</i>（通常是一个变量）。随后表达式的值会与结构中的每个 case 的值做比较。如果存在匹配，则与该 case 关联的代码块会被执行。请使用 <code><strong>break </strong></code>来阻止代码自动地向下一个 case 运行。</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <p class=\"example\">显示今天的星期名称。请注意 Sunday=0, Monday=1, Tuesday=2, 等等：</p>\n    <div class=\"example_code notranslate\">var day=new Date().getDay();\n        <br>switch (day)\n        <br>{\n        <br>case 0:\n        <br>  x=\"Today it's Sunday\";\n        <br>  break;\n        <br>case 1:\n        <br>  x=\"Today it's Monday\";\n        <br>  break;\n        <br>case 2:\n        <br>  x=\"Today it's Tuesday\";\n        <br>  break;\n        <br>case 3:\n        <br>  x=\"Today it's Wednesday\";\n        <br>  break;\n        <br>case 4:\n        <br>  x=\"Today it's Thursday\";\n        <br>  break;\n        <br>case 5:\n        <br>  x=\"Today it's Friday\";\n        <br>  break;\n        <br>case 6:\n        <br>  x=\"Today it's Saturday\";\n        <br>  break;\n        <br>}</div>\n    <p><em>x</em> 的运行结果：</p>\n    <div class=\"example_code notranslate\"></div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_switch\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n <h2>break 关键词</h2>\n\n<p>如果 JavaScript 遇到 <code>break</code> 关键词，它会跳出 switch 代码块。</p>\n<p>此举将停止代码块中更多代码的执行以及 <code>case</code> 测试。</p>\n<p>如果找到匹配，并完成任务，则随机中断执行（break）。无需更多测试。</p>\n<p><code>break</code> 能够节省大量执行时间，因为它会“忽略” switch 代码块中的其他代码的执行。</p>\n<p>不必中断 switch 代码块中的最后一个 <code>case</code>。代码块在此处会自然结束。</p>\n\n<h2>default 关键词</h2> \n<p>请使用 default 关键词来规定匹配不存在时做的事情：</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <p class=\"example\">如果今天不是星期六或星期日，则会输出默认的消息：</p>\n    <div class=\"example_code notranslate\">var day=new Date().getDay();\n        <br>switch (day)\n        <br>{\n        <br>case 6:\n        <br>  x=\"Today it's Saturday\";\n        <br>  break;\n        <br>case 0:\n        <br>  x=\"Today it's Sunday\";\n        <br>  break;\n        <br>default:\n        <br>  x=\"Looking forward to the Weekend\";\n        <br>}</div>\n    <p> <em>x</em> 的运行结果：</p>\n    <div class=\"example_code notranslate\"></div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_switch2\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<p>默认的 case 不必是 switch 代码块中最后一个 case：</p>\n\n\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\"><p>switch (new Date().getDay()) {</p><p>default: </p><p>text = \"期待周末！\";</p><p>break;</p><p>case 6:</p><p>text = \"今天是周六\";</p><p>break; </p><p>case 0:</p><p>text = \"今天是周日\";</p><p>} <br></p></div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_switch_3\" class=\"tryitbtn\">尝试一下 »</a>\n\n</div>\n\n\n\n\n\n\n<p>如果 default 不是 switch 代码块中最后一个 case，请记得用 break 结束默认 case。</p>\n<h2>常见的代码块</h2>\n<p>有时您会需要不同的 case 来使用相同的代码。</p>\n<p>在本例中，case 4 和 5 分享相同的代码块，而 0 和 6 分享另一段代码块：</p>\n\n\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\"><p>switch (new Date().getDay()) {</p><p>case 4:</p><p>case 5:</p><p>text = \"周末快到了：）\";</p><p>break; </p><p>case 0:</p><p>case 6:</p><p>text = \"今天是周末~\";</p><p> break;</p><p>default: </p><p>text = \"期待周末！\";</p><p>}</p></div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_switch_4\" class=\"tryitbtn\">尝试一下 »</a>\n\n</div><h2>Switching 的细节</h2>\n<p>如果多种 case 匹配一个 case 值，则选择第一个 case。</p>\n<p>如果未找到匹配的 case，程序将继续使用默认 label。</p>\n<p>如果未找到默认 label，程序将继续 switch 后的语句。</p>\n<h2>严格的比较</h2>\n<p>Switch case 使用严格比较（===）。</p>\n<p>值必须与要匹配的类型相同。</p>\n<p>只有操作数属于同一类型时，严格比较才能为 true。</p>\n<p>在这个例子中，x 将不匹配：</p>\n\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <div class=\"example_code notranslate\"><p>var x = \"0\";</p><p>switch (x) {</p><p>case 0:</p><p>text = \"Off\";</p><p>break;</p><p>case 1:</p><p>text = \"On\";</p><p>break;</p><p>default:</p><p>text = \"No value found\";</p><p>}</p></div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_switch_5\" class=\"tryitbtn\">尝试一下 »</a>\n\n</div><br><h2>相关文章</h2>\n\n<p>轻松学习JavaScript：<a href=\"https://www.w3cschool.cn/wkjavascript/l7w11o8v.html\" target=\"_blank\">JavaScript Switch Case</a>\n\n</p>\n<p>\n    <br>\n</p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 18,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JavaScript 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "b8cd5638b65cee124216e592add2b703",
      "chapter_level_two_parent_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_two_name": "JavaScript if…else 语句",
      "chapter_level_two_url": "/javascript/js-if-else.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>JavaScript <span class=\"color_h1\">if...else</span> 语句</h2> \n<hr>\n<p class=\"intro\">条件语句用于基于不同的条件来执行不同的动作。</p>\n<hr>\n <h2>条件语句</h2> \n<p>通常在写代码时，您总是需要为不同的决定来执行不同的动作。您可以在代码中使用条件语句来完成该任务。</p>\n<p>在 JavaScript 中，我们可使用以下条件语句：</p>\n<ul>\n    <li><strong>if 语句</strong> - 只有当指定条件为 true 时，使用该语句来执行代码</li>\n    <li><strong>if...else 语句</strong> - 当条件为 true 时执行代码，当条件为 false 时执行其他代码</li>\n    <li><strong>JavaScript三目运算 - </strong>当条件为<span>true 时执行代码，当条件为 false 时执行其他代码</span>\n        <br>\n    </li>\n    <li><strong>if...else if....else 语句</strong>- 使用该语句来选择多个代码块之一来执行</li>\n    <li><strong>switch 语句</strong> - 使用该语句来选择多个代码块之一来执行</li>\n</ul>\n<hr>\n <h2>If 语句</h2> \n<p>只有当指定条件为 true 时，该语句才会执行代码。</p>\n <h3>语法</h3><div class=\"code notranslate\"><div>if (<em>condition</em>)       <br>{       <br><em> 当条件为 true 时执行的代码</em>        <br>}</div></div>\n<p>请使用小写的<strong> if</strong>。使用大写字母（IF）会生成 JavaScript 错误！</p>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <p class=\"example\">当时间小于 20:00 时，生成问候 \"Good day\"：</p>\n    <div class=\"example_code notranslate\">if (time&lt;20)\n        <br>{\n        <br>  x=\"Good day\";\n        <br>}</div><strong>x 的结果是：</strong>\n    \n    <div class=\"example_code\">Good day</div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_ifthen\" class=\"tryitbtn\">尝试一下 »</a> \n</div>\n<p>请注意，在这个语法中，没有 ..else..。您已经告诉浏览器只有在指定条件为 true 时才执行代码。</p>\n<hr>\n <h2>If...else 语句</h2> \n<p>请使用 if....else 语句在条件为 true 时执行代码，在条件为 false 时执行其他代码。</p>\n <h3>语法</h3><div class=\"code notranslate\"><div>if (<em>condition</em>)        <br>{       <br><em>  当条件为 true 时执行的代码</em>      <br>}        <br>else        <br>{        <br><em>  当条件不为 true 时执行的代码</em>        <br>}</div></div>\n<br>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <p class=\"example\">当时间小于 20:00 时，生成问候 \"Good day\"，否则生成问候 \"Good evening\"。</p>\n    <div class=\"example_code notranslate\">if (time&lt;20)\n        <br>{\n        <br>  x=\"Good day\";\n        <br>}\n        <br>else\n        <br>{\n        <br>  x=\"Good evening\";\n        <br>}</div>\n    <p><strong>x </strong>的结果是：</p>\n    <div class=\"example_code notranslate\">Good day</div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_ifthenelse\" class=\"tryitbtn\">尝试一下 »</a> \n</div><p><b>提示：</b>在本站的编程实战中，你可以练习如何<a href=\"https://www.w3cschool.cn/codecamp/use-conditional-logic-with-if-statements.html\" target=\"_blank\">使用JavaScript的if语句</a>！</p><br>\n\n<hr>\n\n\n<h2>Javascript三目运算（三元运算） 语句</h2><span>请使用 (<em>condition1</em>) ? ture-doing : else-doing; 语句在条件为 true 时执行代码，在条件为 false 时执行其他代码。</span>\n<br><strong>实例</strong>\n\n<pre><code class=\"javascript\">5 &gt; 3 ? alert(\"5大于3\") : alert(\"5小于3\");\n</code></pre><span>注意：if...else与三目运算这两者的区别，总结为一句话：三目运算有返回值，if else没有返回值</span>\n<br><p>例子1：\n</p>\n<pre><code class=\"javascript\">var n=1;\nif(n&gt;1){\n    n=0;\n}else{\n    n++;\n}\nconsole.log(n);\n#输出结果：2\n\nvar n=1;\nn = n&gt;1?0 : n++;\nconsole.log(n);\n#输出结果为：1\n</code></pre><p>例子2：\n</p>\n<pre><code class=\"javascript\">var n=1;\nif(n&gt;1){\n    n=0;\n}else{\n    ++n;\n}\nconsole.log(n);\n#输出结果：2\n\nvar n=1;\nn = n&gt;1?0 : ++n; \nconsole.log(n); \n#输出结果为：2\n</code></pre>\n<br>\n\n<hr>\n <h2>If...else if...else 语句</h2> \n<p>使用 if....else if...else 语句来选择多个代码块之一来执行。</p>\n <h3>语法</h3><div class=\"code notranslate\"><div>if (<em>condition1</em>)       <br>{        <br><em>  当条件 1 为 true 时执行的代码</em>       <br>}       <br>else if (<em>condition2</em>)       <br>{        <br><em> 当条件 2 为 true 时执行的代码</em>      <br>}        <br>else        <br>{        <br><em>  当条件 1 和 条件 2 都不为 true 时执行的代码</em>        <br>}</div></div>\n<br>\n<div class=\"example\">\n     <h2 class=\"example\">实例</h2> \n    <p class=\"example\">如果时间小于 10:00，则生成问候 \"Good morning\"，如果时间大于 10:00 小于 20:00，则生成问候 \"Good day\"，否则生成问候 \"Good evening\"：</p>\n    <div class=\"example_code notranslate\">if (time&lt;10)\n        <br>{\n        <br>  x=\"Good morning\";\n        <br>}\n        <br>else if (time&gt;=10 &amp;&amp; time&lt;20)\n        <br>{\n        <br>  x=\"Good day\";\n        <br>}\n        <br>else\n        <br>{\n        <br>  x=\"Good evening\";\n        <br>}</div>\n    <p><strong>x </strong>的结果是：</p>\n    <div class=\"example_code notranslate\">Good morning</div>\n    <br><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_elseif\" class=\"tryitbtn\">尝试一下 »</a> \n</div><p><b>\n提示：</b>在使用if、else if语句的时候需要注意它们中代码的执行顺序，具体练习请参考本站的<a href=\"https://www.w3cschool.cn/codecamp/logical-order-in-if-else-statements.html\" target=\"_blank\">《JavaScript编程实战》</a>！</p>\n<hr>\n<div class=\"tryit_ex\">\n    <img src=\"https://7n.w3cschool.cn/statics/images/course/tryitimg.gif\" alt=\"Examples\" height=\"46px\" width=\"40\">\n    <h2>更多实例</h2> \n</div>\n<p><a target=\"_blank\" showtry=\"1\" href=\"/tryrun/showhtml/tryjs_randomlink\">随机链接</a>\n    <br>这个实例演示了一个链接，当您点击链接时，会带您到不同的地方去。每种机会都是 50% 的概率。</p><h2>相关阅读</h2><p>JavaScript标准参考手册：<a href=\"https://www.w3cschool.cn/xqw2e7/upgx19wq.html\" target=\"_blank\">javascript if条件</a></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 17,
      "parent_sort_index": 1,
      "chapter_level_one_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "JavaScript 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "1994e173b003ad9d333123b29822ded7",
      "chapter_level_two_parent_id": "d5794f320cee2e7bf3481f2fb51a6c52",
      "chapter_level_two_name": "JavaScript 流程语句知识脑图",
      "chapter_level_two_url": "/javascript/wopi12hp.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h3>JavaScript 流程语句学习脑图</h3><p>JavaScript 通过规定的语句让程序代码有条件的按照一定的方式执行。<br></p><div><img src=\"https://atts.w3cschool.cn/attachments/image/20160809/1470710031660821.gif\" alt=\"\"><br></div></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 4,
      "parent_sort_index": 11,
      "chapter_level_one_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "相关文章",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "c93437e8faf4e8eb20a92caa7c9bf7cf",
      "chapter_level_two_parent_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_two_name": "零基础自学前端到达到什么水平才能找工作？",
      "chapter_level_two_url": "/article/51125035.html",
      "book_content": ""
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 3,
      "parent_sort_index": 11,
      "chapter_level_one_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "相关文章",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "2daf7fc885ddefd45799e18d43c0e152",
      "chapter_level_two_parent_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_two_name": "2021年快速成为前端工程师，各个阶段必须掌握的基本技能汇总",
      "chapter_level_two_url": "/article/6537430.html",
      "book_content": ""
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 8,
      "parent_sort_index": 11,
      "chapter_level_one_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "相关文章",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "4283180d386991404506d01087e5efce",
      "chapter_level_two_parent_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_two_name": "最新的WEB开发编程语言排行如何？",
      "chapter_level_two_url": "/article/59237174.html",
      "book_content": ""
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 5,
      "parent_sort_index": 11,
      "chapter_level_one_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "相关文章",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "79af3bf5e73cafa41cc28a9b966a84bf",
      "chapter_level_two_parent_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_two_name": "初学者必看的web前端开发学习路线,干货满满！",
      "chapter_level_two_url": "/article/49146914.html",
      "book_content": ""
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 10,
      "parent_sort_index": 11,
      "chapter_level_one_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "相关文章",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "169bd2949b611ae93d2fad1a65d3d5a3",
      "chapter_level_two_parent_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_two_name": "2021 第一期 日常开发 26 个常见的 JavaScript 代码优化方案",
      "chapter_level_two_url": "/article/15127504.html",
      "book_content": ""
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 6,
      "parent_sort_index": 11,
      "chapter_level_one_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "相关文章",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "a2530779bc68195d9af794a306f4e433",
      "chapter_level_two_parent_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_two_name": "HTML编辑器有哪些，HTML编辑器推荐",
      "chapter_level_two_url": "/article/5a8aca22a0c87d.html",
      "book_content": ""
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 9,
      "parent_sort_index": 11,
      "chapter_level_one_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "相关文章",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "2ec77042844c8c10799025020209252b",
      "chapter_level_two_parent_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_two_name": "W3Cschool 热门编程语言排行榜 2020年 10月 TOP10",
      "chapter_level_two_url": "/article/44760098.html",
      "book_content": ""
    },
    {
      "teach_name": "JavaScript 教程",
      "teach_introduction": "JavaScript 是世界上最流行的脚本语言。\r\nJavaScript 是属于 web 的语言，它适用于 PC、笔记本电脑、平板电脑和移动电话。\r\nJavaScript 被设计为向 HTML 页面增加交互性。\r\n许多 HTML 开发者都不是程序员，但是 JavaScript 却拥有非常简单的语法。几乎每个人都有能力将小的 JavaScript 片段添加到网页中。",
      "sort_index": 7,
      "parent_sort_index": 11,
      "chapter_level_one_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "相关文章",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "02ff1b81cd6c96500cf678d390c6a920",
      "chapter_level_two_parent_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_two_name": "WEB 前端开发工程师是什么？",
      "chapter_level_two_url": "/article/97846991.html",
      "book_content": ""
    }
  ]
}
