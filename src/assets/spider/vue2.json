{
  "name": "Vue.js 2.0 教程",
  "author": "admin",
  "type": "前端进阶",
  "introduction": "Vue.js 2.0 版本，是目前主流的版本。",
  "data": [{
    "teach_name": "Vue.js 2.0 教程",
    "teach_introduction": "Vue.js 2.0 版本，是目前主流的版本。",
    "sort_index": 1,
    "parent_sort_index": 1,
    "chapter_level_one_id": "4e96a383dc08d306c951ba0d75ca6db7",
    "chapter_level_one_parent_id": "0",
    "chapter_level_one_name": "Vue.js 2.0 教程",
    "chapter_level_one_url": "",
    "chapter_level_two_id": "b7ea13939ba5279a5d78f15c9a413874",
    "chapter_level_two_parent_id": "4e96a383dc08d306c951ba0d75ca6db7",
    "chapter_level_two_name": "安装",
    "chapter_level_two_url": "/vuejs2/installation.html",
    "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>Vue.js 安装</h2><h3><a href=\"http://doc.vue-js.com/v2/guide/installation.html#%E5%85%BC%E5%AE%B9%E6%80%A7\" rel=\"external nofollow\" target=\"_blank\"></a>兼容性</h3><p>Vue.js 不支持 IE8 及其以下版本，因为 Vue.js 使用了 IE8 不能模拟的 ECMAScript 5 特性。</p><p>Vue.js 支持所有兼容 ECMAScript 5 的浏览器。</p><h3><a href=\"http://doc.vue-js.com/v2/guide/installation.html#%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97\" rel=\"external nofollow\" target=\"_blank\"></a>更新日志</h3><p>每个版本的更新日志见 <a href=\"https://github.com/vuejs/vue/releases\" rel=\"external nofollow\" target=\"_blank\">GitHub</a>。</p><a href=\"http://doc.vue-js.com/v2/guide/installation.html#%E7%8B%AC%E7%AB%8B%E7%89%88%E6%9C%AC\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/installation.html#%E7%8B%AC%E7%AB%8B%E7%89%88%E6%9C%AC\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/installation.html#%E7%8B%AC%E7%AB%8B%E7%89%88%E6%9C%AC\" rel=\"external nofollow\" target=\"_blank\"></a>独立版本</h2><p>直接下载并用 &lt;script&gt; 标签引入，Vue 会被注册为一个全局变量。<strong>重要提示：在开发时请用开发版本，遇到常见错误它会给出友好的警告。</strong></p><p><strong>注意：</strong>开发环境不要用最小压缩版，不然就失去了错误提示和警告！</p><ul>        <li><a href=\"http://vuejs.org/js/vue.js\" rel=\"external nofollow\" target=\"_blank\" style=\"background-color: rgb(255, 255, 255);\">开发版本</a>：包含完整的警告和调试模式            <br>        </li>        <li><a href=\"http://vuejs.org/js/vue.min.js\" rel=\"external nofollow\" target=\"_blank\" style=\"background-color: rgb(255, 255, 255);\">生产版本</a>：删除了警告，23.55kb min+gzip</li>    </ul><a href=\"http://doc.vue-js.com/v2/guide/installation.html#CDN\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/installation.html#CDN\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/installation.html#CDN\" rel=\"external nofollow\" target=\"_blank\"></a>CDN</h3><p>推荐：<a href=\"https://unpkg.com/vue/dist/vue.js\" rel=\"external nofollow\" target=\"_blank\">unpkg</a>, 会保持和 npm 发布的最新的版本一致。可以在 <a href=\"https://unpkg.com/vue/\" rel=\"external nofollow\" target=\"_blank\">unpkg.com/vue/</a> 浏览 npm 包资源。</p><p>也可以从 <a href=\"http://cdn.jsdelivr.net/vue/2.0.5/vue.js\" rel=\"external nofollow\" target=\"_blank\">jsdelivr</a> 或 <a href=\"http://cdnjs.cloudflare.com/ajax/libs/vue/2.0.5/vue.js\" rel=\"external nofollow\" target=\"_blank\">cdnjs</a> 获取，不过这两个服务版本更新可能略滞后。</p><a href=\"http://doc.vue-js.com/v2/guide/installation.html#NPM\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/installation.html#NPM\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/installation.html#NPM\" rel=\"external nofollow\" target=\"_blank\"></a>NPM</h2><p>在用 Vue.js 构建大型应用时推荐使用 NPM 安装， NPM 能很好地和诸如 <a href=\"http://webpack.github.io/\" rel=\"external nofollow\" target=\"_blank\">Webpack</a> 或 <a href=\"http://browserify.org/\" rel=\"external nofollow\" target=\"_blank\">Browserify</a> 模块打包器配合使用。 Vue.js 也提供配套工具来开发<a href=\"https://www.w3cschool.cn/vuejs2/single-file-components.html\" target=\"_blank\">单文件组件</a>。</p><pre lang=\"php\"><code class=\"php\"># 最新稳定版\n$ npm install vue</code></pre><h3><a href=\"http://doc.vue-js.com/v2/guide/installation.html#%E7%8B%AC%E7%AB%8B%E6%9E%84%E5%BB%BA-vs-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%9E%84%E5%BB%BA\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/installation.html#%E7%8B%AC%E7%AB%8B%E6%9E%84%E5%BB%BA-vs-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%9E%84%E5%BB%BA\" rel=\"external nofollow\" target=\"_blank\"></a>独立构建 vs 运行时构建</h3><p>有两种构建方式，独立构建和运行构建。它们的区别在于前者包含<strong>模板编译器</strong>而后者不包含。</p><p>模板编译用于编译 Vue 模板字符串成纯 JavaScript 渲染函数。如果你想用 template 选项，你需要编译。</p><p>模板编译器的职责是将模板字符串编译为纯 JavaScript 的渲染函数。如果你想要在组件中使用 template 选项，你就需要编译器。</p><ul>    <li>独立构建包含模板编译器并支持 template 选项。<strong>它也依赖于浏览器的接口的存在，所以你不能使用它来为服务器端渲染。</strong>    </li>    <li>运行时构建不包含模板编译器，因此不支持 template 选项，只能用 render 选项，但即使使用运行时构建，在单文件组件中也依然可以写模板，因为单文件组件的模板会在构建时预编译为 render 函数。运行时构建比独立构建要轻量30%，只有 16.39 Kb min+gzip大小。</li></ul><p>默认 NPM 包导出的是<strong>运行时</strong>构建。为了使用独立构建，在 webpack 配置中添加下面的别名：</p><pre lang=\"php\"><code class=\"php\">resolve: {\n  alias: {\n    'vue$': 'vue/dist/vue.js'\n  } \n}</code></pre><p>对于Browserify，可以用 <a href=\"https://github.com/benbria/aliasify\" rel=\"external nofollow\" target=\"_blank\" style=\"background-color: rgb(255, 255, 255);\">aliasify</a>    <br></p><p>不要用 import Vue from 'vue/dist/vue.js' - 用一些工具或第三方库引入 Vue ，这可能会导致应用程序在同一时间加载运行时和独立构建并造成错误。</p><a href=\"http://doc.vue-js.com/v2/guide/installation.html#CSP-%E7%8E%AF%E5%A2%83\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/installation.html#CSP-%E7%8E%AF%E5%A2%83\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/installation.html#CSP-%E7%8E%AF%E5%A2%83\" rel=\"external nofollow\" target=\"_blank\"></a>CSP 环境</h3><p>有些环境，如 Google Chrome Apps，强制应用内容安全策略 (CSP) ，不能使用 new Function() 对表达式求值。这时可以用 CSP 兼容版本。独立的构建取决于该功能编译模板，所以无法使用这些环境。</p><p>另一方面，运行时构建的是完全兼容 CSP 的。当通过 <a href=\"https://github.com/vuejs-templates/webpack-simple\" rel=\"external nofollow\" target=\"_blank\">Webpack + vue-loader</a> 或者 <a href=\"https://github.com/vuejs-templates/browserify-simple\" rel=\"external nofollow\" target=\"_blank\">Browserify + vueify</a> 构建时，在    CSP 环境中模板将被完美预编译到 render 函数中。</p><a href=\"http://doc.vue-js.com/v2/guide/installation.html#%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/installation.html#%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/installation.html#%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7\" rel=\"external nofollow\" target=\"_blank\"></a>命令行工具</h2><p>Vue.js 提供一个<a href=\"https://github.com/vuejs/vue-cli\" rel=\"external nofollow\" target=\"_blank\">官方命令行工具</a>，可用于快速搭建大型单页应用。该工具提供开箱即用的构建工具配置，带来现代化的前端开发流程。只需一分钟即可启动带热重载、保存时静态检查以及可用于生产环境的构建配置的项目：</p><pre lang=\"php\"><code class=\"php\"># 全局安装 vue-cli\n$ npm install --global vue-cli\n# 创建一个基于 webpack 模板的新项目\n$ vue init webpack my-project\n# 安装依赖，走你\n$ cd my-project\n$ npm install\n$ npm run dev</code></pre><p>如果全局安装完 vue-cli 后，执行 vue 命令出错</p><p>解决方法：全局搜索 vue.cmd 将 vue.cmd 所在的路径添加到环境变量 Path 后面。再执行 vue -V 即可。</p><p><br></p><p>CLI 默认了用户对 Node.js 和相关构建工具有一定程度的了解。如果你是新手，我们强烈建议先在不用构建工具的情况下通读本教程，熟悉 Vue 本身之后再研究 CLI。</p><p>对于大陆用户，建议将 npm 的注册表源<a href=\"http://riny.net/2014/cnpm/\" rel=\"external nofollow\" target=\"_blank\">设置为国内的镜像</a>，可以大幅提升安装速度。</p><a href=\"http://doc.vue-js.com/v2/guide/installation.html#%E5%BC%80%E5%8F%91%E7%89%88%E6%9C%AC\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/installation.html#%E5%BC%80%E5%8F%91%E7%89%88%E6%9C%AC\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/installation.html#%E5%BC%80%E5%8F%91%E7%89%88%E6%9C%AC\" rel=\"external nofollow\" target=\"_blank\"></a>开发版本</h2><p>重要：Github 仓库的 /dist 文件夹只有在新版本发布时才会更新。如果想要使用 Github 上 Vue 最新的源码，你需要自己构建。</p><pre lang=\"php\"><code class=\"php\">git clone https://github.com/vuejs/vue.git node_modules/vue\ncd node_modules/vue\nnpm install\nnpm run build</code></pre><h2>Bower</h2><h2><a href=\"http://doc.vue-js.com/v2/guide/installation.html#Bower\" rel=\"external nofollow\" target=\"_blank\"></a></h2><pre lang=\"php\"><code class=\"php\"># 最新稳定版本\n$ bower install vue</code></pre><h2><a href=\"http://doc.vue-js.com/v2/guide/installation.html#AMD-%E6%A8%A1%E5%9D%97%E5%8A%A0%E8%BD%BD%E5%99%A8\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/installation.html#AMD-%E6%A8%A1%E5%9D%97%E5%8A%A0%E8%BD%BD%E5%99%A8\" rel=\"external nofollow\" target=\"_blank\"></a>AMD 模块加载器</h2><p>独立下载版本或通过 Bower 安装的版本已用 UMD 包装，因此它们可以直接用作 AMD 模块。</p><p><br></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
  },
    {
      "teach_name": "Vue.js 2.0 教程",
      "teach_introduction": "Vue.js 2.0 版本，是目前主流的版本。",
      "sort_index": 6,
      "parent_sort_index": 2,
      "chapter_level_one_id": "e8fb10237b03499ebdc00cd95024fcfb",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "Vue.js 2.0 进阶教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "00076ac34c907359736a29f5fa81b4b5",
      "chapter_level_two_parent_id": "e8fb10237b03499ebdc00cd95024fcfb",
      "chapter_level_two_name": "混合",
      "chapter_level_two_url": "/vuejs2/mixins.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2><span style=\"font-family:inherit;\">Vue.js 2.0 </span>混合基础</h2><p>混合是一种灵活的分布式复用 Vue 组件的方式。混合对象可以包含任意组件选项。以组件使用混合对象时，所有混合对象的选项将被混入该组件本身的选项。</p><p>例子：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">// 定义一个混合对象\nvar myMixin = {\n  created: function () {\n    this.hello()\n  },\n  methods: {\n    hello: function () {\n      console.log('hello from mixin!')\n    }\n  }\n}\n// 定义一个使用混合对象的组件\nvar Component = Vue.extend({\n  mixins: [myMixin]\n})\nvar component = new Component() // -&gt; \"hello from mixin!\"</code></pre><a href=\"http://doc.vue-js.com/v2/guide/mixins.html#%E9%80%89%E9%A1%B9%E5%90%88%E5%B9%B6\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/mixins.html#%E9%80%89%E9%A1%B9%E5%90%88%E5%B9%B6\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/mixins.html#%E9%80%89%E9%A1%B9%E5%90%88%E5%B9%B6\" rel=\"external nofollow\" target=\"_blank\"></a>选项合并</h2><p>当组件和混合对象含有同名选项时，这些选项将以恰当的方式混合。比如，同名钩子函数将混合为一个数组，因此都将被调用。另外，混合对象的 钩子将在组件自身钩子<strong>之前</strong>调用 ：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">var mixin = {\n  created: function () {\n    console.log('mixin hook called')\n  }\n}\nnew Vue({\n  mixins: [mixin],\n  created: function () {\n    console.log('component hook called')\n  }\n})\n// -&gt; \"混合对象的钩子被调用\"\n// -&gt; \"组件钩子被调用\"</code></pre><p>值为对象的选项，例如 methods, components 和 directives，将被混合为同一个对象。 两个对象键名冲突时，取组件对象的键值对。</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">var mixin = {\n  methods: {\n    foo: function () {\n      console.log('foo')\n    },\n    conflicting: function () {\n      console.log('from mixin')\n    }\n  }\n}\nvar vm = new Vue({\n  mixins: [mixin],\n  methods: {\n    bar: function () {\n      console.log('bar')\n    },\n    conflicting: function () {\n      console.log('from self')\n    }\n  }\n})\nvm.foo() // -&gt; \"foo\"\nvm.bar() // -&gt; \"bar\"\nvm.conflicting() // -&gt; \"from self\"</code></pre><p>注意： Vue.extend() 也使用同样的策略进行合并。</p><a href=\"http://doc.vue-js.com/v2/guide/mixins.html#%E5%85%A8%E5%B1%80%E6%B7%B7%E5%90%88\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/mixins.html#%E5%85%A8%E5%B1%80%E6%B7%B7%E5%90%88\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/mixins.html#%E5%85%A8%E5%B1%80%E6%B7%B7%E5%90%88\" rel=\"external nofollow\" target=\"_blank\"></a>全局混合</h2><p>也可以全局注册混合对象。 注意使用！ 一旦使用全局混合对象，将会影响到<strong>所有</strong>之后创建的 Vue 实例。使用恰当时，可以为自定义对象注入处理逻辑。</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">// 为自定义的选项 'myOption' 注入一个处理器。 \nVue.mixin({\n  created: function () {\n    var myOption = this.$options.myOption\n    if (myOption) {\n      console.log(myOption)\n    }\n  }\n})\nnew Vue({\n  myOption: 'hello!'\n})\n// -&gt; \"hello!\"</code></pre><blockquote><p>谨慎使用全局混合对象，因为会影响到每个单独创建的 Vue 实例（包括第三方模板）。大多数情况下，只应当应用于自定义选项，就像上面示例一样。 也可以将其用作<strong>插件</strong>以避免产生重复应用。</p></blockquote><a href=\"http://doc.vue-js.com/v2/guide/mixins.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E9%80%89%E9%A1%B9%E6%B7%B7%E5%90%88%E7%AD%96%E7%95%A5\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/mixins.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E9%80%89%E9%A1%B9%E6%B7%B7%E5%90%88%E7%AD%96%E7%95%A5\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/mixins.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E9%80%89%E9%A1%B9%E6%B7%B7%E5%90%88%E7%AD%96%E7%95%A5\" rel=\"external nofollow\" target=\"_blank\"></a>自定义选项混合策略</h2><p>自定义选项将使用默认策略，即简单地覆盖已有值。 如果想让自定义选项以自定义逻辑混合，可以向 Vue.config.optionMergeStrategies 添加一个函数：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">Vue.config.optionMergeStrategies.myOption = function (toVal, fromVal) {\n  // return mergedVal\n}</code></pre><p>对于大多数对象选项，可以使用 methods 的合并策略：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">var strategies = Vue.config.optionMergeStrategies\nstrategies.myOption = strategies.methods</code></pre><p>更多高级的例子可以在 <a href=\"https://github.com/vuejs/vuex\" rel=\"external nofollow\" target=\"_blank\">Vuex</a> 1.x的混合策略里找到：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">const merge = Vue.config.optionMergeStrategies.computed\nVue.config.optionMergeStrategies.vuex = function (toVal, fromVal) {\n  if (!toVal) return fromVal\n  if (!fromVal) return toVal\n  return {\n    getters: merge(toVal.getters, fromVal.getters),\n    state: merge(toVal.state, fromVal.state),\n    actions: merge(toVal.actions, fromVal.actions)\n  }\n}</code></pre><p><br></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "Vue.js 2.0 教程",
      "teach_introduction": "Vue.js 2.0 版本，是目前主流的版本。",
      "sort_index": 5,
      "parent_sort_index": 2,
      "chapter_level_one_id": "e8fb10237b03499ebdc00cd95024fcfb",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "Vue.js 2.0 进阶教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "bc4a0405b2ef55fe9b568bd26c179d4d",
      "chapter_level_two_parent_id": "e8fb10237b03499ebdc00cd95024fcfb",
      "chapter_level_two_name": "自定义指令",
      "chapter_level_two_url": "/vuejs2/custom-directive.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>自定义指令简介</h2><p>除了默认设置的核心指令( v-model 和 v-show ),Vue 也允许注册自定义指令。注意，在 Vue2.0 里面，代码复用的主要形式和抽象是组件——然而，有的情况下,你仍然需要对纯 DOM 元素进行底层操作,这时候就会用到自定义指令。下面这个例子将聚焦一个 input 元素，像这样：</p><div id=\"simplest-directive-example\" class=\"demo\">    <input></div><p>当页面加载时，元素将获得焦点。事实上，你访问后还没点击任何内容，input 就获得了焦点。现在让我们完善这个指令：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">// 注册一个全局自定义指令 v-focus\nVue.directive('focus', {\n  // 当绑定元素插入到 DOM 中。\n  inserted: function (el) {\n    // 聚焦元素\n    el.focus()\n  }\n})</code></pre><p>也可以注册局部指令，组件中接受一个 directives 的选项：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">directives: {\n  focus: {\n    // 指令的定义---\n  }\n}</code></pre><p>然后你可以在模板中任何元素上使用新的 v-focus 属性：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;input v-focus&gt;</code></pre><a href=\"http://doc.vue-js.com/v2/guide/custom-directive.html#%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/custom-directive.html#%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/custom-directive.html#%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0\" rel=\"external nofollow\" target=\"_blank\"></a>钩子函数</h2><p>指令定义函数提供了几个钩子函数（可选）：</p><ul>    <li>bind: 只调用一次，指令第一次绑定到元素时调用，用这个钩子函数可以定义一个在绑定时执行一次的初始化动作。</li>    <li>inserted: 被绑定元素插入父节点时调用（父节点存在即可调用，不必存在于 document 中）。</li>    <li>update: 被绑定元素所在的模板更新时调用，而不论绑定值是否变化。通过比较更新前后的绑定值，可以忽略不必要的模板更新（详细的钩子函数参数见下）。</li>    <li>componentUpdated: 被绑定元素所在模板完成一次更新周期时调用。</li>    <li>unbind: 只调用一次， 指令与元素解绑时调用。</li></ul><p>接下来我们来看一下钩子函数的参数 (包括 el，binding，vnode，oldVnode) 。</p><a href=\"http://doc.vue-js.com/v2/guide/custom-directive.html#%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/custom-directive.html#%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/custom-directive.html#%E9%92%A9%E5%AD%90%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0\" rel=\"external nofollow\" target=\"_blank\"></a>钩子函数参数</h2><p>钩子函数被赋予了以下参数：</p><ul>    <li>el：指令所绑定的元素，可以用来直接操作 DOM 。</li>    <li>binding：一个对象，包含以下属性：<ul><li>name: 指令名，不包括 v- 前缀。</li><li>value: 指令的绑定值， 例如： v-my-directive=\"1 + 1\", value 的值是 2。</li><li>oldValue: 指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。</li><li>expression: 绑定值的字符串形式。 例如 v-my-directive=\"1        + 1\" ， expression 的值是 \"1 + 1\"。</li><li>arg: 传给指令的参数。例如 v-my-directive:foo， arg 的值是 \"foo\"。</li><li>modifiers: 一个包含修饰符的对象。 例如： v-my-directive.foo.bar, 修饰符对象 modifiers 的值是 { foo: true, bar: true }。</li></ul></li>    <li>vnode: Vue 编译生成的虚拟节点，查阅 VNode API 了解更多详情。</li>    <li>oldVnode: 上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。</li></ul><p>除了 el 之外，其它参数都应该是只读的，尽量不要修改他们。如果需要在钩子之间共享数据，建议通过元素的 <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset\" rel=\"external nofollow\" target=\"_blank\">dataset</a> 来进行。</p><p>一个使用了这些参数的自定义钩子样例：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;div id=\"hook-arguments-example\" v-demo:hello.a.b=\"message\"&gt;&lt;/div&gt;</code></pre><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">Vue.directive('demo', {\n  bind: function (el, binding, vnode) {\n    var s = JSON.stringify\n    el.innerHTML =\n      'name: '       + s(binding.name) + '&lt;br&gt;' +\n      'value: '      + s(binding.value) + '&lt;br&gt;' +\n      'expression: ' + s(binding.expression) + '&lt;br&gt;' +\n      'argument: '   + s(binding.arg) + '&lt;br&gt;' +\n      'modifiers: '  + s(binding.modifiers) + '&lt;br&gt;' +\n      'vnode keys: ' + Object.keys(vnode).join(', ')\n  }\n})\nnew Vue({\n  el: '#hook-arguments-example',\n  data: {\n    message: 'hello!'\n  }\n})</code></pre><p>结果：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">name: \"demo\"\nvalue: \"hello!\"\nexpression: \"message\"\nargument: \"hello\"\nmodifiers: {\"a\":true,\"b\":true}\nvnode keys: tag, data, children, text, elm, ns, context, functionalContext, key, componentOptions, child, parent, raw, isStatic, isRootInsert, isComment, isCloned, isOnce</code></pre><a href=\"http://doc.vue-js.com/v2/guide/custom-directive.html#%E5%87%BD%E6%95%B0%E7%AE%80%E5%86%99\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/custom-directive.html#%E5%87%BD%E6%95%B0%E7%AE%80%E5%86%99\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/custom-directive.html#%E5%87%BD%E6%95%B0%E7%AE%80%E5%86%99\" rel=\"external nofollow\" target=\"_blank\"></a>函数简写</h2><p>大多数情况下，我们可能想在 bind 和 update 钩子上做重复动作，并且不想关心其它的钩子函数。可以这样写:</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">Vue.directive('color-swatch', function (el, binding) {\n  el.style.backgroundColor = binding.value\n})</code></pre><a href=\"http://doc.vue-js.com/v2/guide/custom-directive.html#%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/custom-directive.html#%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/custom-directive.html#%E5%AF%B9%E8%B1%A1%E5%AD%97%E9%9D%A2%E9%87%8F\" rel=\"external nofollow\" target=\"_blank\"></a>对象字面量</h2><p>如果指令需要多个值，可以传入一个 JavaScript 对象字面量。记住，指令函数能够接受所有合法类型的 Javascript 表达式。</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;div v-demo=\"{ color: 'white', text: 'hello!' }\"&gt;&lt;/div&gt;</code></pre><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">Vue.directive('demo', function (el, binding) {\n  console.log(binding.value.color) // =&gt; \"white\"\n  console.log(binding.value.text)  // =&gt; \"hello!\"\n})</code></pre>    <br></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "Vue.js 2.0 教程",
      "teach_introduction": "Vue.js 2.0 版本，是目前主流的版本。",
      "sort_index": 4,
      "parent_sort_index": 2,
      "chapter_level_one_id": "e8fb10237b03499ebdc00cd95024fcfb",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "Vue.js 2.0 进阶教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "ca1a54c328b47fc7cd490447d345c16d",
      "chapter_level_two_parent_id": "e8fb10237b03499ebdc00cd95024fcfb",
      "chapter_level_two_name": "Render 函数",
      "chapter_level_two_url": "/vuejs2/render-function.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2><span style=\"font-family:inherit;\">Vue.js 2.0 </span>Render 函数基础</h2><p>Vue 推荐使用在绝大多数情况下使用 template 来创建你的 HTML。然而在一些场景中，你真的需要 JavaScript 的完全编程的能力，这就是<strong> render 函数</strong>，它比 template 更接近编译器。</p><p>让我们先深入一个使用 render 函数的简单例子，假设你想生成一个带锚链接的标题：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;h1&gt;\n  &lt;a name=\"hello-world\" href=\"#hello-world\"&gt;\n    Hello world!\n  &lt;/a&gt;\n&lt;/h1&gt;</code></pre><p>在 HTML 层， 我们决定这样定义组件接口：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;anchored-heading :level=\"1\"&gt;Hello world!&lt;/anchored-heading&gt;</code></pre><p>当我们开始写一个通过 level prop 动态生成heading 标签的组件，你可很快能想到这样实现：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;script type=\"text/x-template\" id=\"anchored-heading-template\"&gt;\n  &lt;div&gt;\n    &lt;h1 v-if=\"level === 1\"&gt;\n      &lt;slot&gt;&lt;/slot&gt;\n    &lt;/h1&gt;\n    &lt;h2 v-if=\"level === 2\"&gt;\n      &lt;slot&gt;&lt;/slot&gt;\n    &lt;/h2&gt;\n    &lt;h3 v-if=\"level === 3\"&gt;\n      &lt;slot&gt;&lt;/slot&gt;\n    &lt;/h3&gt;\n    &lt;h4 v-if=\"level === 4\"&gt;\n      &lt;slot&gt;&lt;/slot&gt;\n    &lt;/h4&gt;\n    &lt;h5 v-if=\"level === 5\"&gt;\n      &lt;slot&gt;&lt;/slot&gt;\n    &lt;/h5&gt;\n    &lt;h6 v-if=\"level === 6\"&gt;\n      &lt;slot&gt;&lt;/slot&gt;\n    &lt;/h6&gt;\n  &lt;/div&gt;\n&lt;/script&gt;</code></pre><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">Vue.component('anchored-heading', {\n  template: '#anchored-heading-template',\n  props: {\n    level: {\n      type: Number,\n      required: true\n    }\n  }\n})</code></pre><p>template 在这种场景中就表现的有些冗余了。虽然我们重复使用 &lt;slot&gt;&lt;/slot&gt; 来接收每一个级别的标题标签，在标题标签中添加相同的锚点元素。但是些都会被包裹在一个无用的 div 中，因为组件必须有根节点。</p><p>虽然模板在大多数组件中都非常好用，但是在这里它就不是很简洁的了。那么，我们来尝试使用 render 函数重写上面的例子：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">Vue.component('anchored-heading', {\n  render: function (createElement) {\n    return createElement(\n      'h' + this.level,   // tag name 标签名称\n      this.$slots.default // 子组件中的阵列\n    )\n  },\n  props: {\n    level: {\n      type: Number,\n      required: true\n    }\n  }\n})</code></pre><p>简单清晰很多！简单来说，这样代码精简很多，但是需要非常熟悉 Vue 的实例属性。在这个例子中，你需要知道当你不使用 slot 属性向组件中传递内容时，比如 anchored-heading 中的 Hello world!, 这些子元素被存储在组件实例中的 $slots.default中。如果你还不了解，<strong>在深入 render 函数之前推荐阅读 instance 属性 API</strong>。</p><a href=\"http://doc.vue-js.com/v2/guide/render-function.html#createElement-%E5%8F%82%E6%95%B0\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/render-function.html#createElement-%E5%8F%82%E6%95%B0\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/render-function.html#createElement-%E5%8F%82%E6%95%B0\" rel=\"external nofollow\" target=\"_blank\"></a>createElement 参数</h2><p>第二件你需要熟悉的是如何在 createElement 函数中生成模板。这里是 createElement接受的参数：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">// @returns {VNode}\ncreateElement(\n  // {String | Object | Function}\n  // 一个 HTML 标签，组件设置，或一个函数\n  // 必须 Return 上述其中一个\n  'div',\n  // {Object}\n  // 一个对应属性的数据对象\n  // 您可以在 template 中使用.可选项.\n  {\n    // (下一章，将详细说明相关细节)\n  },\n  // {String | Array}\n  // 子节点(VNodes). 可选项.\n  [\n    createElement('h1', 'hello world'),\n    createElement(MyComponent, {\n      props: {\n        someProp: 'foo'\n      }\n    }),\n    'bar'\n  ]\n)</code></pre><a href=\"http://doc.vue-js.com/v2/guide/render-function.html#%E5%AE%8C%E6%95%B4%E6%95%B0%E6%8D%AE%E5%AF%B9%E8%B1%A1\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/render-function.html#%E5%AE%8C%E6%95%B4%E6%95%B0%E6%8D%AE%E5%AF%B9%E8%B1%A1\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/render-function.html#%E5%AE%8C%E6%95%B4%E6%95%B0%E6%8D%AE%E5%AF%B9%E8%B1%A1\" rel=\"external nofollow\" target=\"_blank\"></a>完整数据对象</h3><p>有一件事要注意：在 templates 中，v-bind:class 和 v-bind:style ，会有特别的处理，他们在 VNode 数据对象中，为最高级配置。</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">{\n  // 和`v-bind:class`一样的 API\n  'class': {\n    foo: true,\n    bar: false\n  },\n  // 和`v-bind:style`一样的 API\n  style: {\n    color: 'red',\n    fontSize: '14px'\n  },\n  // 正常的 HTML 特性\n  attrs: {\n    id: 'foo'\n  },\n  // 组件 props\n  props: {\n    myProp: 'bar'\n  },\n  // DOM 属性\n  domProps: {\n    innerHTML: 'baz'\n  },\n  // 事件监听器基于 \"on\"\n  // 所以不再支持如 v-on:keyup.enter 修饰器\n  // 需要手动匹配 keyCode。\n  on: {\n    click: this.clickHandler\n  },\n  // 仅对于组件，用于监听原生事件，而不是组件使用 vm.$emit 触发的事件。\n  nativeOn: {\n    click: this.nativeClickHandler\n  },\n  // 自定义指令. 注意事项：不能对绑定的旧值设值\n  // Vue 会为您持续追踨\n  directives: [\n    {\n      name: 'my-custom-directive',\n      value: '2'\n      expression: '1 + 1',\n      arg: 'foo',\n      modifiers: {\n        bar: true\n      }\n    }\n  ],\n  // 如果子组件有定义 slot 的名称\n  slot: 'name-of-slot'\n  // 其他特殊顶层属性\n  key: 'myKey',\n  ref: 'myRef'\n}</code></pre><a href=\"http://doc.vue-js.com/v2/guide/render-function.html#%E5%AE%8C%E6%95%B4%E7%A4%BA%E4%BE%8B\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/render-function.html#%E5%AE%8C%E6%95%B4%E7%A4%BA%E4%BE%8B\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/render-function.html#%E5%AE%8C%E6%95%B4%E7%A4%BA%E4%BE%8B\" rel=\"external nofollow\" target=\"_blank\"></a>完整示例</h3><p>有了这方面的知识，我们现在可以完成我们最开始想实现的组件：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">var getChildrenTextContent = function (children) {\n  return children.map(function (node) {\n    return node.children\n      ? getChildrenTextContent(node.children)\n      : node.text\n  }).join('')\n}\nVue.component('anchored-heading', {\n  render: function (createElement) {\n    // create kebabCase id\n    var headingId = getChildrenTextContent(this.$slots.default)\n      .toLowerCase()\n      .replace(/\\W+/g, '-')\n      .replace(/(^\\-|\\-$)/g, '')\n    return createElement(\n      'h' + this.level,\n      [\n        createElement('a', {\n          attrs: {\n            name: headingId,\n            href: '#' + headingId\n          }\n        }, this.$slots.default)\n      ]\n    )\n  },\n  props: {\n    level: {\n      type: Number,\n      required: true\n    }\n  }\n})</code></pre><a href=\"http://doc.vue-js.com/v2/guide/render-function.html#%E7%BA%A6%E6%9D%9F\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/render-function.html#%E7%BA%A6%E6%9D%9F\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/render-function.html#%E7%BA%A6%E6%9D%9F\" rel=\"external nofollow\" target=\"_blank\"></a>约束</h3><h4><a href=\"http://doc.vue-js.com/v2/guide/render-function.html#VNodes-%E5%BF%85%E9%A1%BB%E5%94%AF%E4%B8%80\" rel=\"external nofollow\" target=\"_blank\"></a>VNodes 必须唯一</h4><p>所有组件树中的 VNodes 必须唯一。这意味着，下面的 render function 是无效的：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">render: function (createElement) {\n  var myParagraphVNode = createElement('p', 'hi')\n  return createElement('div', [\n    // Yikes - duplicate VNodes!\n    myParagraphVNode, myParagraphVNode\n  ])\n}</code></pre><p>如果你真的需要重复很多次的元素/组件，你可以使用工厂函数来实现。例如，下面这个例子 render 函数完美有效地渲染了 20 个重复的段落：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">render: function (createElement) {\n  return createElement('div',\n    Array.apply(null, { length: 20 }).map(function () {\n      return createElement('p', 'hi')\n    })\n  )\n}</code></pre><a href=\"http://doc.vue-js.com/v2/guide/render-function.html#%E4%BD%BF%E7%94%A8-JavaScript-%E4%BB%A3%E6%9B%BF%E6%A8%A1%E6%9D%BF%E5%8A%9F%E8%83%BD\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/render-function.html#%E4%BD%BF%E7%94%A8-JavaScript-%E4%BB%A3%E6%9B%BF%E6%A8%A1%E6%9D%BF%E5%8A%9F%E8%83%BD\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/render-function.html#%E4%BD%BF%E7%94%A8-JavaScript-%E4%BB%A3%E6%9B%BF%E6%A8%A1%E6%9D%BF%E5%8A%9F%E8%83%BD\" rel=\"external nofollow\" target=\"_blank\"></a>使用 JavaScript 代替模板功能</h2><p>无论什么都可以使用原生的 JavaScript 来实现，Vue 的 render 函数不会提供专用的 API。比如， template 中的 v-if 和 v-for:</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;ul v-if=\"items.length\"&gt;\n  &lt;li v-for=\"item in items\"&gt;{{ item.name }}&lt;/li&gt;\n&lt;/ul&gt;\n&lt;p v-else&gt;No items found.&lt;/p&gt;</code></pre><p>这些都会在 render 函数中被 JavaScript 的 if/else 和 map 重写：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">render: function (createElement) {\n  if (this.items.length) {\n    return createElement('ul', this.items.map(function (item) {\n      return createElement('li', item.name)\n    }))\n  } else {\n    return createElement('p', 'No items found.')\n  }\n}</code></pre><a href=\"http://doc.vue-js.com/v2/guide/render-function.html#JSX\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/render-function.html#JSX\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/render-function.html#JSX\" rel=\"external nofollow\" target=\"_blank\"></a>JSX</h2><p>如果你写了很多 render 函数，可能会觉得痛苦：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">createElement(\n  'anchored-heading', {\n    props: {\n      level: 1\n    }\n  }, [\n    createElement('span', 'Hello'),\n    ' world!'\n  ]\n)</code></pre><p>特别是模板如此简单的情况下：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;anchored-heading :level=\"1\"&gt;\n  &lt;span&gt;Hello&lt;/span&gt; world!\n&lt;/anchored-heading&gt;</code></pre><p>这就是会有一个 <a href=\"https://github.com/vuejs/babel-plugin-transform-vue-jsx\" rel=\"external nofollow\" target=\"_blank\">Babel plugin</a> 插件，用于在 Vue 中使用 JSX 语法的原因，它可以让我们回到于更接近模板的语法上。</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">import AnchoredHeading from './AnchoredHeading.vue'\nnew Vue({\n  el: '#demo',\n  render (h) {\n    return (\n      &lt;AnchoredHeading level={1}&gt;\n        &lt;span&gt;Hello&lt;/span&gt; world!\n      &lt;/AnchoredHeading&gt;\n    )\n  }\n})</code></pre><blockquote>    <p>将 h 作为 createElement 的别名是 Vue 生态系统中的一个通用惯例，实际上也是 JSX 所要求的，如果在作用域中 h 失去作用， 在应用中会触发报错。</p></blockquote><p>更多关于 JSX 映射到 JavaScript，阅读 <a href=\"https://github.com/vuejs/babel-plugin-transform-vue-jsx#usage\" rel=\"external nofollow\" target=\"_blank\">使用文档</a>。</p><a href=\"http://doc.vue-js.com/v2/guide/render-function.html#%E5%87%BD%E6%95%B0%E5%8C%96%E7%BB%84%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/render-function.html#%E5%87%BD%E6%95%B0%E5%8C%96%E7%BB%84%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/render-function.html#%E5%87%BD%E6%95%B0%E5%8C%96%E7%BB%84%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a>函数化组件</h2><p>之前创建的锚点标题组件是比较简单，没有管理或者监听任何传递给他的状态，也没有生命周期方法。它只是一个接收参数的函数。在这个例子中，我们标记组件为 functional， 这意味它是无状态（没有 data），无实例（没有 this 上下文）。一个<strong>函数化组件</strong>就像这样：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">Vue.component('my-component', {\n  functional: true,\n  // 为了弥补缺少的实例\n  // 提供第二个参数作为上下文\n  render: function (createElement, context) {\n    // ...\n  },\n  // Props 可选\n  props: {\n    // ...\n  }\n})</code></pre><p>组件需要的一切都是通过上下文传递，包括：</p><ul>    <li>props: 提供props 的对象</li>    <li>children: VNode 子节点的数组</li>    <li>slots: slots 对象</li>    <li>data: 传递给组件的 data 对象</li>    <li>parent: 对父组件的引用</li></ul><p>在添加 functional: true 之后，锚点标题组件的 render 函数之间简单更新增加 context参数，this.$slots.default 更新为 context.children，之后this.level 更新为 context.props.level。</p><p>函数化组件只是一个函数，所以渲染开销也低很多。但同样它也有完整的组件封装，你需要知道这些， 比如：</p><ul>    <li>程序化地在多个组件中选择一个</li>    <li>在将 children, props, data 传递给子组件之前操作它们。</li></ul><p>下面是一个依赖传入 props 的值的 smart-list 组件例子，它能代表更多具体的组件：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">var EmptyList = { /* ... */ }\nvar TableList = { /* ... */ }\nvar OrderedList = { /* ... */ }\nvar UnorderedList = { /* ... */ }\nVue.component('smart-list', {\n  functional: true,\n  render: function (createElement, context) {\n    function appropriateListComponent () {\n      var items = context.props.items\n      if (items.length === 0)           return EmptyList\n      if (typeof items[0] === 'object') return TableList\n      if (context.props.isOrdered)      return OrderedList\n      return UnorderedList\n    }\n    return createElement(\n      appropriateListComponent(),\n      context.data,\n      context.children\n    )\n  },\n  props: {\n    items: {\n      type: Array,\n      required: true\n    },\n    isOrdered: Boolean\n  }\n})</code></pre><a href=\"http://doc.vue-js.com/v2/guide/render-function.html#slots-%E5%92%8C-children-%E5%AF%B9%E6%AF%94\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/render-function.html#slots-%E5%92%8C-children-%E5%AF%B9%E6%AF%94\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/render-function.html#slots-%E5%92%8C-children-%E5%AF%B9%E6%AF%94\" rel=\"external nofollow\" target=\"_blank\"></a>slots() 和 children 对比</h3><p>你可能想知道为什么同时需要 slots() 和 children。slots().default 不是和 children 类似的吗？在一些场景中，是这样，但是如果是函数式组件和下面这样的 children 呢？</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;my-functional-component&gt;\n  &lt;p slot=\"foo\"&gt;\n    first\n  &lt;/p&gt;\n  &lt;p&gt;second&lt;/p&gt;\n&lt;/my-functional-component&gt;</code></pre><p>对于这个组件，children 会给你两个段落标签，而 slots().default 只会传递第二个匿名段落标签，slots().foo 会传递第一个具名段落标签。同时拥有 children 和 slots() ，因此你可以选择让组件通过 slot() 系统分发或者简单的通过 children 接收，让其他组件去处理。</p><a href=\"http://doc.vue-js.com/v2/guide/render-function.html#%E6%A8%A1%E6%9D%BF%E7%BC%96%E8%AF%91\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/render-function.html#%E6%A8%A1%E6%9D%BF%E7%BC%96%E8%AF%91\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/render-function.html#%E6%A8%A1%E6%9D%BF%E7%BC%96%E8%AF%91\" rel=\"external nofollow\" target=\"_blank\"></a>模板编译</h2><p>你可能有兴趣知道，Vue 的模板实际是编译成了 render 函数。这是一个实现细节，通常不需要关心，但如果你想看看模板的功能是怎样被编译的，你会发现会非常有趣。下面是一个使用 Vue.compile 来实时编译模板字符串的简单 demo：<br>        <br>render:</p><pre lang=\"javascript\"><code class=\"javascript\">function anonymous(\n) {\n  with(this){return _h('div',[_m(0),(message)?_h('p',[_s(message)]):_h('p',[\"No message.\"])])}\n}</code></pre>staticRenderFns:<pre lang=\"javascript\"><code class=\"javascript\">_m(0): function anonymous(\n) {\n  with(this){return _h('h1',[\"I'm a template!\"])}\n}</code></pre></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "Vue.js 2.0 教程",
      "teach_introduction": "Vue.js 2.0 版本，是目前主流的版本。",
      "sort_index": 3,
      "parent_sort_index": 2,
      "chapter_level_one_id": "e8fb10237b03499ebdc00cd95024fcfb",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "Vue.js 2.0 进阶教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "f6c430db061aa03fc169413735168733",
      "chapter_level_two_parent_id": "e8fb10237b03499ebdc00cd95024fcfb",
      "chapter_level_two_name": "过渡状态",
      "chapter_level_two_url": "/vuejs2/transitioning-state.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>过渡状态</h2><p>Vue 的过渡系统提供了非常多简单的方法设置进入、离开和列表的动效。那么对于数据元素本身的动效呢，比如：</p><ul>    <li>数字和运算</li>    <li>颜色的显示</li>    <li>SVG 节点的位置</li>    <li>元素的大小和其他的属性</li></ul><p>所有的原始数字都被事先存储起来，可以直接转换到数字。做到这一步，我们就可以结合 Vue 的响应式和组件系统，使用第三方库来实现切换元素的过渡状态。</p><a href=\"http://doc.vue-js.com/v2/guide/transitioning-state.html#%E7%8A%B6%E6%80%81%E5%8A%A8%E7%94%BB-%E4%B8%8E-watcher\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/transitioning-state.html#%E7%8A%B6%E6%80%81%E5%8A%A8%E7%94%BB-%E4%B8%8E-watcher\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/transitioning-state.html#%E7%8A%B6%E6%80%81%E5%8A%A8%E7%94%BB-%E4%B8%8E-watcher\" rel=\"external nofollow\" target=\"_blank\"></a>状态动画 与 watcher</h2><p>通过 watcher 我们能监听到任何数值属性的数值更新。可能听起来很抽象，所以让我们先来看看使用Tweenjs一个例子：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;script src=\"https://unpkg.com/tween.js@16.3.4\" rel=\"external nofollow\"  rel=\"external nofollow\"  rel=\"external nofollow\" &gt;&lt;/script&gt;\n&lt;div id=\"animated-number-demo\"&gt;\n  &lt;input v-model.number=\"number\" type=\"number\" step=\"20\"&gt;\n  &lt;p&gt;{{ animatedNumber }}&lt;/p&gt;\n&lt;/div&gt;</code></pre><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">new Vue({\n  el: '#animated-number-demo',\n  data: {\n    number: 0,\n    animatedNumber: 0\n  },\n  watch: {\n    number: function(newValue, oldValue) {\n      var vm = this\n      function animate (time) {\n        requestAnimationFrame(animate)\n        TWEEN.update(time)\n      }\n      new TWEEN.Tween({ tweeningNumber: oldValue })\n        .easing(TWEEN.Easing.Quadratic.Out)\n        .to({ tweeningNumber: newValue }, 500)\n        .onUpdate(function () {\n          vm.animatedNumber = this.tweeningNumber.toFixed(0)\n        })\n        .start()\n      animate()\n    }\n  }\n})</code></pre><input><p>0</p><p>当你把数值更新时，就会触发动画。这个是一个不错的演示，但是对于不能直接像数字一样存储的值，比如 CSS 中的 color 的值，通过下面的例子我们来通过 Color.js 实现一个例子：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;script src=\"https://unpkg.com/tween.js@16.3.4\" rel=\"external nofollow\"  rel=\"external nofollow\"  rel=\"external nofollow\" &gt;&lt;/script&gt;\n&lt;script src=\"https://unpkg.com/color-js@1.0.3/color.js\" rel=\"external nofollow\" &gt;&lt;/script&gt;\n&lt;div id=\"example-7\"&gt;\n  &lt;input\n    v-model=\"colorQuery\"\n    v-on:keyup.enter=\"updateColor\"\n    placeholder=\"Enter a color\"\n  &gt;\n  &lt;button v-on:click=\"updateColor\"&gt;Update&lt;/button&gt;\n  &lt;p&gt;Preview:&lt;/p&gt;\n  &lt;span\n    v-bind:style=\"{ backgroundColor: tweenedCSSColor }\"\n    class=\"example-7-color-preview\"\n  &gt;&lt;/span&gt;\n  &lt;p&gt;{{ tweenedCSSColor }}&lt;/p&gt;\n&lt;/div&gt;</code></pre><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">var Color = net.brehaut.Color\nnew Vue({\n  el: '#example-7',\n  data: {\n    colorQuery: '',\n    color: {\n      red: 0,\n      green: 0,\n      blue: 0,\n      alpha: 1\n    },\n    tweenedColor: {}\n  },\n  created: function () {\n    this.tweenedColor = Object.assign({}, this.color)\n  },\n  watch: {\n    color: function () {\n      function animate (time) {\n        requestAnimationFrame(animate)\n        TWEEN.update(time)\n      }\n      new TWEEN.Tween(this.tweenedColor)\n        .to(this.color, 750)\n        .start()\n      animate()\n    }\n  },\n  computed: {\n    tweenedCSSColor: function () {\n      return new Color({\n        red: this.tweenedColor.red,\n        green: this.tweenedColor.green,\n        blue: this.tweenedColor.blue,\n        alpha: this.tweenedColor.alpha\n      }).toCSS()\n    }\n  },\n  methods: {\n    updateColor: function () {\n      this.color = new Color(this.colorQuery).toRGB()\n      this.colorQuery = ''\n    }\n  }\n})</code></pre><pre lang=\"css\" style=\"max-width: 100%;\"><code class=\"css\">.example-7-color-preview {\n  display: inline-block;\n  width: 50px;\n  height: 50px;\n}</code></pre><input> <button>Update</button><p>Preview:</p><p>#000000</p><a href=\"http://doc.vue-js.com/v2/guide/transitioning-state.html#%E5%8A%A8%E6%80%81%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/transitioning-state.html#%E5%8A%A8%E6%80%81%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/transitioning-state.html#%E5%8A%A8%E6%80%81%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2\" rel=\"external nofollow\" target=\"_blank\"></a>动态状态转换</h2><p>就像 Vue 的过渡组件一样，数据背后状态转换会实时更新，这对于原型设计十分有用。当你修改一些变量，即使是一个简单的 SVG 多边形也可是实现很多难以想象的效果。</p><div id=\"svg-polygon-demo\" class=\"demo\">    <svg width=\"200\" height=\"200\" class=\"demo-svg\">                    </svg>    Sides: 468    <input type=\"range\" min=\"3\" max=\"500\" class=\"demo-range-input\">    Minimum Radius: 50%    <input type=\"range\" min=\"0\" max=\"90\" class=\"demo-range-input\">    Update Interval: 500 milliseconds    <input type=\"range\" min=\"10\" max=\"2000\" class=\"demo-range-input\"></div><p>查看<a href=\"https://jsfiddle.net/chrisvfritz/65gLu2b6/\" rel=\"external nofollow\" target=\"_blank\">该 fiddle</a>，了解上面演示的完整代码。</p><a href=\"http://doc.vue-js.com/v2/guide/transitioning-state.html#%E9%80%9A%E8%BF%87%E7%BB%84%E4%BB%B6%E7%BB%84%E7%BB%87%E8%BF%87%E6%B8%A1\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/transitioning-state.html#%E9%80%9A%E8%BF%87%E7%BB%84%E4%BB%B6%E7%BB%84%E7%BB%87%E8%BF%87%E6%B8%A1\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/transitioning-state.html#%E9%80%9A%E8%BF%87%E7%BB%84%E4%BB%B6%E7%BB%84%E7%BB%87%E8%BF%87%E6%B8%A1\" rel=\"external nofollow\" target=\"_blank\"></a>通过组件组织过渡</h2><p>管理太多的状态转换的很快会接近到 Vue 实例或者组件的复杂性，幸好很多的动画可以提取到专用的子组件。我们来将之前的示例改写一下：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;script src=\"https://unpkg.com/tween.js@16.3.4\" rel=\"external nofollow\"  rel=\"external nofollow\"  rel=\"external nofollow\" &gt;&lt;/script&gt;\n&lt;div id=\"example-8\"&gt;\n  &lt;input v-model.number=\"firstNumber\" type=\"number\" step=\"20\"&gt; +\n  &lt;input v-model.number=\"secondNumber\" type=\"number\" step=\"20\"&gt; =\n  {{ result }}\n  &lt;p&gt;\n    &lt;animated-integer v-bind:value=\"firstNumber\"&gt;&lt;/animated-integer&gt; +\n    &lt;animated-integer v-bind:value=\"secondNumber\"&gt;&lt;/animated-integer&gt; =\n    &lt;animated-integer v-bind:value=\"result\"&gt;&lt;/animated-integer&gt;\n  &lt;/p&gt;\n&lt;/div&gt;</code></pre><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">// 这种复杂的补间动画逻辑可以被复用\n// 任何整数都可以执行动画\n// 组件化使我们的界面十分清晰\n// 可以支持更多更复杂的动态过渡\n// strategies.\nVue.component('animated-integer', {\n  template: '&lt;span&gt;{{ tweeningValue }}&lt;/span&gt;',\n  props: {\n    value: {\n      type: Number,\n      required: true\n    }\n  },\n  data: function () {\n    return {\n      tweeningValue: 0\n    }\n  },\n  watch: {\n    value: function (newValue, oldValue) {\n      this.tween(oldValue, newValue)\n    }\n  },\n  mounted: function () {\n    this.tween(0, this.value)\n  },\n  methods: {\n    tween: function (startValue, endValue) {\n      var vm = this\n      function animate (time) {\n        requestAnimationFrame(animate)\n        TWEEN.update(time)\n      }\n      new TWEEN.Tween({ tweeningValue: startValue })\n        .to({ tweeningValue: endValue }, 500)\n        .onUpdate(function () {\n          vm.tweeningValue = this.tweeningValue.toFixed(0)\n        })\n        .start()\n      animate()\n    }\n  }\n})\n// All complexity has now been removed from the main Vue instance!\nnew Vue({\n  el: '#example-8',\n  data: {\n    firstNumber: 20,\n    secondNumber: 40\n  },\n  computed: {\n    result: function () {\n      return this.firstNumber + this.secondNumber\n    }\n  }\n})</code></pre><div id=\"example-8\" class=\"demo\"><input type=\"number\" step=\"20\"> +  <input type=\"number\" step=\"20\"> =  60  <p><span>20</span> +    <span>40</span> =    <span>60</span></p></div><p>我们能在组件中结合使用这一节讲到各种过渡策略和 Vue <a href=\"https://www.w3cschool.cn/vuejs2/transitions.html\" target=\"_blank\">内建的过渡系统</a>。总之，对于完成各种过渡动效几乎没有阻碍。</p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "Vue.js 2.0 教程",
      "teach_introduction": "Vue.js 2.0 版本，是目前主流的版本。",
      "sort_index": 2,
      "parent_sort_index": 2,
      "chapter_level_one_id": "e8fb10237b03499ebdc00cd95024fcfb",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "Vue.js 2.0 进阶教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "6712b5de992f9c91aaa0cecde1eff3b2",
      "chapter_level_two_parent_id": "e8fb10237b03499ebdc00cd95024fcfb",
      "chapter_level_two_name": "过渡效果",
      "chapter_level_two_url": "/vuejs2/transitions.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2><span style=\"font-family:inherit;\">Vue.js 2.0 </span>过渡效果概述</h2><p>Vue 在插入、更新或者移除 DOM 时，提供多种不同方式的应用过渡效果。包括以下工具：</p><ul>    <li>在 CSS 过渡和动画中自动应用 class</li>    <li>可以配合使用第三方 CSS 动画库，如 Animate.css</li>    <li>在过渡钩子函数中使用 JavaScript 直接操作 DOM</li>    <li>可以配合使用第三方 JavaScript 动画库，如 Velocity.js</li></ul><p>在这里，我们只会讲到进入、离开和列表的过渡， 你也可以看下一节的“<a href=\"https://www.w3cschool.cn/vuejs2/transitioning-state.html\" target=\"_blank\">管理过渡状态</a>”。</p><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#%E5%8D%95%E5%85%83%E7%B4%A0-%E7%BB%84%E4%BB%B6%E7%9A%84%E8%BF%87%E6%B8%A1\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#%E5%8D%95%E5%85%83%E7%B4%A0-%E7%BB%84%E4%BB%B6%E7%9A%84%E8%BF%87%E6%B8%A1\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#%E5%8D%95%E5%85%83%E7%B4%A0-%E7%BB%84%E4%BB%B6%E7%9A%84%E8%BF%87%E6%B8%A1\" rel=\"external nofollow\" target=\"_blank\"></a>单元素/组件的过渡</h2><p>Vue 提供了 transition 的封装组件，在下列情形中，可以给任何元素和组件添加 entering/leaving 过渡</p><ul>    <li>条件渲染 （使用 v-if）</li>    <li>条件展示 （使用 v-show）</li>    <li>动态组件</li>    <li>组件根节点</li></ul><p>这里是一个典型的例子：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;div id=\"demo\"&gt;\n  &lt;button v-on:click=\"show = !show\"&gt;\n    Toggle\n  &lt;/button&gt;\n  &lt;transition name=\"fade\"&gt;\n    &lt;p v-if=\"show\"&gt;hello&lt;/p&gt;\n  &lt;/transition&gt;\n&lt;/div&gt;</code></pre><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">new Vue({\n  el: '#demo',\n  data: {\n    show: true\n  }\n})</code></pre><pre lang=\"css\" style=\"max-width: 100%;\"><code class=\"css\">.fade-enter-active, .fade-leave-active {\n  transition: opacity .5s\n}\n.fade-enter, .fade-leave-active {\n  opacity: 0\n}</code></pre><button>Toggle</button><p>hello</p><p>元素封装成过渡组件之后，在遇到插入或删除时，Vue 将</p><ol>    <li>自动嗅探目标元素是否有 CSS 过渡或动画，并在合适时添加/删除 CSS 类名。</li>    <li>如果过渡组件设置了过渡的 JavaScript 钩子函数，会在相应的阶段调用钩子函数。</li>    <li>如果没有找到 JavaScript 钩子并且也没有检测到 CSS 过渡/动画，DOM 操作（插入/删除）在下一帧中立即执行。(注意：此指浏览器逐帧动画机制，与 Vue，和Vue的 nextTick 概念不同)</li></ol><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#%E8%BF%87%E6%B8%A1%E7%9A%84-CSS-%E7%B1%BB%E5%90%8D\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#%E8%BF%87%E6%B8%A1%E7%9A%84-CSS-%E7%B1%BB%E5%90%8D\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#%E8%BF%87%E6%B8%A1%E7%9A%84-CSS-%E7%B1%BB%E5%90%8D\" rel=\"external nofollow\" target=\"_blank\"></a>过渡的-CSS-类名</h3><p>会有 4 个(CSS)类名在 enter/leave 的过渡中切换</p><ol>    <li>v-enter: 定义进入过渡的开始状态。在元素被插入时生效，在下一个帧移除。</li>    <li>v-enter-active: 定义进入过渡的结束状态。在元素被插入时生效，在 transition/animation 完成之后移除。</li>    <li>v-leave: 定义离开过渡的开始状态。在离开过渡被触发时生效，在下一个帧移除。</li>    <li>v-leave-active: 定义离开过渡的结束状态。在离开过渡被触发时生效，在 transition/animation 完成之后移除。</li></ol><p style=\"text-align: center; \">    <img src=\"//atts.w3cschool.cn/attachments/day_190316/201903161730546226.png\" alt=\"Transition Diagram\" style=\"width: 646px; height: 266px;\"></p><p>对于这些在 enter/leave 过渡中切换的类名，v- 是这些类名的前缀。使用 &lt;name=\"my-transition&gt;\" 可以重置前缀，比如 v-enter 替换为 my-transition-enter。</p><p>v-enter-active 和 v-leave-active 可以控制 进入/离开 过渡的不同阶段，在下面章节会有个示例说明。</p><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#CSS-%E8%BF%87%E6%B8%A1\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#CSS-%E8%BF%87%E6%B8%A1\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#CSS-%E8%BF%87%E6%B8%A1\" rel=\"external nofollow\" target=\"_blank\"></a>CSS 过渡</h3><p>常用的过渡都是使用 CSS 过渡。</p><p>下面是一个简单例子：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;div id=\"example-1\"&gt;\n  &lt;button @click=\"show = !show\"&gt;\n    Toggle render\n  &lt;/button&gt;\n  &lt;transition name=\"slide-fade\"&gt;\n    &lt;p v-if=\"show\"&gt;hello&lt;/p&gt;\n  &lt;/transition&gt;\n&lt;/div&gt;</code></pre><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">new Vue({\n  el: '#example-1',\n  data: {\n    show: true\n  }\n})</code></pre><pre lang=\"css\" style=\"max-width: 100%;\"><code class=\"css\">/* 可以设置不同的进入和离开动画 */\n/* 设置持续时间和动画函数 */\n.slide-fade-enter-active {\n  transition: all .3s ease;\n}\n.slide-fade-leave-active {\n  transition: all .8s cubic-bezier(1.0, 0.5, 0.8, 1.0);\n}\n.slide-fade-enter, .slide-fade-leave-active {\n  padding-left: 10px;\n  opacity: 0;\n}</code></pre><button>Toggle</button><p>hello</p><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#CSS-%E5%8A%A8%E7%94%BB\" rel=\"external nofollow\" target=\"_blank\"></a><h3>CSS 动画</h3><h3><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#CSS-%E5%8A%A8%E7%94%BB\" rel=\"external nofollow\" target=\"_blank\"></a></h3><p>CSS 动画用法同 CSS 过渡，区别是在动画中 v-enter 类名在节点插入 DOM 后不会立即删除，而是在 animationend 事件触发时删除。</p><p>示例： (省略了兼容性前缀)</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;div id=\"example-2\"&gt;\n  &lt;button @click=\"show = !show\"&gt;Toggle show&lt;/button&gt;\n  &lt;transition name=\"bounce\"&gt;\n    &lt;p v-if=\"show\"&gt;Look at me!&lt;/p&gt;\n  &lt;/transition&gt;\n&lt;/div&gt;</code></pre><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">new Vue({\n  el: '#example-2',\n  data: {\n    show: true\n  }\n})</code></pre><pre lang=\"css\" style=\"max-width: 100%;\"><code class=\"css\">.bounce-enter-active {\n  animation: bounce-in .5s;\n}\n.bounce-leave-active {\n  animation: bounce-out .5s;\n}\n@keyframes bounce-in {\n  0% {\n    transform: scale(0);\n  }\n  50% {\n    transform: scale(1.5);\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n@keyframes bounce-out {\n  0% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(1.5);\n  }\n  100% {\n    transform: scale(0);\n  }\n}</code></pre><button>Toggle show</button><p>Look at me!</p><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%87%E6%B8%A1%E7%B1%BB%E5%90%8D\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%87%E6%B8%A1%E7%B1%BB%E5%90%8D\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E8%BF%87%E6%B8%A1%E7%B1%BB%E5%90%8D\" rel=\"external nofollow\" target=\"_blank\"></a>自定义过渡类名</h3><p>我们可以通过以下特性来自定义过渡类名：</p><ul>    <li>enter-class</li>    <li>enter-active-class</li>    <li>leave-class</li>    <li>leave-active-class</li></ul><p>他们的优先级高于普通的类名，这对于 Vue 的过渡系统和其他第三方 CSS 动画库，如 Animate.css 结合使用十分有用。</p><p>示例：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;link href=\"https://unpkg.com/animate.css@3.5.1/animate.min.css\" rel=\"external nofollow\" target=\"_blank\"  rel=\"stylesheet\" type=\"text/css\"&gt;\n&lt;div id=\"example-3\"&gt;\n  &lt;button @click=\"show = !show\"&gt;\n    Toggle render\n  &lt;/button&gt;\n  &lt;transition\n    name=\"custom-classes-transition\"\n    enter-active-class=\"animated tada\"\n    leave-active-class=\"animated bounceOutRight\"\n  &gt;\n    &lt;p v-if=\"show\"&gt;hello&lt;/p&gt;\n  &lt;/transition&gt;\n&lt;/div&gt;</code></pre><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">new Vue({\n  el: '#example-3',\n  data: {\n    show: true\n  }\n})</code></pre><button>Toggle render</button><p>hello</p><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8-Transitions-%E5%92%8C-Animations\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8-Transitions-%E5%92%8C-Animations\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#%E5%90%8C%E6%97%B6%E4%BD%BF%E7%94%A8-Transitions-%E5%92%8C-Animations\" rel=\"external nofollow\" target=\"_blank\"></a>同时使用 Transitions 和 Animations</h3><p>Vue 为了知道过渡的完成，必须设置相应的事件监听器。它可以是 transitionend 或 animationend ，这取决于给元素应用的 CSS 规则。如果你使用其中任何一种，Vue 能自动识别类型并设置监听。</p><p>但是，在一些场景中，你需要给同一个元素同时设置两种过渡动效，比如 animation 很快的被触发并完成了，而 transition 效果还没结束。在这种情况中，你就需要使用 type特性并设置 animation 或 transition 来明确声明你需要 Vue 监听的类型。</p><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#JavaScript-%E9%92%A9%E5%AD%90\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#JavaScript-%E9%92%A9%E5%AD%90\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#JavaScript-%E9%92%A9%E5%AD%90\" rel=\"external nofollow\" target=\"_blank\"></a>JavaScript 钩子</h3><p>可以在属性中声明 JavaScript 钩子</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;transition\n  v-on:before-enter=\"beforeEnter\"\n  v-on:enter=\"enter\"\n  v-on:after-enter=\"afterEnter\"\n  v-on:enter-cancelled=\"enterCancelled\"\n  v-on:before-leave=\"beforeLeave\"\n  v-on:leave=\"leave\"\n  v-on:after-leave=\"afterLeave\"\n  v-on:leave-cancelled=\"leaveCancelled\"\n&gt;\n  &lt;!-- ... --&gt;\n&lt;/transition&gt;</code></pre><p>这些钩子函数可以结合 CSS <code>transitions/animations</code> 使用，也可以单独使用。</p><blockquote>    <p>当只用 JavaScript 过渡的时候， <strong>在 enter 和 leave 中，回调函数 done 是必须的</strong>。 否则，它们会被同步调用，过渡会立即完成。</p></blockquote><blockquote>    <p>推荐对于仅使用 JavaScript 过渡的元素添加 v-bind:css=\"false\"，Vue 会跳过 CSS 的检测。这也可以避免过渡过程中 CSS 的影响。</p></blockquote><p>一个使用 Velocity.js 的简单例子：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;!--\nVelocity works very much like jQuery.animate and is\na great option for JavaScript animations\n--&gt;\n&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/velocity/1.2.3/velocity.min.js\" rel=\"external nofollow\"  rel=\"external nofollow\"  rel=\"external nofollow\" &gt;&lt;/script&gt;\n&lt;div id=\"example-4\"&gt;\n  &lt;button @click=\"show = !show\"&gt;\n    Toggle\n  &lt;/button&gt;\n  &lt;transition\n    v-on:before-enter=\"beforeEnter\"\n    v-on:enter=\"enter\"\n    v-on:leave=\"leave\"\n    v-bind:css=\"false\"\n  &gt;\n    &lt;p v-if=\"show\"&gt;\n      Demo\n    &lt;/p&gt;\n  &lt;/transition&gt;\n&lt;/div&gt;</code></pre><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">new Vue({\n  el: '#example-4',\n  data: {\n    show: false\n  },\n  methods: {\n    beforeEnter: function (el) {\n      el.style.opacity = 0\n    },\n    enter: function (el, done) {\n      Velocity(el, { opacity: 1, fontSize: '1.4em' }, { duration: 300 })\n      Velocity(el, { fontSize: '1em' }, { complete: done })\n    },\n    leave: function (el, done) {\n      Velocity(el, { translateX: '15px', rotateZ: '50deg' }, { duration: 600 })\n      Velocity(el, { rotateZ: '100deg' }, { loop: 2 })\n      Velocity(el, {\n        rotateZ: '45deg',\n        translateY: '30px',\n        translateX: '30px',\n        opacity: 0\n      }, { complete: done })\n    }\n  }\n})</code></pre><button>Toggle</button><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#%E5%88%9D%E5%A7%8B%E6%B8%B2%E6%9F%93%E7%9A%84%E8%BF%87%E6%B8%A1\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#%E5%88%9D%E5%A7%8B%E6%B8%B2%E6%9F%93%E7%9A%84%E8%BF%87%E6%B8%A1\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#%E5%88%9D%E5%A7%8B%E6%B8%B2%E6%9F%93%E7%9A%84%E8%BF%87%E6%B8%A1\" rel=\"external nofollow\" target=\"_blank\"></a>初始渲染的过渡</h2><p>可以通过 appear 特性设置节点的在初始渲染的过渡：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;transition appear&gt;\n  &lt;!-- ... --&gt;\n&lt;/transition&gt;</code></pre><p>这里默认和进入和离开过渡一样，同样也可以自定义 CSS 类名。    <br></p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;transition\n  appear\n  appear-class=\"custom-appear-class\"\n  appear-active-class=\"custom-appear-active-class\"\n&gt;\n  &lt;!-- ... --&gt;\n&lt;/transition&gt;</code></pre><p>自定义 JavaScript 钩子：    <br></p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;transition\n  appear\n  v-on:before-appear=\"customBeforeAppearHook\"\n  v-on:appear=\"customAppearHook\"\n  v-on:after-appear=\"customAfterAppearHook\"\n&gt;\n  &lt;!-- ... --&gt;\n&lt;/transition&gt;</code></pre><h2><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#%E5%A4%9A%E4%B8%AA%E5%85%83%E7%B4%A0%E7%9A%84%E8%BF%87%E6%B8%A1\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#%E5%A4%9A%E4%B8%AA%E5%85%83%E7%B4%A0%E7%9A%84%E8%BF%87%E6%B8%A1\" rel=\"external nofollow\" target=\"_blank\"></a>多个元素的过渡</h2><p>我们在本章之后讨论“多个组件的过渡”, 对于原生标签可以使用 v-if/v-else 。最常见的多标签过渡是一个列表和描述这个列表为空消息的元素：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;transition&gt;\n  &lt;table v-if=\"items.length &gt; 0\"&gt;\n    &lt;!-- ... --&gt;\n  &lt;/table&gt;\n  &lt;p v-else&gt;Sorry, no items found.&lt;/p&gt;\n&lt;/transition&gt;</code></pre><p>可以这样使用，但是有一点需要注意：</p><blockquote>    <p>当有<strong>相同标签名</strong>的元素切换时，需要通过 key 特性设置唯一的值来标记以让 Vue 区分它们，否则 Vue 为了效率只会替换相同标签内部的内容。即使在技术上没有必要，<strong>给在&lt;transition&gt;        组件中的多个元素设置 key 是一个更好的实践。</strong>            </p></blockquote><p>示例:</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;transition&gt;\n  &lt;button v-if=\"isEditing\" key=\"save\"&gt;\n    Save\n  &lt;/button&gt;\n  &lt;button v-else key=\"edit\"&gt;\n    Edit\n  &lt;/button&gt;\n&lt;/transition&gt;</code></pre><p>在一些场景中，也可以给通过给同一个元素的 key 特性设置不同的状态来代替 v-if 和 v-else，上面的例子可以重写为：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;transition&gt;\n  &lt;button v-bind:key=\"isEditing\"&gt;\n    {{ isEditing ? 'Save' : 'Edit' }}\n  &lt;/button&gt;\n&lt;/transition&gt;</code></pre><p>使用多个 v-if 的多个元素的过渡可以重写为绑定了动态属性的单个元素过渡。 例如：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;transition&gt;\n  &lt;button v-if=\"docState === 'saved'\" key=\"saved\"&gt;\n    Edit\n  &lt;/button&gt;\n  &lt;button v-if=\"docState === 'edited'\" key=\"edited\"&gt;\n    Save\n  &lt;/button&gt;\n  &lt;button v-if=\"docState === 'editing'\" key=\"editing\"&gt;\n    Cancel\n  &lt;/button&gt;\n&lt;/transition&gt;</code></pre><p>可以重写为：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;transition&gt;\n  &lt;button v-bind:key=\"docState\"&gt;\n    {{ buttonMessage }}\n  &lt;/button&gt;\n&lt;/transition&gt;</code></pre><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">// ...\ncomputed: {\n  buttonMessage: function () {\n    switch (docState) {\n      case 'saved': return 'Edit'\n      case 'edited': return 'Save'\n      case 'editing': return 'Cancel'\n    }\n  }\n}</code></pre><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#%E8%BF%87%E6%B8%A1%E6%A8%A1%E5%BC%8F\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#%E8%BF%87%E6%B8%A1%E6%A8%A1%E5%BC%8F\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#%E8%BF%87%E6%B8%A1%E6%A8%A1%E5%BC%8F\" rel=\"external nofollow\" target=\"_blank\"></a>过渡模式</h3><p>这里还有一个问题，试着点击下面的按钮：</p><button>off</button><p>在 “on” 按钮和 “off” 按钮的过渡中，两个按钮都被重绘了，一个离开过渡的时候另一个开始进入过渡。这是 &lt;transition&gt; 的默认行为 - 进入和离开同时发生。</p><p>在元素绝对定位在彼此之上的时候运行正常：</p><button>off</button><p>然后，我们加上 translate 让它们运动像滑动过渡：</p><button>off</button><p>同时生效的进入和离开的过渡不能满足所有要求，所以 Vue 提供了<strong>过渡模式</strong></p><ul>    <li>in-out: 新元素先进行过渡，完成之后当前元素过渡离开。</li>    <li>out-in: 当前元素先进行过渡，完成之后新元素过渡进入。</li></ul><p>用 out-in 重写之前的开关按钮过渡：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;transition name=\"fade\" mode=\"out-in\"&gt;\n  &lt;!-- ... the buttons ... --&gt;\n&lt;/transition&gt;</code></pre><button>off</button><p>只用添加一个简单的特性，就解决了之前的过渡问题而无需任何额外的代码。</p><p>in-out 模式不是经常用到，但对于一些稍微不同的过渡效果还是有用的。将之前滑动淡出的例子结合：</p><button>off</button><p>很酷吧？</p><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#%E5%A4%9A%E4%B8%AA%E7%BB%84%E4%BB%B6%E7%9A%84%E8%BF%87%E6%B8%A1\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#%E5%A4%9A%E4%B8%AA%E7%BB%84%E4%BB%B6%E7%9A%84%E8%BF%87%E6%B8%A1\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#%E5%A4%9A%E4%B8%AA%E7%BB%84%E4%BB%B6%E7%9A%84%E8%BF%87%E6%B8%A1\" rel=\"external nofollow\" target=\"_blank\"></a>多个组件的过渡</h2><p>多个组件的过渡很简单很多 - 我们不需要使用 key 特性。相反，我们只需要使用动态组件:</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;transition name=\"component-fade\" mode=\"out-in\"&gt;\n  &lt;component v-bind:is=\"view\"&gt;&lt;/component&gt;\n&lt;/transition&gt;</code></pre><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">new Vue({\n  el: '#transition-components-demo',\n  data: {\n    view: 'v-a'\n  },\n  components: {\n    'v-a': {\n      template: '&lt;div&gt;Component A&lt;/div&gt;'\n    },\n    'v-b': {\n      template: '&lt;div&gt;Component B&lt;/div&gt;'\n    }\n  }\n})</code></pre><div id=\"transition-components-demo\" class=\"demo\">    <input type=\"radio\" value=\"v-a\" id=\"a\" name=\"view\">    A    <input type=\"radio\" value=\"v-b\" id=\"b\" name=\"view\">    B    <div>Component A</div></div><h2><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#%E5%88%97%E8%A1%A8%E8%BF%87%E6%B8%A1\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#%E5%88%97%E8%A1%A8%E8%BF%87%E6%B8%A1\" rel=\"external nofollow\" target=\"_blank\"></a>列表过渡</h2><p>目前为止，关于过渡我们已经讲到：</p><ul>    <li>单个节点</li>    <li>一次渲染多个节点</li></ul><p>那么怎么同时渲染整个列表，比如使用 v-for ？在这种场景中，使用&lt;transition-group&gt; 组件。在我们深入例子之前，先了解关于这个组件的几个特点：</p><ul>    <li>不同于 &lt;transition&gt;， 它会以一个真实元素呈现：默认为一个 &lt;span&gt;。你也可以通过 tag 特性更换为其他元素。</li>    <li>元素<strong>一定需要</strong>指定唯一的 key 特性值</li></ul><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#%E5%88%97%E8%A1%A8%E7%9A%84%E8%BF%9B%E5%85%A5%E5%92%8C%E7%A6%BB%E5%BC%80%E8%BF%87%E6%B8%A1\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#%E5%88%97%E8%A1%A8%E7%9A%84%E8%BF%9B%E5%85%A5%E5%92%8C%E7%A6%BB%E5%BC%80%E8%BF%87%E6%B8%A1\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#%E5%88%97%E8%A1%A8%E7%9A%84%E8%BF%9B%E5%85%A5%E5%92%8C%E7%A6%BB%E5%BC%80%E8%BF%87%E6%B8%A1\" rel=\"external nofollow\" target=\"_blank\"></a>列表的进入和离开过渡</h3><p>现在让我们由一个简单的例子深入，进入和离开的过渡使用之前一样的 CSS 类名。</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;div id=\"list-demo\" class=\"demo\"&gt;\n  &lt;button v-on:click=\"add\"&gt;Add&lt;/button&gt;\n  &lt;button v-on:click=\"remove\"&gt;Remove&lt;/button&gt;\n  &lt;transition-group name=\"list\" tag=\"p\"&gt;\n    &lt;span v-for=\"item in items\" v-bind:key=\"item\" class=\"list-item\"&gt;\n      {{ item }}\n    &lt;/span&gt;\n  &lt;/transition-group&gt;\n&lt;/div&gt;</code></pre><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">new Vue({\n  el: '#list-demo',\n  data: {\n    items: [1,2,3,4,5,6,7,8,9],\n    nextNum: 10\n  },\n  methods: {\n    randomIndex: function () {\n      return Math.floor(Math.random() * this.items.length)\n    },\n    add: function () {\n      this.items.splice(this.randomIndex(), 0, this.nextNum++)\n    },\n    remove: function () {\n      this.items.splice(this.randomIndex(), 1)\n    },\n  }\n})</code></pre><pre lang=\"css\" style=\"max-width: 100%;\"><code class=\"css\">.list-item {\n  display: inline-block;\n  margin-right: 10px;\n}\n.list-enter-active, .list-leave-active {\n  transition: all 1s;\n}\n.list-enter, .list-leave-active {\n  opacity: 0;\n  transform: translateY(30px);\n}</code></pre><p>结果：</p><button>Add</button> <button>Remove</button><p>123456789</p><p>这个例子有个问题，当添加和移除元素的时候，周围的元素会瞬间移动到他们的新布局的位置，而不是平滑的过渡，我们下面会解决这个问题。</p><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#%E5%88%97%E8%A1%A8%E7%9A%84%E4%BD%8D%E7%A7%BB%E8%BF%87%E6%B8%A1\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#%E5%88%97%E8%A1%A8%E7%9A%84%E4%BD%8D%E7%A7%BB%E8%BF%87%E6%B8%A1\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#%E5%88%97%E8%A1%A8%E7%9A%84%E4%BD%8D%E7%A7%BB%E8%BF%87%E6%B8%A1\" rel=\"external nofollow\" target=\"_blank\"></a>列表的位移过渡</h3><p>&lt;transition-group&gt; 组件还有一个特殊之处。不仅可以进入和离开动画，还可以改变定位。要使用这个新功能只需了解新增的 <strong>v-move 特性</strong>，它会在元素的改变定位的过程中应用。像之前的类名一样，可以通过 name 属性来自定义前缀，也可以通过 move-class 属性手动设置。</p><p>v-move 对于设置过渡的切换时机和过渡曲线非常有用，你会看到如下的例子：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.14.1/lodash.min.js\" rel=\"external nofollow\"  rel=\"external nofollow\" &gt;&lt;/script&gt;\n&lt;div id=\"flip-list-demo\" class=\"demo\"&gt;\n  &lt;button v-on:click=\"shuffle\"&gt;Shuffle&lt;/button&gt;\n  &lt;transition-group name=\"flip-list\" tag=\"ul\"&gt;\n    &lt;li v-for=\"item in items\" v-bind:key=\"item\"&gt;\n      {{ item }}\n    &lt;/li&gt;\n  &lt;/transition-group&gt;\n&lt;/div&gt;</code></pre><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">new Vue({\n  el: '#flip-list-demo',\n  data: {\n    items: [1,2,3,4,5,6,7,8,9]\n  },\n  methods: {\n    shuffle: function () {\n      this.items = _.shuffle(this.items)\n    }\n  }\n})</code></pre><pre lang=\"css\" style=\"max-width: 100%;\"><code class=\"css\">.flip-list-move {\n  transition: transform 1s;\n}</code></pre><button>Shuffle</button><ul>    <li>1</li>    <li>2</li>    <li>3</li>    <li>4</li>    <li>5</li>    <li>6</li>    <li>7</li>    <li>8</li>    <li>9</li></ul><p>这个看起来很神奇，内部的实现，Vue 使用了一个叫 <a href=\"https://aerotwist.com/blog/flip-your-animations/\" rel=\"external nofollow\" target=\"_blank\">FLIP</a> 简单的动画队列使用 transforms 将元素从之前的位置平滑过渡新的位置。</p><p>我们将之前实现的例子和这个技术结合，使我们列表的一切变动都会有动画过渡。</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.14.1/lodash.min.js\" rel=\"external nofollow\"  rel=\"external nofollow\" &gt;&lt;/script&gt;\n&lt;div id=\"list-complete-demo\" class=\"demo\"&gt;\n  &lt;button v-on:click=\"shuffle\"&gt;Shuffle&lt;/button&gt;\n  &lt;button v-on:click=\"add\"&gt;Add&lt;/button&gt;\n  &lt;button v-on:click=\"remove\"&gt;Remove&lt;/button&gt;\n  &lt;transition-group name=\"list-complete\" tag=\"p\"&gt;\n    &lt;span\n      v-for=\"item in items\"\n      v-bind:key=\"item\"\n      class=\"list-complete-item\"\n    &gt;\n      {{ item }}\n    &lt;/span&gt;\n  &lt;/transition-group&gt;\n&lt;/div&gt;</code></pre><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">new Vue({\n  el: '#list-complete-demo',\n  data: {\n    items: [1,2,3,4,5,6,7,8,9],\n    nextNum: 10\n  },\n  methods: {\n    randomIndex: function () {\n      return Math.floor(Math.random() * this.items.length)\n    },\n    add: function () {\n      this.items.splice(this.randomIndex(), 0, this.nextNum++)\n    },\n    remove: function () {\n      this.items.splice(this.randomIndex(), 1)\n    },\n    shuffle: function () {\n      this.items = _.shuffle(this.items)\n    }\n  }\n})</code></pre><pre lang=\"css\" style=\"max-width: 100%;\"><code class=\"css\">.list-complete-item {\n  transition: all 1s;\n  display: inline-block;\n  margin-right: 10px;\n}\n.list-complete-enter, .list-complete-leave-active {\n  opacity: 0;\n  transform: translateY(30px);\n}\n.list-complete-leave-active {\n  position: absolute;\n}</code></pre><p>结果：</p><button>Shuffle</button> <button>Add</button> <button>Remove</button><p>123456789</p><blockquote>    <p>需要注意的是使用 FLIP 过渡的元素不能设置为 display: inline 。作为替代方案，可以设置为 display: inline-block 或者放置于 flex 中。</p></blockquote><p>FLIP 动画不仅可以实现单列过渡，多维网格的过渡也同样<a href=\"https://jsfiddle.net/chrisvfritz/sLrhk1bc/\" rel=\"external nofollow\" target=\"_blank\">简单</a></p><h3><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#%E5%88%97%E8%A1%A8%E7%9A%84%E6%B8%90%E8%BF%9B%E8%BF%87%E6%B8%A1\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#%E5%88%97%E8%A1%A8%E7%9A%84%E6%B8%90%E8%BF%9B%E8%BF%87%E6%B8%A1\" rel=\"external nofollow\" target=\"_blank\"></a>列表的渐进过渡</h3><p>通过 data 属性与 JavaScript 通信 ，就可以实现列表的渐进过渡：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/velocity/1.2.3/velocity.min.js\" rel=\"external nofollow\"  rel=\"external nofollow\"  rel=\"external nofollow\" &gt;&lt;/script&gt;\n&lt;div id=\"staggered-list-demo\"&gt;\n  &lt;input v-model=\"query\"&gt;\n  &lt;transition-group\n    name=\"staggered-fade\"\n    tag=\"ul\"\n    v-bind:css=\"false\"\n    v-on:before-enter=\"beforeEnter\"\n    v-on:enter=\"enter\"\n    v-on:leave=\"leave\"\n  &gt;\n    &lt;li\n      v-for=\"(item, index) in computedList\"\n      v-bind:key=\"item.msg\"\n      v-bind:data-index=\"index\"\n    &gt;{{ item.msg }}&lt;/li&gt;\n  &lt;/transition-group&gt;\n&lt;/div&gt;</code></pre><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">new Vue({\n  el: '#staggered-list-demo',\n  data: {\n    query: '',\n    list: [\n      { msg: 'Bruce Lee' },\n      { msg: 'Jackie Chan' },\n      { msg: 'Chuck Norris' },\n      { msg: 'Jet Li' },\n      { msg: 'Kung Fury' }\n    ]\n  },\n  computed: {\n    computedList: function () {\n      var vm = this\n      return this.list.filter(function (item) {\n        return item.msg.toLowerCase().indexOf(vm.query.toLowerCase()) !== -1\n      })\n    }\n  },\n  methods: {\n    beforeEnter: function (el) {\n      el.style.opacity = 0\n      el.style.height = 0\n    },\n    enter: function (el, done) {\n      var delay = el.dataset.index * 150\n      setTimeout(function () {\n        Velocity(\n          el,\n          { opacity: 1, height: '1.6em' },\n          { complete: done }\n        )\n      }, delay)\n    },\n    leave: function (el, done) {\n      var delay = el.dataset.index * 150\n      setTimeout(function () {\n        Velocity(\n          el,\n          { opacity: 0, height: 0 },\n          { complete: done }\n        )\n      }, delay)\n    }\n  }\n})</code></pre><p>结果：</p><input><ul>    <li>Bruce Lee</li>    <li>Jackie Chan</li>    <li>Chuck Norris</li>    <li>Jet Li</li>    <li>Kung Fury</li></ul><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#%E5%8F%AF%E5%A4%8D%E7%94%A8%E7%9A%84%E8%BF%87%E6%B8%A1\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#%E5%8F%AF%E5%A4%8D%E7%94%A8%E7%9A%84%E8%BF%87%E6%B8%A1\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#%E5%8F%AF%E5%A4%8D%E7%94%A8%E7%9A%84%E8%BF%87%E6%B8%A1\" rel=\"external nofollow\" target=\"_blank\"></a>可复用的过渡</h2><p>过渡可以通过 Vue 的组件系统实现复用。要创建一个可复用过渡组件，你需要做的就是将 &lt;transition&gt; 或者 &lt;transition-group&gt; 作为根组件，然后将任何子组件放置在其中就可以了。</p><p>使用 template 的简单例子：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">Vue.component('my-special-transition', {\n  template: '\\\n    &lt;transition\\\n      name=\"very-special-transition\"\\\n      mode=\"out-in\"\\\n      v-on:before-enter=\"beforeEnter\"\\\n      v-on:after-enter=\"afterEnter\"\\\n    &gt;\\\n      &lt;slot&gt;&lt;/slot&gt;\\\n    &lt;/transition&gt;\\\n  ',\n  methods: {\n    beforeEnter: function (el) {\n      // ...\n    },\n    afterEnter: function (el) {\n      // ...\n    }\n  }\n})</code></pre><p>函数组件更适合完成这个任务：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">Vue.component('my-special-transition', {\n  functional: true,\n  render: function (createElement, context) {\n    var data = {\n      props: {\n        name: 'very-special-transition'\n        mode: 'out-in'\n      },\n      on: {\n        beforeEnter: function (el) {\n          // ...\n        },\n        afterEnter: function (el) {\n          // ...\n        }\n      }\n    }\n    return createElement('transition', data, context.children)\n  }\n})</code></pre><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#%E5%8A%A8%E6%80%81%E8%BF%87%E6%B8%A1\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#%E5%8A%A8%E6%80%81%E8%BF%87%E6%B8%A1\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/transitions.html#%E5%8A%A8%E6%80%81%E8%BF%87%E6%B8%A1\" rel=\"external nofollow\" target=\"_blank\"></a>动态过渡</h2><p>在 Vue 中即使是过渡也是数据驱动的！动态过渡最基本的例子是通过 name 特性来绑定动态值。</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;transition v-bind:name=\"transitionName\"&gt;\n  &lt;!-- ... --&gt;\n&lt;/transition&gt;</code></pre><p>当你想用 Vue 的过渡系统来定义的 CSS 过渡/动画 在不同过渡间切换会非常有用。</p><p>所有的过渡特性都是动态绑定。它不仅是简单的特性，通过事件的钩子函数方法，可以在获取到相应上下文数据。这意味着，可以根据组件的状态通过 JavaScript 过渡设置不同的过渡效果。</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/velocity/1.2.3/velocity.min.js\" rel=\"external nofollow\"  rel=\"external nofollow\"  rel=\"external nofollow\" &gt;&lt;/script&gt;\n&lt;div id=\"dynamic-fade-demo\"&gt;\n  Fade In: &lt;input type=\"range\" v-model=\"fadeInDuration\" min=\"0\" v-bind:max=\"maxFadeDuration\"&gt;\n  Fade Out: &lt;input type=\"range\" v-model=\"fadeOutDuration\" min=\"0\" v-bind:max=\"maxFadeDuration\"&gt;\n  &lt;transition\n    v-bind:css=\"false\"\n    v-on:before-enter=\"beforeEnter\"\n    v-on:enter=\"enter\"\n    v-on:leave=\"leave\"\n  &gt;\n    &lt;p v-if=\"show\"&gt;hello&lt;/p&gt;\n  &lt;/transition&gt;\n  &lt;button v-on:click=\"stop = true\"&gt;Stop it!&lt;/button&gt;\n&lt;/div&gt;</code></pre><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">new Vue({\n  el: '#dynamic-fade-demo',\n  data: {\n    show: true,\n    fadeInDuration: 1000,\n    fadeOutDuration: 1000,\n    maxFadeDuration: 1500,\n    stop: false\n  },\n  mounted: function () {\n    this.show = false\n  },\n  methods: {\n    beforeEnter: function (el) {\n      el.style.opacity = 0\n    },\n    enter: function (el, done) {\n      var vm = this\n      Velocity(el,\n        { opacity: 1 },\n        {\n          duration: this.fadeInDuration,\n          complete: function () {\n            done()\n            if (!vm.stop) vm.show = false\n          }\n        }\n      )\n    },\n    leave: function (el, done) {\n      var vm = this\n      Velocity(el,\n        { opacity: 0 },\n        {\n          duration: this.fadeOutDuration,\n          complete: function () {\n            done()\n            vm.show = true\n          }\n        }\n      )\n    }\n  }\n})</code></pre><p>结果：</p><div id=\"dynamic-fade-demo\" class=\"demo\">  Fade In: <input type=\"range\" min=\"0\" max=\"1500\">  Fade Out: <input type=\"range\" min=\"0\" max=\"1500\"> <p class=\"velocity-animating\" style=\"opacity: 0.838823;\">hello</p> <button>Stop it!</button></div><p><br></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "Vue.js 2.0 教程",
      "teach_introduction": "Vue.js 2.0 版本，是目前主流的版本。",
      "sort_index": 1,
      "parent_sort_index": 2,
      "chapter_level_one_id": "e8fb10237b03499ebdc00cd95024fcfb",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "Vue.js 2.0 进阶教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "9e0590fd562896a2d76a6e85f93f34dc",
      "chapter_level_two_parent_id": "e8fb10237b03499ebdc00cd95024fcfb",
      "chapter_level_two_name": "深入响应式原理",
      "chapter_level_two_url": "/vuejs2/reactivity.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2><span style=\"font-family:inherit;\">Vue.js 2.0 </span>深入响应式原理</h2><p>大部分的基础内容我们已经讲到了，现在讲点底层内容。Vue 最显著的一个功能是响应系统 —— 模型只是普通对象，修改它则更新视图。这会让状态管理变得非常简单且直观，不过理解它的原理以避免一些常见的陷阱也是很重要的。在本节中，我们将开始深挖 Vue 响应系统的底层细节。</p><a href=\"http://doc.vue-js.com/v2/guide/reactivity.html#%E5%A6%82%E4%BD%95%E8%BF%BD%E8%B8%AA%E5%8F%98%E5%8C%96\" rel=\"external nofollow\" target=\"_blank\"></a><h3>如何追踪变化</h3><h2><a href=\"http://doc.vue-js.com/v2/guide/reactivity.html#%E5%A6%82%E4%BD%95%E8%BF%BD%E8%B8%AA%E5%8F%98%E5%8C%96\" rel=\"external nofollow\" target=\"_blank\"></a></h2><p>把一个普通 Javascript 对象传给 Vue 实例来作为它的 data 选项，Vue 将遍历它的属性，用 <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\" rel=\"external nofollow\" target=\"_blank\">Object.defineProperty</a> 将它们转为 getter/setter。这是 ES5 的特性，不能打补丁实现，这便是为什么 Vue 不支持 IE8 以及更低版本浏览器的原因。</p><p>用户看不到 getter/setters，但是在内部它们让 Vue 追踪依赖，在属性被访问和修改时通知变化。这里需要注意的问题是浏览器控制台在打印数据对象时 getter/setter 的格式化并不同，所以你可能需要安装 <a href=\"https://github.com/vuejs/vue-devtools\" rel=\"external nofollow\" target=\"_blank\">vue-devtools</a> 来获取更加友好的检查接口。</p><p>每个组件实例都有相应的 watcher 程序实例，它会在组件渲染的过程中把属性记录为依赖，之后当依赖项的 setter 被调用时，会通知 watcher 重新计算，从而致使它关联的组件得以更新。</p><p style=\"text-align: center; \"><img src=\"//atts.w3cschool.cn/attachments/day_190316/201903161724311621.png\" alt=\"data\" style=\"width: 750px; height: 468px;\"></p><a href=\"http://doc.vue-js.com/v2/guide/reactivity.html#%E5%8F%98%E5%8C%96%E6%A3%80%E6%B5%8B%E9%97%AE%E9%A2%98\" rel=\"external nofollow\" target=\"_blank\"></a><h3>变化检测问题</h3><h2><a href=\"http://doc.vue-js.com/v2/guide/reactivity.html#%E5%8F%98%E5%8C%96%E6%A3%80%E6%B5%8B%E9%97%AE%E9%A2%98\" rel=\"external nofollow\" target=\"_blank\"></a></h2><p>受现代 Javascript 的限制(以及 Object.observe 的废弃)，Vue <strong>不能检测到对象属性的添加或删除</strong>。因为 Vue 在初始化实例时将属性转为 getter/setter，所以属性必须在 data 对象上才能让 Vue 转换它，这样才能让它是响应的。例如：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">var vm = new Vue({\n  data:{\n  a:1\n  }\n})\n// `vm.a` 是响应的\nvm.b = 2\n// `vm.b` 是非响应的</code></pre><p>Vue 不允许在已经创建的实例上动态添加新的根级响应式属性（root-level reactive properties）。然而它可以使用 Vue.set(object, key, value) 方法将响应属性添加到嵌套的对象上：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">Vue.set(vm.someObject, 'b', 2)</code></pre><p>您还可以使用 vm.$set 实例方法，这也是全局 Vue.set 方法的别名：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">this.$set(this.someObject,'b',2)</code></pre><p>有时你想向已有对象上添加一些属性，例如使用 Object.assign() 或 _.extend() 方法来添加属性。但是，添加到对象上的新属性不会触发更新。在这种情况下可以创建一个新的对象，让它包含原对象的属性和新的属性：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">// 代替 `Object.assign(this.someObject, { a: 1, b: 2 })`\nthis.someObject = Object.assign({}, this.someObject, { a: 1, b: 2 })</code></pre><p>也有一些数组相关的问题，之前已经在<a href=\"https://www.w3cschool.cn/vuejs2/vuejs2-list.html\" style=\"background-color: rgb(255, 255, 255);\" target=\"_blank\">列表渲染</a>中讲过。<br></p><p>由于 Vue 不允许动态添加根级响应式属性，所以你必须在初始化实例前声明根级响应式属性，哪怕只是一个空值:</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">var vm = new Vue({\n  data: {\n    // 声明 message 为一个空值字符串\n    message: ''\n  },\n  template: '&lt;div&gt;{{ message }}&lt;/div&gt;'\n})\n// 之后设置 `message` \nvm.message = 'Hello!'</code></pre><p>如果你不在 data 对象中声明 message，Vue 将发出警告表明你的渲染方法正试图访问一个不存在的属性。<br></p><p>这样的限制在背后是有其技术原因的，在依赖项跟踪系统中，它消除了一类边界情况，也使 Vue 实例在类型检查系统的帮助下运行的更高效。在代码可维护性方面上这也是重要的一点：data 对象就像组件状态的模式（Schema），在它上面声明所有的属性让组织代码更易于被其他开发者或是自己回头重新阅读时更加快速地理解。</p><a href=\"http://doc.vue-js.com/v2/guide/reactivity.html#%E5%BC%82%E6%AD%A5%E6%9B%B4%E6%96%B0%E9%98%9F%E5%88%97\" rel=\"external nofollow\" target=\"_blank\"></a><h3>异步更新队列</h3><h2><a href=\"http://doc.vue-js.com/v2/guide/reactivity.html#%E5%BC%82%E6%AD%A5%E6%9B%B4%E6%96%B0%E9%98%9F%E5%88%97\" rel=\"external nofollow\" target=\"_blank\"></a></h2><p>你应该注意到 Vue 执行 DOM 更新是异步的，只要观察到数据变化，Vue 就开始一个队列，将同一事件循环内所有的数据变化缓存起来。如果一个 watcher 被多次触发，只会推入一次到队列中。然后，在接下来的事件循环中，Vue 刷新队列并仅执行必要的 DOM 更新。Vue 在内部尝试利用原生的 Promise.then 和 MutationObserver 来调用异步队列，如果执行环境不兼容，会采用 setTimeout(fn, 0) 代替。</p><p>例如，当你设置 vm.someData = 'new value' ，该组件不会马上被重新渲染。当刷新队列时，这个组件会在下一次事件循环清空队列时更新。我们基本不用关心这个过程，但是如果你想在 DOM 状态更新后做点什么，这就可能会有些棘手。一般来讲， Vue 鼓励开发者沿着数据驱动的思路，尽量避免直接接触 DOM，但是有时我们确实要这么做。为了在数据变化之后等待 Vue 完成更新 DOM ，可以在数据变化之后立即使用 Vue.nextTick(callback) 。这样回调在 DOM 更新完成后就会调用。例如：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;div id=\"example\"&gt;{{message}}&lt;/div&gt;</code></pre><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">var vm = new Vue({\n  el: '#example',\n  data: {\n    message: '123'\n  }\n})\nvm.message = 'new message' // 更改数据\nvm.$el.textContent === 'new message' // false\nVue.nextTick(function () {\n  vm.$el.textContent === 'new message' // true\n})</code></pre><p>vm.$nextTick() 这个实例方法在组件内使用特别方便，因为它不需要全局 Vue ，它的回调 this 将自动绑定到当前的 Vue 实例上：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">Vue.component('example', {\n  template: '&lt;span&gt;{{ message }}&lt;/span&gt;',\n  data: function () {\n    return {\n      message: 'not updated'\n    }\n  },\n  methods: {\n    updateMessage: function () {\n      this.message = 'updated'\n      console.log(this.$el.textContent) // =&gt; 'not updated'\n      this.$nextTick(function () {\n        console.log(this.$el.textContent) // =&gt; 'updated'\n      })\n    }\n  }\n})</code></pre></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "Vue.js 2.0 教程",
      "teach_introduction": "Vue.js 2.0 版本，是目前主流的版本。",
      "sort_index": 11,
      "parent_sort_index": 1,
      "chapter_level_one_id": "4e96a383dc08d306c951ba0d75ca6db7",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "Vue.js 2.0 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "06cddfbdfc79e80bcfba771ed7153bab",
      "chapter_level_two_parent_id": "4e96a383dc08d306c951ba0d75ca6db7",
      "chapter_level_two_name": "组件",
      "chapter_level_two_url": "/vuejs2/components.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>Vue.js 2.0 组件</h2><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E4%BB%80%E4%B9%88%E6%98%AF%E7%BB%84%E4%BB%B6%EF%BC%9F\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E4%BB%80%E4%B9%88%E6%98%AF%E7%BB%84%E4%BB%B6%EF%BC%9F\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E4%BB%80%E4%B9%88%E6%98%AF%E7%BB%84%E4%BB%B6%EF%BC%9F\" rel=\"external nofollow\" target=\"_blank\"></a>什么是组件？</h2><p>组件（Component）是 Vue.js 最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码。在较高层面上，组件是自定义元素， Vue.js 的编译器为它添加特殊功能。在有些情况下，组件也可以是原生 HTML 元素的形式，以 is 特性扩展。</p><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E4%BD%BF%E7%94%A8%E7%BB%84%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E4%BD%BF%E7%94%A8%E7%BB%84%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E4%BD%BF%E7%94%A8%E7%BB%84%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a>使用组件</h2><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E6%B3%A8%E5%86%8C\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E6%B3%A8%E5%86%8C\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E6%B3%A8%E5%86%8C\" rel=\"external nofollow\" target=\"_blank\"></a>注册</h3><p>之前说过，我们可以通过以下方式创建一个 Vue 实例：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">new Vue({\n  el: '#some-element',\n  // 选项\n})</code></pre><p>要注册一个全局组件，你可以使用 Vue.component(tagName, options)。 例如：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">Vue.component('my-component', {\n  // 选项\n})</code></pre><blockquote><p>对于自定义标签名，Vue.js 不强制要求遵循 <a href=\"https://www.w3.org/TR/custom-elements/#concepts\" rel=\"external nofollow\" target=\"_blank\">W3C规则</a> （小写，并且包含一个短杠），尽管遵循这个规则比较好。</p></blockquote><p>组件在注册之后，便可以在父实例的模块中以自定义元素 &lt;my-component&gt;&lt;/my-component&gt; 的形式使用。要确保在初始化根实例<strong>之前</strong>注册了组件：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;div id=\"example\"&gt;\n  &lt;my-component&gt;&lt;/my-component&gt;\n&lt;/div&gt;</code></pre><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">// 注册\nVue.component('my-component', {\n  template: '&lt;div&gt;A custom component!&lt;/div&gt;'\n})\n// 创建根实例\nnew Vue({\n  el: '#example'\n})</code></pre><p>渲染为：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;div id=\"example\"&gt;\n  &lt;div&gt;A custom component!&lt;/div&gt;\n&lt;/div&gt;</code></pre><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">A custom component!</code></pre><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E5%B1%80%E9%83%A8%E6%B3%A8%E5%86%8C\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E5%B1%80%E9%83%A8%E6%B3%A8%E5%86%8C\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E5%B1%80%E9%83%A8%E6%B3%A8%E5%86%8C\" rel=\"external nofollow\" target=\"_blank\"></a>局部注册</h3><p>不必在全局注册每个组件。通过使用组件实例选项注册，可以使组件仅在另一个实例/组件的作用域中可用：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">var Child = {\n  template: '&lt;div&gt;A custom component!&lt;/div&gt;'\n}\nnew Vue({\n  // ...\n  components: {\n    // &lt;my-component&gt; 将只在父模板可用\n    'my-component': Child\n  }\n})</code></pre><p>这种封装也适用于其它可注册的 Vue 功能，如指令。</p><a href=\"http://doc.vue-js.com/v2/guide/components.html#DOM-%E6%A8%A1%E7%89%88%E8%A7%A3%E6%9E%90%E8%AF%B4%E6%98%8E\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/components.html#DOM-%E6%A8%A1%E7%89%88%E8%A7%A3%E6%9E%90%E8%AF%B4%E6%98%8E\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/components.html#DOM-%E6%A8%A1%E7%89%88%E8%A7%A3%E6%9E%90%E8%AF%B4%E6%98%8E\" rel=\"external nofollow\" target=\"_blank\"></a>DOM 模版解析说明</h3><p>当使用 DOM 作为模版时（例如，将 el 选项挂载到一个已存在的元素上）, 你会受到 HTML 的一些限制，因为 Vue 只有在浏览器解析和标准化 HTML 后才能获取模版内容。尤其像这些元素 &lt;ul&gt; ， &lt;ol&gt;， &lt;table&gt; ， &lt;select&gt; 限制了能被它包裹的元素， &lt;option&gt; 只能出现在其它元素内部。</p><p>在自定义组件中使用这些受限制的元素时会导致一些问题，例如：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;table&gt;\n  &lt;my-row&gt;...&lt;/my-row&gt;\n&lt;/table&gt;</code></pre><p>自定义组件 &lt;my-row&gt; 被认为是无效的内容，因此在渲染的时候会导致错误。变通的方案是使用特殊的 is 属性：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;table&gt;\n  &lt;tr is=\"my-row\"&gt;&lt;/tr&gt;\n&lt;/table&gt;</code></pre><p><strong>应当注意，如果您使用来自以下来源之一的字符串模板，这些限制将不适用：</strong></p><ul><li>&lt;script type=\"text/x-template\"&gt;</li><li>JavaScript内联模版字符串</li><li>.vue 组件</li></ul><p>因此，有必要的话请使用字符串模版。</p><a href=\"http://doc.vue-js.com/v2/guide/components.html#data-%E5%BF%85%E9%A1%BB%E6%98%AF%E5%87%BD%E6%95%B0\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/components.html#data-%E5%BF%85%E9%A1%BB%E6%98%AF%E5%87%BD%E6%95%B0\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/components.html#data-%E5%BF%85%E9%A1%BB%E6%98%AF%E5%87%BD%E6%95%B0\" rel=\"external nofollow\" target=\"_blank\"></a>data 必须是函数</h3><p>使用组件时，大多数选项可以被传入到 Vue 构造器中，有一个例外： data 必须是函数。 实际上，如果你这么做：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">Vue.component('my-component', {\n  template: '&lt;span&gt;{{ message }}&lt;/span&gt;',\n  data: {\n    message: 'hello'\n  }\n})</code></pre><p>那么 Vue 会在控制台发出警告，告诉你在组件中 data 必须是一个函数。最好理解这种规则的存在意义。</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;div id=\"example-2\"&gt;\n  &lt;simple-counter&gt;&lt;/simple-counter&gt;\n  &lt;simple-counter&gt;&lt;/simple-counter&gt;\n  &lt;simple-counter&gt;&lt;/simple-counter&gt;\n&lt;/div&gt;</code></pre><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">var data = { counter: 0 }\nVue.component('simple-counter', {\n  template: '&lt;button v-on:click=\"counter += 1\"&gt;{{ counter }}&lt;/button&gt;',\n  // data 是一个函数，因此 Vue 不会警告，\n  // 但是我们为每一个组件返回了同一个对象引用\n  data: function () {\n    return data\n  }\n})\nnew Vue({\n  el: '#example-2'\n})</code></pre><p>结果：</p><button>0</button> <button>0</button> <button>0</button><p><br></p><p>由于这三个组件共享了同一个 data ， 因此增加一个 counter 会影响所有组件！我们可以通过为每个组件返回新的 data 对象来解决这个问题：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">data: function () {\n  return {\n    counter: 0\n  }\n}</code></pre><p>现在每个 counter 都有它自己内部的状态了：</p><button>0</button> <button>0</button> <button>0</button><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E6%9E%84%E6%88%90%E7%BB%84%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E6%9E%84%E6%88%90%E7%BB%84%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E6%9E%84%E6%88%90%E7%BB%84%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a>构成组件</h3><p>组件意味着协同工作，通常父子组件会是这样的关系：组件 A 在它的模版中使用了组件 B 。它们之间必然需要相互通信：父组件要给子组件传递数据，子组件需要将它内部发生的事情告知给父组件。然而，在一个良好定义的接口中尽可能将父子组件解耦是很重要的。这保证了每个组件可以在相对隔离的环境中书写和理解，也大幅提高了组件的可维护性和可重用性。</p><p>在 Vue.js 中，父子组件的关系可以总结为 props down, events up 。父组件通过 props 向下传递数据给子组件，子组件通过 events 给父组件发送消息。看看它们是怎么工作的。</p><p style=\"text-align: center; \"><img src=\"//atts.w3cschool.cn/attachments/day_190316/201903161637281427.png\" alt=\"props down, events up\" style=\"width: 522px; height: 361px;\"></p><a href=\"http://doc.vue-js.com/v2/guide/components.html#Props\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/components.html#Props\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/components.html#Props\" rel=\"external nofollow\" target=\"_blank\"></a>Props</h2><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E4%BD%BF%E7%94%A8Props%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E4%BD%BF%E7%94%A8Props%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E4%BD%BF%E7%94%A8Props%E4%BC%A0%E9%80%92%E6%95%B0%E6%8D%AE\" rel=\"external nofollow\" target=\"_blank\"></a>使用Props传递数据</h3><p>组件实例的作用域是<strong>孤立的</strong>。这意味着不能并且不应该在子组件的模板内直接引用父组件的数据。可以使用 props 把数据传给子组件。</p><p>prop 是父组件用来传递数据的一个自定义属性。子组件需要显式地用 props 选项 声明 “prop”：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">Vue.component('child', {\n  // 声明 props\n  props: ['message'],\n  // 就像 data 一样，prop 可以用在模板内\n  // 同样也可以在 vm 实例中像 “this.message” 这样使用\n  template: '&lt;span&gt;{{ message }}&lt;/span&gt;'\n})</code></pre><p>然后向它传入一个普通字符串：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;child message=\"hello!\"&gt;&lt;/child&gt;</code></pre><p>结果：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">hello!</code></pre><a href=\"http://doc.vue-js.com/v2/guide/components.html#camelCase-vs-kebab-case\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/components.html#camelCase-vs-kebab-case\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/components.html#camelCase-vs-kebab-case\" rel=\"external nofollow\" target=\"_blank\"></a>camelCase vs. kebab-case</h3><p>HTML 特性不区分大小写。当使用非字符串模版时，prop的名字形式会从 camelCase 转为 kebab-case（短横线隔开）：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">Vue.component('child', {\n  // camelCase in JavaScript\n  props: ['myMessage'],\n  template: '&lt;span&gt;{{ myMessage }}&lt;/span&gt;'\n})</code></pre><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;!-- kebab-case in HTML --&gt;\n&lt;child my-message=\"hello!\"&gt;&lt;/child&gt;</code></pre><p>再次说明，如果你使用字符串模版，不用在意这些限制。</p><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E5%8A%A8%E6%80%81-Props\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E5%8A%A8%E6%80%81-Props\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E5%8A%A8%E6%80%81-Props\" rel=\"external nofollow\" target=\"_blank\"></a>动态 Props</h3><p>类似于用 v-bind 绑定 HTML 特性到一个表达式，也可以用 v-bind 动态绑定 props 的值到父组件的数据中。每当父组件的数据变化时，该变化也会传导给子组件：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;div&gt;\n  &lt;input v-model=\"parentMsg\"&gt;\n  &lt;br&gt;\n  &lt;child v-bind:my-message=\"parentMsg\"&gt;&lt;/child&gt;\n&lt;/div&gt;</code></pre><p>使用 v-bind 的缩写语法通常更简单：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;child :my-message=\"parentMsg\"&gt;&lt;/child&gt;</code></pre><p>结果：<br></p><input> <br><p>Message from parent</p><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E5%AD%97%E9%9D%A2%E9%87%8F%E8%AF%AD%E6%B3%95-vs-%E5%8A%A8%E6%80%81%E8%AF%AD%E6%B3%95\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E5%AD%97%E9%9D%A2%E9%87%8F%E8%AF%AD%E6%B3%95-vs-%E5%8A%A8%E6%80%81%E8%AF%AD%E6%B3%95\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E5%AD%97%E9%9D%A2%E9%87%8F%E8%AF%AD%E6%B3%95-vs-%E5%8A%A8%E6%80%81%E8%AF%AD%E6%B3%95\" rel=\"external nofollow\" target=\"_blank\"></a>字面量语法 vs 动态语法</h3><p>初学者常犯的一个错误是使用字面量语法传递数值：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;!-- 传递了一个字符串\"1\" --&gt;\n&lt;comp some-prop=\"1\"&gt;&lt;/comp&gt;</code></pre><p>因为它是一个字面 prop ，它的值以字符串 \"1\" 而不是以实际的数字传下去。如果想传递一个实际的 JavaScript 数字，需要使用 v-bind ，从而让它的值被当作 JavaScript 表达式计算：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;!-- 传递实际的数字 --&gt;\n&lt;comp v-bind:some-prop=\"1\"&gt;&lt;/comp&gt;</code></pre><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E5%8D%95%E5%90%91%E6%95%B0%E6%8D%AE%E6%B5%81\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E5%8D%95%E5%90%91%E6%95%B0%E6%8D%AE%E6%B5%81\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E5%8D%95%E5%90%91%E6%95%B0%E6%8D%AE%E6%B5%81\" rel=\"external nofollow\" target=\"_blank\"></a>单向数据流</h3><p>prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来。这是为了防止子组件无意修改了父组件的状态——这会让应用的数据流难以理解。</p><p>另外，每次父组件更新时，子组件的所有 prop 都会更新为最新值。这意味着你<strong>不应该</strong>在子组件内部改变 prop 。如果你这么做了，Vue 会在控制台给出警告。</p><p>通常有两种改变 prop 的情况：</p><ol><li>prop 作为初始值传入，子组件之后只是将它的初始值作为本地数据的初始值使用；</li><li>prop 作为需要被转变的原始值传入。</li></ol><p>更确切的说这两种情况是：</p><ol><li>定义一个局部 data 属性，并将 prop 的初始值作为局部数据的初始值。<pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">props: ['initialCounter'],\ndata: function () {\n  return { counter: this.initialCounter }\n}</code></pre></li><li>定义一个 computed 属性，此属性从 prop 的值计算得出。<pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">props: ['size'],\ncomputed: {\n  normalizedSize: function () {\n    return this.size.trim().toLowerCase()\n  }\n}</code></pre></li></ol><p>注意：在 JavaScript 中对象和数组是引用类型，指向同一个内存空间，如果 prop 是一个对象或数组，在子组件内部改变它<strong>会影响</strong>父组件的状态。</p><a href=\"http://doc.vue-js.com/v2/guide/components.html#Prop-%E9%AA%8C%E8%AF%81\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/components.html#Prop-%E9%AA%8C%E8%AF%81\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/components.html#Prop-%E9%AA%8C%E8%AF%81\" rel=\"external nofollow\" target=\"_blank\"></a>Prop 验证</h3><p>组件可以为 props 指定验证要求。如果未指定验证要求，Vue 会发出警告。当组件给其他人使用时这很有用。</p><p>prop 是一个对象而不是字符串数组时，它包含验证要求：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">Vue.component('example', {\n  props: {\n    // 基础类型检测 （`null` 意思是任何类型都可以）\n    propA: Number,\n    // 多种类型\n    propB: [String, Number],\n    // 必传且是字符串\n    propC: {\n      type: String,\n      required: true\n    },\n    // 数字，有默认值\n    propD: {\n      type: Number,\n      default: 100\n    },\n    // 数组／对象的默认值应当由一个工厂函数返回\n    propE: {\n      type: Object,\n      default: function () {\n        return { message: 'hello' }\n      }\n    },\n    // 自定义验证函数\n    propF: {\n      validator: function (value) {\n        return value &gt; 10\n      }\n    }\n  }\n})</code></pre><p>type 可以是下面原生构造器：<br></p><ul><li>String</li><li>Number</li><li>Boolean</li><li>Function</li><li>Object</li><li>Array</li></ul><p>type 也可以是一个自定义构造器，使用 instanceof 检测。</p><p>当 prop 验证失败了， Vue 将拒绝在子组件上设置此值，如果使用的是开发版本会抛出一条警告。</p><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a>自定义事件</h2><p>我们知道，父组件是使用 props 传递数据给子组件，但如果子组件要把数据传递回去，应该怎样做？那就是自定义事件！</p><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E4%BD%BF%E7%94%A8-v-on-%E7%BB%91%E5%AE%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E4%BD%BF%E7%94%A8-v-on-%E7%BB%91%E5%AE%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E4%BD%BF%E7%94%A8-v-on-%E7%BB%91%E5%AE%9A%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a>使用 v-on 绑定自定义事件</h3><p>每个 Vue 实例都实现了事件接口(Events interface)，即：</p><ul><li>使用 $on(eventName) 监听事件</li><li>使用 $emit(eventName) 触发事件</li></ul><blockquote><p>Vue的事件系统分离自浏览器的EventTarget API。尽管它们的运行类似，但是$on和 $emit<strong> 不是</strong> addEventListener 和 dispatchEvent 的别名。</p></blockquote><p>另外，父组件可以在使用子组件的地方直接用 v-on 来监听子组件触发的事件。</p><p>下面是一个例子：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;div id=\"counter-event-example\"&gt;\n  &lt;p&gt;{{ total }}&lt;/p&gt;\n  &lt;button-counter v-on:increment=\"incrementTotal\"&gt;&lt;/button-counter&gt;\n  &lt;button-counter v-on:increment=\"incrementTotal\"&gt;&lt;/button-counter&gt;\n&lt;/div&gt;</code></pre><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">Vue.component('button-counter', {\n  template: '&lt;button v-on:click=\"increment\"&gt;{{ counter }}&lt;/button&gt;',\n  data: function () {\n    return {\n      counter: 0\n    }\n  },\n  methods: {\n    increment: function () {\n      this.counter += 1\n      this.$emit('increment')\n    }\n  },\n})\nnew Vue({\n  el: '#counter-event-example',\n  data: {\n    total: 0\n  },\n  methods: {\n    incrementTotal: function () {\n      this.total += 1\n    }\n  }\n})</code></pre><p>0</p><button>0</button> <button>0</button><p>在本例中，子组件已经和它外部完全解耦了。它所做的只是触发一个父组件关心的内部事件。</p><h4><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E7%BB%99%E7%BB%84%E4%BB%B6%E7%BB%91%E5%AE%9A%E5%8E%9F%E7%94%9F%E4%BA%8B%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a>给组件绑定原生事件</h4><p>有时候，你可能想在某个组件的根元素上监听一个原生事件。可以使用 .native 修饰 v-on 。例如：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;my-component v-on:click.native=\"doTheThing\"&gt;&lt;/my-component&gt;</code></pre><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6%E7%9A%84%E8%A1%A8%E5%8D%95%E8%BE%93%E5%85%A5%E7%BB%84%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6%E7%9A%84%E8%A1%A8%E5%8D%95%E8%BE%93%E5%85%A5%E7%BB%84%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6%E7%9A%84%E8%A1%A8%E5%8D%95%E8%BE%93%E5%85%A5%E7%BB%84%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a>使用自定义事件的表单输入组件</h3><p>自定义事件也可以用来创建自定义的表单输入组件，使用 v-model 来进行数据双向绑定。牢记：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;input v-model=\"something\"&gt;</code></pre><p>仅仅是一个语法：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;input v-bind:value=\"something\" v-on:input=\"something = $event.target.value\"&gt;</code></pre><p>所以在组件中使用时，它相当于下面的简写：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;input v-bind:value=\"something\" v-on:input=\"something = arguments[0]\"&gt;</code></pre><p>所以要让组件的 v-model 生效，它必须：</p><ul><li>接受一个 value 属性</li><li>在有新的 value 时触发 input 事件</li></ul><p>一个非常简单的货币输入：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;currency-input v-model=\"price\"&gt;&lt;/currency-input&gt;</code></pre><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">Vue.component('currency-input', {\n  template: '\\\n    &lt;span&gt;\\\n      $\\\n      &lt;input\\\n        ref=\"input\"\\\n        v-bind:value=\"value\"\\\n        v-on:input=\"updateValue($event.target.value)\"\\\n      &gt;\\\n    &lt;/span&gt;\\\n  ',\n  props: ['value'],\n  methods: {\n    // Instead of updating the value directly, this\n    // method is used to format and place constraints\n    // on the input's value\n    updateValue: function (value) {\n      var formattedValue = value\n        // Remove whitespace on either side\n        .trim()\n        // Shorten to 2 decimal places\n        .slice(0, value.indexOf('.') + 3)\n      // If the value was not already normalized,\n      // manually override it to conform\n      if (formattedValue !== value) {\n        this.$refs.input.value = formattedValue\n      }\n      // Emit the number value through the input event\n      this.$emit('input', Number(formattedValue))\n    }\n  }\n})</code></pre><p>结果：</p><p>$</p> <input><p>上面的实现方式太过理想化了。 比如，用户甚至可以输入多个小数点或句号 - 呸！因此我们需要一个更有意义的例子，下面是一个更加完善的货币过滤器：</p><p>这个接口不仅仅可以用来连接组件内部的表单输入，也很容易集成你自己创造的输入类型。想象一下：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;voice-recognizer v-model=\"question\"&gt;&lt;/voice-recognizer&gt;\n&lt;webcam-gesture-reader v-model=\"gesture\"&gt;&lt;/webcam-gesture-reader&gt;\n&lt;webcam-retinal-scanner v-model=\"retinalImage\"&gt;&lt;/webcam-retinal-scanner&gt;</code></pre><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E9%9D%9E%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E9%9D%9E%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E9%9D%9E%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E4%BF%A1\" rel=\"external nofollow\" target=\"_blank\"></a>非父子组件通信</h3><p>有时候非父子关系的组件也需要通信。在简单的场景下，使用一个空的 Vue 实例作为中央事件总线：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">var bus = new Vue()</code></pre><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">// 触发组件 A 中的事件\nbus.$emit('id-selected', 1)</code></pre><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">// 在组件 B 创建的钩子中监听事件\nbus.$on('id-selected', function (id) {\n  // ...\n})</code></pre><p>在更多复杂的情况下，你应该考虑使用专门的<strong><a href=\"https://www.w3cschool.cn/vuejs2/state-management.html\" target=\"_blank\">状态管理模式</a></strong>.</p><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E4%BD%BF%E7%94%A8-Slots-%E5%88%86%E5%8F%91%E5%86%85%E5%AE%B9\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E4%BD%BF%E7%94%A8-Slots-%E5%88%86%E5%8F%91%E5%86%85%E5%AE%B9\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E4%BD%BF%E7%94%A8-Slots-%E5%88%86%E5%8F%91%E5%86%85%E5%AE%B9\" rel=\"external nofollow\" target=\"_blank\"></a>使用 Slots 分发内容</h2><p>在使用组件时，常常要像这样组合它们：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">&lt;app&gt;\n  &lt;app-header&gt;&lt;/app-header&gt;\n  &lt;app-footer&gt;&lt;/app-footer&gt;\n&lt;/app&gt;</code></pre><p>注意两点：<br></p><ol><li>&lt;app&gt; 组件不知道它的挂载点会有什么内容。挂载点的内容是由&lt;app&gt;的父组件决定的。</li><li>&lt;app&gt; 组件很可能有它自己的模版。</li></ol><p>为了让组件可以组合，我们需要一种方式来混合父组件的内容与子组件自己的模板。这个过程被称为<strong>内容分发</strong> (或 “transclusion” 如果你熟悉 Angular)。Vue.js 实现了一个内容分发 API ，参照了当前 <a href=\"https://github.com/w3c/webcomponents/blob/gh-pages/proposals/Slots-Proposal.md\" rel=\"external nofollow\" target=\"_blank\">Web组件规范草案</a>，使用特殊的 &lt;slot&gt; 元素作为原始内容的插槽。</p><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E7%BC%96%E8%AF%91%E4%BD%9C%E7%94%A8%E5%9F%9F\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E7%BC%96%E8%AF%91%E4%BD%9C%E7%94%A8%E5%9F%9F\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E7%BC%96%E8%AF%91%E4%BD%9C%E7%94%A8%E5%9F%9F\" rel=\"external nofollow\" target=\"_blank\"></a>编译作用域</h3><p>在深入内容分发 API 之前，我们先明确内容的编译作用域。假定模板为：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;child-component&gt;\n  {{ message }}\n&lt;/child-component&gt;</code></pre><p>message 应该绑定到父组件的数据，还是绑定到子组件的数据？答案是父组件。组件作用域简单地说是：<br></p><p>父组件模板的内容在父组件作用域内编译；子组件模板的内容在子组件作用域内编译。</p><p>一个常见错误是试图在父组件模板内将一个指令绑定到子组件的属性/方法：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;!-- 无效 --&gt;\n&lt;child-component v-show=\"someChildProperty\"&gt;&lt;/child-component&gt;</code></pre><p>假定 someChildProperty 是子组件的属性，上例不会如预期那样工作。父组件模板不应该知道子组件的状态。<br></p><p>如果要绑定子组件内的指令到一个组件的根节点，应当在它的模板内这么做：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">Vue.component('child-component', {\n  // 有效，因为是在正确的作用域内\n  template: '&lt;div v-show=\"someChildProperty\"&gt;Child&lt;/div&gt;',\n  data: function () {\n    return {\n      someChildProperty: true\n    }\n  }\n})</code></pre><p>类似地，分发内容是在父组件作用域内编译。<br></p><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E5%8D%95%E4%B8%AA-Slot\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E5%8D%95%E4%B8%AA-Slot\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E5%8D%95%E4%B8%AA-Slot\" rel=\"external nofollow\" target=\"_blank\"></a>单个 Slot</h3><p>除非子组件模板包含至少一个 &lt;slot&gt; 插口，否则父组件的内容将会被<strong>丢弃</strong>。当子组件模板只有一个没有属性的 slot 时，父组件整个内容片段将插入到 slot 所在的 DOM 位置，并替换掉 slot 标签本身。</p><p>最初在 &lt;slot&gt; 标签中的任何内容都被视为<strong>备用内容</strong>。备用内容在子组件的作用域内编译，并且只有在宿主元素为空，且没有要插入的内容时才显示备用内容。</p><p>假定 my-component 组件有下面模板：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;div&gt;\n  &lt;h2&gt;I'm the child title&lt;/h2&gt;\n  &lt;slot&gt;\n    如果没有分发内容则显示我。\n  &lt;/slot&gt;\n&lt;/div&gt;</code></pre><p>父组件模版：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;div&gt;\n  &lt;h1&gt;I'm the parent title&lt;/h1&gt;\n  &lt;my-component&gt;\n    &lt;p&gt;This is some original content&lt;/p&gt;\n    &lt;p&gt;This is some more original content&lt;/p&gt;\n  &lt;/my-component&gt;\n&lt;/div&gt;</code></pre><p>渲染结果：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;div&gt;\n  &lt;h1&gt;I'm the parent title&lt;/h1&gt;\n  &lt;div&gt;\n    &lt;h2&gt;I'm the child title&lt;/h2&gt;\n    &lt;p&gt;This is some original content&lt;/p&gt;\n    &lt;p&gt;This is some more original content&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;</code></pre><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E5%85%B7%E5%90%8DSlots\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E5%85%B7%E5%90%8DSlots\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E5%85%B7%E5%90%8DSlots\" rel=\"external nofollow\" target=\"_blank\"></a>具名Slots</h3><p>&lt;slot&gt; 元素可以用一个特殊的属性 name 来配置如何分发内容。多个 slot 可以有不同的名字。具名 slot 将匹配内容片段中有对应 slot 特性的元素。</p><p>仍然可以有一个匿名 slot ，它是<strong>默认</strong> slot ，作为找不到匹配的内容片段的备用插槽。如果没有默认的 slot ，这些找不到匹配的内容片段将被抛弃。</p><p>例如，假定我们有一个 app-layout 组件，它的模板为：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;div class=\"container\"&gt;\n  &lt;header&gt;\n    &lt;slot name=\"header\"&gt;&lt;/slot&gt;\n  &lt;/header&gt;\n  &lt;main&gt;\n    &lt;slot&gt;&lt;/slot&gt;\n  &lt;/main&gt;\n  &lt;footer&gt;\n    &lt;slot name=\"footer\"&gt;&lt;/slot&gt;\n  &lt;/footer&gt;\n&lt;/div&gt;</code></pre><p>父组件模版：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;app-layout&gt;\n  &lt;h1 slot=\"header\"&gt;Here might be a page title&lt;/h1&gt;\n  &lt;p&gt;A paragraph for the main content.&lt;/p&gt;\n  &lt;p&gt;And another one.&lt;/p&gt;\n  &lt;p slot=\"footer\"&gt;Here's some contact info&lt;/p&gt;\n&lt;/app-layout&gt;</code></pre><p>渲染结果为：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">&lt;div class=\"container\"&gt;\n  &lt;header&gt;\n    &lt;h1&gt;Here might be a page title&lt;/h1&gt;\n  &lt;/header&gt;\n  &lt;main&gt;\n    &lt;p&gt;A paragraph for the main content.&lt;/p&gt;\n    &lt;p&gt;And another one.&lt;/p&gt;\n  &lt;/main&gt;\n  &lt;footer&gt;\n    &lt;p&gt;Here's some contact info&lt;/p&gt;\n  &lt;/footer&gt;\n&lt;/div&gt;</code></pre><p>在组合组件时，内容分发 API 是非常有用的机制。</p><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E5%8A%A8%E6%80%81%E7%BB%84%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a>动态组件</h2><p>多个组件可以使用同一个挂载点，然后动态地在它们之间切换。使用保留的 &lt;component&gt;元素，动态地绑定到它的 is 特性：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">var vm = new Vue({\n  el: '#example',\n  data: {\n    currentView: 'home'\n  },\n  components: {\n    home: { /* ... */ },\n    posts: { /* ... */ },\n    archive: { /* ... */ }\n  }\n})</code></pre><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;component v-bind:is=\"currentView\"&gt;\n  &lt;!-- 组件在 vm.currentview 变化时改变！ --&gt;\n&lt;/component&gt;</code></pre><p>也可以直接绑定到组件对象上：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">var Home = {\n  template: '&lt;p&gt;Welcome home!&lt;/p&gt;'\n}\nvar vm = new Vue({\n  el: '#example',\n  data: {\n    currentView: Home\n  }\n})</code></pre><a href=\"http://doc.vue-js.com/v2/guide/components.html#keep-alive\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/components.html#keep-alive\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/components.html#keep-alive\" rel=\"external nofollow\" target=\"_blank\"></a>keep-alive</h3><p>如果把切换出去的组件保留在内存中，可以保留它的状态或避免重新渲染。为此可以添加一个 keep-alive 指令参数：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;keep-alive&gt;\n  &lt;component :is=\"currentView\"&gt;\n    &lt;!-- 非活动组件将被缓存！ --&gt;\n  &lt;/component&gt;\n&lt;/keep-alive&gt;</code></pre><p>在 API 参考查看更多 &lt;keep-alive&gt; 的细节。<br></p><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E6%9D%82%E9%A1%B9\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E6%9D%82%E9%A1%B9\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E6%9D%82%E9%A1%B9\" rel=\"external nofollow\" target=\"_blank\"></a>杂项</h2><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E7%BC%96%E5%86%99%E5%8F%AF%E5%A4%8D%E7%94%A8%E7%BB%84%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E7%BC%96%E5%86%99%E5%8F%AF%E5%A4%8D%E7%94%A8%E7%BB%84%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E7%BC%96%E5%86%99%E5%8F%AF%E5%A4%8D%E7%94%A8%E7%BB%84%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a>编写可复用组件</h3><p>在编写组件时，记住是否要复用组件有好处。一次性组件跟其它组件紧密耦合没关系，但是可复用组件应当定义一个清晰的公开接口。</p><p>Vue 组件的 API 来自三部分 - props, events 和 slots ：</p><ul><li><strong>Props </strong>允许外部环境传递数据给组件</li><li><strong>Events</strong> 允许组件触发外部环境的副作用</li><li><strong>Slots </strong>允许外部环境将额外的内容组合在组件中。</li></ul><p>使用 v-bind 和 v-on 的简写语法，模板的缩进清楚且简洁：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">&lt;my-component\n  :foo=\"baz\"\n  :bar=\"qux\"\n  @event-a=\"doThis\"\n  @event-b=\"doThat\"\n&gt;\n  &lt;img slot=\"icon\" src=\"...\"&gt;\n  &lt;p slot=\"main-text\"&gt;Hello!&lt;/p&gt;\n&lt;/my-component&gt;</code></pre><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E5%AD%90%E7%BB%84%E4%BB%B6%E7%B4%A2%E5%BC%95\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E5%AD%90%E7%BB%84%E4%BB%B6%E7%B4%A2%E5%BC%95\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E5%AD%90%E7%BB%84%E4%BB%B6%E7%B4%A2%E5%BC%95\" rel=\"external nofollow\" target=\"_blank\"></a>子组件索引</h3><p>尽管有 props 和 events ，但是有时仍然需要在 JavaScript 中直接访问子组件。为此可以使用 ref 为子组件指定一个索引 ID 。例如：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;div id=\"parent\"&gt;\n  &lt;user-profile ref=\"profile\"&gt;&lt;/user-profile&gt;\n&lt;/div&gt;</code></pre><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">var parent = new Vue({ el: '#parent' })\n// 访问子组件\nvar child = parent.$refs.profile</code></pre><p>当 ref 和 v-for 一起使用时， ref 是一个数组或对象，包含相应的子组件。<br></p><blockquote><p>$refs 只在组件渲染完成后才填充，并且它是非响应式的。它仅仅作为一个直接访问子组件的应急方案——应当避免在模版或计算属性中使用 $refs 。</p></blockquote><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E5%BC%82%E6%AD%A5%E7%BB%84%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a>异步组件</h3><p>在大型应用中，我们可能需要将应用拆分为多个小模块，按需从服务器下载。为了让事情更简单， Vue.js 允许将组件定义为一个工厂函数，动态地解析组件的定义。Vue.js 只在组件需要渲染时触发工厂函数，并且把结果缓存起来，用于后面的再次渲染。例如：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">Vue.component('async-example', function (resolve, reject) {\n  setTimeout(function () {\n    resolve({\n      template: '&lt;div&gt;I am async!&lt;/div&gt;'\n    })\n  }, 1000)\n})</code></pre><p>工厂函数接收一个 resolve 回调，在收到从服务器下载的组件定义时调用。也可以调用 reject(reason) 指示加载失败。这里 setTimeout 只是为了演示。怎么获取组件完全由你决定。推荐配合使用 ：Webpack 的代码分割功能：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">Vue.component('async-webpack-example', function (resolve) {\n  // 这个特殊的 require 语法告诉 webpack\n  // 自动将编译后的代码分割成不同的块，\n  // 这些块将通过 Ajax 请求自动下载。\n  require(['./my-async-component'], resolve)\n})</code></pre><p>你可以使用 Webpack 2 + ES2015 的语法返回一个 Promise resolve 函数：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">Vue.component(\n  'async-webpack-example',\n  () =&gt; System.import('./my-async-component')\n)</code></pre><blockquote><p>如果你是 <strong>Browserify</strong> 用户,可能就无法使用异步组件了,它的作者已经表明Browserify 是不支持异步加载的。如果这个功能对你很重要，请使用 <a href=\"https://www.w3cschool.cn/webpackguide/\" target=\"_blank\">Webpack</a>。</p></blockquote><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E7%BB%84%E4%BB%B6%E5%91%BD%E5%90%8D%E7%BA%A6%E5%AE%9A\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E7%BB%84%E4%BB%B6%E5%91%BD%E5%90%8D%E7%BA%A6%E5%AE%9A\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E7%BB%84%E4%BB%B6%E5%91%BD%E5%90%8D%E7%BA%A6%E5%AE%9A\" rel=\"external nofollow\" target=\"_blank\"></a>组件命名约定</h3><p>当注册组件（或者 props）时，可以使用 kebab-case ，camelCase ，或 TitleCase 。Vue 不关心这个。</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">// 在组件定义中\ncomponents: {\n  // 使用 camelCase 形式注册\n  'kebab-cased-component': { /* ... */ },\n  'camelCasedComponent': { /* ... */ },\n  'TitleCasedComponent': { /* ... */ }\n}</code></pre><p>在 HTML 模版中，请使用 kebab-case 形式：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;!-- 在HTML模版中始终使用 kebab-case --&gt;\n&lt;kebab-cased-component&gt;&lt;/kebab-cased-component&gt;\n&lt;camel-cased-component&gt;&lt;/camel-cased-component&gt;\n&lt;title-cased-component&gt;&lt;/title-cased-component&gt;</code></pre><p>当使用字符串模式时，可以不受 HTML 的 case-insensitive 限制。这意味实际上在模版中，你可以使用 camelCase 、 PascalCase 或者 kebab-case 来引用你的组件和 prop：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;!-- 在字符串模版中可以用任何你喜欢的方式! --&gt;\n&lt;my-component&gt;&lt;/my-component&gt;\n&lt;myComponent&gt;&lt;/myComponent&gt;\n&lt;MyComponent&gt;&lt;/MyComponent&gt;</code></pre><p>如果组件未经 slot 元素传递内容，你甚至可以在组件名后使用 / 使其自闭合：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;my-component/&gt;</code></pre><p>当然，这只在字符串模版中有效。因为自闭的自定义元素是无效的 HTML ，浏览器原生的解析器也无法识别它。<br></p><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E9%80%92%E5%BD%92%E7%BB%84%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E9%80%92%E5%BD%92%E7%BB%84%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E9%80%92%E5%BD%92%E7%BB%84%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a>递归组件</h3><p>组件在它的模板内可以递归地调用自己，不过，只有当它有 name 选项时才可以：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">name: 'unique-name-of-my-component'</code></pre><p>当你利用Vue.component全局注册了一个组件, 全局的ID作为组件的 name 选项，被自动设置。</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">Vue.component('unique-name-of-my-component', {\n  // ...\n})</code></pre><p>如果你不谨慎, 递归组件可能导致死循环：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">name: 'stack-overflow',\ntemplate: '&lt;div&gt;&lt;stack-overflow&gt;&lt;/stack-overflow&gt;&lt;/div&gt;'</code></pre><p>上面组件会导致一个错误 “max stack size exceeded” ，所以要确保递归调用有终止条件 (比如递归调用时使用 v-if 并让他最终返回 false )。</p><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E5%86%85%E8%81%94%E6%A8%A1%E7%89%88\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E5%86%85%E8%81%94%E6%A8%A1%E7%89%88\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E5%86%85%E8%81%94%E6%A8%A1%E7%89%88\" rel=\"external nofollow\" target=\"_blank\"></a>内联模版</h3><p>如果子组件有 inline-template 特性，组件将把它的内容当作它的模板，而不是把它当作分发内容。这让模板更灵活。</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;my-component inline-template&gt;\n  &lt;div&gt;\n    &lt;p&gt;These are compiled as the component's own template.&lt;/p&gt;\n    &lt;p&gt;Not parent's transclusion content.&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/my-component&gt;</code></pre><p>但是 inline-template 让模板的作用域难以理解。最佳实践是使用 template 选项在组件内定义模板或者在 .vue 文件中使用 template 元素。<br></p><a href=\"http://doc.vue-js.com/v2/guide/components.html#X-Templates\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/components.html#X-Templates\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/components.html#X-Templates\" rel=\"external nofollow\" target=\"_blank\"></a>X-Templates</h3><p>另一种定义模版的方式是在 JavaScript 标签里使用 text/x-template 类型，并且指定一个id。例如：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;script type=\"text/x-template\" id=\"hello-world-template\"&gt;\n  &lt;p&gt;Hello hello hello&lt;/p&gt;\n&lt;/script&gt;</code></pre><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">Vue.component('hello-world', {\n  template: '#hello-world-template'\n})</code></pre><p>这在有很多模版或者小的应用中有用，否则应该避免使用，因为它将模版和组件的其他定义隔离了。<span style=\"font-family:inherit;font-weight: 600;\"><br></span></p><p><span style=\"font-family:inherit;font-weight: 600;\">使用 v-once 的低级静态组件(Cheap Static Component)</span></p><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E4%BD%BF%E7%94%A8-v-once-%E7%9A%84%E4%BD%8E%E7%BA%A7%E9%9D%99%E6%80%81%E7%BB%84%E4%BB%B6-Cheap-Static-Component\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/components.html#%E4%BD%BF%E7%94%A8-v-once-%E7%9A%84%E4%BD%8E%E7%BA%A7%E9%9D%99%E6%80%81%E7%BB%84%E4%BB%B6-Cheap-Static-Component\" rel=\"external nofollow\" target=\"_blank\"></a></h3><p>尽管在 Vue 中渲染 HTML 很快，不过当组件中包含<strong>大量</strong>静态内容时，可以考虑使用 v-once将渲染结果缓存起来，就像这样：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">Vue.component('terms-of-service', {\n  template: '\\\n    &lt;div v-once&gt;\\\n      &lt;h1&gt;Terms of Service&lt;/h1&gt;\\\n      ... a lot of static content ...\\\n    &lt;/div&gt;\\\n  '\n})</code></pre><p><br></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "Vue.js 2.0 教程",
      "teach_introduction": "Vue.js 2.0 版本，是目前主流的版本。",
      "sort_index": 10,
      "parent_sort_index": 1,
      "chapter_level_one_id": "4e96a383dc08d306c951ba0d75ca6db7",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "Vue.js 2.0 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "443a2c4487304c46b18e6c6ae1206df5",
      "chapter_level_two_parent_id": "4e96a383dc08d306c951ba0d75ca6db7",
      "chapter_level_two_name": "表单控件绑定",
      "chapter_level_two_url": "/vuejs2/forms.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>Vue.js 2.0 表单控件绑定</h2><a href=\"http://doc.vue-js.com/v2/guide/forms.html#%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/forms.html#%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/forms.html#%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95\" rel=\"external nofollow\" target=\"_blank\"></a>基础用法</h2><p>你可以用 v-model 指令在表单控件元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 v-model 本质上不过是语法糖，它负责监听用户的输入事件以更新数据，并特别处理一些极端的例子。</p><blockquote>    <p>v-model 并不关心表单控件初始化所生成的值。因为它会选择 Vue 实例数据来作为具体的值。</p></blockquote><a href=\"http://doc.vue-js.com/v2/guide/forms.html#%E6%96%87%E6%9C%AC\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/forms.html#%E6%96%87%E6%9C%AC\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/forms.html#%E6%96%87%E6%9C%AC\" rel=\"external nofollow\" target=\"_blank\"></a>文本</h3><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;input v-model=\"message\" placeholder=\"edit me\"&gt;\n&lt;p&gt;Message is: {{ message }}&lt;/p&gt;</code></pre><input><p>Message is:</p><a href=\"http://doc.vue-js.com/v2/guide/forms.html#%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/forms.html#%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/forms.html#%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC\" rel=\"external nofollow\" target=\"_blank\"></a>多行文本</h3><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;span&gt;Multiline message is:&lt;/span&gt;\n&lt;p style=\"white-space: pre\"&gt;{{ message }}&lt;/p&gt;\n&lt;br&gt;\n&lt;textarea v-model=\"message\" placeholder=\"add multiple lines\"&gt;&lt;/textarea&gt;</code></pre><div id=\"example-textarea\" class=\"demo\"><span>Multiline message is:</span>     <br>    </div><br><p>    <br></p><p>注意：在文本区域插值( &lt;textarea&gt;&lt;/textarea&gt; ) 并不会生效，应用 v-model 来代替。    <br></p><a href=\"http://doc.vue-js.com/v2/guide/forms.html#%E5%A4%8D%E9%80%89%E6%A1%86\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/forms.html#%E5%A4%8D%E9%80%89%E6%A1%86\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/forms.html#%E5%A4%8D%E9%80%89%E6%A1%86\" rel=\"external nofollow\" target=\"_blank\"></a>复选框</h3><p>单个勾选框，逻辑值：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;input type=\"checkbox\" id=\"checkbox\" v-model=\"checked\"&gt;\n&lt;label for=\"checkbox\"&gt;{{ checked }}&lt;/label&gt;</code></pre><input><p> false</p><p>多个勾选框，绑定到同一个数组：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;input type=\"checkbox\" id=\"jack\" value=\"Jack\" v-model=\"checkedNames\"&gt;\n&lt;label for=\"jack\"&gt;Jack&lt;/label&gt;\n&lt;input type=\"checkbox\" id=\"john\" value=\"John\" v-model=\"checkedNames\"&gt;\n&lt;label for=\"john\"&gt;John&lt;/label&gt;\n&lt;input type=\"checkbox\" id=\"mike\" value=\"Mike\" v-model=\"checkedNames\"&gt;\n&lt;label for=\"mike\"&gt;Mike&lt;/label&gt;\n&lt;br&gt;\n&lt;span&gt;Checked names: {{ checkedNames }}&lt;/span&gt;</code></pre><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">new Vue({\n  el: '...',\n  data: {\n    checkedNames: []\n  }\n})</code></pre><div id=\"example-3\" class=\"demo\">    <input type=\"checkbox\" id=\"jack\" value=\"Jack\">    Jack    <input type=\"checkbox\" id=\"john\" value=\"John\">    John    <input type=\"checkbox\" id=\"mike\" value=\"Mike\">    Mike    <br> <span>Checked names: []</span></div><h3><a href=\"http://doc.vue-js.com/v2/guide/forms.html#%E5%8D%95%E9%80%89%E6%8C%89%E9%92%AE\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/forms.html#%E5%8D%95%E9%80%89%E6%8C%89%E9%92%AE\" rel=\"external nofollow\" target=\"_blank\"></a>单选按钮</h3><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;input type=\"radio\" id=\"one\" value=\"One\" v-model=\"picked\"&gt;\n&lt;label for=\"one\"&gt;One&lt;/label&gt;\n&lt;br&gt;\n&lt;input type=\"radio\" id=\"two\" value=\"Two\" v-model=\"picked\"&gt;\n&lt;label for=\"two\"&gt;Two&lt;/label&gt;\n&lt;br&gt;\n&lt;span&gt;Picked: {{ picked }}&lt;/span&gt;</code></pre><div id=\"example-4\" class=\"demo\">    <input type=\"radio\" id=\"one\" value=\"One\">    One    <br>    <input type=\"radio\" id=\"two\" value=\"Two\">    Two    <br> <span>Picked: </span></div><h3><a href=\"http://doc.vue-js.com/v2/guide/forms.html#%E9%80%89%E6%8B%A9%E5%88%97%E8%A1%A8\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/forms.html#%E9%80%89%E6%8B%A9%E5%88%97%E8%A1%A8\" rel=\"external nofollow\" target=\"_blank\"></a>选择列表</h3><p>单选列表：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;select v-model=\"selected\"&gt;\n  &lt;option&gt;A&lt;/option&gt;\n  &lt;option&gt;B&lt;/option&gt;\n  &lt;option&gt;C&lt;/option&gt;\n&lt;/select&gt;\n&lt;span&gt;Selected: {{ selected }}&lt;/span&gt;</code></pre><select>    A     B     C</select> <p>Selected:</p><p>多选列表（绑定到一个数组）：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;select v-model=\"selected\" multiple&gt;\n  &lt;option&gt;A&lt;/option&gt;\n  &lt;option&gt;B&lt;/option&gt;\n  &lt;option&gt;C&lt;/option&gt;\n&lt;/select&gt;\n&lt;br&gt;\n&lt;span&gt;Selected: {{ selected }}&lt;/span&gt;</code></pre><div id=\"example-6\" class=\"demo\"><select multiple style=\"width: 50px\">A B C</select> <br> <span>Selected: [  \"C\"]</span></div><p>动态选项，用 v-for 渲染：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;select v-model=\"selected\"&gt;\n  &lt;option v-for=\"option in options\" v-bind:value=\"option.value\"&gt;\n    {{ option.text }}\n  &lt;/option&gt;\n&lt;/select&gt;\n&lt;span&gt;Selected: {{ selected }}&lt;/span&gt;</code></pre><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">new Vue({\n  el: '...',\n  data: {\n    selected: 'A',\n    options: [\n      { text: 'One', value: 'A' },\n      { text: 'Two', value: 'B' },\n      { text: 'Three', value: 'C' }\n    ]\n  }\n})</code></pre><select>           One                Two                Three     </select> <p>Selected: A</p><a href=\"http://doc.vue-js.com/v2/guide/forms.html#%E7%BB%91%E5%AE%9A-value\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/forms.html#%E7%BB%91%E5%AE%9A-value\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/forms.html#%E7%BB%91%E5%AE%9A-value\" rel=\"external nofollow\" target=\"_blank\"></a>绑定 value</h2><p>对于单选按钮，勾选框及选择列表选项， v-model 绑定的 value 通常是静态字符串（对于勾选框是逻辑值）：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;!-- 当选中时，`picked` 为字符串 \"a\" --&gt;\n&lt;input type=\"radio\" v-model=\"picked\" value=\"a\"&gt;\n&lt;!-- `toggle` 为 true 或 false --&gt;\n&lt;input type=\"checkbox\" v-model=\"toggle\"&gt;\n&lt;!-- 当选中时，`selected` 为字符串 \"abc\" --&gt;\n&lt;select v-model=\"selected\"&gt;\n  &lt;option value=\"abc\"&gt;ABC&lt;/option&gt;\n&lt;/select&gt;</code></pre><p>但是有时我们想绑定 value 到 Vue 实例的一个动态属性上，这时可以用 v-bind 实现，并且这个属性的值可以不是字符串。</p><a href=\"http://doc.vue-js.com/v2/guide/forms.html#%E5%A4%8D%E9%80%89%E6%A1%86-1\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/forms.html#%E5%A4%8D%E9%80%89%E6%A1%86-1\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/forms.html#%E5%A4%8D%E9%80%89%E6%A1%86-1\" rel=\"external nofollow\" target=\"_blank\"></a>复选框</h3><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;input\n  type=\"checkbox\"\n  v-model=\"toggle\"\n  v-bind:true-value=\"a\"\n  v-bind:false-value=\"b\"\n&gt;</code></pre><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">// 当选中时\nvm.toggle === vm.a\n// 当没有选中时\nvm.toggle === vm.b</code></pre><a href=\"http://doc.vue-js.com/v2/guide/forms.html#%E5%8D%95%E9%80%89%E6%8C%89%E9%92%AE-1\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/forms.html#%E5%8D%95%E9%80%89%E6%8C%89%E9%92%AE-1\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/forms.html#%E5%8D%95%E9%80%89%E6%8C%89%E9%92%AE-1\" rel=\"external nofollow\" target=\"_blank\"></a>单选按钮</h3><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;input type=\"radio\" v-model=\"pick\" v-bind:value=\"a\"&gt;</code></pre><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">// 当选中时\nvm.pick === vm.a</code></pre><a href=\"http://doc.vue-js.com/v2/guide/forms.html#%E9%80%89%E6%8B%A9%E5%88%97%E8%A1%A8%E8%AE%BE%E7%BD%AE\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/forms.html#%E9%80%89%E6%8B%A9%E5%88%97%E8%A1%A8%E8%AE%BE%E7%BD%AE\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/forms.html#%E9%80%89%E6%8B%A9%E5%88%97%E8%A1%A8%E8%AE%BE%E7%BD%AE\" rel=\"external nofollow\" target=\"_blank\"></a>选择列表设置</h3><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;select v-model=\"selected\"&gt;\n    &lt;!-- 内联对象字面量 --&gt;\n  &lt;option v-bind:value=\"{ number: 123 }\"&gt;123&lt;/option&gt;\n&lt;/select&gt;</code></pre><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">// 当选中时\ntypeof vm.selected // -&gt; 'object'\nvm.selected.number // -&gt; 123</code></pre><a href=\"http://doc.vue-js.com/v2/guide/forms.html#%E4%BF%AE%E9%A5%B0%E7%AC%A6\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/forms.html#%E4%BF%AE%E9%A5%B0%E7%AC%A6\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/forms.html#%E4%BF%AE%E9%A5%B0%E7%AC%A6\" rel=\"external nofollow\" target=\"_blank\"></a>修饰符</h2><a href=\"http://doc.vue-js.com/v2/guide/forms.html#lazy\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/forms.html#lazy\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/forms.html#lazy\" rel=\"external nofollow\" target=\"_blank\"></a>.lazy</h3><p>在默认情况下， v-model 在 input 事件中同步输入框的值与数据，但你可以添加一个修饰符 lazy ，从而转变为在 change 事件中同步：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;!-- 在 \"change\" 而不是 \"input\" 事件中更新 --&gt;\n&lt;input v-model.lazy=\"msg\" &gt;</code></pre><a href=\"http://doc.vue-js.com/v2/guide/forms.html#number\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/forms.html#number\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/forms.html#number\" rel=\"external nofollow\" target=\"_blank\"></a>.number</h3><p>如果想自动将用户的输入值转为 Number 类型（如果原值的转换结果为 NaN 则返回原值），可以添加一个修饰符 number 给 v-model 来处理输入值：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;input v-model.number=\"age\" type=\"number\"&gt;</code></pre><p>这通常很有用，因为在 type=\"number\" 时 HTML 中输入的值也总是会返回字符串类型。</p><a href=\"http://doc.vue-js.com/v2/guide/forms.html#trim\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/forms.html#trim\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/forms.html#trim\" rel=\"external nofollow\" target=\"_blank\"></a>.trim</h3><p>如果要自动过滤用户输入的首尾空格，可以添加 trim 修饰符到 v-model 上过滤输入：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;input v-model.trim=\"msg\"&gt;</code></pre><a href=\"http://doc.vue-js.com/v2/guide/forms.html#v-model-%E4%B8%8E%E7%BB%84%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/forms.html#v-model-%E4%B8%8E%E7%BB%84%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/forms.html#v-model-%E4%B8%8E%E7%BB%84%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a>v-model 与组件</h2><blockquote><strong>如果你还不熟悉Vue的组件，跳过这里即可。</strong></blockquote><p>HTML 内建的 input 类型有时不能满足你的需求。还好，Vue 的组件系统允许你创建一个具有自定义行为可复用的 input 类型，这些 input 类型甚至可以和 v-model 一起使用！要了解更多，请参阅“<a href=\"https://www.w3cschool.cn/vuejs2/components.html\" target=\"_blank\">自定义 input 类型</a>”。</p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "Vue.js 2.0 教程",
      "teach_introduction": "Vue.js 2.0 版本，是目前主流的版本。",
      "sort_index": 9,
      "parent_sort_index": 1,
      "chapter_level_one_id": "4e96a383dc08d306c951ba0d75ca6db7",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "Vue.js 2.0 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "f8577f85e22fd7c17e8316f5e025d042",
      "chapter_level_two_parent_id": "4e96a383dc08d306c951ba0d75ca6db7",
      "chapter_level_two_name": "事件处理器",
      "chapter_level_two_url": "/vuejs2/vuejs2-events.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2><span style=\"font-family:inherit;\">Vue.js 2.0 </span>事件处理器</h2><a href=\"http://doc.vue-js.com/v2/guide/events.html#%E7%9B%91%E5%90%AC%E4%BA%8B%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/events.html#%E7%9B%91%E5%90%AC%E4%BA%8B%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/events.html#%E7%9B%91%E5%90%AC%E4%BA%8B%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a>监听事件</h2><p>可以用 v-on 指令监听 DOM 事件来触发一些 JavaScript 代码。</p><p>示例：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;div id=\"example-1\"&gt;\n  &lt;button v-on:click=\"counter += 1\"&gt;增加 1&lt;/button&gt;\n  &lt;p&gt;这个按钮被点击了 {{ counter }} 次。&lt;/p&gt;\n&lt;/div&gt;</code></pre><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">var example1 = new Vue({\n  el: '#example-1',\n  data: {\n    counter: 0\n  }\n})</code></pre><p>结果：</p><button>增加 1</button><p>这个按钮被点击了 0 次。</p><a href=\"http://doc.vue-js.com/v2/guide/events.html#%E6%96%B9%E6%B3%95%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%99%A8\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/events.html#%E6%96%B9%E6%B3%95%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%99%A8\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/events.html#%E6%96%B9%E6%B3%95%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%99%A8\" rel=\"external nofollow\" target=\"_blank\"></a>方法事件处理器</h2><p>许多事件处理的逻辑都很复杂，所以直接把 JavaScript 代码写在 v-on 指令中是不可行的。因此 v-on 可以接收一个定义的方法来调用。</p><p>示例：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;div id=\"example-2\"&gt;\n  &lt;!-- `greet` 是在下面定义的方法名 --&gt;\n  &lt;button v-on:click=\"greet\"&gt;Greet&lt;/button&gt;\n&lt;/div&gt;</code></pre><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">var example2 = new Vue({\n  el: '#example-2',\n  data: {\n    name: 'Vue.js'\n  },\n  // 在 `methods` 对象中定义方法\n  methods: {\n    greet: function (event) {\n      // `this` 在方法里指当前 Vue 实例\n      alert('Hello ' + this.name + '!')\n      // `event` 是原生 DOM 事件\n      alert(event.target.tagName)\n    }\n  }\n})\n// 也可以用 JavaScript 直接调用方法\nexample2.greet() // -&gt; 'Hello Vue.js!'</code></pre><p>结果：</p><button>Greet</button><a href=\"http://doc.vue-js.com/v2/guide/events.html#%E5%86%85%E8%81%94%E5%A4%84%E7%90%86%E5%99%A8%E6%96%B9%E6%B3%95\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/events.html#%E5%86%85%E8%81%94%E5%A4%84%E7%90%86%E5%99%A8%E6%96%B9%E6%B3%95\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/events.html#%E5%86%85%E8%81%94%E5%A4%84%E7%90%86%E5%99%A8%E6%96%B9%E6%B3%95\" rel=\"external nofollow\" target=\"_blank\"></a>内联处理器方法</h2><p>除了直接绑定到一个方法，也可以用内联 JavaScript 语句：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;div id=\"example-3\"&gt;\n  &lt;button v-on:click=\"say('hi')\"&gt;Say hi&lt;/button&gt;\n  &lt;button v-on:click=\"say('what')\"&gt;Say what&lt;/button&gt;\n&lt;/div&gt;</code></pre><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">new Vue({\n  el: '#example-3',\n  methods: {\n    say: function (message) {\n      alert(message)\n    }\n  }\n})</code></pre><p>结果：</p><button>Say hi</button> <button>Say what</button><p>有时也需要在内联语句处理器中访问原生 DOM 事件。可以用特殊变量 $event 把它传入方法：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;button v-on:click=\"warn('Form cannot be submitted yet.', $event)\"&gt;Submit&lt;/button&gt;</code></pre><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">// ...\nmethods: {\n  warn: function (message, event) {\n    // 现在我们可以访问原生事件对象\n    if (event) event.preventDefault()\n    alert(message)\n  }\n}</code></pre><a href=\"http://doc.vue-js.com/v2/guide/events.html#%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/events.html#%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/events.html#%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6\" rel=\"external nofollow\" target=\"_blank\"></a>事件修饰符</h2><p>在事件处理程序中调用 event.preventDefault() 或 event.stopPropagation() 是非常常见的需求。尽管我们可以在 methods 中轻松实现这点，但更好的方式是：methods 只有纯粹的数据逻辑，而不是去处理 DOM 事件细节。</p><p>为了解决这个问题， Vue.js 为 v-on 提供了<strong>事件修饰符</strong>。通过由点(.)表示的指令后缀来调用修饰符。</p><ul><li>.stop</li><li>.prevent</li><li>.capture</li><li>.self</li></ul><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;!-- 阻止单击事件冒泡 --&gt;\n&lt;a v-on:click.stop=\"doThis\"&gt;&lt;/a&gt;\n&lt;!-- 提交事件不再重载页面 --&gt;\n&lt;form v-on:submit.prevent=\"onSubmit\"&gt;&lt;/form&gt;\n&lt;!-- 修饰符可以串联  --&gt;\n&lt;a v-on:click.stop.prevent=\"doThat\"&gt;&lt;/a&gt;\n&lt;!-- 只有修饰符 --&gt;\n&lt;form v-on:submit.prevent&gt;&lt;/form&gt;\n&lt;!-- 添加事件侦听器时使用事件捕获模式 --&gt;\n&lt;div v-on:click.capture=\"doThis\"&gt;...&lt;/div&gt;\n&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;\n&lt;div v-on:click.self=\"doThat\"&gt;...&lt;/div&gt;</code></pre><a href=\"http://doc.vue-js.com/v2/guide/events.html#%E6%8C%89%E9%94%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/events.html#%E6%8C%89%E9%94%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/events.html#%E6%8C%89%E9%94%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6\" rel=\"external nofollow\" target=\"_blank\"></a>按键修饰符</h2><p>在监听键盘事件时，我们经常需要监测常见的键值。 Vue 允许为 v-on 在监听键盘事件时添加按键修饰符：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;!-- 只有在 keyCode 是 13 时调用 vm.submit() --&gt;\n&lt;input v-on:keyup.13=\"submit\"&gt;</code></pre><p>记住所有的 keyCode 比较困难，所以 Vue 为最常用的按键提供了别名：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">&lt;!-- 同上 --&gt;\n&lt;input v-on:keyup.enter=\"submit\"&gt;\n&lt;!-- 缩写语法 --&gt;\n&lt;input @keyup.enter=\"submit\"&gt;</code></pre><p>全部的按键别名：</p><ul><li>enter</li><li>tab</li><li>delete (捕获 “删除” 和 “退格” 键)</li><li>esc</li><li>space</li><li>up</li><li>down</li><li>left</li><li>right</li></ul><p>可以通过全局 config.keyCodes 对象自定义按键修饰符别名：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">// 可以使用 v-on:keyup.f1\nVue.config.keyCodes.f1 = 112</code></pre><a href=\"http://doc.vue-js.com/v2/guide/events.html#%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9C%A8-HTML-%E4%B8%AD%E7%9B%91%E5%90%AC%E4%BA%8B%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/events.html#%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9C%A8-HTML-%E4%B8%AD%E7%9B%91%E5%90%AC%E4%BA%8B%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/events.html#%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9C%A8-HTML-%E4%B8%AD%E7%9B%91%E5%90%AC%E4%BA%8B%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a>为什么在 HTML 中监听事件?</h2><p>你可能注意到这种事件监听的方式违背了关注点分离（separation of concern）传统理念。不必担心，因为所有的 Vue.js 事件处理方法和表达式都严格绑定在当前视图的 ViewModel 上，它不会导致任何维护上的困难。实际上，使用 v-on 有几个好处：</p><ol><li>扫一眼 HTML 模板便能轻松定位在 JavaScript 代码里对应的方法。</li><li>因为你无须在 JavaScript 里手动绑定事件，你的 ViewModel 代码可以是非常纯粹的逻辑，和 DOM 完全解耦，更易于测试。</li><li>当一个 ViewModel 被销毁时，所有的事件处理器都会自动被删除。你无须担心如何自己清理它们。</li></ol></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "Vue.js 2.0 教程",
      "teach_introduction": "Vue.js 2.0 版本，是目前主流的版本。",
      "sort_index": 8,
      "parent_sort_index": 1,
      "chapter_level_one_id": "4e96a383dc08d306c951ba0d75ca6db7",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "Vue.js 2.0 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "70a17e0698421b95f3bdefc4148c54b2",
      "chapter_level_two_parent_id": "4e96a383dc08d306c951ba0d75ca6db7",
      "chapter_level_two_name": "列表渲染",
      "chapter_level_two_url": "/vuejs2/vuejs2-list.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2><span style=\"font-family:inherit;\">Vue.js 2.0 </span>列表渲染</h2><h3>v-for</h3><h2><a href=\"http://doc.vue-js.com/v2/guide/list.html#v-for\" rel=\"external nofollow\" target=\"_blank\"></a></h2><p>我们用 v-for 指令根据一组数组的选项列表进行渲染。 v-for 指令需要以 item in items 形式的特殊语法， items 是源数据数组并且 item 是数组元素迭代的别名。</p><h3><a href=\"http://doc.vue-js.com/v2/guide/list.html#%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/list.html#%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95\" rel=\"external nofollow\" target=\"_blank\"></a>基本用法</h3><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;ul id=\"example-1\"&gt;\n  &lt;li v-for=\"item in items\"&gt;\n    {{ item.message }}\n  &lt;/li&gt;\n&lt;/ul&gt;</code></pre><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">var example1 = new Vue({\n  el: '#example-1',\n  data: {\n    items: [\n      {message: 'foo' },\n      {message: 'Bar' }\n    ]\n  }\n})</code></pre><p>结果：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\"></code></pre><ul><li>Foo</li><li>Bar</li></ul><p>在 v-for 块中，我们拥有对父作用域属性的完全访问权限。 v-for 还支持一个可选的第二个参数为当前项的索引。</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;ul id=\"example-2\"&gt;\n  &lt;li v-for=\"(item, index) in items\"&gt;\n    {{ parentMessage }} - {{ index }} - {{ item.message }}\n  &lt;/li&gt;\n&lt;/ul&gt;</code></pre><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">var example2 = new Vue({\n  el: '#example-2',\n  data: {\n    parentMessage: 'Parent',\n    items: [\n      { message: 'Foo' },\n      { message: 'Bar' }\n    ]\n  }\n})</code></pre><p>结果：<span style='font-family:Consolas, \";color:#f8f8f2;background-color: initial;Liberation Mono\", Menlo, Courier, monospace; white-space: pre-wrap;'>  </span></p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\"></code></pre><ul><li>Parent - 0 - Foo  </li><li>Parent - 1 - Bar</li></ul><p>你也可以用 of 替代 in 作为分隔符，因为它是最接近 JavaScript 迭代器的语法：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;div v-for=\"item of items\"&gt;&lt;/div&gt;</code></pre><h3><a href=\"http://doc.vue-js.com/v2/guide/list.html#Template-v-for\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/list.html#Template-v-for\" rel=\"external nofollow\" target=\"_blank\"></a>Template v-for</h3><p>如同 v-if 模板，你也可以用带有 v-for 的 &lt;template&gt; 标签来渲染多个元素块。例如：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;ul&gt;\n  &lt;template v-for=\"item in items\"&gt;\n    &lt;li&gt;{{ item.msg }}&lt;/li&gt;\n    &lt;li class=\"divider\"&gt;&lt;/li&gt;\n  &lt;/template&gt;\n&lt;/ul&gt;</code></pre><h3><a href=\"http://doc.vue-js.com/v2/guide/list.html#%E5%AF%B9%E8%B1%A1%E8%BF%AD%E4%BB%A3-v-for\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/list.html#%E5%AF%B9%E8%B1%A1%E8%BF%AD%E4%BB%A3-v-for\" rel=\"external nofollow\" target=\"_blank\"></a>对象迭代 v-for</h3><p>你也可以用 v-for 通过一个对象的属性来迭代。</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;ul id=\"repeat-object\" class=\"demo\"&gt;\n  &lt;li v-for=\"value in object\"&gt;\n    {{ value }}\n  &lt;/li&gt;\n&lt;/ul&gt;</code></pre><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">new Vue({\n  el: '#repeat-object',\n  data: {\n    object: {\n      FirstName: 'John',\n      LastName: 'Doe',\n      Age: 30\n    }\n  }\n})</code></pre><p>结果：<span style='font-family:Consolas, \";color:#f8f8f2;background-color: initial;Liberation Mono\", Menlo, Courier, monospace; white-space: pre-wrap;'>   </span></p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\"></code></pre><ul><li>John   </li><li>Doe    </li><li>30</li></ul><p>你也可以提供第二个的参数为键名：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;div v-for=\"(value, key) in object\"&gt;\n  {{ key }} : {{ value }}\n&lt;/div&gt;</code></pre><p>第三个参数为索引：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">&lt;div v-for=\"(value, key, index) in object\"&gt;\n  {{ index }}. {{ key }} : {{ value }}\n&lt;/div&gt;</code></pre><blockquote>    <p>在遍历对象时，是按 Object.keys() 的结果遍历，但是不能保证它的结果在不同的 JavaScript 引擎下是一致的。</p></blockquote><h3><a href=\"http://doc.vue-js.com/v2/guide/list.html#%E6%95%B4%E6%95%B0%E8%BF%AD%E4%BB%A3-v-for\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/list.html#%E6%95%B4%E6%95%B0%E8%BF%AD%E4%BB%A3-v-for\" rel=\"external nofollow\" target=\"_blank\"></a>整数迭代 v-for</h3><p>v-for 也可以取整数。在这种情况下，它将重复多次模板。</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;div&gt;\n  &lt;span v-for=\"n in 10\"&gt;{{ n }}&lt;/span&gt;\n&lt;/div&gt;</code></pre><p>结果：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">1 2 3 4 5 6 7 8 9 10</code></pre><h3><a href=\"http://doc.vue-js.com/v2/guide/list.html#%E7%BB%84%E4%BB%B6-%E5%92%8C-v-for\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/list.html#%E7%BB%84%E4%BB%B6-%E5%92%8C-v-for\" rel=\"external nofollow\" target=\"_blank\"></a>组件 和 v-for</h3><blockquote><strong>查看“<a href=\"https://www.w3cschool.cn/vuejs2/components.html\" target=\"_blank\">组件</a>”一节，了解组件相关知识。您也可以先跳过本小节，以后再回来查看。</strong></blockquote><p>在自定义组件里，你可以像任何普通元素一样用 v-for 。</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;my-component v-for=\"item in items\"&gt;&lt;/my-component&gt;</code></pre><p>然而他不能自动传递数据到组件里，因为组件有自己独立的作用域。为了传递迭代数据到组件里，我们要用 props ：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;my-component\n  v-for=\"(item, index) in items\"\n  v-bind:item=\"item\"\n  v-bind:index=\"index\"&gt;\n&lt;/my-component&gt;</code></pre><p>不自动注入 item 到组件里的原因是，因为这使得组件会紧密耦合到 v-for 如何运作。在一些情况下，明确数据的来源可以使组件可重用。</p><p>下面是一个简单的 todo list 完整的例子：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;div id=\"todo-list-example\"&gt;\n  &lt;input\n    v-model=\"newTodoText\"\n    v-on:keyup.enter=\"addNewTodo\"\n    placeholder=\"Add a todo\"\n  &gt;\n  &lt;ul&gt;\n    &lt;li\n      is=\"todo-item\"\n      v-for=\"(todo, index) in todos\"\n      v-bind:title=\"todo\"\n      v-on:remove=\"todos.splice(index, 1)\"\n    &gt;&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;</code></pre><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">Vue.component('todo-item', {\n  template: '\\\n    &lt;li&gt;\\\n      {{ title }}\\\n      &lt;button v-on:click=\"$emit(\\'remove\\')\"&gt;X&lt;/button&gt;\\\n    &lt;/li&gt;\\\n  ',\n  props: ['title']\n})\nnew Vue({\n  el: '#todo-list-example',\n  data: {\n    newTodoText: '',\n    todos: [\n      'Do the dishes',\n      'Take out the trash',\n      'Mow the lawn'\n    ]\n  },\n  methods: {\n    addNewTodo: function () {\n      this.todos.push(this.newTodoText)\n      this.newTodoText = ''\n    }\n  }\n})</code></pre><ul></ul><div id=\"todo-list-example\" class=\"demo\">    <input v=\"\" placeholder=\"Add a todo\">    <ul>        <li>Do the dishes            <button>X</button>        </li>        <li>Take out the trash            <button>X</button>        </li>        <li>Mow the lawn            <button>X</button>        </li>    </ul></div><h3>key</h3><h2><a href=\"http://doc.vue-js.com/v2/guide/list.html#key\" rel=\"external nofollow\" target=\"_blank\"></a></h2><p>当 Vue.js 用 v-for 正在更新已渲染过的元素列表时，它默认用 “就地复用” 策略。如果数据项的顺序被改变，而不是移动 DOM 元素来匹配数据项的顺序， Vue 将简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素。这个类似 Vue 1.x 的 track-by=\"$index\" 。</p><p>这个默认的模式是有效的，但是只适用于不依赖子组件状态或临时 DOM 状态（例如：表单输入值）的列表渲染输出。</p><p>为了给 Vue 一个提示，以便它能跟踪每个节点的身份，从而重用和重新排序现有元素，你需要为每项提供一个唯一 key 属性。理想的 key 值是每项都有唯一 id。这个特殊的属性相当于 Vue 1.x 的 track-by ，但它的工作方式类似于一个属性，所以你需要用 v-bind来绑定动态值（在这里使用简写）：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;div v-for=\"item in items\" :key=\"item.id\"&gt;\n  &lt;!-- 内容 --&gt;\n&lt;/div&gt;</code></pre><p>建议尽可能使用 v-for 来提供 key ，除非迭代 DOM 内容足够简单，或者你是故意要依赖于默认行为来获得性能提升。</p><p>因为它是 Vue 识别节点的一个通用机制， key 并不特别与 v-for 关联，key 还具有其他用途，我们将在后面的指南中看到其他用途。</p><h2><a href=\"http://doc.vue-js.com/v2/guide/list.html#%E6%95%B0%E7%BB%84%E6%9B%B4%E6%96%B0%E6%A3%80%E6%B5%8B\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/list.html#%E6%95%B0%E7%BB%84%E6%9B%B4%E6%96%B0%E6%A3%80%E6%B5%8B\" rel=\"external nofollow\" target=\"_blank\"></a>数组更新检测</h2><h3><a href=\"http://doc.vue-js.com/v2/guide/list.html#%E5%8F%98%E5%BC%82%E6%96%B9%E6%B3%95\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/list.html#%E5%8F%98%E5%BC%82%E6%96%B9%E6%B3%95\" rel=\"external nofollow\" target=\"_blank\"></a>变异方法</h3><p>Vue 包含一组观察数组的变异方法，所以它们也将会触发视图更新。这些方法如下：</p><ul>    <li>push()</li>    <li>pop()</li>    <li>shift()</li>    <li>unshift()</li>    <li>splice()</li>    <li>sort()</li>    <li>reverse()</li></ul><p>你打开控制台，然后用前面例子的 items 数组调用变异方法：example1.items.push({ message: 'Baz' }) 。</p><h3><a href=\"http://doc.vue-js.com/v2/guide/list.html#%E9%87%8D%E5%A1%91%E6%95%B0%E7%BB%84\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/list.html#%E9%87%8D%E5%A1%91%E6%95%B0%E7%BB%84\" rel=\"external nofollow\" target=\"_blank\"></a>重塑数组</h3><p>变异方法(mutation method)，顾名思义，会改变被这些方法调用的原始数组。相比之下，也有非变异(non-mutating method)方法，例如： filter(), concat(), slice() 。这些不会改变原始数组，但总是返回一个新数组。当使用非变异方法时，可以用新数组替换旧数组：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">example1.items = example1.items.filter(function (item) {\n  return item.message.match(/Foo/)\n})</code></pre><p>你可能认为这将导致 Vue 丢弃现有 DOM 并重新渲染整个列表。幸运的是，事实并非如此。 Vue 实现了一些智能启发式方法来最大化 DOM 元素重用，所以用一个含有相同元素的数组去替换原来的数组是非常高效的操作。</p><h3><a href=\"http://doc.vue-js.com/v2/guide/list.html#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/list.html#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\" rel=\"external nofollow\" target=\"_blank\"></a>注意事项</h3><p>由于 JavaScript 的限制， Vue 不能检测以下变动的数组：</p><ol>    <li>当你直接设置一个项的索引时，例如： vm.items[indexOfItem] = newValue</li>    <li>当你修改数组的长度时，例如： vm.items.length = newLength</li></ol><p>为了避免第一种情况，以下两种方式将达到像 vm.items[indexOfItem] = newValue 的效果， 同时也将触发状态更新：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">// Vue.set\nVue.set(example1.items, indexOfItem, newValue)</code></pre><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">// Array.prototype.splice`\nexample1.items.splice(indexOfItem, 1, newValue)</code></pre><p>避免第二种情况，使用 splice：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">example1.items.splice(newLength)</code></pre><h2><a href=\"http://doc.vue-js.com/v2/guide/list.html#%E6%98%BE%E7%A4%BA%E8%BF%87%E6%BB%A4-%E6%8E%92%E5%BA%8F%E7%BB%93%E6%9E%9C\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/list.html#%E6%98%BE%E7%A4%BA%E8%BF%87%E6%BB%A4-%E6%8E%92%E5%BA%8F%E7%BB%93%E6%9E%9C\" rel=\"external nofollow\" target=\"_blank\"></a>显示过滤/排序结果</h2><p>有时，我们想要显示一个数组的过滤或排序副本，而不实际改变或重置原始数据。在这种情况下，可以创建返回过滤或排序数组的计算属性。</p><p>例如：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;li v-for=\"n in evenNumbers\"&gt;{{ n }}&lt;/li&gt;</code></pre><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">data: {\n  numbers: [ 1, 2, 3, 4, 5 ]\n},\ncomputed: {\n  evenNumbers: function () {\n    return this.numbers.filter(function (number) {\n      return number % 2 === 0\n    })\n  }\n}</code></pre><p>或者，您也可以在计算属性不适用的情况下 (例如，在嵌套 v-for 循环中) 使用 method 方法：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;li v-for=\"n in even(numbers)\"&gt;{{ n }}&lt;/li&gt;</code></pre><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">data: {\n  numbers: [ 1, 2, 3, 4, 5 ]\n},\nmethods: {\n  even: function (numbers) {\n    return numbers.filter(function (number) {\n      return number % 2 === 0\n    })\n  }\n}</code></pre><p>    <br></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "Vue.js 2.0 教程",
      "teach_introduction": "Vue.js 2.0 版本，是目前主流的版本。",
      "sort_index": 7,
      "parent_sort_index": 1,
      "chapter_level_one_id": "4e96a383dc08d306c951ba0d75ca6db7",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "Vue.js 2.0 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "636bf65980437a7cf079ae4de689485a",
      "chapter_level_two_parent_id": "4e96a383dc08d306c951ba0d75ca6db7",
      "chapter_level_two_name": "条件渲染",
      "chapter_level_two_url": "/vuejs2/conditional.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2><font face=\"inherit\"><span style=\"background-color: rgb(255, 255, 255);\">v-if</span></font></h2>\n<p>v-if 指令用于条件性地渲染一块内容。这块内容只会在指令的表达式返回 truthy 值的时候被渲染。</p><pre><code>&lt;h1 v-if=\"awesome\"&gt;Vue is awesome!&lt;/h1&gt;</code></pre>\n<p>也可以用 v-else 添加一个“else 块”：</p><pre><code>&lt;h1 v-if=\"awesome\"&gt;Vue is awesome!&lt;/h1&gt;\n&lt;h1 v-else&gt;Oh no ????&lt;/h1&gt;</code></pre>\n<h3>在 &lt;template&gt; 元素上使用 v-if 条件渲染分组</h3>\n<p>因为 v-if 是一个指令，所以必须将它添加到一个元素上。但是如果想切换多个元素呢？此时可以把一个 &lt;template&gt; 元素当做不可见的包裹元素，并在上面使用 v-if。最终的渲染结果将不包含 &lt;template&gt; 元素。</p><pre><code>&lt;template v-if=\"ok\"&gt;\n  &lt;h1&gt;Title&lt;/h1&gt;\n  &lt;p&gt;Paragraph 1&lt;/p&gt;\n  &lt;p&gt;Paragraph 2&lt;/p&gt;\n&lt;/template&gt;</code></pre>\n<h3>v-else</h3>\n<p>你可以使用 v-else 指令来表示 v-if 的“else 块”：</p><pre><code>&lt;div v-if=\"Math.random() &gt; 0.5\"&gt;\n  Now you see me\n&lt;/div&gt;\n&lt;div v-else&gt;\n  Now you don't\n&lt;/div&gt;</code></pre>\n<p>v-else 元素必须紧跟在带 v-if 或者 v-else-if 的元素的后面，否则它将不会被识别。</p>\n<h3>v-else-if</h3>\n<blockquote>2.1.0 新增</blockquote>\n<p>v-else-if，顾名思义，充当 v-if 的“else-if 块”，可以连续使用：</p><pre><code>&lt;div v-if=\"type === 'A'\"&gt;\n  A\n&lt;/div&gt;\n&lt;div v-else-if=\"type === 'B'\"&gt;\n  B\n&lt;/div&gt;\n&lt;div v-else-if=\"type === 'C'\"&gt;\n  C\n&lt;/div&gt;\n&lt;div v-else&gt;\n  Not A/B/C\n&lt;/div&gt;</code></pre>\n<p>类似于 v-else，v-else-if 也必须紧跟在带 v-if 或者 v-else-if 的元素之后。</p>\n<h3>用 key 管理可复用的元素</h3>\n<p>Vue 会尽可能高效地渲染元素，通常会复用已有元素而不是从头开始渲染。这么做除了使 Vue 变得非常快之外，还有其它一些好处。例如，如果你允许用户在不同的登录方式之间切换：</p><pre><code>&lt;template v-if=\"loginType === 'username'\"&gt;\n  &lt;label&gt;Username&lt;/label&gt;\n  &lt;input placeholder=\"Enter your username\"&gt;\n&lt;/template&gt;\n&lt;template v-else&gt;\n  &lt;label&gt;Email&lt;/label&gt;\n  &lt;input placeholder=\"Enter your email address\"&gt;\n&lt;/template&gt;</code></pre>\n<p>那么在上面的代码中切换 loginType 将不会清除用户已经输入的内容。因为两个模板使用了相同的元素，&lt;input&gt; 不会被替换掉——仅仅是替换了它的 placeholder。</p>\n<p>自己动手试一试，在输入框中输入一些文本，然后按下切换按钮：</p>\n<p>\n    Username \n    <input>\n    <button>Toggle login type</button>\n</p>\n<p>这样也不总是符合实际需求，所以 Vue 为你提供了一种方式来表达“这两个元素是完全独立的，不要复用它们”。只需添加一个具有唯一值的 key attribute 即可：</p><pre><code>&lt;template v-if=\"loginType === 'username'\"&gt;\n  &lt;label&gt;Username&lt;/label&gt;\n  &lt;input placeholder=\"Enter your username\" key=\"username-input\"&gt;\n&lt;/template&gt;\n&lt;template v-else&gt;\n  &lt;label&gt;Email&lt;/label&gt;\n  &lt;input placeholder=\"Enter your email address\" key=\"email-input\"&gt;\n&lt;/template&gt;</code></pre>\n<h2>v-show</h2>\n<p>另一个用于根据条件展示元素的选项是 v-show 指令。用法大致一样：</p><pre><code>&lt;h1 v-show=\"ok\"&gt;Hello!&lt;/h1&gt;</code></pre>\n<p>不同的是带有 v-show 的元素始终会被渲染并保留在 DOM 中。v-show 只是简单地切换元素的 CSS 属性 display。</p>\n<p>注意，v-show 不支持 &lt;template&gt; 元素，也不支持 v-else。</p>\n<h2>v-if vs v-show</h2>\n<p>v-if 是“真正”的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。</p>\n<p>v-if 也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。</p>\n<p>相比之下，v-show 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 进行切换。</p>\n<p>一般来说，v-if 有更高的切换开销，而 v-show 有更高的初始渲染开销。因此，如果需要非常频繁地切换，则使用 v-show 较好；如果在运行时条件很少改变，则使用 v-if 较好。</p>\n<h2>v-if 与 v-for 一起使用</h2>\n<p>不推荐同时使用 v-if 和 v-for。</p>\n<p>当 v-if 与 v-for 一起使用时，v-for 具有比 v-if 更高的优先级。</p><p><br></p><h2>v-if vs. v-show</h2><p>v-if 是真实的条件渲染，因为它会确保条件块在切换当中适当地销毁与重建条件块内的事件监听器和子组件。</p><p>v-if 也是惰性的：如果在初始渲染时条件为假，则什么也不做——在条件第一次变为真时才开始局部编译（编译会被缓存起来）。</p><p>相比之下， v-show 简单得多——元素始终被编译并保留，只是简单地基于 CSS 切换。</p><p>一般来说， v-if 有更高的切换消耗而 v-show 有更高的初始渲染消耗。因此，如果需要频繁切换使用 v-show 较好，如果在运行时条件不大可能改变则使用 v-if 较好。</p>\n<p>\n    <br>\n</p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "Vue.js 2.0 教程",
      "teach_introduction": "Vue.js 2.0 版本，是目前主流的版本。",
      "sort_index": 6,
      "parent_sort_index": 1,
      "chapter_level_one_id": "4e96a383dc08d306c951ba0d75ca6db7",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "Vue.js 2.0 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "6721115d8c678969a7c37d40f8789614",
      "chapter_level_two_parent_id": "4e96a383dc08d306c951ba0d75ca6db7",
      "chapter_level_two_name": "Class 与 Style 绑定",
      "chapter_level_two_url": "/vuejs2/class-and-style.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>Class 与 Style 绑定</h2><p>数据绑定一个常见需求是操作元素的 class 列表和它的内联样式。因为它们都是属性 ，我们可以用v-bind 处理它们：只需要计算出表达式最终的字符串。不过，字符串拼接麻烦又易错。因此，在 v-bind 用于 class 和 style 时， Vue.js 专门增强了它。表达式的结果类型除了字符串之外，还可以是对象或数组。</p><a href=\"http://doc.vue-js.com/v2/guide/class-and-style.html#%E7%BB%91%E5%AE%9A-HTML-Class\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/class-and-style.html#%E7%BB%91%E5%AE%9A-HTML-Class\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/class-and-style.html#%E7%BB%91%E5%AE%9A-HTML-Class\" rel=\"external nofollow\" target=\"_blank\"></a>绑定 HTML Class</h2><a href=\"http://doc.vue-js.com/v2/guide/class-and-style.html#%E5%AF%B9%E8%B1%A1%E8%AF%AD%E6%B3%95\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/class-and-style.html#%E5%AF%B9%E8%B1%A1%E8%AF%AD%E6%B3%95\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/class-and-style.html#%E5%AF%B9%E8%B1%A1%E8%AF%AD%E6%B3%95\" rel=\"external nofollow\" target=\"_blank\"></a>对象语法</h3><p>我们可以传给 v-bind:class 一个对象，以动态地切换 class 。</p><pre lang=\"html\"><code class=\"html\">&lt;div v-bind:class=\"{ active: isActive }\"&gt;&lt;/div&gt;</code></pre><p>上面的语法表示 classactive 的更新将取决于数据属性 isActive 是否为<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\" rel=\"external nofollow\" target=\"_blank\">真值</a> 。</p><p>我们也可以在对象中传入更多属性用来动态切换多个 class 。此外， v-bind:class 指令可以与普通的 class 属性共存。如下模板：</p><pre lang=\"html\"><code class=\"html\">&lt;div class=\"static\"\n     v-bind:class=\"{ active: isActive, 'text-danger': hasError }\"&gt;\n&lt;/div&gt;</code></pre><p>如下 data：</p><pre lang=\"javascript\"><code class=\"javascript\">data: {\n  isActive: true,\n  hasError: false\n}</code></pre><p>渲染为：</p><pre lang=\"html\"><code class=\"html\">&lt;div class=\"static active\"&gt;&lt;/div&gt;</code></pre><p>当 isActive 或者 hasError 变化时，class 列表将相应地更新。例如，如果 hasError的值为 true ， class列表将变为 \"static active text-danger\"。</p><p>你也可以直接绑定数据里的一个对象：</p><pre lang=\"html\"><code class=\"html\">&lt;div v-bind:class=\"classObject\"&gt;&lt;/div&gt;</code></pre><pre lang=\"javascript\"><code class=\"javascript\">data: {\n  classObject: {\n    active: true,\n    'text-danger': false\n  }\n}</code></pre><p>渲染的结果和上面一样。我们也可以在这里绑定返回对象的<a href=\"https://www.w3cschool.cn/vuejs2/computed.html\" target=\"_blank\">计算属性</a>。这是一个常用且强大的模式：</p><pre lang=\"html\"><code class=\"html\">&lt;div v-bind:class=\"classObject\"&gt;&lt;/div&gt;</code></pre><pre lang=\"javascript\"><code class=\"javascript\">data: {\n  isActive: true,\n  error: null\n},\ncomputed: {\n  classObject: function () {\n    return {\n      active: this.isActive &amp;&amp; !this.error,\n      'text-danger': this.error &amp;&amp; this.error.type === 'fatal',\n    }\n  }\n}</code></pre><a href=\"http://doc.vue-js.com/v2/guide/class-and-style.html#%E6%95%B0%E7%BB%84%E8%AF%AD%E6%B3%95\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/class-and-style.html#%E6%95%B0%E7%BB%84%E8%AF%AD%E6%B3%95\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/class-and-style.html#%E6%95%B0%E7%BB%84%E8%AF%AD%E6%B3%95\" rel=\"external nofollow\" target=\"_blank\"></a>数组语法</h3><p>我们可以把一个数组传给 v-bind:class ，以应用一个 class 列表：</p><pre lang=\"html\"><code class=\"html\">&lt;div v-bind:class=\"[activeClass, errorClass]\"&gt;</code></pre><pre lang=\"javascript\"><code class=\"javascript\">data: {\n  activeClass: 'active',\n  errorClass: 'text-danger'\n}</code></pre><p>渲染为：</p><pre lang=\"html\"><code class=\"html\">&lt;div class=\"active text-danger\"&gt;&lt;/div&gt;</code></pre><p>如果你也想根据条件切换列表中的 class ，可以用三元表达式：</p><pre lang=\"html\"><code class=\"html\">&lt;div v-bind:class=\"[isActive ? activeClass : '', errorClass]\"&gt;</code></pre><p>此例始终添加 errorClass ，但是只有在 isActive 是 true 时添加 activeClass 。</p><p>不过，当有多个条件 class 时这样写有些繁琐。可以在数组语法中使用对象语法：</p><pre lang=\"html\"><code class=\"html\">&lt;div v-bind:class=\"[{ active: isActive }, errorClass]\"&gt;</code></pre><a href=\"http://doc.vue-js.com/v2/guide/class-and-style.html#%E7%94%A8%E5%9C%A8%E7%BB%84%E4%BB%B6%E4%B8%8A\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/class-and-style.html#%E7%94%A8%E5%9C%A8%E7%BB%84%E4%BB%B6%E4%B8%8A\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/class-and-style.html#%E7%94%A8%E5%9C%A8%E7%BB%84%E4%BB%B6%E4%B8%8A\" rel=\"external nofollow\" target=\"_blank\"></a>用在组件上</h3><blockquote>本小节的内容是假设你已经对<a href=\"https://www.w3cschool.cn/vuejs2/components.html\" target=\"_blank\"> <strong>Vue 组件</strong> </a>有一定的了解。当然你也可以跳过这里，稍后再回过头来看。</blockquote><p>当你在一个定制的组件上用到 class 属性的时候，这些类将被添加到根元素上面，这个元素上已经存在的类不会被覆盖。</p><p>例如，如果你声明了这个组件：</p><pre lang=\"javascript\"><code class=\"javascript\">Vue.component('my-component', {\n  template: '&lt;p class=\"foo bar\"&gt;Hi&lt;/p&gt;'\n})</code></pre><p>然后在使用它的时候添加一些类：</p><pre lang=\"javascript\"><code class=\"javascript\">&lt;my-component class=\"baz boo\"&gt;&lt;/my-component&gt;</code></pre><p>HTML 最终将被渲染成为：</p><pre lang=\"html\"><code class=\"html\">&lt;p class=\"foo bar baz boo\"&gt;Hi&lt;/p&gt;</code></pre><p>同样的适用于绑定 HTML class ：</p><pre lang=\"html\"><code class=\"html\">&lt;my-component v-bind:class=\"{ active: isActive }\"&gt;&lt;/my-component&gt;</code></pre><p>当 isActive 为 true 的时候，HTML 将被渲染成为：</p><pre lang=\"javascript\"><code class=\"javascript\">&lt;div class=\"foo bar active\"&gt;&lt;/div&gt;</code></pre><a href=\"http://doc.vue-js.com/v2/guide/class-and-style.html#%E7%BB%91%E5%AE%9A%E5%86%85%E8%81%94%E6%A0%B7%E5%BC%8F\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/class-and-style.html#%E7%BB%91%E5%AE%9A%E5%86%85%E8%81%94%E6%A0%B7%E5%BC%8F\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/class-and-style.html#%E7%BB%91%E5%AE%9A%E5%86%85%E8%81%94%E6%A0%B7%E5%BC%8F\" rel=\"external nofollow\" target=\"_blank\"></a>绑定内联样式</h2><a href=\"http://doc.vue-js.com/v2/guide/class-and-style.html#%E5%AF%B9%E8%B1%A1%E8%AF%AD%E6%B3%95-1\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/class-and-style.html#%E5%AF%B9%E8%B1%A1%E8%AF%AD%E6%B3%95-1\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/class-and-style.html#%E5%AF%B9%E8%B1%A1%E8%AF%AD%E6%B3%95-1\" rel=\"external nofollow\" target=\"_blank\"></a>对象语法</h3><p>v-bind:style 的对象语法十分直观——看着非常像 CSS ，其实它是一个 JavaScript 对象。 CSS 属性名可以用驼峰式（camelCase）或短横分隔命名（kebab-case）：</p><pre lang=\"html\"><code class=\"html\">&lt;div v-bind:style=\"{ color: activeColor, fontSize: fontSize + 'px' }\"&gt;&lt;/div&gt;</code></pre><pre lang=\"javascript\"><code class=\"javascript\">data: {\n  activeColor: 'red',\n  fontSize: 30\n}</code></pre><p>直接绑定到一个样式对象通常更好，让模板更清晰：</p><pre lang=\"html\"><code class=\"html\">&lt;div v-bind:style=\"styleObject\"&gt;&lt;/div&gt;</code></pre><pre lang=\"javascript\"><code class=\"javascript\">data: {\n  styleObject: {\n    color: 'red',\n    fontSize: '13px'\n  }\n}</code></pre><p>同样的，对象语法常常结合返回对象的计算属性使用。<br></p><a href=\"http://doc.vue-js.com/v2/guide/class-and-style.html#%E6%95%B0%E7%BB%84%E8%AF%AD%E6%B3%95-1\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/class-and-style.html#%E6%95%B0%E7%BB%84%E8%AF%AD%E6%B3%95-1\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/class-and-style.html#%E6%95%B0%E7%BB%84%E8%AF%AD%E6%B3%95-1\" rel=\"external nofollow\" target=\"_blank\"></a>数组语法</h3><p>v-bind:style 的数组语法可以将多个样式对象应用到一个元素上：</p><pre lang=\"html\"><code class=\"html\">&lt;div v-bind:style=\"[baseStyles, overridingStyles]\"&gt;</code></pre><h3><a href=\"http://doc.vue-js.com/v2/guide/class-and-style.html#%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0%E5%89%8D%E7%BC%80\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/class-and-style.html#%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0%E5%89%8D%E7%BC%80\" rel=\"external nofollow\" target=\"_blank\"></a>自动添加前缀</h3><p>当 v-bind:style 使用需要特定前缀的 CSS 属性时，如 transform ，Vue.js 会自动侦测并添加相应的前缀。</p><p><br></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "Vue.js 2.0 教程",
      "teach_introduction": "Vue.js 2.0 版本，是目前主流的版本。",
      "sort_index": 5,
      "parent_sort_index": 1,
      "chapter_level_one_id": "4e96a383dc08d306c951ba0d75ca6db7",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "Vue.js 2.0 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "1d9e3bc36c698776a4c6d32dd47215fb",
      "chapter_level_two_parent_id": "4e96a383dc08d306c951ba0d75ca6db7",
      "chapter_level_two_name": "计算属性",
      "chapter_level_two_url": "/vuejs2/computed.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>计算属性</h2><p>在模板中绑定表达式是非常便利的，但是它们实际上只用于简单的操作。在模板中放入太多的逻辑会让模板过重且难以维护。例如：</p><pre lang=\"html\"><code class=\"html\">&lt;div id=\"example\"&gt;\n  {{ message.split('').reverse().join('') }}\n&lt;/div&gt;</code></pre><p>在这种情况下，模板不再简单和清晰。在实现反向显示 message 之前，你应该确认它。这个问题在你不止一次反向显示 message 的时候变得更加糟糕。</p><p>这就是为什么任何复杂逻辑，你都应当使用<strong>计算属性</strong>。</p><a href=\"http://doc.vue-js.com/v2/guide/computed.html#%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/computed.html#%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/computed.html#%E5%9F%BA%E7%A1%80%E4%BE%8B%E5%AD%90\" rel=\"external nofollow\" target=\"_blank\"></a>基础例子</h3><pre lang=\"html\"><code class=\"html\">&lt;div id=\"example\"&gt;\n  &lt;p&gt;Original message: \"{{ message }}\"&lt;/p&gt;\n  &lt;p&gt;Computed reversed message: \"{{ reversedMessage }}\"&lt;/p&gt;\n&lt;/div&gt;</code></pre><pre lang=\"javascript\"><code class=\"javascript\">var vm = new Vue({\n  el: '#example',\n  data: {\n    message: 'Hello'\n  },\n  computed: {\n    // a computed getter\n    reversedMessage: function () {\n      // `this` points to the vm instance\n      return this.message.split('').reverse().join('')\n    }\n  }\n})</code></pre><p>结果：</p><pre lang=\"javascript\"><code class=\"javascript\">Original message: \"Hello\"\nComputed reversed message: \"olleH\"</code></pre><p>这里我们声明了一个计算属性 reversedMessage 。我们提供的函数将用作属性 vm.reversedMessage 的 getter 。</p><pre lang=\"javascript\"><code class=\"javascript\">console.log(vm.reversedMessage) // -&gt; 'olleH'\nvm.message = 'Goodbye'\nconsole.log(vm.reversedMessage) // -&gt; 'eybdooG'</code></pre><p>你可以打开浏览器的控制台，修改 vm 。 vm.reversedMessage 的值始终取决于 vm.message 的值。</p><p>你可以像绑定普通属性一样在模板中绑定计算属性。 Vue 知道 vm.reversedMessage 依赖于 vm.message ，因此当 vm.message 发生改变时，依赖于 vm.reversedMessage 的绑定也会更新。而且最妙的是我们是声明式地创建这种依赖关系：计算属性的 getter 是干净无副作用的，因此也是易于测试和理解的。</p><a href=\"http://doc.vue-js.com/v2/guide/computed.html#%E8%AE%A1%E7%AE%97%E7%BC%93%E5%AD%98-vs-Methods\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/computed.html#%E8%AE%A1%E7%AE%97%E7%BC%93%E5%AD%98-vs-Methods\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/computed.html#%E8%AE%A1%E7%AE%97%E7%BC%93%E5%AD%98-vs-Methods\" rel=\"external nofollow\" target=\"_blank\"></a>计算缓存 vs Methods</h3><p>你可能已经注意到我们可以通过调用表达式中的method来达到同样的效果：</p><pre lang=\"html\"><code class=\"html\">&lt;p&gt;Reversed message: \"{{ reverseMessage() }}\"&lt;/p&gt;</code></pre><pre lang=\"javascript\"><code class=\"javascript\">// in component\nmethods: {\n  reverseMessage: function () {\n    return this.message.split('').reverse().join('')\n  }\n}</code></pre><p>不经过计算属性，我们可以在 method 中定义一个相同的函数来替代它。对于最终的结果，两种方式确实是相同的。然而，不同的是<strong>计算属性是基于它的依赖缓存</strong>。计算属性只有在它的相关依赖发生改变时才会重新取值。这就意味着只要 message 没有发生改变，多次访问 reversedMessage 计算属性会立即返回之前的计算结果，而不必再次执行函数。</p><p>这也同样意味着如下计算属性将不会更新，因为 Date.now() 不是响应式依赖：</p><pre lang=\"javascript\"><code class=\"javascript\">computed: {\n  now: function () {\n    return Date.now()\n  }\n}</code></pre><p>相比而言，每当重新渲染的时候，method 调用总会执行函数。</p><p>我们为什么需要缓存？假设我们有一个重要的计算属性 A ，这个计算属性需要一个巨大的数组遍历和做大量的计算。然后我们可能有其他的计算属性依赖于 A 。如果没有缓存，我们将不可避免的多次执行 A 的 getter ！如果你不希望有缓存，请用 method 替代。</p><a href=\"http://doc.vue-js.com/v2/guide/computed.html#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7-vs-Watched-Property\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/computed.html#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7-vs-Watched-Property\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/computed.html#%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7-vs-Watched-Property\" rel=\"external nofollow\" target=\"_blank\"></a>计算属性 vs Watched Property</h3><p>Vue.js 提供了一个方法 $watch ，它用于观察 Vue 实例上的数据变动。当一些数据需要根据其它数据变化时， $watch 很诱人 —— 特别是如果你来自 AngularJS 。不过，通常更好的办法是使用计算属性而不是一个命令式的 $watch 回调。思考下面例子：</p><pre lang=\"html\"><code class=\"html\">&lt;div id=\"demo\"&gt;{{ fullName }}&lt;/div&gt;</code></pre><pre lang=\"javascript\"><code class=\"javascript\">var vm = new Vue({\n  el: '#demo',\n  data: {\n    firstName: 'Foo',\n    lastName: 'Bar',\n    fullName: 'Foo Bar'\n  },\n  watch: {\n    firstName: function (val) {\n      this.fullName = val + ' ' + this.lastName\n    },\n    lastName: function (val) {\n      this.fullName = this.firstName + ' ' + val\n    }\n  }\n})</code>\n\n    </pre>    <p>上面代码是命令式的和重复的。跟计算属性对比：</p><pre lang=\"javascript\"><code class=\"javascript\">var vm = new Vue({\n  el: '#demo',\n  data: {\n    firstName: 'Foo',\n    lastName: 'Bar'\n  },\n  computed: {\n    fullName: function () {\n      return this.firstName + ' ' + this.lastName\n    }\n  }\n})</code></pre>    <p>这样更好，不是吗？</p>    <a href=\"http://doc.vue-js.com/v2/guide/computed.html#%E8%AE%A1%E7%AE%97-setter\" rel=\"external nofollow\" target=\"_blank\"></a>     <h3><a href=\"http://doc.vue-js.com/v2/guide/computed.html#%E8%AE%A1%E7%AE%97-setter\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/computed.html#%E8%AE%A1%E7%AE%97-setter\" rel=\"external nofollow\" target=\"_blank\"></a>计算 setter</h3>    <p>计算属性默认只有 getter ，不过在需要时你也可以提供一个 setter ：</p><pre lang=\"javascript\"><code class=\"javascript\">// ...\ncomputed: {\n  fullName: {\n    // getter\n    get: function () {\n      return this.firstName + ' ' + this.lastName\n    },\n    // setter\n    set: function (newValue) {\n      var names = newValue.split(' ')\n      this.firstName = names[0]\n      this.lastName = names[names.length - 1]\n    }\n  }\n}\n// ...</code></pre>    <p>现在在运行 vm.fullName = 'John Doe' 时， setter 会被调用， vm.firstName 和 vm.lastName 也会被对应更新。</p>    <a href=\"http://doc.vue-js.com/v2/guide/computed.html#%E8%A7%82%E5%AF%9F-Watchers\" rel=\"external nofollow\" target=\"_blank\"></a>     <h2><a href=\"http://doc.vue-js.com/v2/guide/computed.html#%E8%A7%82%E5%AF%9F-Watchers\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/computed.html#%E8%A7%82%E5%AF%9F-Watchers\" rel=\"external nofollow\" target=\"_blank\"></a>观察 Watchers</h2>    <p>虽然计算属性在大多数情况下更合适，但有时也需要一个自定义的 watcher 。这是为什么 Vue 提供一个更通用的方法通过 watch 选项，来响应数据的变化。当你想要在数据变化响应时，执行异步操作或昂贵操作时，这是很有用的。</p>    <p>例如：</p><pre lang=\"html\"><code class=\"html\">&lt;div id=\"watch-example\"&gt;\n  &lt;p&gt;\n    Ask a yes/no question:\n    &lt;input v-model=\"question\"&gt;\n  &lt;/p&gt;\n  &lt;p&gt;{{ answer }}&lt;/p&gt;\n&lt;/div&gt;</code></pre><pre lang=\"html\"><code class=\"html\">&lt;!-- Since there is already a rich ecosystem of ajax libraries    --&gt;\n&lt;!-- and collections of general-purpose utility methods, Vue core --&gt;\n&lt;!-- is able to remain small by not reinventing them. This also   --&gt;\n&lt;!-- gives you the freedom to just use what you're familiar with. --&gt;\n&lt;script src=\"https://unpkg.com/axios@0.12.0/dist/axios.min.js\" rel=\"external nofollow\" &gt;&lt;/script&gt;\n&lt;script src=\"https://unpkg.com/lodash@4.13.1/lodash.min.js\" rel=\"external nofollow\" &gt;&lt;/script&gt;\n&lt;script&gt;\nvar watchExampleVM = new Vue({\n  el: '#watch-example',\n  data: {\n    question: '',\n    answer: 'I cannot give you an answer until you ask a question!'\n  },\n  watch: {\n    // 如果 question 发生改变，这个函数就会运行\n    question: function (newQuestion) {\n      this.answer = 'Waiting for you to stop typing...'\n      this.getAnswer()\n    }\n  },\n  methods: {\n    // _.debounce 是一个通过 lodash 限制操作频率的函数。\n    // 在这个例子中，我们希望限制访问yesno.wtf/api的频率\n    // ajax请求直到用户输入完毕才会发出\n    // 学习更多关于 _.debounce function (and its cousin\n    // _.throttle), 参考: https://lodash.com/docs#debounce\n    getAnswer: _.debounce(\n      function () {\n        var vm = this\n        if (this.question.indexOf('?') === -1) {\n          vm.answer = 'Questions usually contain a question mark. ;-)'\n          return\n        }\n        vm.answer = 'Thinking...'\n        axios.get('https://yesno.wtf/api')\n          .then(function (response) {\n            vm.answer = _.capitalize(response.data.answer)\n          })\n          .catch(function (error) {\n            vm.answer = 'Error! Could not reach the API. ' + error\n          })\n      },\n      // 这是我们为用户停止输入等待的毫秒数\n      500\n    )\n  }\n})\n&lt;/script&gt;</code></pre>结果：    <div id=\"watch-example\">        <p>Ask a yes/no question:            <input>        </p>        <p>I cannot give you an answer until you ask a question!</p>    </div>    <p><br></p>    <p>在这个示例中，使用 watch 选项允许我们执行异步操作（访问一个 API），限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这是计算属性无法做到的。</p>    <p>除了 watch 选项之外，您还可以使用 vm.$watch API 命令。</p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "Vue.js 2.0 教程",
      "teach_introduction": "Vue.js 2.0 版本，是目前主流的版本。",
      "sort_index": 4,
      "parent_sort_index": 1,
      "chapter_level_one_id": "4e96a383dc08d306c951ba0d75ca6db7",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "Vue.js 2.0 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "e8fdfdff242cf2a98181fc619ea27e7a",
      "chapter_level_two_parent_id": "4e96a383dc08d306c951ba0d75ca6db7",
      "chapter_level_two_name": "模板语法",
      "chapter_level_two_url": "/vuejs2/syntax.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2><span style=\"font-family: inherit;\">Vue.js 2.0 </span>模板语法</h2><p>Vue.js 使用了基于 HTML 的模版语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。所有 Vue.js 的模板都是合法的 HTML ，所以能被遵循规范的浏览器和 HTML 解析器解析。</p><p>在底层的实现上， Vue 将模板编译成虚拟 DOM 渲染函数。结合响应系统，在应用状态改变时， Vue 能够智能地计算出重新渲染组件的最小代价并应用到 DOM 操作上。</p><p>如果你熟悉虚拟 DOM 并且偏爱 JavaScript 的原始力量，你也可以不用模板，直接写<a href=\"https://www.w3cschool.cn/vuejs2/render-function.html\" target=\"_blank\">渲染（render）函数</a>，使用可选的 JSX 语法。</p><a href=\"http://doc.vue-js.com/v2/guide/syntax.html#%E6%8F%92%E5%80%BC\" rel=\"external nofollow\" target=\"_blank\"></a><h3>插值</h3><h2><a href=\"http://doc.vue-js.com/v2/guide/syntax.html#%E6%8F%92%E5%80%BC\" rel=\"external nofollow\" target=\"_blank\"></a></h2><a href=\"http://doc.vue-js.com/v2/guide/syntax.html#%E6%96%87%E6%9C%AC\" rel=\"external nofollow\" target=\"_blank\"></a><h4>文本</h4><h3><a href=\"http://doc.vue-js.com/v2/guide/syntax.html#%E6%96%87%E6%9C%AC\" rel=\"external nofollow\" target=\"_blank\"></a></h3><p>数据绑定最常见的形式就是使用 “Mustache” 语法（双大括号）的文本插值：</p><pre lang=\"html\"><code class=\"html\">&lt;span&gt;Message: {{ msg }}&lt;/span&gt;</code></pre><p>Mustache 标签将会被替代为对应数据对象上 msg 属性的值。无论何时，绑定的数据对象上 msg 属性发生了改变，插值处的内容都会更新。</p><p>通过使用 v-once 指令，你也能执行一次性地插值，当数据改变时，插值处的内容不会更新。但请留心这会影响到该节点上所有的数据绑定：</p><pre lang=\"html\"><code class=\"html\">&lt;span v-once&gt;This will never change: {{ msg }}&lt;/span&gt;</code></pre><a href=\"http://doc.vue-js.com/v2/guide/syntax.html#%E7%BA%AF-HTML\" rel=\"external nofollow\" target=\"_blank\"></a><h4>纯 HTML</h4><h3><a href=\"http://doc.vue-js.com/v2/guide/syntax.html#%E7%BA%AF-HTML\" rel=\"external nofollow\" target=\"_blank\"></a></h3><p>双大括号会将数据解释为纯文本，而非 HTML 。为了输出真正的 HTML ，你需要使用 v-html 指令：</p><pre lang=\"html\"><code class=\"html\">&lt;div v-html=\"rawHtml\"&gt;&lt;/div&gt;</code></pre><p>被插入的内容都会被当做 HTML —— 数据绑定会被忽略。注意，你不能使用 v-html 来复合局部模板，因为 Vue 不是基于字符串的模板引擎。组件更适合担任 UI 重用与复合的基本单元。</p><blockquote>    <p>你的站点上动态渲染的任意 HTML 可能会非常危险，因为它很容易导致<a href=\"https://en.wikipedia.org/wiki/Cross-site_scripting\" rel=\"external nofollow\" target=\"_blank\"> XSS 攻击</a>。请只对可信内容使用 HTML 插值，绝不要对用户提供的内容插值。</p></blockquote><a href=\"http://doc.vue-js.com/v2/guide/syntax.html#%E5%B1%9E%E6%80%A7\" rel=\"external nofollow\" target=\"_blank\"></a><h4>属性</h4><h3><a href=\"http://doc.vue-js.com/v2/guide/syntax.html#%E5%B1%9E%E6%80%A7\" rel=\"external nofollow\" target=\"_blank\"></a></h3><p>Mustache 不能在 HTML 属性中使用，应使用 v-bind 指令：</p><pre lang=\"html\"><code class=\"html\">&lt;div v-bind:id=\"dynamicId\"&gt;&lt;/div&gt;</code></pre><p>这对布尔值的属性也有效 —— 如果条件被求值为 false 的话该属性会被移除：</p><pre lang=\"html\"><code class=\"html\">&lt;button v-bind:disabled=\"someDynamicCondition\"&gt;Button&lt;/button&gt;</code></pre><a href=\"http://doc.vue-js.com/v2/guide/syntax.html#%E4%BD%BF%E7%94%A8-JavaScript-%E8%A1%A8%E8%BE%BE%E5%BC%8F\" rel=\"external nofollow\" target=\"_blank\"></a><h4>使用 JavaScript 表达式</h4><h3><a href=\"http://doc.vue-js.com/v2/guide/syntax.html#%E4%BD%BF%E7%94%A8-JavaScript-%E8%A1%A8%E8%BE%BE%E5%BC%8F\" rel=\"external nofollow\" target=\"_blank\"></a></h3><p>迄今为止，在我们的模板中，我们一直都只绑定简单的属性键值。但实际上，对于所有的数据绑定， Vue.js 都提供了完全的 JavaScript 表达式支持。</p><pre lang=\"html\"><code class=\"html\">{{ number + 1 }}\n{{ ok ? 'YES' : 'NO' }}\n{{ message.split('').reverse().join('') }}\n&lt;div v-bind:id=\"'list-' + id\"&gt;&lt;/div&gt;</code></pre><p>这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含<strong>单个表达式</strong>，所以下面的例子都<strong>不会生效</strong>。</p><pre lang=\"html\"><code class=\"html\">&lt;!-- 这是语句，不是表达式 --&gt;\n{{ var a = 1 }}\n&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;\n{{ if (ok) { return message } }}</code></pre><blockquote>    <p>模板表达式都被放在沙盒中，只能访问全局变量的一个白名单，如 Math 和 Date 。你不应该在模板表达式中试图访问用户定义的全局变量。</p></blockquote><a href=\"http://doc.vue-js.com/v2/guide/syntax.html#%E8%BF%87%E6%BB%A4%E5%99%A8\" rel=\"external nofollow\" target=\"_blank\"></a><h4>过滤器</h4><h3><a href=\"http://doc.vue-js.com/v2/guide/syntax.html#%E8%BF%87%E6%BB%A4%E5%99%A8\" rel=\"external nofollow\" target=\"_blank\"></a></h3><p>Vue.js 允许你自定义过滤器，被用作一些常见的文本格式化。过滤器应该被添加在 mustache <strong>插值</strong>的尾部，由“管道符”指示：</p><pre lang=\"html\"><code class=\"html\">{{ message | capitalize }}</code></pre><blockquote>    <p>Vue 2.x 中，过滤器只能在 mustache 绑定中使用。为了在指令绑定中实现同样的行为，你应该使用<a href=\"https://www.w3cschool.cn/vuejs2/computed.html\" target=\"_blank\">计算属性</a>。</p></blockquote><p>过滤器函数总接受表达式的值作为第一个参数。</p><pre lang=\"html\"><code class=\"html\">new Vue({\n  // ...\n  filters: {\n    capitalize: function (value) {\n      if (!value) return ''\n      value = value.toString()\n      return value.charAt(0).toUpperCase() + value.slice(1)\n    }\n  }\n})</code></pre><p>过滤器可以串联：</p><pre lang=\"html\"><code class=\"html\">{{ message | filterA | filterB }}</code></pre><p>过滤器是 JavaScript 函数，因此可以接受参数：</p><pre lang=\"html\"><code class=\"html\">{{ message | filterA('arg1', arg2) }}</code></pre><p>这里，字符串 'arg1' 将传给过滤器作为第二个参数， arg2 表达式的值将被求值然后传给过滤器作为第三个参数。</p><a href=\"http://doc.vue-js.com/v2/guide/syntax.html#%E6%8C%87%E4%BB%A4\" rel=\"external nofollow\" target=\"_blank\"></a><h3>指令</h3><h2><a href=\"http://doc.vue-js.com/v2/guide/syntax.html#%E6%8C%87%E4%BB%A4\" rel=\"external nofollow\" target=\"_blank\"></a></h2><p>指令（Directives）是带有 v- 前缀的特殊属性。指令属性的值预期是<strong>单一 JavaScript 表达式</strong>（除了 v-for，之后再讨论）。指令的职责就是当其表达式的值改变时相应地将某些行为应用到 DOM 上。让我们回顾一下在介绍里的例子：</p><pre lang=\"html\"><code class=\"html\">&lt;p v-if=\"seen\"&gt;Now you see me&lt;/p&gt;</code></pre><p>这里， v-if 指令将根据表达式 seen 的值的真假来移除/插入 &lt;p&gt; 元素。</p><a href=\"http://doc.vue-js.com/v2/guide/syntax.html#%E5%8F%82%E6%95%B0\" rel=\"external nofollow\" target=\"_blank\"></a><h4>参数</h4><h3><a href=\"http://doc.vue-js.com/v2/guide/syntax.html#%E5%8F%82%E6%95%B0\" rel=\"external nofollow\" target=\"_blank\"></a></h3><p>一些指令能接受一个“参数”，在指令后以冒号指明。例如， v-bind 指令被用来响应地更新 HTML 属性：</p><pre lang=\"html\"><code class=\"html\">&lt;a v-bind:href=\"url\"&gt;&lt;/a&gt;</code></pre><p>在这里 href 是参数，告知 v-bind 指令将该元素的 href 属性与表达式 url 的值绑定。</p><p>另一个例子是 v-on 指令，它用于监听 DOM 事件：</p><pre lang=\"html\"><code class=\"html\">&lt;a v-on:click=\"doSomething\"&gt;</code></pre><p>在这里参数是监听的事件名。我们也会更详细地讨论事件处理。</p><a href=\"http://doc.vue-js.com/v2/guide/syntax.html#%E4%BF%AE%E9%A5%B0%E7%AC%A6\" rel=\"external nofollow\" target=\"_blank\"></a><h4>修饰符</h4><h3><a href=\"http://doc.vue-js.com/v2/guide/syntax.html#%E4%BF%AE%E9%A5%B0%E7%AC%A6\" rel=\"external nofollow\" target=\"_blank\"></a></h3><p>修饰符（Modifiers）是以半角句号 . 指明的特殊后缀，用于指出一个指定应该以特殊方式绑定。例如，.prevent 修饰符告诉 v-on 指令对于触发的事件调用 event.preventDefault()：</p><pre lang=\"html\"><code class=\"html\">&lt;form v-on:submit.prevent=\"onSubmit\"&gt;&lt;/form&gt;</code></pre><p>之后当我们更深入地了解 v-on 与 v-model时，会看到更多修饰符的使用。</p><a href=\"http://doc.vue-js.com/v2/guide/syntax.html#%E7%BC%A9%E5%86%99\" rel=\"external nofollow\" target=\"_blank\"></a><h3>缩写</h3><h2><a href=\"http://doc.vue-js.com/v2/guide/syntax.html#%E7%BC%A9%E5%86%99\" rel=\"external nofollow\" target=\"_blank\"></a></h2><p>v- 前缀在模板中是作为一个标示 Vue 特殊属性的明显标识。当你使用 Vue.js 为现有的标记添加动态行为时，它会很有用，但对于一些经常使用的指令来说有点繁琐。同时，当搭建 Vue.js 管理所有模板的 <a href=\"https://en.wikipedia.org/wiki/Single-page_application\" rel=\"external nofollow\" target=\"_blank\">SPA</a> 时，v- 前缀也变得没那么重要了。因此，Vue.js 为两个最为常用的指令提供了特别的缩写：</p><a href=\"http://doc.vue-js.com/v2/guide/syntax.html#v-bind-%E7%BC%A9%E5%86%99\" rel=\"external nofollow\" target=\"_blank\"></a>     <h4>v-bind 缩写</h4><pre lang=\"html\"><code class=\"html\">&lt;!-- 完整语法 --&gt;\n&lt;a v-bind:href=\"url\"&gt;&lt;/a&gt;\n&lt;!-- 缩写 --&gt;\n&lt;a :href=\"url\"&gt;&lt;/a&gt;</code></pre>    <a href=\"http://doc.vue-js.com/v2/guide/syntax.html#v-on-%E7%BC%A9%E5%86%99\" rel=\"external nofollow\" target=\"_blank\"></a>     <h4>v-on 缩写</h4><pre lang=\"html\"><code class=\"html\">&lt;!-- 完整语法 --&gt;\n&lt;a v-on:click=\"doSomething\"&gt;&lt;/a&gt;\n&lt;!-- 缩写 --&gt;\n&lt;a @click=\"doSomething\"&gt;&lt;/a&gt;</code></pre>    <p>它们看起来可能与普通的 HTML 略有不同，但 : 与 @ 对于属性名来说都是合法字符，在所有支持 Vue.js 的浏览器都能被正确地解析。而且，它们不会出现在最终渲染的标记。缩写语法是完全可选的，但随着你更深入地了解它们的作用，你会庆幸拥有它们。</p><p><br></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "Vue.js 2.0 教程",
      "teach_introduction": "Vue.js 2.0 版本，是目前主流的版本。",
      "sort_index": 3,
      "parent_sort_index": 1,
      "chapter_level_one_id": "4e96a383dc08d306c951ba0d75ca6db7",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "Vue.js 2.0 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "308548125cbebbb0cf86dbcbd852c3ca",
      "chapter_level_two_parent_id": "4e96a383dc08d306c951ba0d75ca6db7",
      "chapter_level_two_name": "实例",
      "chapter_level_two_url": "/vuejs2/instance.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>Vue2.0 实例</h2><a href=\"http://doc.vue-js.com/v2/guide/instance.html#%E6%9E%84%E9%80%A0%E5%99%A8\" rel=\"external nofollow\" target=\"_blank\"></a><h3>构造器</h3><h2><a href=\"http://doc.vue-js.com/v2/guide/instance.html#%E6%9E%84%E9%80%A0%E5%99%A8\" rel=\"external nofollow\" target=\"_blank\"></a></h2><p>每个 Vue.js 应用都是通过构造函数 Vue 创建一个 <strong>Vue 的根实例</strong> 启动的：</p><pre lang=\"javascript\"><code class=\"javascript\">var vm = new Vue({\n  // 选项\n})</code></pre><p>虽然没有完全遵循 <a href=\"https://en.wikipedia.org/wiki/Model_View_ViewModel\" rel=\"external nofollow\" target=\"_blank\">MVVM 模式</a>， Vue 的设计无疑受到了它的启发。因此在文档中经常会使用 vm 这个变量名表示 Vue 实例。</p><p>在实例化 Vue 时，需要传入一个<strong>选项对象</strong>，它可以包含数据、模板、挂载元素、方法、生命周期钩子等选项。全部的选项可以在 API 文档 中查看。</p><p>可以扩展 Vue 构造器，从而用预定义选项创建可复用的<strong>组件构造器</strong>：</p><pre lang=\"javascript\"><code class=\"javascript\">var MyComponent = Vue.extend({\n  // 扩展选项\n})\n// 所有的 `MyComponent` 实例都将以预定义的扩展选项被创建\nvar myComponentInstance = new MyComponent()</code></pre><p>尽管可以命令式地创建扩展实例，不过在多数情况下建议将组件构造器注册为一个自定义元素，然后声明式地用在模板中。我们将在后面的“<a href=\"https://www.w3cschool.cn/vuejs2/components.html\">组件系统</a>”中详细说明。现在你只需知道所有的 Vue.js 组件其实都是被扩展的 Vue 实例。</p><a href=\"http://doc.vue-js.com/v2/guide/instance.html#%E5%B1%9E%E6%80%A7%E4%B8%8E%E6%96%B9%E6%B3%95\" rel=\"external nofollow\" target=\"_blank\"></a><h3>属性与方法</h3><h2><a href=\"http://doc.vue-js.com/v2/guide/instance.html#%E5%B1%9E%E6%80%A7%E4%B8%8E%E6%96%B9%E6%B3%95\" rel=\"external nofollow\" target=\"_blank\"></a></h2><p>每个 Vue 实例都会代理其 data 对象里所有的属性：</p><pre lang=\"javascript\"><code class=\"javascript\">var data = { a: 1 }\nvar vm = new Vue({\n  data: data\n})\nvm.a === data.a // -&gt; true\n// 设置属性也会影响到原始数据\nvm.a = 2\ndata.a // -&gt; 2\n// ... 反之亦然\ndata.a = 3\nvm.a // -&gt; 3</code></pre><p>注意只有这些被代理的属性是<strong>响应的</strong>。如果在实例创建之后添加新的属性到实例上，它不会触发视图更新。我们将在后面详细讨论响应系统。</p><p>除了 data 属性， Vue 实例暴露了一些有用的实例属性与方法。这些属性与方法都有前缀 $，以便与代理的 data 属性区分。例如：</p><pre lang=\"javascript\"><code class=\"javascript\">var data = { a: 1 }\nvar vm = new Vue({\n  el: '#example',\n  data: data\n})\nvm.$data === data // -&gt; true\nvm.$el === document.getElementById('example') // -&gt; true\n// $watch 是一个实例方法\nvm.$watch('a', function (newVal, oldVal) {\n  // 这个回调将在 `vm.a`  改变后调用\n})</code></pre><blockquote><p>注意，不要在实例属性或者回调函数中（如 vm.$watch('a', newVal =&gt; this.myMethod())）使用箭头函数。因为箭头函数绑定父上下文，所以 this 不会像预想的一样是 Vue 实例，而是 this.myMethod 未被定义。</p></blockquote><p>实例属性和方法的完整列表中查阅 API 参考。</p><a href=\"http://doc.vue-js.com/v2/guide/instance.html#%E5%AE%9E%E4%BE%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\" rel=\"external nofollow\" target=\"_blank\"></a><h3>实例生命周期</h3><h2><a href=\"http://doc.vue-js.com/v2/guide/instance.html#%E5%AE%9E%E4%BE%8B%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\" rel=\"external nofollow\" target=\"_blank\"></a></h2><p>每个 Vue 实例在被创建之前都要经过一系列的初始化过程。例如，实例需要配置数据观测(data observer)、编译模版、挂载实例到 DOM ，然后在数据变化时更新 DOM 。在这个过程中，实例也会调用一些<strong>生命周期钩子</strong> ，这就给我们提供了执行自定义逻辑的机会。例如，created 这个钩子在实例被创建之后被调用：</p><pre lang=\"javascript\"><code class=\"javascript\">var vm = new Vue({\n  data: {\n    a: 1\n  },\n  created: function () {\n    // `this` 指向 vm 实例\n    console.log('a is: ' + this.a)\n  }\n})\n// -&gt; \"a is: 1\"</code></pre><p>也有一些其它的钩子，在实例生命周期的不同阶段调用，如 mounted、 updated、destroyed 。钩子的 this 指向调用它的 Vue 实例。一些用户可能会问 Vue.js 是否有“控制器”的概念？答案是，没有。组件的自定义逻辑可以分布在这些钩子中。</p><a href=\"http://doc.vue-js.com/v2/guide/instance.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E7%A4%BA\" rel=\"external nofollow\" target=\"_blank\"></a><h3>生命周期图示</h3><h2><a href=\"http://doc.vue-js.com/v2/guide/instance.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E7%A4%BA\" rel=\"external nofollow\" target=\"_blank\"></a></h2><p>下图说明了实例的生命周期。你不需要立马弄明白所有的东西，不过以后它会有帮助。</p><p style=\"text-align: center;\"><img src=\"//atts.w3cschool.cn/attachments/day_190316/201903161436123252.png\" alt=\"Lifecycle\" style=\"width: 681px; height: 1637px;\"></p><p><br></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "Vue.js 2.0 教程",
      "teach_introduction": "Vue.js 2.0 版本，是目前主流的版本。",
      "sort_index": 10,
      "parent_sort_index": 5,
      "chapter_level_one_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "相关文章",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "34075c3e60cf253368a9659a2ecfae5e",
      "chapter_level_two_parent_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_two_name": "Vue3.0正式发布，本次发布所有总结，一起看看!",
      "chapter_level_two_url": "/article/f335a80af033ba.html",
      "book_content": ""
    },
    {
      "teach_name": "Vue.js 2.0 教程",
      "teach_introduction": "Vue.js 2.0 版本，是目前主流的版本。",
      "sort_index": 9,
      "parent_sort_index": 5,
      "chapter_level_one_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "相关文章",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "a83d21f7f991cde2163e0560964ee261",
      "chapter_level_two_parent_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_two_name": "通过 vue 实现轮播图效果源码",
      "chapter_level_two_url": "/article/22564561.html",
      "book_content": ""
    },
    {
      "teach_name": "Vue.js 2.0 教程",
      "teach_introduction": "Vue.js 2.0 版本，是目前主流的版本。",
      "sort_index": 8,
      "parent_sort_index": 5,
      "chapter_level_one_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "相关文章",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "54779a64af36ac4eceeb8b5233ea49ff",
      "chapter_level_two_parent_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_two_name": "Vue 组件生命周期",
      "chapter_level_two_url": "/article/26351170.html",
      "book_content": ""
    },
    {
      "teach_name": "Vue.js 2.0 教程",
      "teach_introduction": "Vue.js 2.0 版本，是目前主流的版本。",
      "sort_index": 7,
      "parent_sort_index": 5,
      "chapter_level_one_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "相关文章",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "4d465e62540daee2b47723924e66309e",
      "chapter_level_two_parent_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_two_name": "使用Vue3.0，我收获了哪些知识点（二）",
      "chapter_level_two_url": "/article/92d4fb1ca4b687.html",
      "book_content": ""
    },
    {
      "teach_name": "Vue.js 2.0 教程",
      "teach_introduction": "Vue.js 2.0 版本，是目前主流的版本。",
      "sort_index": 6,
      "parent_sort_index": 5,
      "chapter_level_one_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "相关文章",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "787736762283e05710000201a139984e",
      "chapter_level_two_parent_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_two_name": "Vue新特性：在CSS 中可以使用 JS 变量",
      "chapter_level_two_url": "/article/e9d71709126981.html",
      "book_content": ""
    },
    {
      "teach_name": "Vue.js 2.0 教程",
      "teach_introduction": "Vue.js 2.0 版本，是目前主流的版本。",
      "sort_index": 5,
      "parent_sort_index": 5,
      "chapter_level_one_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "相关文章",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "d7b4064ffbef9071d895edb9fef373f6",
      "chapter_level_two_parent_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_two_name": "Vue框架的基本使用",
      "chapter_level_two_url": "/article/2895139.html",
      "book_content": ""
    },
    {
      "teach_name": "Vue.js 2.0 教程",
      "teach_introduction": "Vue.js 2.0 版本，是目前主流的版本。",
      "sort_index": 4,
      "parent_sort_index": 5,
      "chapter_level_one_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "相关文章",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "8980369cbf97c7610350486cf27e5627",
      "chapter_level_two_parent_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_two_name": "深入理解vue中的slot与slot-scope",
      "chapter_level_two_url": "/article/3574920.html",
      "book_content": ""
    },
    {
      "teach_name": "Vue.js 2.0 教程",
      "teach_introduction": "Vue.js 2.0 版本，是目前主流的版本。",
      "sort_index": 3,
      "parent_sort_index": 5,
      "chapter_level_one_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "相关文章",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "cfa1cb8fb292a91be53cdc9d9e3e3867",
      "chapter_level_two_parent_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_two_name": "Vue前端交互模式、Promise用法（回调地狱）",
      "chapter_level_two_url": "/article/34914368.html",
      "book_content": ""
    },
    {
      "teach_name": "Vue.js 2.0 教程",
      "teach_introduction": "Vue.js 2.0 版本，是目前主流的版本。",
      "sort_index": 2,
      "parent_sort_index": 5,
      "chapter_level_one_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "相关文章",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "64e993e806f2753957bbc6bcdccde353",
      "chapter_level_two_parent_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_two_name": "学习Vue3.0，先从搭建环境开始",
      "chapter_level_two_url": "/article/9bcaca84c6ee7f.html",
      "book_content": ""
    },
    {
      "teach_name": "Vue.js 2.0 教程",
      "teach_introduction": "Vue.js 2.0 版本，是目前主流的版本。",
      "sort_index": 1,
      "parent_sort_index": 5,
      "chapter_level_one_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "相关文章",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "7d7302b875aa41e598542e72df6c8c9b",
      "chapter_level_two_parent_id": "9d36daea6c984d4939c4419a1f6bcefa",
      "chapter_level_two_name": "2021年最新 vue面试题整理",
      "chapter_level_two_url": "/article/96045786.html",
      "book_content": ""
    },
    {
      "teach_name": "Vue.js 2.0 教程",
      "teach_introduction": "Vue.js 2.0 版本，是目前主流的版本。",
      "sort_index": 5,
      "parent_sort_index": 4,
      "chapter_level_one_id": "f9c3cdf0269ab285b5d83b86cecc8373",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "相关课程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "b57e703ab7b512e680c04feb95b0c84e",
      "chapter_level_two_parent_id": "f9c3cdf0269ab285b5d83b86cecc8373",
      "chapter_level_two_name": "小白学前端：Vue.js 2.0进阶",
      "chapter_level_two_url": "/minicourse/play/vuejs_txy_base?fcode=tutorial-vuejs2",
      "book_content": ""
    },
    {
      "teach_name": "Vue.js 2.0 教程",
      "teach_introduction": "Vue.js 2.0 版本，是目前主流的版本。",
      "sort_index": 4,
      "parent_sort_index": 4,
      "chapter_level_one_id": "f9c3cdf0269ab285b5d83b86cecc8373",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "相关课程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "e160538fc0ccc5277a3986de796239cf",
      "chapter_level_two_parent_id": "f9c3cdf0269ab285b5d83b86cecc8373",
      "chapter_level_two_name": "uni-app跨平台开发之flex局部教程",
      "chapter_level_two_url": "/minicourse/play/hjhuniapp02?fcode=tutorial-vuejs2",
      "book_content": ""
    },
    {
      "teach_name": "Vue.js 2.0 教程",
      "teach_introduction": "Vue.js 2.0 版本，是目前主流的版本。",
      "sort_index": 3,
      "parent_sort_index": 4,
      "chapter_level_one_id": "f9c3cdf0269ab285b5d83b86cecc8373",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "相关课程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "52cdadf7e4c5669c42e73899e5a9fc76",
      "chapter_level_two_parent_id": "f9c3cdf0269ab285b5d83b86cecc8373",
      "chapter_level_two_name": "uni-app跨平台开发之API入门教程",
      "chapter_level_two_url": "/minicourse/play/hjhuniapp05?fcode=tutorial-vuejs2",
      "book_content": ""
    },
    {
      "teach_name": "Vue.js 2.0 教程",
      "teach_introduction": "Vue.js 2.0 版本，是目前主流的版本。",
      "sort_index": 2,
      "parent_sort_index": 4,
      "chapter_level_one_id": "f9c3cdf0269ab285b5d83b86cecc8373",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "相关课程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "cdea2d6e47638f2d7a7391ed6816b832",
      "chapter_level_two_parent_id": "f9c3cdf0269ab285b5d83b86cecc8373",
      "chapter_level_two_name": "uni-app跨平台实战课：公司移动站界面设计",
      "chapter_level_two_url": "/minicourse/play/hjhuniapp03?fcode=tutorial-vuejs2",
      "book_content": ""
    },
    {
      "teach_name": "Vue.js 2.0 教程",
      "teach_introduction": "Vue.js 2.0 版本，是目前主流的版本。",
      "sort_index": 1,
      "parent_sort_index": 4,
      "chapter_level_one_id": "f9c3cdf0269ab285b5d83b86cecc8373",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "相关课程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "a0f3d20a64afddbd3c6503c130b2b050",
      "chapter_level_two_parent_id": "f9c3cdf0269ab285b5d83b86cecc8373",
      "chapter_level_two_name": "uni-app入门教程-通用空白框架的制作（含源代码和软件）",
      "chapter_level_two_url": "/minicourse/play/hjhuniapp01?fcode=tutorial-vuejs2",
      "book_content": ""
    },
    {
      "teach_name": "Vue.js 2.0 教程",
      "teach_introduction": "Vue.js 2.0 版本，是目前主流的版本。",
      "sort_index": 5,
      "parent_sort_index": 3,
      "chapter_level_one_id": "d9e0bc6fb0580d43866364c06954f0cc",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "相关教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "3b6d6d69e8aef07aff31c4b07b27d71d",
      "chapter_level_two_parent_id": "d9e0bc6fb0580d43866364c06954f0cc",
      "chapter_level_two_name": "JeeSpringCloud",
      "chapter_level_two_url": "/jeespringcloud/",
      "book_content": ""
    },
    {
      "teach_name": "Vue.js 2.0 教程",
      "teach_introduction": "Vue.js 2.0 版本，是目前主流的版本。",
      "sort_index": 4,
      "parent_sort_index": 3,
      "chapter_level_one_id": "d9e0bc6fb0580d43866364c06954f0cc",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "相关教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "0ad65a0276fa7f2236367d88694611dd",
      "chapter_level_two_parent_id": "d9e0bc6fb0580d43866364c06954f0cc",
      "chapter_level_two_name": "Vue SSR 指南",
      "chapter_level_two_url": "/vuessr/",
      "book_content": ""
    },
    {
      "teach_name": "Vue.js 2.0 教程",
      "teach_introduction": "Vue.js 2.0 版本，是目前主流的版本。",
      "sort_index": 3,
      "parent_sort_index": 3,
      "chapter_level_one_id": "d9e0bc6fb0580d43866364c06954f0cc",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "相关教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "41786c71e095fad5557b1ab8ba6fbda6",
      "chapter_level_two_parent_id": "d9e0bc6fb0580d43866364c06954f0cc",
      "chapter_level_two_name": "学习Java笔记",
      "chapter_level_two_url": "/learningjavanotes/",
      "book_content": ""
    },
    {
      "teach_name": "Vue.js 2.0 教程",
      "teach_introduction": "Vue.js 2.0 版本，是目前主流的版本。",
      "sort_index": 2,
      "parent_sort_index": 3,
      "chapter_level_one_id": "d9e0bc6fb0580d43866364c06954f0cc",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "相关教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "40256ce87cf73bdea72d810af39315a2",
      "chapter_level_two_parent_id": "d9e0bc6fb0580d43866364c06954f0cc",
      "chapter_level_two_name": "VUE3 教程",
      "chapter_level_two_url": "/vuejs3/",
      "book_content": ""
    },
    {
      "teach_name": "Vue.js 2.0 教程",
      "teach_introduction": "Vue.js 2.0 版本，是目前主流的版本。",
      "sort_index": 1,
      "parent_sort_index": 3,
      "chapter_level_one_id": "d9e0bc6fb0580d43866364c06954f0cc",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "相关教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "9984d91834dabf161535d5939208b222",
      "chapter_level_two_parent_id": "d9e0bc6fb0580d43866364c06954f0cc",
      "chapter_level_two_name": "Vue.js 2.0 教程",
      "chapter_level_two_url": "/vuejs2/",
      "book_content": ""
    },
    {
      "teach_name": "Vue.js 2.0 教程",
      "teach_introduction": "Vue.js 2.0 版本，是目前主流的版本。",
      "sort_index": 14,
      "parent_sort_index": 2,
      "chapter_level_one_id": "e8fb10237b03499ebdc00cd95024fcfb",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "Vue.js 2.0 进阶教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "730e77b03dc1cf5760bf48200f059089",
      "chapter_level_two_parent_id": "e8fb10237b03499ebdc00cd95024fcfb",
      "chapter_level_two_name": "对比其他框架",
      "chapter_level_two_url": "/vuejs2/vuejs2-comparison.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2><span style=\"font-family:inherit;\">Vue.js 2.0 </span>对比其他框架</h2><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#React\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#React\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#React\" rel=\"external nofollow\" target=\"_blank\"></a>React</h2><p>React 和 Vue 有许多相似之处，它们都有：</p><ul><li>使用 Virtual DOM</li><li>提供了响应式（Reactive）和组件化（Composable）的视图组件。</li><li>将注意力集中保持在核心库，伴随于此，有配套的路由和负责处理全局状态管理的库。</li></ul><p>由于有着众多的相似处，我们会用更多的时间在这一块进行比较。这里我们不只保证技术内容的准确性，同时也兼顾了平衡的考量。我们需要指出 React 比 Vue 更好的地方，像是他们的生态系统和丰富的自定义渲染器。</p><p>React社区为我们准确进行平衡的考量提供了<a href=\"https://github.com/vuejs/vuejs.org/issues/364\" rel=\"external nofollow\" target=\"_blank\">非常积极地帮助</a>，特别感谢来自 React 团队的 Dan Abramov 。他非常慷慨的花费时间来贡献专业知识，帮助我们完善这篇文档，最后我们对最终结果<a href=\"https://github.com/vuejs/vuejs.org/issues/364#issuecomment-244575740\" rel=\"external nofollow\" target=\"_blank\">都十分满意</a>。</p><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#%E6%80%A7%E8%83%BD%E7%AE%80%E4%BB%8B\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#%E6%80%A7%E8%83%BD%E7%AE%80%E4%BB%8B\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#%E6%80%A7%E8%83%BD%E7%AE%80%E4%BB%8B\" rel=\"external nofollow\" target=\"_blank\"></a>性能简介</h3><p>到目前为止，针对现实情况的测试中，Vue 的性能是优于 React 的。如果你对此表示怀疑，请继续阅读。我们会解释为什么会这样（并且会提供一个与 React 团队共同约定的比较基准）。</p><h4><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#%E6%B8%B2%E6%9F%93%E6%80%A7%E8%83%BD\" rel=\"external nofollow\" target=\"_blank\"></a>渲染性能</h4><p>在渲染用户界面的时候，DOM 的操作成本是最高的，不幸的是没有库可以让这些原始操作变得更快。我们能做到的最好效果就是：</p><ol><li>尽量减少必要的DOM突变数量。 React和Vue都使用虚拟DOM抽象来实现这一点，并且两个实现都同样有效。</li><li>在这些DOM操作之上添加尽可能少的开销（纯JavaScript计算）。 这是Vue和React不同的区域。<br></li></ol><p>JavaScript开销与计算必要的DOM操作的机制直接相关。Vue和React都利用Virtual DOM来实现这一目标，但是Vue的Virtual DOM实现（snabbdom的分支）要轻得多，因此比React的开销更少。</p><p>Vue 和 React 也提供功能性组件，这些组件因为都是没有声明，没有实例化的，因此会花费更少的开销。当这些都用于关键性能的场景时，Vue 将会更快。为了证明这点，我们建立了一个简单的<a href=\"https://github.com/chrisvfritz/vue-render-performance-comparisons\" rel=\"external nofollow\" target=\"_blank\">参照项目</a>，它负责渲染 10,000 个列表项 100 次。我们鼓励你基于此去尝试运行一下。然而在实际上，由于浏览器和硬件的差异甚至 JavaScript 引擎的不同，结果都会相应有所不同。</p><p>如果你懒得去做，下面的数值是来自于一个 2014 年产的 MacBook Air 并在 Chrome 52 版本下运行所产生的。为了避免偶然性，每个参照项目都分别运行 20 次并取自最好的结果：</p><table><thead><tr><th> </th><th>Vue</th><th>React</th></tr></thead><tbody><tr><th>Fastest</th><td>23ms</td><td>63ms</td></tr><tr><th>Median</th><td>42ms</td><td>81ms</td></tr><tr><th>Average</th><td>51ms</td><td>94ms</td></tr><tr><th>95th Perc.</th><td>73ms</td><td>164ms</td></tr><tr><th>Slowest</th><td>343ms</td><td>453ms</td></tr></tbody></table><h4><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#%E6%9B%B4%E6%96%B0%E6%80%A7%E8%83%BD\" rel=\"external nofollow\" target=\"_blank\"></a>更新性能</h4><p>在React中，当组件的状态发生更改时，它会触发整个组件子树的重新呈现，从该组件以root身份开始。</p><p>为避免对子组件进行不必要的重新渲染，您需要在任何地方实现shouldComponentUpdate并使用不可变数据结构。在Vue中，组件的依赖关系在渲染过程中会自动跟踪，因此系统会精确地知道实际需要重新渲染的组件。</p><p>这意味着，未经优化的 Vue 相比未经优化的 React 要快的多。由于 Vue 改进过渲染性能，甚至全面优化过的 React 通常也会慢于开箱即用的 Vue。</p><h4><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#%E5%BC%80%E5%8F%91%E4%B8%AD\" rel=\"external nofollow\" target=\"_blank\"></a>开发中</h4><p>显然，在生产环境中的性能是至关重要的，目前为止我们所具体讨论的便是针对此环境。但开发过程中的表现也不容小视。不错的是用 Vue 和 React 开发大多数应用的速度都是足够快的。</p><p>然而，假如你要开发一个对性能要求比较高的数据可视化或者动画的应用时，你需要了解到下面这点：在开发中，Vue 每秒最高处理 10 帧，而 React 每秒最高处理不到 1 帧。</p><p>对于大多数普通应用程序，Vue和React在开发过程中都保持足够快。但是，在对高帧率数据可视化或动画进行原型设计时，我们已经看到Vue在开发过程中处理每秒10帧的情况，而React则降低到每秒约1帧。</p><p>这是由于 React 有大量的检查机制，这会让它提供许多有用的警告和错误提示信息。我们同样认为这些是很重要的，但是我们在实现这些检查时，也更加密切地关注了性能方面。</p><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#HTML-amp-CSS\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#HTML-amp-CSS\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#HTML-amp-CSS\" rel=\"external nofollow\" target=\"_blank\"></a>HTML &amp; CSS</h3><p>在 React 中，它们都是 JavaScript 编写的，听起来这十分简单和优雅。然而不幸的事实是，JavaScript 内的 HTML 和 CSS 会产生很多痛点。在 Vue 中我们采用 Web 技术并在其上进行扩展。接下来将通过一些实例向你展示这意味的是什么。</p><h4><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#JSX-vs-Templates\" rel=\"external nofollow\" target=\"_blank\"></a>JSX vs Templates</h4><p>在 React 中，所有的组件的渲染功能都依靠 JSX。JSX 是使用 XML 语法编写 Javascript 的一种语法糖。这有一个<a href=\"https://github.com/vuejs/vuejs.org/issues/364#issuecomment-244582684\" rel=\"external nofollow\" target=\"_blank\">通过React社区审核过的例子</a>：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">render () {\n    let { items } = this.props\n    let children\n    if ( items.length &gt; 0 ) {\n        children = (\n            &lt;ul&gt;\n                {items.map( item =&gt;\n                    &lt;li key={item.id}&gt;{item.name}&lt;/li&gt;\n                )}\n            &lt;/ul&gt;\n        )\n    } else {\n        children = &lt;p&gt;No items found.&lt;/p&gt;\n    }\n    return (\n        &lt;div className = 'list-container'&gt;\n            {children}\n        &lt;/div&gt;\n    )\n}</code></pre><p>JSX 的渲染功能有下面这些优势：</p><ul><li>你可以使用完整的编程语言 JavaScript 功能来构建你的视图页面。</li><li>工具对 JSX 的支持相比于现有可用的其他 Vue 模板还是比较先进的（比如，linting、类型检查、编辑器的自动完成）。</li></ul><p>在 Vue 中，由于有时需要用这些功能，我们也提供了渲染功能并且支持了 JSX。然而，对于大多数组件来说，渲染功能是不推荐使用了。</p><p>在这方面，我们提供的是更简单的模板：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;template&gt;\n    &lt;div class=\"list-container\"&gt;\n        &lt;ul v-if=\"items.length\"&gt;\n            &lt;li v-for=\"item in items\"&gt;\n                {{ item.name }}\n            &lt;/li&gt;\n        &lt;/ul&gt;\n        &lt;p v-else&gt;No items found.&lt;/p&gt;\n    &lt;/div&gt;\n&lt;/template&gt;</code></pre><p>优点如下：</p><ul><li>在写模板的过程中，样式风格已定并涉及更少的功能实现。</li><li>模板总是会被声明的。</li><li>模板中任何 HTML 语法都是有效的。</li><li>阅读起来更贴合英语（比如，for each item in items）。</li><li>不需要高级版本的 JavaScript 语法，来增加可读性。</li></ul><p>这样，不仅开发人员更容易编写代码，设计人员和开发人员也可以更容易的分析代码和贡献代码。</p><p>这还没有结束。Vue 拥抱 HTML，而不是用 JavaScript 去重塑它。在模板内，Vue 也允许你用预处理器比如 Pug（原名 Jade）。</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">div.list-container\n  ul(v-if=\"items.length\")\n    li(v-for=\"item in items\") {{ item.name }}\n  p(v-else) No items found</code></pre><h4><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#CSS-%E7%9A%84%E7%BB%84%E4%BB%B6%E4%BD%9C%E7%94%A8%E5%9F%9F\" rel=\"external nofollow\" target=\"_blank\"></a>CSS 的组件作用域</h4><p>除非你把组件分布在多个文件上(例如 <a href=\"https://github.com/gajus/react-css-modules\" rel=\"external nofollow\" target=\"_blank\">CSS Modules</a>)，要不在 React 中作用域内的 CSS 就会产生警告。非常简单的 CSS 还可以工作，但是稍微复杂点的，比如悬停状态、媒体查询、伪类选择符等要么通过沉重的依赖来重做要么就直接不能用。</p><p>而 Vue 可以让你在每个<a href=\"http://doc.vue-js.com/v2/guide/single-file-components.html\" rel=\"external nofollow\" target=\"_blank\">单文件组件</a>中完全访问 CSS。</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;style scoped&gt;\n    @media (min-width: 250px) {\n        .list-container:hover {\n            background: orange;\n        }\n    }\n&lt;/style&gt;</code></pre><p>这个可选 scoped 属性会自动添加一个唯一的属性（比如 data-v-21e5b78）为组件内 CSS 指定作用域，编译的时候 .list-container:hover 会被编译成类似 .list-container[data-v-21e5b78]:hover。</p><p>最后，就像 HTML 一样，你可以选择自己偏爱的 CSS 预处理器编写 CSS。这可以让你围绕设计为中心展开工作，而不是引入专门的库来增加你应用的体积和复杂度。</p><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#%E8%A7%84%E6%A8%A1\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#%E8%A7%84%E6%A8%A1\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#%E8%A7%84%E6%A8%A1\" rel=\"external nofollow\" target=\"_blank\"></a>规模</h3><h4><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#%E5%90%91%E4%B8%8A%E6%89%A9%E5%B1%95\" rel=\"external nofollow\" target=\"_blank\"></a>向上扩展</h4><p>Vue 和 React 都提供了强大的路由来应对大型应用。React 社区在状态管理方面非常有创新精神（比如Flux、Redux），而这些状态管理模式甚至<a href=\"https://github.com/egoist/revue\" rel=\"external nofollow\" target=\"_blank\"> Redux 本身</a>也可以非常容易的集成在 Vue 应用中。实际上，Vue 更进一步地采用了这种模式（<a href=\"https://github.com/vuejs/vuex\" rel=\"external nofollow\" target=\"_blank\">Vuex</a>），更加深入集成 Vue 的状态管理解决方案 Vuex 相信能为你带来更好的开发体验。</p><p>两者另一个重要差异是，Vue 的路由库和状态管理库都是由官方维护支持且与核心库同步更新的。React 则是选择把这些问题交给社区维护，因此创建了一个更分散的生态系统。但相对的，React 的生态系统相比 Vue 更加繁荣。</p><p>最后，Vue 提供了<a href=\"https://github.com/vuejs/vue-cli\" rel=\"external nofollow\" target=\"_blank\">Vue-cli 脚手架</a>，能让你非常容易地构建项目，包含了 <a href=\"https://github.com/vuejs-templates/webpack\" rel=\"external nofollow\" target=\"_blank\">Webpack</a>, <a href=\"https://github.com/vuejs-templates/browserify\" rel=\"external nofollow\" target=\"_blank\">Browserify</a>, 甚至 <a href=\"https://github.com/vuejs-templates/simple\" rel=\"external nofollow\" target=\"_blank\">no build system</a>。React 在这方面也提供了<a href=\"https://github.com/facebookincubator/create-react-app\" rel=\"external nofollow\" target=\"_blank\">create-react-app</a>，但是现在还存在一些局限性：</p><ul><li>它不允许在项目生成时进行任何配置，而 Vue 支持 Yeoman-like 定制。</li><li>它只提供一个构建单页面应用的单一模板，而 Vue 提供了各种用途的模板。</li><li>它不能用用户自建的模板构建项目，而自建模板对企业环境下预先建立协议是特别有用的。</li></ul><p>而要注意的是这些限制是故意设计的，这有它的优势。例如，如果你的项目需求非常简单，你就不需要自定义生成过程。你能把它作为一个依赖来更新。如果阅读更多关于<a href=\"https://github.com/facebookincubator/create-react-app#philosophy\" rel=\"external nofollow\" target=\"_blank\">不同的设计理念</a>。</p><h4><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#%E5%90%91%E4%B8%8B%E6%89%A9%E5%B1%95\" rel=\"external nofollow\" target=\"_blank\"></a>向下扩展</h4><p>React 学习曲线陡峭，在你开始学 React 前，你需要知道 JSX 和 ES2015，因为许多示例用的是这些语法。你需要学习构建系统，虽然你在技术上可以用 Babel 来实时编译代码，但是这并不推荐用于生产环境。</p><p>就像 Vue 向上扩展好比 React 一样，Vue 向下扩展后就类似于 jQuery。你只要把如下标签放到页面就可以运行：</p><p>&lt;script src=\"https://unpkg.com/vue/dist/vue.js\" rel=\"external nofollow\" &gt;&lt;/script&gt;</p><p>然后你就可以编写 Vue 代码并应用到生产中，你只要用 min 版 Vue 文件替换掉就不用担心其他的性能问题。</p><p>由于起步阶段不需学 JSX，ES2015 以及构建系统，所以开发者只需不到一天的时间阅读<a href=\"https://www.w3cschool.cn/vuejs2/vuejs2-index.html\" target=\"_blank\">本教程</a>就可以建立简单的应用程序。</p><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#%E6%9C%AC%E5%9C%B0%E6%B8%B2%E6%9F%93\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#%E6%9C%AC%E5%9C%B0%E6%B8%B2%E6%9F%93\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#%E6%9C%AC%E5%9C%B0%E6%B8%B2%E6%9F%93\" rel=\"external nofollow\" target=\"_blank\"></a>本地渲染</h3><p>ReactNative 能使你用相同的组件模型编写有本地渲染能力的 APP（IOS 和 Android）。能同时跨多平台开发，对开发者是非常棒的。相应地，Vue 和 <a href=\"https://alibaba.github.io/weex/\" rel=\"external nofollow\" target=\"_blank\">Weex</a> 会进行官方合作，Weex 是阿里的跨平台用户界面开发框架，Weex 的 JavaScript 框架运行时用的就是 Vue。这意味着在 Weex 的帮助下，你使用 Vue 语法开发的组件不仅仅可以运行在浏览器端，还能被用于开发 IOS 和 Android 上的原生应用。</p><p>在现在，Weex 还在积极发展，成熟度也不能和 ReactNative 相抗衡。但是，Weex 的发展是由世界上最大的电子商务企业的需求在驱动，Vue 团队也会和 Weex 团队积极合作确保为开发者带来良好的开发体验。</p><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#MobX\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#MobX\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#MobX\" rel=\"external nofollow\" target=\"_blank\"></a>MobX</h3><p>Mobx 在 React 社区很流行，实际上在 Vue 也采用了几乎相同的反应系统。在有限程度上，React + Mobx 也可以被认为是更繁琐的 Vue，所以如果你习惯组合使用它们，那么选择 Vue 会更合理。</p><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#Angular-1\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#Angular-1\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#Angular-1\" rel=\"external nofollow\" target=\"_blank\"></a>Angular 1</h2><p>Vue 的一些语法和 Angular 的很相似（例如 v-if vs ng-if）。因为 Angular 是 Vue 早期开发的灵感来源。然而，Augular 中存在的许多问题，在 Vue 中已经得到解决。</p><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#%E5%A4%8D%E6%9D%82%E6%80%A7\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#%E5%A4%8D%E6%9D%82%E6%80%A7\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#%E5%A4%8D%E6%9D%82%E6%80%A7\" rel=\"external nofollow\" target=\"_blank\"></a>复杂性</h3><p>在 API 与设计两方面上 Vue.js 都比 Angular 1 简单得多，因此你可以快速地掌握它的全部特性并投入开发。</p><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#%E7%81%B5%E6%B4%BB%E6%80%A7%E5%92%8C%E6%A8%A1%E5%9D%97%E5%8C%96\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#%E7%81%B5%E6%B4%BB%E6%80%A7%E5%92%8C%E6%A8%A1%E5%9D%97%E5%8C%96\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#%E7%81%B5%E6%B4%BB%E6%80%A7%E5%92%8C%E6%A8%A1%E5%9D%97%E5%8C%96\" rel=\"external nofollow\" target=\"_blank\"></a>灵活性和模块化</h3><p>Vue.js 是一个更加灵活开放的解决方案。它允许你以希望的方式组织应用程序，而不是在任何时候都必须遵循 Angular 1 制定的规则，这让 Vue 能适用于各种项目。我们知道把决定权交给你是非常必要的。这也就是为什么我们提供 <a href=\"https://github.com/vuejs-templates/webpack\" rel=\"external nofollow\" target=\"_blank\">Webpack template</a>，让你可以用几分钟，去选择是否启用高级特性，比如热模块加载、linting、CSS 提取等等。</p><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A\" rel=\"external nofollow\" target=\"_blank\"></a>数据绑定</h3><p>Angular 1 使用双向绑定，Vue 在不同组件间强制使用单向数据流。这使应用中的数据流更加清晰易懂。</p><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#%E6%8C%87%E4%BB%A4%E4%B8%8E%E7%BB%84%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#%E6%8C%87%E4%BB%A4%E4%B8%8E%E7%BB%84%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#%E6%8C%87%E4%BB%A4%E4%B8%8E%E7%BB%84%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a>指令与组件</h3><p>在 Vue 中指令和组件分得更清晰。指令只封装 DOM 操作，而组件代表一个自给自足的独立单元 —— 有自己的视图和数据逻辑。在 Angular 中两者有不少相混的地方。</p><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#%E6%80%A7%E8%83%BD\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#%E6%80%A7%E8%83%BD\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#%E6%80%A7%E8%83%BD\" rel=\"external nofollow\" target=\"_blank\"></a>性能</h3><p>Vue 有更好的性能，并且非常非常容易优化，因为它不使用脏检查。</p><p>在 Angular 1 中，当 watcher 越来越多时会变得越来越慢，因为作用域内的每一次变化，所有 watcher 都要重新计算。并且，如果一些 watcher 触发另一个更新，脏检查循环（digest cycle）可能要运行多次。Angular 用户常常要使用深奥的技术，以解决脏检查循环的问题。有时没有简单的办法来优化有大量 watcher 的作用域。</p><p>Vue 则根本没有这个问题，因为它使用基于依赖追踪的观察系统并且异步队列更新，所有的数据变化都是独立触发，除非它们之间有明确的依赖关系。</p><p>有意思的是，Angular 2 和 Vue 用相似的设计解决了一些 Angular 1 中存在的问题。</p><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#Angular-2\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#Angular-2\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#Angular-2\" rel=\"external nofollow\" target=\"_blank\"></a>Angular 2</h2><p>我们单独将 Augluar 2 作分类，因为它完全是一个全新的框架。例如：它具有优秀的组件系统，并且许多实现已经完全重写，API 也完全改变了。</p><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#TypeScript\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#TypeScript\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#TypeScript\" rel=\"external nofollow\" target=\"_blank\"></a>TypeScript</h3><p>Angular 1 面向的是较小的应用程序，Angular 2 已转移焦点，面向的是大型企业应用。在这一点上 TypeScript 经常会被引用，它对那些喜欢用 Java 或者 C# 等类型安全的语言的人是非常有用的。</p><p>Vue 也十分适合制作<a href=\"https://github.com/vuejs/awesome-vue#enterprise-usage\" rel=\"external nofollow\" target=\"_blank\">企业应用</a>，你也可以通过使用<a href=\"https://github.com/vuejs/vue/tree/dev/types\" rel=\"external nofollow\" target=\"_blank\">官方类型</a>或<a href=\"https://github.com/itsFrank/vue-typescript\" rel=\"external nofollow\" target=\"_blank\">用户贡献的装饰器</a>来支持 TypeScript，这完全是自由可选的。</p><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#%E5%A4%A7%E5%B0%8F%E5%92%8C%E6%80%A7%E8%83%BD\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#%E5%A4%A7%E5%B0%8F%E5%92%8C%E6%80%A7%E8%83%BD\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#%E5%A4%A7%E5%B0%8F%E5%92%8C%E6%80%A7%E8%83%BD\" rel=\"external nofollow\" target=\"_blank\"></a>大小和性能</h3><p>在性能方面，这两个框架都非常的快。但目前尚没有足够的数据用例来具体展示。如果你一定要量化这些数据，你可以查看<a href=\"http://stefankrause.net/js-frameworks-benchmark4/webdriver-ts/table.html\" rel=\"external nofollow\" target=\"_blank\">第三方参照</a>，它表明 Vue 2 相比 Angular2 是更快的。</p><p>在大小方面，虽然 Angular 2 使用 tree-shaking 和离线编译技术使代码体积减小了许多。但包含编译器和全部功能的 Vue2(23kb) 相比 Angular 2(50kb) 还是要小的多。但是要注意，用 Angular 2 的 App 的体积缩减是使用了 tree-shaking 移除了那些框架中没有用到的功能，但随着功能引入的不断增多，尺寸会变得越来越大。</p><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#%E7%81%B5%E6%B4%BB%E6%80%A7\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#%E7%81%B5%E6%B4%BB%E6%80%A7\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#%E7%81%B5%E6%B4%BB%E6%80%A7\" rel=\"external nofollow\" target=\"_blank\"></a>灵活性</h3><p>Vue 相比于 Angular 2 则更加灵活，Vue 官方提供了构建工具来协助你构建项目，但它并不限制你去如何构建。有人可能喜欢用统一的方式来构建，也有很多开发者喜欢这种灵活自由的方式。</p><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#%E5%AD%A6%E4%B9%A0%E6%9B%B2%E7%BA%BF\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#%E5%AD%A6%E4%B9%A0%E6%9B%B2%E7%BA%BF\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#%E5%AD%A6%E4%B9%A0%E6%9B%B2%E7%BA%BF\" rel=\"external nofollow\" target=\"_blank\"></a>学习曲线</h3><p>开始使用 Vue，你使用的是熟悉的 HTML、符合 ES5 规则的 JavaScript（也就是纯 JavaScript）。有了这些基本的技能，你可以快速地掌握它并投入开发 。</p><p>Angular 2 的学习曲线是非常陡峭的。即使不包括 TypeScript，它的<a href=\"https://angular.io/docs/js/latest/quickstart.html\" rel=\"external nofollow\" target=\"_blank\">开始指南</a>中所用的就有 ES2015 标准的 JavaScript，18个 NPM 依赖包，4 个文件和超过 3 千多字的介绍，这一切都是为了完成个 Hello World。而<a href=\"https://jsfiddle.net/chrisvfritz/50wL7mdz/\" rel=\"external nofollow\" target=\"_blank\">Vue’s Hello World</a>就非常简单。甚至我们并不用花费一整个页面去介绍它。</p><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#Ember\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#Ember\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#Ember\" rel=\"external nofollow\" target=\"_blank\"></a>Ember</h2><p>Ember 是一个全能框架。它提供了大量的约定，一旦你熟悉了它们，开发会变得很高效。不过，这也意味着学习曲线较高，而且并不灵活。这意味着在框架和库（加上一系列松散耦合的工具）之间做权衡选择。后者会更自由，但是也要求你做更多架构上的决定。</p><p>也就是说，我们最好比较的是 Vue 内核和 Ember 的模板与数据模型层：</p><ul><li>Vue 在普通 JavaScript 对象上建立响应，提供自动化的计算属性。在 Ember 中需要将所有东西放在 Ember 对象内，并且手工为计算属性声明依赖。</li><li>Vue 的模板语法可以用全功能的 JavaScript 表达式，而 Handlebars 的语法和帮助函数相比来说非常受限。</li><li>在性能上，Vue 甩开 Ember 几条街，即使是 Ember 2.0 的最新 Glimmer 引擎。Vue 能够自动批量更新，而 Ember 在关键性能场景时需要手动管理。</li></ul><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#Knockout\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#Knockout\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#Knockout\" rel=\"external nofollow\" target=\"_blank\"></a>Knockout</h2><p>Knockout 是 MVVM 领域内的先驱，并且追踪依赖。它的响应系统和 Vue 也很相似。它在浏览器支持以及其他方面的表现也是让人印象深刻的。它最低能支持到 IE6，而 Vue 最低只能支持到 IE9。</p><p>随着时间的推移，Knockout 的发展已有所放缓，并且略显有点老旧了。比如，它的组件系统缺少完备的生命周期事件方法，尽管这些在现在是非常常见的。以及相比于 <a href=\"http://doc.vue-js.com/v2/guide/components.html#Content-Distribution-with-Slots\" rel=\"external nofollow\" target=\"_blank\">Vue</a> 调用子组件的接口它的方法显得有点笨重。</p><p>如果你有兴趣研究，你还会发现二者在接口设计的理念上是不同的。这可以通过各自创建的 <a href=\"https://gist.github.com/chrisvfritz/9e5f2d6826af00fcbace7be8f6dccb89\" rel=\"external nofollow\" target=\"_blank\">simple Todo List</a> 体现出来。或许有点主观，但是很多人认为 Vue 的 API 接口更简单结构更优雅。</p><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#Polymer\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#Polymer\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#Polymer\" rel=\"external nofollow\" target=\"_blank\"></a>Polymer</h2><p>Polymer 是另一个由谷歌赞助的项目，事实上也是 Vue 的一个灵感来源。Vue 的组件可以粗略的类比于 Polymer 的自定义元素，并且两者具有相似的开发风格。最大的不同之处在于，Polymer 是基于最新版的 Web Components 标准之上，并且需要重量级的 polyfills 来帮助工作（性能下降），浏览器本身并不支持这些功能。相比而言，Vue 在支持到 IE9 的情况下并不需要依赖 polyfills 来工作，。</p><p>在 Polymer 1.0 版本中，为了弥补性能，团队非常有限的使用数据绑定系统。例如，在 Polymer 中唯一支持的表达式只有布尔值否定和单一的方法调用，它的 computed 方法的实现也并不是很灵活。</p><p>Polymer 自定义的元素是用 HTML 文件来创建的，这会限制使用 JavaScript/CSS（和被现代浏览器普遍支持的语言特性）。相比之下，Vue 的单文件组件允许你非常容易的使用 ES2015 和你想用的 CSS 预编译处理器。</p><p>在部署生产环境时，Polymer 建议使用 HTML Imports 加载所有资源。而这要求服务器和客户端都支持 Http 2.0 协议，并且浏览器实现了此标准。这是否可行就取决于你的目标用户和部署环境了。如果状况不佳，你必须用 Vulcanizer 工具来打包 Polymer 元素。而在这方面，Vue 可以结合异步组件的特性和 Webpack 的代码分割特性来实现懒加载（lazy-loaded）。这同时确保了对旧浏览器的兼容且又能更快加载。</p><p>而 Vue 和 Web Component 标准进行深层次的整合也是完全可行的，比如使用 Custom Elements、Shadow DOM 的样式封装。然而在我们做出严肃的实现承诺之前，我们目前仍在等待相关标准成熟，进而再广泛应用于主流的浏览器中。</p><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#Riot\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#Riot\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/comparison.html#Riot\" rel=\"external nofollow\" target=\"_blank\"></a>Riot</h2><p>Riot 2.0 提供了一个类似于基于组件的开发模型（在 Riot 中称之为 Tag），它提供了小巧精美的 API。Riot 和 Vue 在设计理念上可能有许多相似处。尽管相比 Riot ，Vue 要显得重一点，Vue 还是有很多显著优势的：</p><ul><li>根据真实条件来渲染，Riot 根据是否有分支简单显示或隐藏所有内容。</li><li>功能更加强大的路由机制，Riot 的路由功能的 API 是极少的。</li><li>更多成熟工具的支持。Vue 提供官方支持<a href=\"https://github.com/vuejs/vue-loader\" rel=\"external nofollow\" target=\"_blank\">Webpack</a>、<a href=\"https://github.com/vuejs/vueify\" rel=\"external nofollow\" target=\"_blank\">Browserify</a>和<a href=\"https://github.com/vuejs/systemjs-plugin-vue\" rel=\"external nofollow\" target=\"_blank\">SystemJS</a>，而 Riot 是依靠社区来建立集成系统。</li><li><a href=\"https://www.w3cschool.cn/vuejs2/transitions.html\" target=\"_blank\">过渡效果系统</a>。Riot 现在还没有提供。</li><li>更好的性能。Riot <a href=\"https://github.com/vuejs/vuejs.org/issues/346\" rel=\"external nofollow\" target=\"_blank\">尽管声称</a>其使用了虚拟 DOM，但实际上用的还是脏检查机制，因此和 Angular 1 患有相同的性能问题。</li></ul></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "Vue.js 2.0 教程",
      "teach_introduction": "Vue.js 2.0 版本，是目前主流的版本。",
      "sort_index": 13,
      "parent_sort_index": 2,
      "chapter_level_one_id": "e8fb10237b03499ebdc00cd95024fcfb",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "Vue.js 2.0 进阶教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "c1f9cf9c48d2211879d50cffd626bf68",
      "chapter_level_two_parent_id": "e8fb10237b03499ebdc00cd95024fcfb",
      "chapter_level_two_name": "服务端渲染",
      "chapter_level_two_url": "/vuejs2/ssr.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2><span style=\"font-family:inherit;\">Vue.js 2.0 </span>服务端渲染</h2><h2>需要服务端渲染（SSR）吗？</h2><p>在开始服务端渲染前，我们先看看它能给我们带来什么，以及什么时候需要用它。</p><h3>SEO（搜索引擎优化）</h3><p>谷歌和Bing可以很好地索引同步的JavaScript应用。同步在这里是个关键词。如果应用启动时有一个加载动画，然后内容通过ajax获取，那爬虫不会等待他们加载完成。</p><p>这意味着在异步获取内容的页面上很需要进行搜索引擎优化的时候，服务端渲染就很重要。</p><a href=\"http://doc.vue-js.com/v2/guide/ssr.html#%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%9A%84%E7%BD%91%E7%BB%9C%E6%AF%94%E8%BE%83%E6%85%A2\" rel=\"external nofollow\" target=\"_blank\"></a><h3>客户端的网络比较慢</h3><p>用户可能在网络比较慢的情况下从远处访问网站 - 或者通过比较差的带宽。这些情况下，尽量减少页面请求数量，来保证用户尽快看到基本的内容。</p><p>可以用Webpack的代码拆分避免强制用户下载整个单页面应用，但是，这样也远没有下载个单独的预先渲染过的HTML文件性能高。</p><a href=\"http://doc.vue-js.com/v2/guide/ssr.html#%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%BF%90%E8%A1%8C%E5%9C%A8%E8%80%81%E7%9A%84-%E6%88%96%E8%80%85%E7%9B%B4%E6%8E%A5%E6%B2%A1%E6%9C%89-JavaScript%E5%BC%95%E6%93%8E%E4%B8%8A\" rel=\"external nofollow\" target=\"_blank\"></a><h3>客户端运行在老的(或者直接没有)JavaScript引擎上</h3><p>对于世界上的一些地区人，可能只能用1998年产的电脑访问互联网的方式使用计算机。而Vue只能运行在IE9以上的浏览器，你可以也想为那些老式浏览器提供基础内容 - 或者是在命令行中使用 <a href=\"http://lynx.browser.org/\" rel=\"external nofollow\" target=\"_blank\">Lynx</a>的时髦的黑客。</p><a href=\"http://doc.vue-js.com/v2/guide/ssr.html#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93-%E5%AF%B9%E6%AF%94-%E9%A2%84%E6%B8%B2%E6%9F%93-Prerendering\" rel=\"external nofollow\" target=\"_blank\"></a><h3>服务端渲染 对比 预渲染(Prerendering)</h3><p>如果你只是用服务端渲染来改善一个少数的营销页面（如 首页，关于，联系 等等）的SEO，那你可以用<strong>预渲染</strong>替换。预渲染不像服务器渲染那样即时编译HTML,预渲染只是在构建时为了特定的路由生成特定的几个静态页面。其优势是预渲染的设置更加简单，可以保持前端是一个完整的静态站。</p><p>你用webpack可以很简单地通过<a href=\"https://github.com/chrisvfritz/prerender-spa-plugin\" rel=\"external nofollow\" target=\"_blank\">prerender-spa-plugin</a>来添加预渲染，它被广泛地用在Vue应用上 - 事实上，创建者也是Vue核心团队成员之一。</p><a href=\"http://doc.vue-js.com/v2/guide/ssr.html#Hello-World\" rel=\"external nofollow\" target=\"_blank\"></a><h2>Hello World</h2><p>准备在行动中体验服务端渲染吧。服务端渲染(即SSR)听起来很复杂，不过一个简单的Node脚本只需要3步就可以实现这个功能：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">// 步骤 1:创建一个Vue实例\nvar Vue = require('vue')\nvar app = new Vue({\n  render: function (h) {\n    return h('p', 'hello world')\n  }\n})\n// 步骤 2: 创建一个渲染器\nvar renderer = require('vue-server-renderer').createRenderer()\n// 步骤 3: 将 Vue实例 渲染成 HTML\nrenderer.renderToString(app, function (error, html) {\n  if (error) throw error\n  console.log(html)\n  // =&gt; &lt;p server-rendered=\"true\"&gt;hello world&lt;/p&gt;\n})</code></pre><p>这并不困难。当然这个示例比大部分应用都简单。我们不必担心：</p><ul>    <li>一个Web服务器</li>    <li>流式响应</li>    <li>组件缓存</li>    <li>构建过程</li>    <li>路由</li>    <li>Vuex状态管理</li></ul><p>这个指南的其余部分，我们将探讨这些功能怎样运作。一旦你理解了基础，我们会提供更多细节和进一步的示例来帮助你解决意外情况。</p><a href=\"http://doc.vue-js.com/v2/guide/ssr.html#%E9%80%9A%E8%BF%87Express-Web%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93\" rel=\"external nofollow\" target=\"_blank\"></a><h2>通过Express Web服务器实现简单的服务端渲染</h2><p>如果没有一个Web服务器，很难说是服务端渲染，所以我们来补充它。我们将构建一个非常简单的服务端渲染应用，只用ES5，也不带其他构建步骤或Vue插件。</p><p>启动一个应用告诉用户他们在一个页面上花了多少时间。</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">new Vue({\n  template: '&lt;div&gt;你已经在这花了 {{ counter }} 秒。&lt;/div&gt;',\n  data: {\n    counter: 0\n  },\n  created: function () {\n    var vm = this\n    setInterval(function () {\n      vm.counter += 1\n    }, 1000)\n  }\n})</code></pre><p>为了适应服务端渲染，我们需要进行一些修改，让它可以在浏览器和Node中渲染：</p><ul>    <li>在浏览器中，将我们的应用实例添加到全局上下文（ window）上,我们可以安装它。</li>    <li>在Node中，导出一个工厂函数让我们可以为每个请求创建应用实例。</li></ul><p>实现这个需要一点模板：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">// assets/app.js\n(function () { 'use strict'\n  var createApp = function () {\n    // ---------------------\n    // 开始常用的应用代码\n    // ---------------------\n    // 主要的Vue实例必须返回，并且有一个根节点在id \"app\"上，这样客户端可以加载它。\n    return new Vue({\n      template: '&lt;div id=\"app\"&gt;你已经在这花了 {{ counter }} 秒。&lt;/div&gt;',\n      data: {\n        counter: 0\n      },\n      created: function () {\n        var vm = this\n        setInterval(function () {\n          vm.counter += 1\n        }, 1000)\n      }\n    })\n    // -------------------\n    // 结束常用的应用代码\n    // -------------------\n  }\n  if (typeof module !== 'undefined' &amp;&amp; module.exports) {\n    module.exports = createApp\n  } else {\n    this.app = createApp()\n  }\n}).call(this)</code></pre><p>现在有了应用代码，接着加一个 html文件。</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;!-- index.html --&gt;\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;My Vue App&lt;/title&gt;\n  &lt;script src=\"/assets/vue.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div id=\"app\"&gt;&lt;/div&gt;\n  &lt;script src=\"/assets/app.js\"&gt;&lt;/script&gt;\n  &lt;script&gt;app.$mount('#app')&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre><p>主要引用assets文件夹中我们先前创建的app.js，以及vue.js文件，我们就有了一个可以运行的单页面应用</p><p>然后为了实现服务端渲染，在服务端需要加一个步骤。</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">// server.js\n'use strict'\nvar fs = require('fs')\nvar path = require('path')\n// 定义全局的Vue为了服务端的app.js\nglobal.Vue = require('vue')\n// 获取HTML布局\nvar layout = fs.readFileSync('./index.html', 'utf8')\n// 创建一个渲染器\nvar renderer = require('vue-server-renderer').createRenderer()\n// 创建一个Express服务器\nvar express = require('express')\nvar server = express()\n// 部署静态文件夹为 \"assets\"文件夹\nserver.use('/assets', express.static(\n  path.resolve(__dirname, 'assets')\n))\n// 处理所有的Get请求\nserver.get('*', function (request, response) {\n  // 渲染我们的Vue应用为一个字符串\n  renderer.renderToString(\n    // 创建一个应用实例\n    require('./assets/app')(),\n    // 处理渲染结果\n    function (error, html) {\n      // 如果渲染时发生了错误\n      if (error) {\n        // 打印错误到控制台\n        console.error(error)\n        // 告诉客户端错误\n        return response\n          .status(500)\n          .send('Server Error')\n      }\n      // 发送布局和HTML文件\n      response.send(layout.replace('&lt;div id=\"app\"&gt;&lt;/div&gt;', html))\n    }\n  )\n})\n// 监听5000端口\nserver.listen(5000, function (error) {\n  if (error) throw error\n  console.log('Server is running at localhost:5000')\n})</code></pre><p>这样就完成了。<a href=\"https://github.com/chrisvfritz/vue-ssr-demo-simple\" rel=\"external nofollow\" target=\"_blank\">整个示例</a>，克隆下来深度实验。一旦它在本地运行时，你可以通过在页面右击选择页面资源（或类似操作）确认服务选渲染真的运行了。可以在body中看到：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;div id=\"app\" server-rendered=\"true\"&gt;You have been here for 0 seconds.&lt;/div&gt;</code></pre><p>代替：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;div id=\"app\"&gt;&lt;/div&gt;</code></pre><a href=\"http://doc.vue-js.com/v2/guide/ssr.html#%E6%B5%81%E5%BC%8F%E5%93%8D%E5%BA%94\" rel=\"external nofollow\" target=\"_blank\"></a><h2>流式响应</h2><p>Vue还支持<strong>流式</strong>渲染，优先选择适用于支持流的Web服务器。允许HTML一边生成一般写入相应流，而不是在最后一次全部写入。其结果是请求服务速度更快，没有缺点！</p><p>为了使上一节应用代码适用流式渲染，可以简单的替换 server.get('*',...)为下面的代码：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">// 拆分布局成两段HTML\nvar layoutSections = layout.split('&lt;div id=\"app\"&gt;&lt;/div&gt;')\nvar preAppHTML = layoutSections[0]\nvar postAppHTML = layoutSections[1]\n// 处理所有的Get请求\nserver.get('*', function (request, response) {\n  // 渲染我们的Vue实例作为流\n  var stream = renderer.renderToStream(require('./assets/app')())\n  // 将预先的HTML写入响应\n  response.write(preAppHTML)\n  // 每当新的块被渲染\n  stream.on('data', function (chunk) {\n    // 将块写入响应\n    response.write(chunk)\n  })\n  // 当所有的块被渲染完成\n  stream.on('end', function () {\n    // 将post-app HTML写入响应\n    response.end(postAppHTML)\n  })\n  // 当渲染时发生错误\n  stream.on('error', function (error) {\n    // 打印错误到控制台\n    console.error(error)\n    // 告诉客服端发生了错误\n    return response\n      .status(500)\n      .send('Server Error')\n  })\n})</code></pre><p>这不比之前的版本复杂，甚至这对你来说都不是个新概念。我们做了：</p><ol>    <li>建立流</li>    <li>在应用响应前写入HTML</li>    <li>在可获得时将应用HTML写入响应</li>    <li>在响应最后写入HTML</li>    <li>处理任何错误</li></ol><a href=\"http://doc.vue-js.com/v2/guide/ssr.html#%E7%BB%84%E4%BB%B6%E7%BC%93%E5%AD%98\" rel=\"external nofollow\" target=\"_blank\"></a><h2>组件缓存</h2><p>Vue的服务端渲染默认非常快，但是你可以通过缓存渲染好的组件进一步提高性能。这被认为是一种先进的功能，但是，如果缓存了错误的组件（或者正确的组件带有错误的内容）将导致应用渲染出错。特别注意：</p><blockquote><p>不应该缓存组件包含子组件依赖全局状态（例如来自vuex的状态）。如果这么做，子组件（事实上是整个子树）也会被缓存。所以要特别注意带有slots片段或者子组件的情况。</p></blockquote><a href=\"http://doc.vue-js.com/v2/guide/ssr.html#%E8%AE%BE%E7%BD%AE\" rel=\"external nofollow\" target=\"_blank\"></a><h3>设置</h3><p>在警告情况之外的，我们可以用下面的方法缓存组件。</p><p>首先，你需要提供给渲染器一个 <a href=\"https://www.npmjs.com/package/vue-server-renderer#cache\" rel=\"external nofollow\" target=\"_blank\">缓存对象</a>。这有个简单的示例使用 <a href=\"https://github.com/isaacs/node-lru-cache\" rel=\"external nofollow\" target=\"_blank\">lru-cache</a></p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">var createRenderer = require('vue-server-renderer').createRenderer\nvar lru = require('lru-cache')\nvar renderer = createRenderer({\n  cache: lru(1000)\n})</code></pre><p>这将缓存高达1000个独立的渲染。对于更进一步缓存到内容中的配置，看<a href=\"https://github.com/isaacs/node-lru-cache#options\" rel=\"external nofollow\" target=\"_blank\">lru-cache设置</a></p><p>然后对于你想缓存的组件，你可以为他们提供：</p><ul>    <li>一个唯一的名字</li>    <li>一个 serverCacheKey函数，返回一个唯一的组件作用域</li></ul><p>例如：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">Vue.component({\n  name: 'list-item',\n  template: '&lt;li&gt;{{ item.name }}&lt;/li&gt;',\n  props: ['item'],\n  serverCacheKey: function (props) {\n    return props.item.type + '::' + props.item.id\n  }\n})</code></pre><a href=\"http://doc.vue-js.com/v2/guide/ssr.html#%E7%BC%93%E5%AD%98%E7%9A%84%E7%90%86%E6%83%B3%E7%BB%84%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a><h3>缓存的理想组件</h3><p>任何纯组件可以被安全缓存 - 这是保证给任何组件传递一样的数据产生相同的HTML。这些场景的例子包括：</p><ul>    <li>静态的组件 (例如 总是尝试一样的HTML,所以 serverCacheKey 函数可以被返回 true)</li>    <li>列表组件（当有大量列表，缓存他们可以改善性能）</li>    <li>通用UI组件 (例如 buttons, alerts, 等等 - 至少他们通过props获取数据而不是 slots或者子组件)</li></ul><a href=\"http://doc.vue-js.com/v2/guide/ssr.html#%E6%9E%84%E5%BB%BA%E8%BF%87%E7%A8%8B%EF%BC%8C%E8%B7%AF%E7%94%B1%EF%BC%8C%E5%92%8CVuex%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86\" rel=\"external nofollow\" target=\"_blank\"></a><h2>构建过程，路由，和Vuex状态管理</h2><p>现在，应该理解服务端渲染背后的基本概念了。但是，构建过程、路由、Vuex每一个都有自己的注意事项。</p><p>要真正掌握复杂应用下的服务端渲染，我们推荐深度熟悉以下资源：</p><ul>    <li><a href=\"https://www.npmjs.com/package/vue-server-renderer#api\" rel=\"external nofollow\" target=\"_blank\">vue-server-renderer 文档</a>:更多细节在这里，和更多先进的主题一起的文档。 例如 <a href=\"https://www.npmjs.com/package/vue-server-renderer#why-use-bundlerenderer\" rel=\"external nofollow\" target=\"_blank\">preventing cross-request contamination</a> 和         <a href=\"https://www.npmjs.com/package/vue-server-renderer#creating-the-server-bundle\" rel=\"external nofollow\" target=\"_blank\">添加独立的服务构建</a>    </li>    <li><a href=\"https://github.com/vuejs/vue-hackernews-2.0\" rel=\"external nofollow\" target=\"_blank\">vue-hackernews-2.0</a>: 明确整合了 所有主要的Vue库和概念在单个应用中</li></ul></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "Vue.js 2.0 教程",
      "teach_introduction": "Vue.js 2.0 版本，是目前主流的版本。",
      "sort_index": 12,
      "parent_sort_index": 2,
      "chapter_level_one_id": "e8fb10237b03499ebdc00cd95024fcfb",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "Vue.js 2.0 进阶教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "7dadfcd0f7ad80b0148b8684ed4619ca",
      "chapter_level_two_parent_id": "e8fb10237b03499ebdc00cd95024fcfb",
      "chapter_level_two_name": "单元测试",
      "chapter_level_two_url": "/vuejs2/unit-testing.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2><span style=\"font-family:inherit;\">Vue.js 2.0 </span>单元测试</h2><a href=\"http://doc.vue-js.com/v2/guide/unit-testing.html#%E9%85%8D%E7%BD%AE%E5%92%8C%E5%B7%A5%E5%85%B7\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/unit-testing.html#%E9%85%8D%E7%BD%AE%E5%92%8C%E5%B7%A5%E5%85%B7\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/unit-testing.html#%E9%85%8D%E7%BD%AE%E5%92%8C%E5%B7%A5%E5%85%B7\" rel=\"external nofollow\" target=\"_blank\"></a>配置和工具</h2><p>任何兼容基于模块的构建系统都可以正常使用，但如果你需要一个具体的建议，可以使用 <a href=\"http://karma-runner.github.io/\" rel=\"external nofollow\" target=\"_blank\">Karma</a> 进行自动化测试。它有很多社区版的插件，包括对 <a href=\"https://github.com/webpack/karma-webpack\" rel=\"external nofollow\" target=\"_blank\">Webpack</a> 和 <a href=\"https://github.com/Nikku/karma-browserify\" rel=\"external nofollow\" target=\"_blank\">Browserify</a> 的支持。更多详细的安装步骤，请参考各项目的安装文档，通过这些 Karma 配置的例子可以快速帮助你上手（<a href=\"https://github.com/vuejs-templates/webpack/blob/master/template/test/unit/karma.conf.js\" rel=\"external nofollow\" target=\"_blank\">Webpack</a> 配置，<a href=\"https://github.com/vuejs-templates/browserify/blob/master/template/karma.conf.js\" rel=\"external nofollow\" target=\"_blank\">Browserify</a> 配置）。</p><a href=\"http://doc.vue-js.com/v2/guide/unit-testing.html#%E7%AE%80%E5%8D%95%E7%9A%84%E6%96%AD%E8%A8%80\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/unit-testing.html#%E7%AE%80%E5%8D%95%E7%9A%84%E6%96%AD%E8%A8%80\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/unit-testing.html#%E7%AE%80%E5%8D%95%E7%9A%84%E6%96%AD%E8%A8%80\" rel=\"external nofollow\" target=\"_blank\"></a>简单的断言</h2><p>在测试的代码结构方面，你不必为了可测试在你的组件中做任何特殊的操作。只要导出原始设置就可以了：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;template&gt;\n  &lt;span&gt;{{ message }}&lt;/span&gt;\n&lt;/template&gt;\n&lt;script&gt;\n  export default {\n    data () {\n      return {\n        message: 'hello!'\n      }\n    },\n    created () {\n      this.message = 'bye!'\n    }\n  }\n&lt;/script&gt;</code></pre><p>当测试的组件时，所要做的就是导入对象和 Vue 然后使用许多常见的断言：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">// 导入 Vue.js 和组件，进行测试\nimport Vue from 'vue'\nimport MyComponent from 'path/to/MyComponent.vue'\n// 这里是一些 Jasmine 2.0 的测试，你也可以使用你喜欢的任何断言库或测试工具。\ndescribe('MyComponent', () =&gt; {\n  // 检查原始组件选项\n  it('has a created hook', () =&gt; {\n    expect(typeof MyComponent.created).toBe('function')\n  })\n  // 评估原始组件选项中的函数的结果\n  it('sets the correct default data', () =&gt; {\n    expect(typeof MyComponent.data).toBe('function')\n    const defaultData = MyComponent.data()\n    expect(defaultData.message).toBe('hello!')\n  })\n  // 检查mount中的组件实例\n  it('correctly sets the message when created', () =&gt; {\n    const vm = new Vue(MyComponent).$mount()\n    expect(vm.message).toBe('bye!')\n  })\n  // 创建一个实例并检查渲染输出\n  it('renders the correct message', () =&gt; {\n    const Ctor = Vue.extend(MyComponent)\n    const vm = new Ctor().$mount()\n    expect(vm.$el.textContent).toBe('bye!')\n  })\n})</code></pre><a href=\"http://doc.vue-js.com/v2/guide/unit-testing.html#%E7%BC%96%E5%86%99%E5%8F%AF%E8%A2%AB%E6%B5%8B%E8%AF%95%E7%9A%84%E7%BB%84%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/unit-testing.html#%E7%BC%96%E5%86%99%E5%8F%AF%E8%A2%AB%E6%B5%8B%E8%AF%95%E7%9A%84%E7%BB%84%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/unit-testing.html#%E7%BC%96%E5%86%99%E5%8F%AF%E8%A2%AB%E6%B5%8B%E8%AF%95%E7%9A%84%E7%BB%84%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a>编写可被测试的组件</h2><p>很多组件的渲染输出由它的 props 决定。事实上，如果一个组件的渲染输出完全取决于它的 props，那么它会让测试变得简单，就好像断言不同参数的纯函数的返回值。看下面这个例子：</p><pre lang=\"html\" style=\"max-width: 100%;\"><code class=\"html\">&lt;template&gt;\n  &lt;p&gt;{{ msg }}&lt;/p&gt;\n&lt;/template&gt;\n&lt;script&gt;\n  export default {\n    props: ['msg']\n  }\n&lt;/script&gt;</code></pre><p>你可以在不同的 props 中，通过 propsData 选项断言它的渲染输出：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">import Vue from 'vue'\nimport MyComponent from './MyComponent.vue'\n// 挂载元素并返回已渲染的文本的工具函数 \nfunction getRenderedText (Component, propsData) {\n  const Ctor = Vue.extend(Component)\n  const vm = new Ctor({ propsData }).$mount()\n  return vm.$el.textContent\n}\ndescribe('MyComponent', () =&gt; {\n  it('render correctly with different props', () =&gt; {\n    expect(getRenderedText(MyComponent, {\n      msg: 'Hello'\n    })).toBe('Hello')\n    expect(getRenderedText(MyComponent, {\n      msg: 'Bye'\n    })).toBe('Bye')\n  })\n})</code></pre><a href=\"http://doc.vue-js.com/v2/guide/unit-testing.html#%E6%96%AD%E8%A8%80%E5%BC%82%E6%AD%A5%E6%9B%B4%E6%96%B0\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/unit-testing.html#%E6%96%AD%E8%A8%80%E5%BC%82%E6%AD%A5%E6%9B%B4%E6%96%B0\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/unit-testing.html#%E6%96%AD%E8%A8%80%E5%BC%82%E6%AD%A5%E6%9B%B4%E6%96%B0\" rel=\"external nofollow\" target=\"_blank\"></a>断言异步更新</h2><p>由于 Vue 进行<a href=\"https://www.w3cschool.cn/vuejs2/reactivity.html\" target=\"_blank\">异步更新DOM</a>的情况，一些依赖DOM更新结果的断言必须在 Vue.nextTick回调中进行：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">// 在状态更新后检查生成的 HTML\nit('updates the rendered message when vm.message updates', done =&gt; {\n  const vm = new Vue(MyComponent).$mount()\n  vm.message = 'foo'\n  // 在状态改变后和断言 DOM 更新前等待一刻\n  Vue.nextTick(() =&gt; {\n    expect(vm.$el.textContent).toBe('foo')\n    done()\n  })\n})</code></pre><p>我们计划做一个通用的测试工具集，让不同策略的渲染输出（例如忽略子组件的基本渲染）和断言变得更简单。</p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "Vue.js 2.0 教程",
      "teach_introduction": "Vue.js 2.0 版本，是目前主流的版本。",
      "sort_index": 11,
      "parent_sort_index": 2,
      "chapter_level_one_id": "e8fb10237b03499ebdc00cd95024fcfb",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "Vue.js 2.0 进阶教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "caee50760c345b84134dd6065ae58d2f",
      "chapter_level_two_parent_id": "e8fb10237b03499ebdc00cd95024fcfb",
      "chapter_level_two_name": "状态管理",
      "chapter_level_two_url": "/vuejs2/state-management.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>Vue.js 2.0 状态管理</h2><h2>类 Flux 状态管理的官方实现</h2><p>由于多个状态分散的跨越在许多组件和交互间各个角落，大型应用复杂度也经常逐渐增长。为了解决这个问题，Vue 提供 <a href=\"https://github.com/vuejs/vuex\" rel=\"external nofollow\" target=\"_blank\">vuex</a>： 我们有受到 Elm 启发的状态管理库。vuex 甚至集成到 <a href=\"https://github.com/vuejs/vue-devtools\" rel=\"external nofollow\" target=\"_blank\">vue-devtools</a>，无需配置即可访问时光旅行。</p>     <h3>React 的开发者请参考以下信息</h3>    <p>如果你是来自 React 的开发者，你可能会对 vuex 和 <a href=\"https://github.com/reactjs/redux\" rel=\"external nofollow\" target=\"_blank\">redux</a> 间的差异表示关注，redux 是 React 生态环境中最流行的 Flux 实现。Redux 事实上无法感知视图层，所以它能够轻松的通过一些<a href=\"https://github.com/egoist/revue\" rel=\"external nofollow\" target=\"_blank\">简单绑定</a>和Vue一起使用。vuex区别在于它是一个专门为        vue 应用所设计。这使得它能够更好地和vue进行整合，同时提供简洁的API和改善过的开发体验。</p>         <h2>简单状态管理起步使用</h2>    <p>经常被忽略的是，Vue 应用中原始 data 对象的实际来源 - 当访问数据对象时，一个 Vue 实例只是简单的代理访问。所以，如果你有一处需要被多个实例间共享的状态，可以简单地通过维护一份数据来实现共享：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">const sourceOfTruth = {}\nconst vmA = new Vue({\n  data: sourceOfTruth\n})\nconst vmB = new Vue({\n  data: sourceOfTruth\n})</code></pre>    <p>现在当 sourceOfTruth 发生变化，vmA 和 vmB 都将自动的更新引用它们的视图。子组件们的每个实例也会通过 this.$root.$data 去访问。现在我们有了唯一的实际来源，但是，调试将会变为噩梦。任何时间，我们应用中的任何部分，在任何数据改变后，都不会留下变更过的记录。</p>    <p>为了解决这个问题，我们采用一个简单的<strong> store 模式</strong>：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">var store = {\n  debug: true,\n  state: {\n    message: 'Hello!'\n  },\n  setMessageAction (newValue) {\n    this.debug &amp;&amp; console.log('setMessageAction triggered with', newValue)\n    this.state.message = newValue\n  },\n  clearMessageAction () {\n    this.debug &amp;&amp; console.log('clearMessageAction triggered')\n    this.state.message = 'action B triggered'\n  }\n}</code></pre><p>需要注意，所有 store 中 state 的改变，都放置在 store 自身的 action 中去管理。这种集中式状态管理能够被更容易地理解哪种类型的 mutation 将会发生，以及它们是如何被触发。当错误出现时，我们现在也会有一个 log 记录 bug 之前发生了什么。</p>    <p>此外，每个实例/组件仍然可以拥有和管理自己的私有状态：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">var vmA = new Vue({\n  data: {\n    privateState: {},\n    sharedState: store.state\n  }\n})\nvar vmB = new Vue({\n  data: {\n    privateState: {},\n    sharedState: store.state\n  }\n})</code></pre>        <p style=\"text-align: center; \">        <img src=\"//atts.w3cschool.cn/attachments/day_190318/201903181422316283.png\" alt=\"状态管理\" style=\"width: 451px; height: 465px;\"></p>    <blockquote><p>重要的是，注意你不应该在 action 中 替换原始的状态对象 - 组件和 store 需要引用同一个共享对象，mutation 才能够被观察。</p></blockquote>    <p>接着我们继续延伸约定，组件不允许直接修改属于 store 实例的 state，而应执行 action 来分发 (dispatch) 事件通知 store 去改变，我们最终达成了 <a href=\"https://facebook.github.io/flux/\" rel=\"external nofollow\" target=\"_blank\">Flux</a> 架构。这样约定的好处是，我们能够记录所有 store 中发生的 state 改变，同时实现能做到记录变更 (mutation) 、保存状态快照、历史回滚/时光旅行的先进的调试工具。</p>    <p>说了一圈其实又回到了<a href=\"https://github.com/vuejs/vuex\" rel=\"external nofollow\" target=\"_blank\">vuex</a> ，如果你已经读到这儿，或许可以去尝试一下！</p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "Vue.js 2.0 教程",
      "teach_introduction": "Vue.js 2.0 版本，是目前主流的版本。",
      "sort_index": 10,
      "parent_sort_index": 2,
      "chapter_level_one_id": "e8fb10237b03499ebdc00cd95024fcfb",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "Vue.js 2.0 进阶教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "031e0c3f6f0b6786e53a414696196d53",
      "chapter_level_two_parent_id": "e8fb10237b03499ebdc00cd95024fcfb",
      "chapter_level_two_name": "路由",
      "chapter_level_two_url": "/vuejs2/routing.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>Vue.js 2.0 <span style=\"font-family:inherit;font-size:16px;\">官方路由</span></h2><p>对于大多数单页面应用，都推荐使用官方支持的<a href=\"https://github.com/vuejs/vue-router\" rel=\"external nofollow\" target=\"_blank\">vue-router库</a>。更多细节可以看vue-router文档。</p><a href=\"http://doc.vue-js.com/v2/guide/routing.html#%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%AE%80%E5%8D%95%E7%9A%84%E8%B7%AF%E7%94%B1\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/routing.html#%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%AE%80%E5%8D%95%E7%9A%84%E8%B7%AF%E7%94%B1\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/routing.html#%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E7%AE%80%E5%8D%95%E7%9A%84%E8%B7%AF%E7%94%B1\" rel=\"external nofollow\" target=\"_blank\"></a>从零开始简单的路由</h2><p>如果只需要非常简单的路由而不需要引入整个路由库，可以动态渲染一个页面级的组件像这样：</p><pre lang=\"javascript\"><code class=\"javascript\">const NotFound = { template: '&lt;p&gt;Page not found&lt;/p&gt;' }\nconst Home = { template: '&lt;p&gt;home page&lt;/p&gt;' }\nconst About = { template: '&lt;p&gt;about page&lt;/p&gt;' }\nconst routes = {\n  '/': Home,\n  '/about': About\n}\nnew Vue({\n  el: '#app',\n  data: {\n    currentRoute: window.location.pathname\n  },\n  computed: {\n    ViewComponent () {\n      return routes[this.currentRoute] || NotFound\n    }\n  },\n  render (h) { return h(this.ViewComponent) }\n})</code></pre><p>结合HTML5 History API，你可以建立一个非常基本但功能齐全的客户端路由器。可以直接看<a href=\"https://github.com/chrisvfritz/vue-2.0-simple-routing-example\" rel=\"external nofollow\" target=\"_blank\">实例应用</a>。</p><a href=\"http://doc.vue-js.com/v2/guide/routing.html#%E6%95%B4%E5%90%88%E7%AC%AC%E4%B8%89%E6%96%B9%E8%B7%AF%E7%94%B1\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/routing.html#%E6%95%B4%E5%90%88%E7%AC%AC%E4%B8%89%E6%96%B9%E8%B7%AF%E7%94%B1\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/routing.html#%E6%95%B4%E5%90%88%E7%AC%AC%E4%B8%89%E6%96%B9%E8%B7%AF%E7%94%B1\" rel=\"external nofollow\" target=\"_blank\"></a>整合第三方路由</h2><p>如果有非常喜欢的第三方路由，如<a href=\"https://github.com/visionmedia/page.js\" rel=\"external nofollow\" target=\"_blank\">Page.js</a>或者 <a href=\"https://github.com/flatiron/director\" rel=\"external nofollow\" target=\"_blank\">Director</a>, 整合<a href=\"https://github.com/chrisvfritz/vue-2.0-simple-routing-example/compare/master...pagejs\" rel=\"external nofollow\" target=\"_blank\">很简单</a>。 这有个用了Page.js的<a href=\"https://github.com/chrisvfritz/vue-2.0-simple-routing-example/tree/pagejs\" rel=\"external nofollow\" target=\"_blank\">复杂示例</a>。</p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "Vue.js 2.0 教程",
      "teach_introduction": "Vue.js 2.0 版本，是目前主流的版本。",
      "sort_index": 9,
      "parent_sort_index": 2,
      "chapter_level_one_id": "e8fb10237b03499ebdc00cd95024fcfb",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "Vue.js 2.0 进阶教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "64007f3e60ae67d9ac9e1335ad9fccc4",
      "chapter_level_two_parent_id": "e8fb10237b03499ebdc00cd95024fcfb",
      "chapter_level_two_name": "生产环境部署",
      "chapter_level_two_url": "/vuejs2/deployment.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>Vue.js 2.0 生产环境部署</h2><h2><a href=\"http://doc.vue-js.com/v2/guide/deployment.html#%E5%88%A0%E9%99%A4%E8%AD%A6%E5%91%8A\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/deployment.html#%E5%88%A0%E9%99%A4%E8%AD%A6%E5%91%8A\" rel=\"external nofollow\" target=\"_blank\"></a>删除警告</h2><p>为了减少文件大小，Vue 精简独立版本已经删除了所有警告，但是当你使用 Webpack 或 Browserify 等工具时，你需要一些额外的配置实现这点。</p><h3><a href=\"http://doc.vue-js.com/v2/guide/deployment.html#Webpack\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/deployment.html#Webpack\" rel=\"external nofollow\" target=\"_blank\"></a>Webpack</h3><p>使用 Webpack 的 DefinePlugin 来指定生产环境，以便在压缩时可以让 UglifyJS 自动删除代码块内的警告语句。例如配置：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">var webpack = require('webpack')\nmodule.exports = {\n  // ...\n  plugins: [\n    // ...\n    new webpack.DefinePlugin({\n      'process.env': {\n        NODE_ENV: '\"production\"'\n      }\n    }),\n    new webpack.optimize.UglifyJsPlugin({\n      compress: {\n        warnings: false\n      }\n    })\n  ]\n}</code></pre><h3><a href=\"http://doc.vue-js.com/v2/guide/deployment.html#Browserify\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/deployment.html#Browserify\" rel=\"external nofollow\" target=\"_blank\"></a>Browserify</h3><ul>    <li>运行打包命令，设置 NODE_ENV 为 \"production\"。等于告诉 vueify 避免引入热重载和开发相关代码。</li>    <li>使用一个全局 <a href=\"https://github.com/hughsk/envify\" rel=\"external nofollow\" target=\"_blank\">envify</a> 转换你的 bundle 文件。这可以精简掉包含在 Vue 源码中所有环境变量条件相关代码块内的警告语句。例如：<pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">NODE_ENV=production browserify -g envify -e main.js | uglifyjs -c -m &gt; build.js</code></pre></li></ul><ul>    <li>使用 vueify 中包含的 extract-css 插件，提取样式到单独的css文件。<pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">NODE_ENV=production browserify -g envify -p [ vueify/plugins/extract-css -o build.css ] -e main.js | uglifyjs -c -m &gt; build.js</code></pre></li></ul><h2><a href=\"http://doc.vue-js.com/v2/guide/deployment.html#%E8%B7%9F%E8%B8%AA%E8%BF%90%E8%A1%8C%E6%97%B6%E9%94%99%E8%AF%AF\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/deployment.html#%E8%B7%9F%E8%B8%AA%E8%BF%90%E8%A1%8C%E6%97%B6%E9%94%99%E8%AF%AF\" rel=\"external nofollow\" target=\"_blank\"></a>跟踪运行时错误</h2><p>如果在组件渲染时出现运行错误，错误将会被传递至全局 Vue.config.errorHandler 配置函数（如果已设置）。利用这个钩子函数和错误跟踪服务（如 <a href=\"https://sentry.io/\" rel=\"external nofollow\" target=\"_blank\">Sentry</a>，它为 Vue 提供<a href=\"https://sentry.io/for/vue/\" rel=\"external nofollow\" target=\"_blank\">官方集成</a>），可能是个不错的主意。</p><h2><a href=\"http://doc.vue-js.com/v2/guide/deployment.html#%E6%8F%90%E5%8F%96-CSS\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/deployment.html#%E6%8F%90%E5%8F%96-CSS\" rel=\"external nofollow\" target=\"_blank\"></a>提取 CSS</h2><p>使用单文件组件时，&lt;style&gt; 标签在开发运行过程中会被动态实时注入。在生产环境中，你可能需要从所有组件中提取样式到单独的 CSS 文件中。有关如何实现的详细信息，请查阅 <a href=\"http://vue-loader.vuejs.org/en/configurations/extract-css.html\" rel=\"external nofollow\" target=\"_blank\">vue-loader</a> 和     <a href=\"https://github.com/vuejs/vueify#css-extraction\" rel=\"external nofollow\" target=\"_blank\">vueify</a> 相应文档。</p><p>    <a href=\"http://doc.vue-js.com/v2/guide/deployment.html#%E5%88%A0%E9%99%A4%E8%AD%A6%E5%91%8A\" rel=\"external nofollow\" target=\"_blank\"></a>    <a href=\"http://doc.vue-js.com/v2/guide/deployment.html#Webpack\" rel=\"external nofollow\" target=\"_blank\"></a>    <a href=\"http://doc.vue-js.com/v2/guide/deployment.html#Browserify\" rel=\"external nofollow\" target=\"_blank\"></a>    <a href=\"http://doc.vue-js.com/v2/guide/deployment.html#%E8%B7%9F%E8%B8%AA%E8%BF%90%E8%A1%8C%E6%97%B6%E9%94%99%E8%AF%AF\" rel=\"external nofollow\" target=\"_blank\"></a>    <a href=\"http://doc.vue-js.com/v2/guide/deployment.html#%E6%8F%90%E5%8F%96-CSS\" rel=\"external nofollow\" target=\"_blank\"></a></p><p>vue-cli 已经配置好了官方的 webpack 模板。</p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "Vue.js 2.0 教程",
      "teach_introduction": "Vue.js 2.0 版本，是目前主流的版本。",
      "sort_index": 8,
      "parent_sort_index": 2,
      "chapter_level_one_id": "e8fb10237b03499ebdc00cd95024fcfb",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "Vue.js 2.0 进阶教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "ec752610c0bb03e58ce226e79aadbada",
      "chapter_level_two_parent_id": "e8fb10237b03499ebdc00cd95024fcfb",
      "chapter_level_two_name": "单文件组件",
      "chapter_level_two_url": "/vuejs2/single-file-components.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2><span style=\"font-family:inherit;\">Vue.js 2.0 </span>单文件组件介绍</h2><p>在很多Vue项目中，我们使用 Vue.component 来定义全局组件，紧接着用 new Vue({ el: '#container '}) 在每个页面内指定一个容器元素。</p><p>这种方案在只是使用 JavaScript 增强某个视图的中小型项目中表现得很好。然而在更复杂的项目中，或者当你的前端完全采用 JavaScript 驱动的时候，以下弊端就显现出来：</p><ul><li><strong>全局定义(Global definitions)</strong> 强制要求每个 component 中的命名不得重复</li><li><strong>字符串模板(String templates) </strong>缺乏语法高亮，在 HTML 有多行的时候，需要用到丑陋的 \\</li><li><strong>不支持CSS(No CSS support) </strong>意味着当 HTML 和 JavaScript 组件化时，CSS 明显被遗漏</li><li><strong>没有构建步骤(No build step)</strong> 限制只能使用 HTML 和 ES5 JavaScript, 而不能使用预处理器，如 Pug (formerly Jade) 和 Babel</li></ul><p>文件扩展名为 .vue 的<strong> single-file components(单文件组件) </strong>为以上所有问题提供了解决方法，并且还可以使用 Webpack 或 Browserify 等构建工具。</p><p>这是一个文件名为 Hello.vue 的简单实例：</p><p style=\"text-align: center;\"><img src=\"//atts.w3cschool.cn/attachments/day_190318/201903181402522252.png\" style=\"width: 546px; height: 585px;\" alt=\"\"></p><p>现在我们获得：</p><ul><li><a href=\"https://github.com/vuejs/awesome-vue#syntax-highlighting\" rel=\"external nofollow\" target=\"_blank\">完整语法高亮</a></li><li><a href=\"https://webpack.github.io/docs/commonjs.html\" rel=\"external nofollow\" target=\"_blank\">CommonJS 模块</a></li><li><a href=\"https://github.com/vuejs/vue-loader/blob/master/docs/en/features/scoped-css.md\" rel=\"external nofollow\" target=\"_blank\">组件化的 CSS</a></li></ul><p>正如我们说过的，我们可以使用预处理器来构建简洁和功能更丰富的组件，比如 Jade，Babel (with ES2015 modules)，和 Stylus。</p><p style=\"text-align: center;\"><img src=\"//atts.w3cschool.cn/attachments/day_190318/201903181402545300.png\" style=\"width: 565px; height: 702px;\" alt=\"\"></p><p>这些特定的语言只是例子，你可以只是简单地使用 Buble，TypeScript，SCSS，PostCSS - 或者其他任何能够帮助你提高生产力的预处理器。</p><a href=\"http://doc.vue-js.com/v2/guide/single-file-components.html#%E8%B5%B7%E6%AD%A5\" rel=\"external nofollow\" target=\"_blank\"></a><h2><a href=\"http://doc.vue-js.com/v2/guide/single-file-components.html#%E8%B5%B7%E6%AD%A5\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/single-file-components.html#%E8%B5%B7%E6%AD%A5\" rel=\"external nofollow\" target=\"_blank\"></a>起步</h2><a href=\"http://doc.vue-js.com/v2/guide/single-file-components.html#%E9%92%88%E5%AF%B9%E5%88%9A%E6%8E%A5%E8%A7%A6-JavaScript-%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%94%A8%E6%88%B7\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/single-file-components.html#%E9%92%88%E5%AF%B9%E5%88%9A%E6%8E%A5%E8%A7%A6-JavaScript-%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%94%A8%E6%88%B7\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/single-file-components.html#%E9%92%88%E5%AF%B9%E5%88%9A%E6%8E%A5%E8%A7%A6-JavaScript-%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%94%A8%E6%88%B7\" rel=\"external nofollow\" target=\"_blank\"></a>针对刚接触 JavaScript 模块开发系统的用户</h3><p>有了 .vue 组件，我们就进入了高级 JavaScirpt 应用领域。如果你没有准备好的话，意味着还需要学会使用一些附加的工具：</p><ul><li><strong>Node Package Manager (NPM)：</strong>阅读 <a href=\"https://docs.npmjs.com/getting-started/what-is-npm\" rel=\"external nofollow\" target=\"_blank\">Getting Started guide</a> 直到 10: Uninstalling global packages 章节。</li><li><strong>Modern JavaScript with ES2015/16：</strong>阅读 Babel 的 <a href=\"https://babeljs.io/docs/learn-es2015/\" rel=\"external nofollow\" target=\"_blank\">Learn ES2015 guide</a>. 你不需要立刻记住每一个方法，但是你可以保留这个页面以便后期参考。</li></ul><p>在你花一些时日了解这些资源之后，我们建议你参考 <a href=\"https://github.com/vuejs-templates/webpack-simple\" rel=\"external nofollow\" target=\"_blank\">webpack-simple</a> 。只要遵循指示，你就能很快的运行一个用到 .vue 组件，ES2015 和 热重载( hot-reloading ) 的Vue项目!</p><p>这个模板使用 <a href=\"https://webpack.github.io/\" rel=\"external nofollow\" target=\"_blank\">Webpack</a>，一个能将多个模块打包成最终应用的模块打包工具。 <a href=\"https://www.youtube.com/watch?v=WQue1AN93YU\" rel=\"external nofollow\" target=\"_blank\">这个视频</a> 介绍了Webpack的更多相关信息。 学习了这些基础知识后， 你可能想看看 <a href=\"https://egghead.io/courses/using-webpack-for-production-javascript-applications\" rel=\"external nofollow\" target=\"_blank\">这个在 Egghead.io上的 高级 Webpack 课程</a>。</p><p>在 Webpack中，每个模块被打包到 bundle 之前都由一个相应的 “loader” 来转换，Vue 也提供 <a href=\"https://github.com/vuejs/vue-loader\" rel=\"external nofollow\" target=\"_blank\">vue-loader</a> 插件来执行 .vue 单文件组件 的转换. 这个 <a href=\"https://github.com/vuejs-templates/webpack-simple\" rel=\"external nofollow\" target=\"_blank\">webpack-simple</a> 模板已经为你准备好了所有的东西，但是如果你想了解更多关于 .vue 组件和 Webpack 如何一起运转的信息，你可以阅读 <a href=\"https://vue-loader.vuejs.org/\" rel=\"external nofollow\" target=\"_blank\">vue-loader 的文档</a>。</p><a href=\"http://doc.vue-js.com/v2/guide/single-file-components.html#%E9%92%88%E5%AF%B9%E9%AB%98%E7%BA%A7%E7%94%A8%E6%88%B7\" rel=\"external nofollow\" target=\"_blank\"></a><h3><a href=\"http://doc.vue-js.com/v2/guide/single-file-components.html#%E9%92%88%E5%AF%B9%E9%AB%98%E7%BA%A7%E7%94%A8%E6%88%B7\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/single-file-components.html#%E9%92%88%E5%AF%B9%E9%AB%98%E7%BA%A7%E7%94%A8%E6%88%B7\" rel=\"external nofollow\" target=\"_blank\"></a>针对高级用户</h3><p>无论你更钟情 Webpack 或是 Browserify，我们为简单的和更复杂的项目都提供了一些文档模板。我们建议浏览 <a href=\"https://github.com/vuejs-templates\" rel=\"external nofollow\" target=\"_blank\">github.com/vuejs-templates</a>，找到你需要的部分，然后参考 README 中的说明，使用 <a href=\"https://github.com/vuejs/vue-cli\" rel=\"external nofollow\" target=\"_blank\">vue-cli</a> 工具生成新的项目。</p><p>Webpack 中，每个模块在构建前被加载器转变，Vue 官方插件 <a href=\"https://github.com/vuejs/vue-loader\" rel=\"external nofollow\" target=\"_blank\">vue-loader</a> 用来转变 .vue单文件组件。 <a href=\"https://github.com/vuejs-templates/webpack-simple\" rel=\"external nofollow\" target=\"_blank\">webpack-simple</a> 模板已经准备好了一切， 如果要更多了解 .vue 如何和 Webpack 配合工作， 请看 <a href=\"https://vue-loader.vuejs.org/\" rel=\"external nofollow\" target=\"_blank\">vue-loader 文档</a>。</p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "Vue.js 2.0 教程",
      "teach_introduction": "Vue.js 2.0 版本，是目前主流的版本。",
      "sort_index": 7,
      "parent_sort_index": 2,
      "chapter_level_one_id": "e8fb10237b03499ebdc00cd95024fcfb",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "Vue.js 2.0 进阶教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "f159aa7e342398efddf6998348b27270",
      "chapter_level_two_parent_id": "e8fb10237b03499ebdc00cd95024fcfb",
      "chapter_level_two_name": "插件",
      "chapter_level_two_url": "/vuejs2/plugins.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2>Vue.js 2.0 开发插件</h2><p>插件通常会为Vue添加全局功能。插件的范围没有限制——一般有下面几种：</p><ol>    <li>添加全局方法或者属性，如：<a href=\"https://github.com/vuejs/vue-element\" rel=\"external nofollow\" target=\"_blank\">vue-element</a>    </li>    <li>添加全局资源：指令/过滤器/过渡等，如：<a href=\"https://github.com/vuejs/vue-touch\" rel=\"external nofollow\" target=\"_blank\">vue-touch</a>    </li>    <li>通过全局 mixin方法添加一些组件选项，如：<a href=\"https://github.com/vuejs/vuex\" rel=\"external nofollow\" target=\"_blank\">vuex</a>    </li>    <li>添加 Vue 实例方法，通过把它们添加到 Vue.prototype 上实现。</li>    <li>一个库，提供自己的 API，同时提供上面提到的一个或多个功能，如：<a href=\"https://github.com/vuejs/vue-router\" rel=\"external nofollow\" target=\"_blank\">vue-router</a>    </li></ol><p>Vue.js 的插件应当有一个公开方法 install 。这个方法的第一个参数是 Vue 构造器 , 第二个参数是一个可选的选项对象：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">MyPlugin.install = function (Vue, options) {\n  // 1. 添加全局方法或属性\n  Vue.myGlobalMethod = function () {\n    // 逻辑...\n  }\n  // 2. 添加全局资源\n  Vue.directive('my-directive', {\n    bind (el, binding, vnode, oldVnode) {\n      // 逻辑...\n    }\n    ...\n  })\n  // 3. 注入组件\n  Vue.mixin({\n    created: function () {\n      // 逻辑...\n    }\n    ...\n  })\n  // 4. 添加实例方法\n  Vue.prototype.$myMethod = function (options) {\n    // 逻辑...\n  }\n}</code></pre><h2><a href=\"http://doc.vue-js.com/v2/guide/plugins.html#%E4%BD%BF%E7%94%A8%E6%8F%92%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a><a href=\"http://doc.vue-js.com/v2/guide/plugins.html#%E4%BD%BF%E7%94%A8%E6%8F%92%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a>使用插件</h2><p>通过全局方法 Vue.use() 使用插件：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">// 调用 `MyPlugin.install(Vue)`\nVue.use(MyPlugin)</code></pre><p>也可以传入一个选项对象：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">Vue.use(MyPlugin, { someOption: true })</code></pre><p>Vue.use 会自动阻止注册相同插件多次，届时只会注册一次该插件。</p><p>一些插件，如 vue-router 如果 Vue 是全局变量则自动调用 Vue.use() 。不过在模块环境中应当始终显式调用 Vue.use() ：</p><pre lang=\"javascript\" style=\"max-width: 100%;\"><code class=\"javascript\">// 通过 Browserify 或 Webpack 使用 CommonJS 兼容模块\nvar Vue = require('vue')\nvar VueRouter = require('vue-router')\n// 不要忘了调用此方法\nVue.use(VueRouter)</code></pre><p>    <a href=\"http://doc.vue-js.com/v2/guide/plugins.html#%E5%BC%80%E5%8F%91%E6%8F%92%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a>    <a href=\"http://doc.vue-js.com/v2/guide/plugins.html#%E4%BD%BF%E7%94%A8%E6%8F%92%E4%BB%B6\" rel=\"external nofollow\" target=\"_blank\"></a></p><p><a href=\"https://github.com/vuejs/awesome-vue#libraries--plugins\" rel=\"external nofollow\" target=\"_blank\">awesome-vue</a> 集合了来自社区贡献的数以千计的插件和库。</p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    },
    {
      "teach_name": "Vue.js 2.0 教程",
      "teach_introduction": "Vue.js 2.0 版本，是目前主流的版本。",
      "sort_index": 2,
      "parent_sort_index": 1,
      "chapter_level_one_id": "4e96a383dc08d306c951ba0d75ca6db7",
      "chapter_level_one_parent_id": "0",
      "chapter_level_one_name": "Vue.js 2.0 教程",
      "chapter_level_one_url": "",
      "chapter_level_two_id": "53878828ae63cd5092a05e6c0c0893d5",
      "chapter_level_two_parent_id": "4e96a383dc08d306c951ba0d75ca6db7",
      "chapter_level_two_name": "介绍",
      "chapter_level_two_url": "/vuejs2/vuejs2-index.html",
      "book_content": "<div class=\"content-bg\">\n<div class=\"content-intro view-box \"><h2 style=\"margin-bottom: 20px\">Vue.js<span style=\"font-family:inherit;font-size: 20px; font-weight: 600;\">介绍</span></h2><p>    <a data-scroll=\"\"></a></p><h3>Vue.js 是什么</h3> <h2><a data-scroll=\"\"></a></h2><p>Vue.js（读音 /vjuː/, 类似于 <strong>view</strong>） 是一套构建用户界面的<strong>渐进式框架</strong>。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注视图层，并且非常容易学习，非常容易与其它库或已有项目整合。另一方面，Vue 完全有能力驱动采用<a href=\"https://www.w3cschool.cn/vuejs2/single-file-components.html\" target=\"_blank\">单文件组件</a>和<a href=\"http://github.com/vuejs/awesome-vue#libraries--plugins\" rel=\"external nofollow\" target=\"_blank\">Vue生态系统支持的库</a>开发的复杂单页应用。</p><p>Vue.js 的目标是通过尽可能简单的 API 实现<strong>响应的数据绑定</strong>和<strong>组合的视图组件</strong>。</p><p>如果你是有经验的前端开发者，想知道 Vue.js 与其它库/框架的区别，查看“<a href=\"https://www.w3cschool.cn/vuejs2/vuejs2-comparison.html\" target=\"_blank\">对比其它框架</a>”一节的内容。</p><a data-scroll=\"\"></a> <h3>起步</h3> <h2><a data-scroll=\"\"></a></h2><blockquote>    <p>本教程假设你已有 HTML、CSS 和 JavaScript 中级前端知识。如果你是全新的前端开发者，将框架作为你学习的第一步可能不是最好的主意——掌握好基础知识再开始学习本教程吧！        <br>之前有其他框架的使用经验是有帮助的，但不是必需的。</p></blockquote><p>尝试 Vue.js 最简单的方法是使用 <a href=\"https://jsfiddle.net/chrisvfritz/50wL7mdz/\" rel=\"external nofollow\" target=\"_blank\">JSFiddle Hello World 例子</a>。你可以在浏览器新标签页中打开它，跟着我们学习一些基础示例。或者你也可以创建一个本地的 <code>.html</code> 文件，然后通过如下方式引入 Vue:</p><pre lang=\"javascript\"><code class=\"javascript\">&lt;script src=\"https://unpkg.com/vue/dist/vue.js\" rel=\"external nofollow\" &gt;</code></pre><p>你可以查看<a href=\"https://www.w3cschool.cn/vuejs2/installation.html\" target=\"_blank\">安装指南</a>来了解其他安装 Vue 的选项。请注意我们<strong>不推荐</strong>新手直接使用<code>vue-cli</code>，尤其是对 Node.js 构建工具不够了解的同学。</p><p>de.js 构建工具不够了解的同学。</p><h3>声明式渲染</h3><h2><a data-scroll=\"\"></a></h2><p>Vue.js 的核心是一个允许你采用简洁的模板语法来声明式的将数据渲染进 DOM 的系统：</p><pre lang=\"javascript\"><code class=\"javascript\">&lt;div id=\"app\"&gt;\n  {{ message }}\n&lt;/div&gt;</code></pre><div><pre lang=\"javascript\"><code class=\"javascript\">var app = new Vue({\n  el: '#app',\n  data: {\n    message: 'Hello Vue!'\n  }\n})</code></pre></div><div><pre lang=\"javascript\"><code class=\"javascript\">Hello Vue!</code></pre></div><p>我们已经生成了我们的第一个 Vue 应用！看起来这跟单单渲染一个字符串模板非常类似，但是 Vue.js 在背后做了大量工作。现在数据和 DOM 已经被绑定在一起，所有的元素都是<strong>响应式的</strong>。我们如何知道？打开你的浏览器的控制台，并修改 <code>app.message</code>，你将看到上例相应地更新。</p><p>除了绑定插入的文本内容，我们还可以采用这样的方式绑定 DOM 元素属性：</p><pre lang=\"javascript\"><code class=\"javascript\">&lt;div id=\"app-2\"&gt;\n  &lt;span v-bind:title=\"message\"&gt;\n    Hover your mouse over me for a few seconds to see my dynamically bound title!\n  &lt;/span&gt;\n&lt;/div&gt;</code></pre><pre lang=\"javascript\"><code class=\"javascript\">\nvar app2 = new Vue({\n  el: '#app-2',\n  data: {\n    message: 'You loaded this page on ' + new Date()\n  }\n})</code></pre><div></div><pre lang=\"javascript\"><code class=\"javascript\"><span title=\"You loaded this page on Sat Mar 16 2019 14:23:18 GMT+0800 (中国标准时间)\">\n    Hover your mouse over me for a few seconds to see my dynamically bound title!\n  </span></code></pre><p>这里我们遇到点新知识。你看到的 <code>v-bind</code> 属性被称为<strong>指令</strong>。指令带有前缀 <code>v-</code>，以表示它们是 Vue.js 提供的特殊属性。可能你已经猜到了，它们会在渲染过的 DOM 上应用特殊的响应式行为。这个指令的简单含义是说：将这个元素节点的 <code>title</code> 属性和 Vue 实例的 <code>message</code> 属性绑定到一起。</p><p>你再次打开浏览器的控制台输入 <code>app2.message = 'some new message'</code>，你就会再一次看到这个绑定了<code>title</code>属性的HTML已经进行了更新。</p><a data-scroll=\"\"></a> <h3>条件与循环</h3><p>控制切换一个元素的显示也相当简单：</p><pre lang=\"javascript\"><code class=\"javascript\">&lt;div id=\"app-3\"&gt;\n  &lt;p v-if=\"seen\"&gt;Now you see me&lt;/p&gt;\n&lt;/div&gt;</code></pre><pre lang=\"javascript\"><code class=\"javascript\">var app3 = new Vue({\n  el: '#app-3',\n  data: {\n    seen: true\n  }\n})</code></pre><div>继续在控制台设置 <code>app3.seen = false</code>，你会发现 “Now you see me” 消失了。</div><p>这个例子演示了我们不仅可以绑定 DOM 文本到数据，也可以绑定 DOM <strong>结构</strong>到数据。而且，Vue.js 也提供一个强大的过渡效果系统，可以在 Vue 插入/删除元素时自动应用<a href=\"https://www.w3cschool.cn/vuejs2/transitions.html\" target=\"_blank\">过渡效果</a>。</p><p>也有一些其它指令，每个都有特殊的功能。例如，<code>v-for</code>指令可以绑定数据到数据来渲染一个列表：</p><pre lang=\"javascript\"><code class=\"javascript\">&lt;div id=\"app-4\"&gt;\n  &lt;ol&gt;\n    &lt;li v-for=\"todo in todos\"&gt;\n      {{ todo.text }}\n    &lt;/li&gt;\n  &lt;/ol&gt;\n&lt;/div&gt;</code></pre><pre lang=\"javascript\"><code class=\"javascript\">var app4 = new Vue({\n  el: '#app-4',\n  data: {\n    todos: [\n      { text: 'Learn JavaScript' },\n      { text: 'Learn Vue' },\n      { text: 'Build something awesome' }\n    ]\n  }\n})</code></pre><pre lang=\"javascript\"><code class=\"javascript\">Learn JavaScript\nLearn Vue\nBuild something awesome</code></pre><p>在控制台里，输入 <code>app4.todos.push({ text: 'New item' })</code>。你会发现列表中多了一栏新内容。</p><a data-scroll=\"\"></a> <h3>处理用户输入</h3><h2><a data-scroll=\"\"></a></h2><p>为了让用户和你的应用进行互动，我们可以用 <code>v-on</code> 指令绑定一个监听事件用于调用我们 Vue 实例中定义的方法：</p><pre lang=\"javascript\"><code class=\"javascript\">&lt;div id=\"app-5\"&gt;\n  &lt;p&gt;{{ message }}&lt;/p&gt;\n  &lt;button v-on:click=\"reverseMessage\"&gt;Reverse Message&lt;/button&gt;\n&lt;/div&gt;</code></pre><pre lang=\"javascript\"><code class=\"javascript\">\nvar app5 = new Vue({\n  el: '#app-5',\n  data: {\n    message: 'Hello Vue.js!'\n  },\n  methods: {\n    reverseMessage: function () {\n      this.message = this.message.split('').reverse().join('')\n    }\n  }\n})</code></pre><p>在 <code>reverseMessage</code> 方法中，我们在没有接触 DOM 的情况下更新了应用的状态 - 所有的 DOM 操作都由 Vue 来处理，你写的代码只需要关注基本逻辑。Hello Vue.js!    <br></p><p>Vue 也提供了 <code>v-model</code> 指令，它使得在表单输入和应用状态中做双向数据绑定变得非常轻巧。</p><pre lang=\"javascript\"><code class=\"javascript\">&lt;div id=\"app-6\"&gt;\n  &lt;p&gt;{{ message }}&lt;/p&gt;\n  &lt;input v-model=\"message\"&gt;\n&lt;/div&gt;</code></pre><pre lang=\"javascript\"><code class=\"javascript\">var app6 = new Vue({\n  el: '#app-6',\n  data: {\n    message: 'Hello Vue!'\n  }\n})</code></pre><p>Hello Vue!</p><input><a data-scroll=\"\"></a> <h3>用组件构建（应用）</h3><h2><a data-scroll=\"\"></a></h2><p>组件系统是 Vue.js 另一个重要概念，因为它提供了一种抽象，让我们可以用独立可复用的小组件来构建大型应用。如果我们考虑到这点，几乎任意类型的应用的界面都可以抽象为一个组件树：</p><p style=\"text-align: center;\">    <img src=\"//atts.w3cschool.cn/attachments/image/20190316/components.png\" style=\"width: 778px; height: 307px;\" alt=\"\"></p><p>在 Vue 里，一个组件实质上是一个拥有预定义选项的一个 Vue 实例：</p><pre lang=\"javascript\"><code class=\"javascript\">// Define a new component called todo-item\nVue.component('todo-item', {\n  template: '&lt;li&gt;This is a todo&lt;/li&gt;'\n})</code></pre><p>现在你可以另一个组件模板中写入它：</p><pre lang=\"javascript\"><code class=\"javascript\">&lt;ul&gt;\n  &lt;!-- Create an instance of the todo-item component --&gt;\n  &lt;todo-item&gt;&lt;/todo-item&gt;\n&lt;/ul&gt;</code></pre><p>但是这样会为每个 todo 渲染同样的文本，这看起来并不是很酷。我们应该将数据从父作用域传到子组件。让我们来修改一下组件的定义，使得它能够接受一个 prop 字段：</p><pre lang=\"javascript\"><code class=\"javascript\">Vue.component('todo-item', {\n  // The todo-item component now accepts a\n  // \"prop\", which is like a custom attribute.\n  // This prop is called todo.\n  props: ['todo'],\n  template: '&lt;li&gt;{{ todo.text }}&lt;/li&gt;'\n})</code></pre><p>现在，我们可以使用 <code>v-bind</code> 指令将 todo 传到每一个重复的组件中：</p><pre lang=\"javascript\"><code class=\"javascript\">&lt;div id=\"app-7\"&gt;\n  &lt;ol&gt;\n    &lt;!-- Now we provide each todo-item with the todo object    --&gt;\n    &lt;!-- it's representing, so that its content can be dynamic --&gt;\n    &lt;todo-item v-for=\"item in groceryList\" v-bind:todo=\"item\"&gt;&lt;/todo-item&gt;\n  &lt;/ol&gt;\n&lt;/div&gt;</code></pre><pre lang=\"javascript\"><code class=\"javascript\">Vue.component('todo-item', {\n  props: ['todo'],\n  template: '&lt;li&gt;{{ todo.text }}&lt;/li&gt;'\n})\nvar app7 = new Vue({\n  el: '#app-7',\n  data: {\n    groceryList: [\n      { text: 'Vegetables' },\n      { text: 'Cheese' },\n      { text: 'Whatever else humans are supposed to eat' }\n    ]\n  }\n})</code></pre><pre lang=\"javascript\"><code class=\"javascript\">Vegetables\nCheese\nWhatever else humans are supposed to eat</code></pre><p>这只是一个假设的例子，但是我们已经将应用分割成了两个更小的单元，子元素通过 <code>props</code> 接口实现了与父亲元素很好的解耦。我们现在可以在不影响到父应用的基础上，进一步为我们的 <code>todo</code> 组件改进更多复杂的模板和逻辑。</p><p>在一个大型应用中，为了使得开发过程可控，有必要将应用整体分割成一个个的组件。在后面的教程中我们将详述<a href=\"https://www.w3cschool.cn/vuejs2/components.html\" target=\"_blank\">组件</a>，不过这里有一个（假想）的例子，看看使用了组件的应用模板是什么样的：</p><pre lang=\"javascript\"><code class=\"javascript\">&lt;div id=\"app\"&gt;\n  &lt;app-nav&gt;&lt;/app-nav&gt;\n  &lt;app-view&gt;\n    &lt;app-sidebar&gt;&lt;/app-sidebar&gt;\n    &lt;app-content&gt;&lt;/app-content&gt;\n  &lt;/app-view&gt;\n&lt;/div&gt;</code></pre><h3>与自定义元素的关系</h3><h2><a data-scroll=\"\"></a></h2><p>你可能已经注意到 Vue.js 组件非常类似于<strong>自定义元素</strong>——它是 <a href=\"http://www.w3.org/wiki/WebComponents/\" rel=\"external nofollow\" target=\"_blank\">Web 组件规范</a>的一部分。实际上 Vue.js 的组件语法参考了该规范。例如 Vue 组件实现了 <a href=\"http://github.com/w3c/webcomponents/blob/gh-pages/proposals/Slots-Proposal.md\" rel=\"external nofollow\" target=\"_blank\">Slot API</a> 与 <code>is</code> 特性。但是，有几个关键的不同：</p><ol>    <li>        <p>Web 组件规范仍然远未完成，并且没有浏览器实现。相比之下，Vue.js 组件不需要任何补丁，并且在所有支持的浏览器（IE9 及更高版本）之下表现一致。必要时，Vue.js 组件也可以放在原生自定义元素之内。</p>    </li>    <li>        <p>Vue.js 组件提供了原生自定义元素所不具备的一些重要功能，比如组件间的数据流，自定义事件系统，以及动态的、带特效的组件替换。</p></li></ol><p><br></p></div>\r\n<div style=\"clear:both\"></div>\n</div>"
    }
  ]
}
